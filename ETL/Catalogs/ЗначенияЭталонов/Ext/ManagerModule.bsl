 #Область ОписаниеПеременных
 
 #КонецОбласти
 
 #Область ПрограммныйИнтерфейс
 // Код процедур и функций
 #КонецОбласти
 
 #Область ОбработчикиСобытий
 // Код процедур и функций
 #КонецОбласти
 
 #Область СлужебныйПрограммныйИнтерфейс
 // Код процедур и функций 
 // Устанавливает параметры загрузки данных из файла
//
// Параметры:
//  Параметры - см. ЗагрузкаДанныхИзФайла.ПараметрыЗагрузкиИзФайла
// 
Процедура ОпределитьПараметрыЗагрузкиДанныхИзФайла(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление загружаемых данных с данными в ИБ.
//
// Параметры:
//   ЗагружаемыеДанные - см. ЗагрузкаДанныхИзФайла.ТаблицаСопоставления
//
Процедура СопоставитьЗагружаемыеДанныеИзФайла(ЗагружаемыеДанные, ТипЭталона) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыЭталоновРеквизиты.Реквизит КАК Реквизит,
	|	ТипыЭталоновРеквизиты.ИмяРеквизита КАК ИмяРеквизита
	|ИЗ
	|	ПланВидовХарактеристик.ТипыЭталонов.Реквизиты КАК ТипыЭталоновРеквизиты
	|ГДЕ
	|	ТипыЭталоновРеквизиты.Ссылка = &ТипЭталона
	|	И ТипыЭталоновРеквизиты.ПоискПоРеквизиту";
	Запрос.УстановитьПараметр("ТипЭталона", ТипЭталона);      
	ВыборкаРеквизитов = Запрос.Выполнить().Выбрать();	
	
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТипЗначения = Тип("СправочникСсылка.ЗначенияЭталонов");
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗначения);
	ОписаниеТипаЗначение = Новый ОписаниеТипов(МассивТипов);
	ТаблицаЗначений.Колонки.Добавить("Ссылка", ОписаниеТипаЗначение, "Ссылка"); 
	
	МассивРеквизитовПоиска = Новый Массив;
	Пока ВыборкаРеквизитов.Следующий() Цикл
		МассивРеквизитовПоиска.Добавить(ВыборкаРеквизитов.ИмяРеквизита);		
		ТаблицаЗначений.Колонки.Добавить(ВыборкаРеквизитов.ИмяРеквизита);		
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияЭталоновРеквизиты.Ссылка КАК Ссылка,
	|	ЗначенияЭталоновРеквизиты.Значение КАК Значение,
	|	ТипыЭталоновРеквизиты.ИмяРеквизита КАК ИмяРеквизита
	|ИЗ
	|	Справочник.ЗначенияЭталонов.Реквизиты КАК ЗначенияЭталоновРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыЭталонов.Реквизиты КАК ТипыЭталоновРеквизиты
	|		ПО ЗначенияЭталоновРеквизиты.Реквизит = ТипыЭталоновРеквизиты.Реквизит
	|			И ЗначенияЭталоновРеквизиты.Ссылка.Владелец = ТипыЭталоновРеквизиты.Ссылка
	|			И (ТипыЭталоновРеквизиты.ПоискПоРеквизиту)
	|ГДЕ
	|	ТипыЭталоновРеквизиты.Ссылка = &ТипЭталона
	|	И ЗначенияЭталоновРеквизиты.Ссылка.Владелец = &ТипЭталона
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ТипЭталона", ТипЭталона);
	
	ВыборкаСсылка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	Пока ВыборкаСсылка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.Ссылка = ВыборкаСсылка.Ссылка;
		
		ВыборкаДетали = ВыборкаСсылка.Выбрать();
		
		Пока ВыборкаДетали.Следующий() Цикл
			
			НоваяСтрока[ВыборкаДетали.ИмяРеквизита] = ВыборкаДетали.Значение;     		
			
		КонецЦикла;
		
	КонецЦикла; 
	
	
	Для каждого СтрокаТЗ из ЗагружаемыеДанные Цикл
		
		Отбор = Новый Структура;
		Для каждого ПолеПоиска из МассивРеквизитовПоиска Цикл
			Отбор.Вставить(ПолеПоиска, СтрокаТЗ[ПолеПоиска]);
		КонецЦикла;
		
		ПоискЗначений = ТаблицаЗначений.НайтиСтроки(Отбор);
		
		Если ПоискЗначений.Количество() = 1 Тогда
			
			СтрокаТЗ.ОбъектСопоставления = ПоискЗначений[0].Ссылка;
			СтрокаТЗ.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
		ИначеЕсли ПоискЗначений.Количество() > 1 Тогда 
			Для каждого НайденнаяСтрока из ПоискЗначений Цикл
				
				СтрокаТЗ.СписокНеоднозначностей.Добавить(НайденнаяСтрока.Ссылка, Строка(НайденнаяСтрока.Ссылка)); 
				
			КонецЦикла;
			СтрокаТЗ.РезультатСопоставленияСтроки = "Неоднозначность";  
			
		Иначе	
			СтрокаТЗ.РезультатСопоставленияСтроки = "НеСопоставлен";	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загрузка данных из файла.
//
// Параметры:
//  ЗагружаемыеДанные - см. ЗагрузкаДанныхИзФайла.ОписаниеЗагружаемыхДанныеДляСправочников
//  ПараметрыЗагрузки - см. ЗагрузкаДанныхИзФайла.НастройкиЗагрузкиДанных
//  Отказ - Булево    - отмена загрузки. Например, если данные некорректные.
//                             – Булево       – Отмена загрузки
Процедура ЗагрузитьИзФайла(ЗагружаемыеДанные, ПараметрыЗагрузки, Отказ, ТипЭталона) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыЭталоновРеквизиты.ИмяРеквизита КАК ИмяРеквизита,
	|	ТипыЭталоновРеквизиты.Реквизит КАК Реквизит
	|ИЗ
	|	ПланВидовХарактеристик.ТипыЭталонов.Реквизиты КАК ТипыЭталоновРеквизиты
	|ГДЕ
	|	ТипыЭталоновРеквизиты.Ссылка = &ТипЭталона";
	
	Запрос.УстановитьПараметр("ТипЭталона", ТипЭталона);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
	
	Для каждого СтрокаТЗ из ЗагружаемыеДанные Цикл
		
		Если СтрокаТЗ.РезультатСопоставленияСтроки = "НеСопоставлен" ИЛИ
			СтрокаТЗ.РезультатСопоставленияСтроки = "Неоднозначность" Тогда  
			
			Если ПараметрыЗагрузки.СоздаватьНовые Тогда
				
				НовыйЭлемент = Справочники.ЗначенияЭталонов.СоздатьЭлемент();
				НовыйЭлемент.Владелец = ТипЭталона; 
				//ИщемРодителя
				НовыйЭлемент.Родитель = Справочники.ЗначенияЭталонов.НайтиПоНаименованию(СтрокаТЗ.Родитель, Истина, , ТипЭталона);
				
				Для каждого ПолеЗагрузки из ТаблицаРеквизитов Цикл
					    НовыйРеквизит = НовыйЭлемент.Реквизиты.Добавить();
						НовыйРеквизит.Реквизит = ПолеЗагрузки.Реквизит;
						ПривестиЗначениеКТипу(НовыйРеквизит.Значение, НовыйРеквизит.Реквизит.ТипЗначения);
					Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(НовыйРеквизит.Значение)) Тогда  
							
						НовыйРеквизит.Значение = НайтиПоКодуСправочника(СтрокаТЗ[ПолеЗагрузки.ИмяРеквизита], ТипЗнч(НовыйРеквизит.Значение));
					Иначе		
						НовыйРеквизит.Значение = ПриведениеЗначенияКТипу(СтрокаТЗ[ПолеЗагрузки.ИмяРеквизита], НовыйРеквизит.Реквизит.ТипЗначения);
					КонецЕсли;	
				КонецЦикла;			
				
				НовыйЭлемент.Записать();
				СтрокаТЗ.РезультатСопоставленияСтроки = "Создан";	
			КонецЕсли;
			
			
		ИначеЕсли СтрокаТЗ.РезультатСопоставленияСтроки = "СтрокаСопоставлена" Тогда
			
			Если ПараметрыЗагрузки.ОбновлятьСуществующие Тогда
				
				СуществующийЭлемент = СтрокаТЗ.ОбъектСопоставления.ПолучитьОбъект();
				СуществующийЭлемент.Родитель = Справочники.ЗначенияЭталонов.НайтиПоНаименованию(СтрокаТЗ.Родитель, Истина, , ТипЭталона);
				
				СуществующийЭлемент.Реквизиты.Очистить();
				
				Для каждого ПолеЗагрузки из ТаблицаРеквизитов Цикл
					    НовыйРеквизит = СуществующийЭлемент.Реквизиты.Добавить();
						НовыйРеквизит.Реквизит = ПолеЗагрузки.Реквизит;
						ПривестиЗначениеКТипу(НовыйРеквизит.Значение, НовыйРеквизит.Реквизит.ТипЗначения);
					Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(НовыйРеквизит.Значение)) Тогда  
							
						НовыйРеквизит.Значение = НайтиПоКодуСправочника(СтрокаТЗ[ПолеЗагрузки.ИмяРеквизита], ТипЗнч(НовыйРеквизит.Значение));
					Иначе		
						НовыйРеквизит.Значение = ПриведениеЗначенияКТипу(СтрокаТЗ[ПолеЗагрузки.ИмяРеквизита], НовыйРеквизит.Реквизит.ТипЗначения);
					КонецЕсли;	
				КонецЦикла;	
				
				СуществующийЭлемент.Записать();	 
				СтрокаТЗ.РезультатСопоставленияСтроки = "Обновлен";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИнформациюОРеквизитах(ИнформацияПоКолонкам, ТипЭталона) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыЭталоновРеквизиты.НомерСтроки КАК НомерСтроки,
	|	ТипыЭталоновРеквизиты.ИмяРеквизита КАК ИмяРеквизита,
	|	ТипыЭталоновРеквизиты.Реквизит КАК Реквизит,
	|	ТипыЭталоновРеквизиты.Реквизит.ТипЗначения КАК РеквизитТипЗначения,
	|	ТипыЭталоновРеквизиты.ПоискПоРеквизиту КАК ПоискПоРеквизиту
	|ИЗ
	|	ПланВидовХарактеристик.ТипыЭталонов.Реквизиты КАК ТипыЭталоновРеквизиты
	|ГДЕ
	|	ТипыЭталоновРеквизиты.Ссылка = &ТипЭталона";
	
	Запрос.УстановитьПараметр("ТипЭталона", ТипЭталона);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Позиция = ИнформацияПоКолонкам.Количество() + 1;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);

	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИмяРеквизита) Тогда
			СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
			СтрокаИнфоПроКолонки.ИмяКолонки = Выборка.ИмяРеквизита;
			СтрокаИнфоПроКолонки.ПредставлениеКолонки = Выборка.Реквизит.Наименование;
			СтрокаИнфоПроКолонки.ТипКолонки = ОписаниеТиповС; //Выборка.РеквизитТипЗначения;
			СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения = Выборка.ПоискПоРеквизиту;
			СтрокаИнфоПроКолонки.Позиция = Позиция; 
			СтрокаИнфоПроКолонки.Родитель = Выборка.ИмяРеквизита;
			СтрокаИнфоПроКолонки.Видимость = Истина;
			СтрокаИнфоПроКолонки.Примечание = "";
			СтрокаИнфоПроКолонки.Ширина = 30;
			Позиция = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьРодителяПоУмолчанию(ТипЭталона) Экспорт
	 
	Запрос = Новый Запрос;  
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗначенияЭталонов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
	|ГДЕ
	|	ЗначенияЭталонов.РодительПоУмолчанию
	|	И ЗначенияЭталонов.Владелец = &ТипЭталона";	
	
	Запрос.УстановитьПараметр("ТипЭталона", ТипЭталона); 
	
	Выборка = Запрос.Выполнить().Выбрать();	 
	
	Если Выборка.Следующий() Тогда
		
		возврат Выборка.Ссылка;
	Иначе
		возврат Справочники.ЗначенияЭталонов.ПустаяСсылка();
	КонецЕсли;
	 
	 
КонецФункции  

Функция ПолучитьЭталонПоУмолчанию(ТипЭталона) Экспорт
	                        
	Запрос = Новый Запрос;  
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗначенияЭталонов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
	|ГДЕ
	|	ЗначенияЭталонов.ЭталонПоУмолчанию
	|	И ЗначенияЭталонов.Владелец = &ТипЭталона";	
	
	Запрос.УстановитьПараметр("ТипЭталона", ТипЭталона); 
	
	Выборка = Запрос.Выполнить().Выбрать();	 
	
	Если Выборка.Следующий() Тогда		
		возврат Выборка.Ссылка;
	Иначе
		возврат Справочники.ЗначенияЭталонов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


 #КонецОбласти
 
 #Область СлужебныеПроцедурыИФункции
 // Код процедур и функций  
 Функция ПриведениеЗначенияКТипу(Знач Значение, ОписаниеТипов)
	
	Для каждого Тип Из ОписаниеТипов.Типы() Цикл
		Если Тип = Тип("Дата") Тогда
			Возврат СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение);
		ИначеЕсли Тип = Тип("Булево") Тогда
			ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
			Возврат ОписаниеТипаБулево.ПривестиЗначение(Значение);
		ИначеЕсли Тип = Тип("Число") Тогда
			Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);

			//НецифровыеСимволы = СтрСоединить(СтрРазделить(Значение, "1234567890,."));
			//Значение = СтрСоединить(СтрРазделить(Значение, НецифровыеСимволы));
			//ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			//Возврат ОписаниеТипаЧисло.ПривестиЗначение(Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция НайтиПоКодуСправочника(Значение, ТипСправочника)
	
	Если ТипСправочника = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		Справочник = "СтатьиЗатрат";
	ИначеЕсли ТипСправочника = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		Справочник = "СтатьиДвиженияДенежныхСредств";
	ИначеЕсли ТипСправочника = Тип("СправочникСсылка.Доходы") Тогда
		Справочник = "Доходы";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Справочник) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатьиЗатрат.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + Справочник + " КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.КодСправочника = &КодСправочника";
		
		Запрос.УстановитьПараметр("КодСправочника", Значение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		Иначе
			Возврат Значение;
		КонецЕсли; 
		
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Процедура ПривестиЗначениеКТипу(Значение, ОписаниеТипов) Экспорт
	Если Не ОписаниеТипов.СодержитТип(ТипЗнч(Значение)) Тогда
		Значение = ОписаниеТипов.ПривестиЗначение();
	КонецЕсли;
КонецПроцедуры
 #КонецОбласти
 
 #Область Инициализация
 
 #КонецОбласти 