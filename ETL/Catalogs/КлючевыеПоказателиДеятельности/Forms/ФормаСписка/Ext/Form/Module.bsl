

&НаКлиенте
Процедура ФайлИмяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка
	)
	СтандартнаяОбработка = Ложь;
	Оповещение						=	Новый ОписаниеОповещения("ФайлИмяНачалоВыбораЗавершение", ЭтаФорма);   
    ДиалогВыбора					=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);   
	ДиалогВыбора.МножественныйВыбор	= 	Ложь;
    ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры


&НаКлиенте
Процедура ФайлИмяНачалоВыбораЗавершение(МассивФайлов, ДопПараметры) Экспорт
	
    Если МассивФайлов = Неопределено Тогда
        Возврат;
	КонецЕсли;	
	ФайлИмя	=	МассивФайлов[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЭксельНаСервере()
	
	АдресФайлаВоВременномХранилище = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ФайлИмя) Тогда
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,Нстр("ru = 'Файл загрузки'"),, УникальныйИдентификатор);
	Иначе
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,ФайлИмя,ложь, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЭксель(Команда)
	ЗагрузитьИзЭксельНаСервере();
КонецПроцедуры

&НаКлиенте
процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Не Файл.Существует() Тогда
			ТекстСообщения = Нстр("ru = 'Указанный файл не существует'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, "");
			Возврат;
		КонецЕсли;
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение, ДополнительныеПараметры);
	Конецесли;
	
конецпроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, Расширение, ДополнительныеПараметры)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	//Т = Новый ТабличныйДокумент;
	Попытка
		ТабДок.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить("Произошла ошибка при обращение к Excel:" + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//ТабДок.Вывести(Т);
	Попытка		
		//
		ЗагрузитьЛистПП();
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЛистПП()
	
	ОбластьДанных = ТабДок.ПолучитьОбласть("спр_КПД");
	ТЗДанные = ПреобразоватьТабличныйДокументВТаблицуЗначений(ОбластьДанных,5);
	СоздатьКорневыеКаталоги();
	Для Каждого СтрокаТз Из ТЗДанные Цикл
		
		//Если СтрокаТз.KPI1_ <>  2 Тогда
		//	Продолжить;
		//КонецЕсли;
		СтрокаТз.KPI1_ = СокрЛП(СтрокаТз.KPI1_);
		КлючевыеПоказателиДеятельностиСсылка = Справочники.КлючевыеПоказателиДеятельности.НайтиПоКоду(СтрокаТз.KPI1_);
		Если ЗначениеЗаполнено(КлючевыеПоказателиДеятельностиСсылка) Тогда
			КлючевыеПоказателиДеятельностиОбъект = КлючевыеПоказателиДеятельностиСсылка.ПолучитьОбъект();
		Иначе
			КлючевыеПоказателиДеятельностиОбъект = Справочники.КлючевыеПоказателиДеятельности.СоздатьЭлемент();
		КонецЕсли;
		КлючевыеПоказателиДеятельностиОбъект.Код =  СтрокаТз.KPI1_;
		КлючевыеПоказателиДеятельностиОбъект.КодСправочника =  СтрокаТз.KPI1_;
		Если ЗначениеЗаполнено(СтрокаТз.ФинансовыйРезультат) Тогда
			КлючевыеПоказателиДеятельностиОбъект.Наименование = СтрокаТз.ФинансовыйРезультат;	
		Иначе
			КлючевыеПоказателиДеятельностиОбъект.Наименование = "Без наименования";	
		КонецЕсли;
		//INDПрочиеПоказателиОбъект.Порядок =  СтрокаТз._;
		//КодРодителя = "IND"+Сред(СтрокаТз.IND1_,4,1)+".";
		Точка = СтрНайти(СтрокаТз.KPI1_,".",НаправлениеПоиска.СКонца,,2);
		КодРодителя = Лев(СтрокаТз.KPI1_,Точка);
		КлючевыеПоказателиДеятельностиОбъект.Родитель = Справочники.КлючевыеПоказателиДеятельности.НайтиПоКоду(КодРодителя);
		Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТз.KPI1_,".");
		КлючевыеПоказателиДеятельностиОбъект.Порядок = Результат.Количество() -1;
		Попытка
			КлючевыеПоказателиДеятельностиОбъект.Записать();
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	//Для Каждого СтрокаТз Из ТЗДанные Цикл
	//	
	//	Если СтрокаТз._ <>  3 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	INDПрочиеПоказателиСсылка = Справочники.INDПрочиеПоказатели.НайтиПоКоду(СтрокаТз.IND1_);
	//	Если ЗначениеЗаполнено(INDПрочиеПоказателиСсылка) Тогда
	//		INDПрочиеПоказателиОбъект = INDПрочиеПоказателиСсылка.ПолучитьОбъект();
	//	Иначе
	//		INDПрочиеПоказателиОбъект = Справочники.INDПрочиеПоказатели.СоздатьЭлемент();
	//	КонецЕсли;
	//	INDПрочиеПоказателиОбъект.Код =  СтрокаТз.IND1_;
	//	INDПрочиеПоказателиОбъект.КодСправочника =  СтрокаТз.IND1_;
	//	Если ЗначениеЗаполнено(СтрокаТз.ПоказателиПаспортовАлгоритмов) Тогда
	//		INDПрочиеПоказателиОбъект.Наименование = СтрокаТз.ПоказателиПаспортовАлгоритмов;	
	//	Иначе
	//		INDПрочиеПоказателиОбъект.Наименование = "Без наименования";	
	//	КонецЕсли;
	//	INDПрочиеПоказателиОбъект.Порядок =  СтрокаТз._;
	//	Точка = СтрНайти(СтрокаТз.IND1_,".",НаправлениеПоиска.СКонца,,2);
	//	КодРодителя = Лев(СтрокаТз.IND1_,Точка);
	//	INDПрочиеПоказателиОбъект.Родитель = Справочники.INDПрочиеПоказатели.НайтиПоКоду(КодРодителя);
	//	Попытка
	//		INDПрочиеПоказателиОбъект.Записать();
	//	Исключение
	//		Продолжить;
	//	КонецПопытки;
	//	
	//КонецЦикла;
	//
	//Для Каждого СтрокаТз Из ТЗДанные Цикл
	//	
	//	Если СтрокаТз._ <>  4 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	INDПрочиеПоказателиСсылка = Справочники.INDПрочиеПоказатели.НайтиПоКоду(СтрокаТз.IND1_);
	//	Если ЗначениеЗаполнено(INDПрочиеПоказателиСсылка) Тогда
	//		INDПрочиеПоказателиОбъект = INDПрочиеПоказателиСсылка.ПолучитьОбъект();
	//	Иначе
	//		INDПрочиеПоказателиОбъект = Справочники.INDПрочиеПоказатели.СоздатьЭлемент();
	//	КонецЕсли;
	//	INDПрочиеПоказателиОбъект.Код =  СтрокаТз.IND1_;
	//	INDПрочиеПоказателиОбъект.КодСправочника =  СтрокаТз.IND1_;
	//	Если ЗначениеЗаполнено(СтрокаТз.ПоказателиПаспортовАлгоритмов) Тогда
	//		INDПрочиеПоказателиОбъект.Наименование = СтрокаТз.ПоказателиПаспортовАлгоритмов;	
	//	Иначе
	//		INDПрочиеПоказателиОбъект.Наименование = "Без наименования";	
	//	КонецЕсли;
	//	INDПрочиеПоказателиОбъект.Порядок =  СтрокаТз._;
	//	Точка = СтрНайти(СтрокаТз.IND1_,".",НаправлениеПоиска.СКонца,,2);
	//	КодРодителя = Лев(СтрокаТз.IND1_,Точка);
	//	INDПрочиеПоказателиОбъект.Родитель = Справочники.INDПрочиеПоказатели.НайтиПоКоду(КодРодителя);
	//	Попытка
	//		INDПрочиеПоказателиОбъект.Записать();
	//	Исключение
	//		Продолжить;
	//	КонецПопытки;
	//	
	//КонецЦикла;
	
	
	
КонецПроцедуры // ЗагрузитьЛистПП()

&НаСервере
Процедура СоздатьКорневыеКаталоги()

		КлючевыеПоказателиДеятельностиСсылка = Справочники.КлючевыеПоказателиДеятельности.НайтиПоКоду("KPI1.");
		Если ЗначениеЗаполнено(КлючевыеПоказателиДеятельностиСсылка) Тогда
			КлючевыеПоказателиДеятельностиОбъект = КлючевыеПоказателиДеятельностиСсылка.ПолучитьОбъект();
		Иначе
			КлючевыеПоказателиДеятельностиОбъект = Справочники.КлючевыеПоказателиДеятельности.СоздатьЭлемент();
		КонецЕсли;
		КлючевыеПоказателиДеятельностиОбъект.Код =  "KPI1.";
		КлючевыеПоказателиДеятельностиОбъект.КодСправочника =  "KPI1.";
		КлючевыеПоказателиДеятельностиОбъект.Наименование = "Финансовый результат";	
		КлючевыеПоказателиДеятельностиОбъект.Порядок =  1;
		КлючевыеПоказателиДеятельностиОбъект.Записать();
		
		
		//INDПрочиеПоказателиСсылка = Справочники.INDПрочиеПоказатели.НайтиПоКоду("IND2.");
		//Если ЗначениеЗаполнено(INDПрочиеПоказателиСсылка) Тогда
		//	INDПрочиеПоказателиОбъект = INDПрочиеПоказателиСсылка.ПолучитьОбъект();
		//Иначе
		//	INDПрочиеПоказателиОбъект = Справочники.INDПрочиеПоказатели.СоздатьЭлемент();
		//КонецЕсли;
		//INDПрочиеПоказателиОбъект.Код =  "IND2.";
		//INDПрочиеПоказателиОбъект.КодСправочника =  "IND2.";
		//INDПрочиеПоказателиОбъект.Наименование = "Показатели Финансовой отчетности";	
		//INDПрочиеПоказателиОбъект.Порядок =  1;
		//INDПрочиеПоказателиОбъект.Записать();
	

КонецПроцедуры // СоздатьКорневыеКаталоги()


&НаСервере
Функция ПреобразоватьТабличныйДокументВТаблицуЗначений(ТабДокумент,ПерваяСтрока)

	ПоследняяСтрока = ТабДокумент.ВысотаТаблицы;

	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;

	ОбластьЯчеек = ТабДокумент.Область(ПерваяСтрока, 1, ПоследняяСтрока, ПоследняяКолонка);


    ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);


    ПостроительОтчета = Новый ПостроительОтчета;

    ПостроительОтчета.ИсточникДанных = ИсточникДанных;

    ПостроительОтчета.Выполнить();


    ТабЗначений = ПостроительОтчета.Результат.Выгрузить();

    Возврат ТабЗначений

КонецФункции


&НаСервере
Процедура УдалитьЭлементыНаСервере()
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	INDПрочиеПоказатели.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.INDПрочиеПоказатели КАК INDПрочиеПоказатели";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если СпрОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СпрОбъект.Удалить();
	КонецЦикла;
	

	
	
КонецПроцедуры


&НаКлиенте
Процедура УдалитьЭлементы(Команда)
	УдалитьЭлементыНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьВSQL(Команда)
	ИнтеграцияДЗО.ЗаписатьСправочникВ_SQL("КлючевыеПоказателиДеятельности","map_KeyPerformanceIndicators");
КонецПроцедуры

