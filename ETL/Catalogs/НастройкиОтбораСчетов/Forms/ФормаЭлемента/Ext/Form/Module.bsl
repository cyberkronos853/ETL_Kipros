#Область СобытияОбработчиковФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Объект.ГУИД) Тогда
			ЗаполнитьПоСчетуНаСервере();
		КонецЕсли;
	Иначе
		СобратьОтборыИзТабЧасти();
	КонецЕсли; 
	
	УстановитьУсловноеОформлениеДляСпискаВыбора(Элементы.ТЗОтборыВидСравнения);
	
КонецПроцедуры  

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СоотДляУсловия = СоответстиеДляЗапроса(); 
	СоотДляУсловий = СоответстиеДляУсловий();
	МассивДляУсловий = Новый Массив;
	СписокПолей = Новый Массив;
	Для Каждого СтрокаОтборов Из ТЗОтборы Цикл 
		Если СтрокаОтборов.Использование Тогда 
			НайденноеСоответствие = СоотДляУсловия.Получить(Строка(СтрокаОтборов.Поле));
			Если ЗначениеЗаполнено(СтрокаОтборов.ВидСравнения) Тогда
				НайденноеУсловие = СоотДляУсловий.Получить(ВидСравненияКомпоновкиДанных[СтрокаОтборов.ВидСравнения]);
			Иначе 
				НайденноеУсловие = Неопределено;
			КонецЕсли;
			
			Если НайденноеСоответствие <> Неопределено И НайденноеУсловие <> Неопределено 
				И СтрокаОтборов.Значение.Количество()>0  Тогда
					Если СписокПолей.Найти(НайденноеСоответствие) = Неопределено Тогда
						СписокПолей.Добавить(НайденноеСоответствие);
					КонецЕсли;
		
					Если НайденноеУсловие = "in" Или НайденноеУсловие = "not in" Тогда
						МассивЗначений = Новый Массив;
						Для Каждого ЭлементаСписка Из СтрокаОтборов.Значение Цикл
							МассивЗначений.Добавить(СтрШаблон("'%1'",ЭлементаСписка.Значение));	
						КонецЦикла;
						СтрокаУсловийВхождения = СтрСоединить(МассивЗначений,",");
						ТекстУсловия = СтрШаблон("%1 %2 (%3)",НайденноеСоответствие,НайденноеУсловие,СтрокаУсловийВхождения);
					ИначеЕсли  НайденноеУсловие = "=" Или НайденноеУсловие = "<>" Тогда 	
						ТекстУсловия = СтрШаблон("%1 %2 '%3'",НайденноеСоответствие,НайденноеУсловие,Строка(СтрокаОтборов.Значение[0].Значение));
					КонецЕсли;
					Если ТекстУсловия<>Неопределено Тогда 
						МассивДляУсловий.Добавить(ТекстУсловия);
					КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МассивДляУсловий.Количество() > 0 Тогда 
		УсловияSQL = СтрСоединить(МассивДляУсловий," and ");
		Объект.УсловиеВЗапрос = СтрШаблон(" %1",УсловияSQL);
		Сообщить(Объект.УсловиеВЗапрос); 
	КонецЕсли;
	
	Если СписокПолей.Количество() > 0 Тогда
		Объект.ПоляВЗапрос = СтрСоединить(СписокПолей, ", ");
	КонецЕсли;
	
	Объект.СохраненныеОтборы.Очистить();
	Для каждого Строки Из ТЗОтборы Цикл
		Если Строки.Значение.Количество()>0 Тогда
			Для каждого СтрокаСписка Из Строки.Значение Цикл
				
				НоваяСтрока = Объект.СохраненныеОтборы.Добавить();
				НоваяСтрока.ЭлементОтбора =  Строки.Поле;
				НоваяСтрока.ЗначениеВидаСравненияСтрокой = Строки.ВидСравнения;
				НоваяСтрока.ЗначениеОтбора = СтрокаСписка.Значение;
				НоваяСтрока.ПредставлениеЗначенияОтбора = СтрокаСписка.Представление;
				НоваяСтрока.ИспользованиеОтбора =  Строки.Использование;
			КонецЦикла;
		Иначе
			НоваяСтрока = Объект.СохраненныеОтборы.Добавить();
			НоваяСтрока.ЭлементОтбора =  Строки.Поле;
			НоваяСтрока.ЗначениеВидаСравненияСтрокой = Строки.ВидСравнения;
			НоваяСтрока.ЗначениеОтбора = "";
			НоваяСтрока.ПредставлениеЗначенияОтбора = "";
			НоваяСтрока.ИспользованиеОтбора = Строки.Использование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 


&НаКлиенте
Процедура ГУИДНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	
	ТЗОтборы.Очистить();
	Если ЗначениеЗаполнено(Объект.База) Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьГуидИКодСчета", ЭтотОбъект); 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ","ChartOfAccounts"); 
		ПараметрыФормы.Вставить("База",Объект.База);
		ОткрытьФорму("Справочник.НастройкиОтбораСчетов.Форма.ФормаВыбораИзБД",ПараметрыФормы,ЭтотОбъект,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);    
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите базу";
		Сообщение.Поле = "Объект.База";
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция  ТЗОтборыЗначениеНачалоВыбораНаСервере(Адрес) 
	
	ТаблицаСтрок = ПолучитьИзВременногоХранилища(Адрес);
	Список = Новый СписокЗначений;
	
	Для Каждого стр из ТаблицаСтрок Цикл
		Список.Добавить(стр.GUID,стр.name);
	КонецЦикла;

	Возврат Список; 
	
КонецФункции

&НаКлиенте
Процедура ТЗОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	СоответствиеСубконитАнг = СоответстиеТаблицБД(); 
	НайденноеСоответствие = СоответствиеСубконитАнг.Получить(Строка(Элементы.ТЗОтборы.ТекущиеДанные.Поле));
	Если НайденноеСоответствие <> Неопределено Тогда
		Если ЗначениеЗаполнено(Объект.База) Тогда
			ПараметрыФормы = новый Структура;
			ПараметрыФормы.Вставить("Ключ",НайденноеСоответствие);
			ПараметрыФормы.Вставить("База",Объект.База);
			
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗначение", ЭтотОбъект); 
			ОткрытьФорму("Справочник.НастройкиОтбораСчетов.Форма.ФормаВыбораИзБД",ПараметрыФормы,ЭтотОбъект,Истина,,,Оповещение); 
		Иначе  
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выберите базу";
			Сообщение.Поле = "Объект.База";
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЕсли;
	
		
КонецПроцедуры     
	
&НаКлиенте
Процедура ЗаполнитьЗначение(Результат, ДополнительныеПараметры) Экспорт	
	
	Элементы.ТЗОтборы.ТекущиеДанные.Значение = ТЗОтборыЗначениеНачалоВыбораНаСервере(Результат.Адрес);
	
КонецПроцедуры 


#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаСервере
Процедура ЗаполнитьГуидИКодСчета(Результат, ДополнительныеПараметры) Экспорт	
	
	Если Результат <> Неопределено и ТипЗнч(Результат) = Тип("Структура") Тогда
		ТаблицаСтрок = ПолучитьИзВременногоХранилища(Результат.Адрес);
		Для Каждого стр из ТаблицаСтрок Цикл
			Объект.ГУИД = стр.GUID;
			Объект.КодСчета = стр.Code;
		КонецЦикла;
		ЗаполнитьПоСчетуНаСервереПослеВыбора(ТаблицаСтрок);
	КонецЕсли;
	

КонецПроцедуры 
 
#КонецОбласти   

#Область СлужебныеПроцедурыИФункции  	

&НаСервере
Функция СоответстиеВидовСубконто()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Unit","Подразделения" );
	Соответствие.Вставить("BankAccount","БанковскиеСчета" );
	Соответствие.Вставить("Cashboxe","ДенежныеСредства" );
	Соответствие.Вставить("Revenue","Доходы" );  
	Соответствие.Вставить("RevenuesFuturePeriod","ДоходыБудущихПериодов" );  
	Соответствие.Вставить("IntangibleAsset","НематериальныеАктивы"); 
	Соответствие.Вставить("FixedAsset","ОсновныеСредства" );
	Соответствие.Вставить("ConstructionObject","ОбъектыСтроительства" );
	Соответствие.Вставить("Security","ЦенныеБумаги");
	Соответствие.Вставить("Nomenclature","Номенклатура" ); 
	Соответствие.Вставить("NomenclatureGroup","НоменклатурныеГруппы" );
	Соответствие.Вставить("Warehouse","Склады" );  
	Соответствие.Вставить("Counterparty","Контрагенты" );  
	Соответствие.Вставить("Contract","Договоры" );
	Соответствие.Вставить("CashFlowItem","СтатьиДвиженияДенежныхСредств" ); 
	Соответствие.Вставить("Expenditure","СтатьиЗатрат"); 
	Соответствие.Вставить("SpendingFuturePeriod", "РасходыБудущихПериодов" );
	Соответствие.Вставить("TypeOfPayments","ВидыПлатежейВБюджетИФонды"); 
	Соответствие.Вставить( "TypeOfTaxes","ТипыНалогов");  
	Соответствие.Вставить("Reserve","Резервы" );
	Соответствие.Вставить("TypeOfAssetsAndLiabilities","ВидыАктивовИОбязательств");   
	Соответствие.Вставить("Individual","РаботникиОрганизаций");
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция СоответстиеТаблицБД()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Подразделения", "Units");
	Соответствие.Вставить("БанковскиеСчета", "BankAccounts");
	Соответствие.Вставить("ДенежныеСредства", "Cashboxes");
	Соответствие.Вставить("Доходы", "Revenues");  
	Соответствие.Вставить("ДоходыБудущихПериодов", "RevenuesFuturePeriods");  
	Соответствие.Вставить("НематериальныеАктивы", "IntangibleAssets"); 
	Соответствие.Вставить("ОсновныеСредства", "FixedAssets");
	Соответствие.Вставить("ОбъектыСтроительства", "ConstructionObjects");
	Соответствие.Вставить("ЦенныеБумаги", "Securities");
	Соответствие.Вставить("Номенклатура", "Nomenclature"); 
	Соответствие.Вставить("НоменклатурныеГруппы", "NomenclatureGroups");
	Соответствие.Вставить("Склады", "Warehouses");  
	Соответствие.Вставить("Контрагенты", "Counterparties");  
	Соответствие.Вставить("Договоры", "Contracts");
	Соответствие.Вставить("СтатьиДвиженияДенежныхСредств", "CashFlowItems"); 
	Соответствие.Вставить("СтатьиЗатрат", "Expenditures"); 
	Соответствие.Вставить("РасходыБудущихПериодов", "SpendingFuturePeriods");
	Соответствие.Вставить("ВидыПлатежейВБюджетИФонды", "TypesOfPayments"); 
	Соответствие.Вставить("ТипыНалогов", "TypeOfTaxes");  
	Соответствие.Вставить("Резервы", "Reserves");
	Соответствие.Вставить("ВидыАктивовИОбязательств", "TypeOfAssetsAndLiabilities");   
	Соответствие.Вставить("РаботникиОрганизаций", "Individuals");
	Соответствие.Вставить("Организация", "Organizations");
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция СоответстиеДляЗапроса()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Подразделения", "Unit");
	Соответствие.Вставить("БанковскиеСчета", "BankAccount");
	Соответствие.Вставить("ДенежныеСредства", "Cashboxe");
	Соответствие.Вставить("Доходы", "Revenue");  
	Соответствие.Вставить("ДоходыБудущихПериодов", "RevenuesFuturePeriod");  
	Соответствие.Вставить("НематериальныеАктивы", "IntangibleAsset"); 
	Соответствие.Вставить("ОсновныеСредства", "FixedAsset");
	Соответствие.Вставить("ОбъектыСтроительства", "ConstructionObject");
	Соответствие.Вставить("ЦенныеБумаги", "Security");
	Соответствие.Вставить("Номенклатура", "Nomenclature"); 
	Соответствие.Вставить("НоменклатурныеГруппы", "NomenclatureGroup");
	Соответствие.Вставить("Склады", "Warehouse");  
	Соответствие.Вставить("Контрагенты", "Counterparty");  
	Соответствие.Вставить("Договоры", "Contract");
	Соответствие.Вставить("СтатьиДвиженияДенежныхСредств", "CashFlowItem"); 
	Соответствие.Вставить("СтатьиЗатрат", "Expenditure"); 
	Соответствие.Вставить("РасходыБудущихПериодов", "SpendingFuturePeriod");
	Соответствие.Вставить("ВидыПлатежейВБюджетИФонды", "TypeOfPayments"); 
	Соответствие.Вставить("ТипыНалогов", "TypeOfTaxes");  
	Соответствие.Вставить("Резервы", "Reserve");
	Соответствие.Вставить("ВидыАктивовИОбязательств", "TypeOfAssetsAndLiabilities");   
	Соответствие.Вставить("РаботникиОрганизаций", "Individual");
	Соответствие.Вставить("Организация", "Organizations");

	Возврат Соответствие;
	
КонецФункции 

&НаСервере
Функция СоответстиеДляУсловий()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ВидСравненияКомпоновкиДанных.Равно, "=");
	Соответствие.Вставить(ВидСравненияКомпоновкиДанных.НеРавно, "<>");
	Соответствие.Вставить(ВидСравненияКомпоновкиДанных.ВСписке, "in");
	Соответствие.Вставить(ВидСравненияКомпоновкиДанных.НеВСписке, "not in");  
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоСчетуНаСервереПослеВыбора(ТаблицаСтрок)  
	
	Если ТаблицаСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСубконто = СоответстиеВидовСубконто();
	
	НоваяСтрока = ТЗОтборы.Добавить();
	НоваяСтрока.Поле = "Организация";
	НоваяСтрока.Использование = Истина;

	Если ЗначениеЗаполнено(ТаблицаСтрок[0].TypeOfCut1) Тогда
		НайденноеСоответствие = СоответствиеСубконто.Получить(ТаблицаСтрок[0].TypeOfCut1);
		Если НайденноеСоответствие <> Неопределено Тогда
			НоваяСтрока = ТЗОтборы.Добавить();
			НоваяСтрока.Поле = НайденноеСоответствие;
			НоваяСтрока.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТаблицаСтрок[0].TypeOfCut2) Тогда
		НайденноеСоответствие = СоответствиеСубконто.Получить(ТаблицаСтрок[0].TypeOfCut2);
		Если НайденноеСоответствие <> Неопределено Тогда
			НоваяСтрока = ТЗОтборы.Добавить();
			НоваяСтрока.Поле = НайденноеСоответствие;
			НоваяСтрока.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТаблицаСтрок[0].TypeOfCut3) Тогда
		НайденноеСоответствие = СоответствиеСубконто.Получить(ТаблицаСтрок[0].TypeOfCut3);
		Если НайденноеСоответствие <> Неопределено Тогда
			НоваяСтрока = ТЗОтборы.Добавить();
			НоваяСтрока.Поле = НайденноеСоответствие;
			НоваяСтрока.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	//Если ЗначениеЗаполнено(ТаблицаСтрок[0].TypeOfCut4) Тогда
	//	НайденноеСоответствие = СоответствиеСубконто.Получить(ТаблицаСтрок[0].TypeOfCut4);
	//	Если НайденноеСоответствие <> Неопределено Тогда
	//		НоваяСтрока = ТЗОтборы.Добавить();
	//		НоваяСтрока.Поле = НайденноеСоответствие;
	//		НоваяСтрока.Использование = Истина;
	//	КонецЕсли;
	//КонецЕсли; 
	//Если ЗначениеЗаполнено(ТаблицаСтрок[0].TypeOfCut5) Тогда
	//	НайденноеСоответствие = СоответствиеСубконто.Получить(ТаблицаСтрок[0].TypeOfCut5);
	//	Если НайденноеСоответствие <> Неопределено Тогда
	//		НоваяСтрока = ТЗОтборы.Добавить();
	//		НоваяСтрока.Поле = НайденноеСоответствие;
	//		НоваяСтрока.Использование = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ТаблицаСтрок[0].TypeOfCut6) Тогда
	//	НайденноеСоответствие = СоответствиеСубконто.Получить(ТаблицаСтрок[0].TypeOfCut6);
	//	Если НайденноеСоответствие <> Неопределено Тогда
	//		НоваяСтрока = ТЗОтборы.Добавить();
	//		НоваяСтрока.Поле = НайденноеСоответствие;
	//		НоваяСтрока.Использование = Истина;
	//	КонецЕсли;
	//КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция Соединение()
	
	
	Попытка
		НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
		Команда     = Новый COMОбъект("ADODB.Command");
		Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");

		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 600;
		Соединение.ConnectionTimeout = 180;
		
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
		
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Команда;
КонецФункции	

&НаСервере
Процедура ЗаполнитьПоСчетуНаСервере() 
	
	Попытка
		ТЗСубконто =Новый ТаблицаЗначений;
		
		ЗапросБД = "SELECT [GUID]
		|      ,[Code]
		|      ,[TypeOfCut1]
		|      ,[TypeOfCut2]
		|      ,[TypeOfCut3]
		|      ,[TypeOfCut4]
		|      ,[TypeOfCut5]
		|      ,[TypeOfCut6]
		|  FROM [ChartOfAccounts]
		|  Where Base='" + Строка(Объект.База) + "' and GUID='Гуид'"; 
		
		
		ЗапросБД = СтрЗаменить(ЗапросБд,"GUID='Гуид'", "GUID='"+Объект.ГУИД+"'");
		КомандаSQL = Соединение();
				
		КомандаSQL.CommandText = ЗапросБД;
		Выборка = КомандаSQL.Execute(); 
		
		Если КомандаSQL.ActiveConnection.Errors.Count > 0 Тогда 
			ОписаниеОшибки = "";	
			Для Каждого Ошибка из КомандаSQL.ActiveConnection.Errors Цикл 
				ОписаниеОшибки = ОписаниеОшибки + "Код: " + Ошибка.Number + ". " + Ошибка.Description + Символы.ПС;     
			КонецЦикла;   
			
			Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
		КонецЕсли;  
		
		СоответствиеСубконто = СоответстиеВидовСубконто();
		Пока НЕ Выборка.EOF Цикл 
			СчетчикПолейРезультата = 0;
			Пока СчетчикПолейРезультата < Выборка.Fields.Count Цикл	
				
				НайденноеСоответствие = СоответствиеСубконто.Получить(Выборка.Fields(Выборка.Fields.Item(СчетчикПолейРезультата).Name).Value);
				Если  НайденноеСоответствие <> Неопределено Тогда			
					НоваяСтрока = ТЗОтборы.Добавить();
					НоваяСтрока.Поле = НайденноеСоответствие;
					НоваяСтрока.Использование = Истина;
				КонецЕсли;
				
				СчетчикПолейРезультата = СчетчикПолейРезультата + 1; 	
			КонецЦикла;  
			
			Выборка.MoveNext();
		КонецЦикла; 
		
	НоваяСтрока = ТЗОтборы.Добавить();
	НоваяСтрока.Поле = "Организация";
	НоваяСтрока.Использование = Истина;

		 
	Исключение
		ОписаниеОшибки =  ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка веб-сервиса", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);		
	КонецПопытки;
	
КонецПроцедуры

  &НаСервере
Процедура УстановитьУсловноеОформлениеДляСпискаВыбора(Элемент)
  
  Для Каждого ЭлементСпискаВыбора Из Элемент.СписокВыбора  Цикл
	  
    // Новое правило оформления
    
    ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
    
    ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСпискаВыбора.Представление);
    
    // Условие
    
    ЭлементУсловия  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    
    ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.ПутьКДанным);
    
    ЭлементУсловия.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
    
    ЭлементУсловия.ПравоеЗначение=ЭлементСпискаВыбора.Значение;
    
    // Поле
    
    ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
    
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
	

КонецЦикла; 

КонецПроцедуры  

 &НаСервере
Процедура СобратьОтборыИзТабЧасти()

	МассивПолей = Объект.СохраненныеОтборы.Выгрузить().ВыгрузитьКолонку("ЭлементОтбора");	
	ПоляОтборов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПолей); 
	
	Для Каждого Строка Из ПоляОтборов Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЭлементОтбора",Строка);
		МассивСтрок = Объект.СохраненныеОтборы.НайтиСтроки(СтруктураПоиска); 
		НоваяСтрока = ТЗОтборы.Добавить();
		НоваяСтрока.Поле = Строка;
		Список = Новый СписокЗначений;
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			НоваяСтрока.Использование = СтрокаМассива.ИспользованиеОтбора;
			НоваяСтрока.ВидСравнения = СтрокаМассива.ЗначениеВидаСравненияСтрокой;
			Список.Добавить(СтрокаМассива.ЗначениеОтбора,СтрокаМассива.ПредставлениеЗначенияОтбора);
		КонецЦикла;
		Если Список.Количество()>0 Тогда
			НоваяСтрока.Значение = Список;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


#КонецОбласти 




