#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
   
Процедура ПередЗаписью(Отказ)
	
	Отказ = ЕстьДублиИмен();
	
	Если Отказ Тогда
		Сообщить("Дублирование имен полей. Запись не возможна!");
		Возврат;		
	КонецЕсли;
	
	
	СтрокиБезКлюча = СтруктураТаблицыSQL.НайтиСтроки(Новый Структура("КлючСвязи", 0)); 
	
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = 0; 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	*
		                      |ПОМЕСТИТЬ втСтруктураТаблицыSQL
		                      |ИЗ
		                      |	&СтруктураТаблицыSQL КАК Т
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	МАКСИМУМ(втСтруктураТаблицыSQL.КлючСвязи) КАК КлючСвязи
		                      |ИЗ
		                      |	втСтруктураТаблицыSQL КАК втСтруктураТаблицыSQL");
		Запрос.УстановитьПараметр("СтруктураТаблицыSQL", СтруктураТаблицыSQL.Выгрузить());   
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			ТекущийКод = ВыборкаЗапроса.КлючСвязи;
		КонецЦикла; 
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары["КлючСвязи"] = ТекущийКод;
			
		КонецЦикла;
				
	КонецЕсли;
	
	//++ 06.06.2025 Кибернетика Корыткин Проверка неоходимости реструктуризировать таблицу
	Если Не Отказ И Не ЭтоНовый() И ЕстьИзмененияСтруктуры() Тогда                                   
		
		КУдалению = РегистрыСведений.ТаблицыДляУдаления.СоздатьМенеджерЗаписи();
		КУдалению.ТаблицаSQL = Ссылка;
		КУдалению.Записать();
		
	//++ 13.07.2025 Кибернетика Корыткин Регистрируем для повторной выгрузки только объект из основной таблицы
		Если ЗначениеЗаполнено(ОсновнаяТаблица) Тогда
			Справочники.ЕдиныйФорматДанных.ЗарегистрироватьОбъектыДляПовторнойВыгрузки(ОсновнаяТаблица);
		Иначе
			Справочники.ЕдиныйФорматДанных.ЗарегистрироватьОбъектыДляПовторнойВыгрузки(Ссылка);
		КонецЕсли;
	//-- 13.07.2025	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций  
Функция ЕстьИзмененияСтруктуры()  
	
	Возврат НЕ ОбщегоНазначения.КоллекцииИдентичны(Ссылка.СтруктураТаблицыSQL, СтруктураТаблицыSQL,
	"ИмяПоляSQL, ТипПоля",  ,Истина);
	
КонецФункции 


Функция ЕстьДублиИмен()
	
	Отказ = Ложь;
	//
	//ТЗИмен = ЭтотОбъект.СтруктураТаблицыSQL.Выгрузить(, "ИмяПоля");
	//ТЗИменSQL = ЭтотОбъект.СтруктураТаблицыSQL.Выгрузить(, "ИмяПоляSQL");  
	//ТЗИмен.Свернуть("ИмяПоля");
	//ТЗИменSQL.Свернуть("ИмяПоляSQL");
	//
	//Если СтруктураТаблицыSQL.Количество() <> ТЗИмен.Количество() 
	//	ИЛИ СтруктураТаблицыSQL.Количество() <> ТЗИменSQL.Количество() Тогда
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	
	
	
	КонтрольИмяПоля = Новый Соответствие;
	КонтрольИмяПоляSQL = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.СтруктураТаблицыSQL Цикл
		
		Если Не ПустаяСтрока(СтрокаТЧ.ИмяПоля) Тогда
			КлючИмяПоля = Строка(СтрокаТЧ.ИмяПоля);
			Если КонтрольИмяПоля.Получить(КлючИмяПоля) <> Неопределено Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(
					"Обнаружено дублирование имен в строке %1: значение Имя '%2' уже существует!",
					СтрокаТЧ.НомерСтроки,
					СтрокаТЧ.ИмяПоля);
				Сообщение.Сообщить();
				Отказ = Истина;
			Иначе
				КонтрольИмяПоля.Вставить(КлючИмяПоля, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаТЧ.ИмяПоляSQL) Тогда
			КлючИмяПоляSQL = Строка(СтрокаТЧ.ИмяПоляSQL);
			Если КонтрольИмяПоляSQL.Получить(КлючИмяПоляSQL) <> Неопределено Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(
					"Обнаружено дублирование имен в строке %1: значение Имя поля SQL '%2' уже существует!",
					СтрокаТЧ.НомерСтроки,
					СтрокаТЧ.ИмяПоляSQL);
				Сообщение.Сообщить();
				Отказ = Истина;
			Иначе
				КонтрольИмяПоляSQL.Вставить(КлючИмяПоляSQL, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
КонецФункции
#КонецОбласти          

#Область Инициализация

#КонецОбласти   


