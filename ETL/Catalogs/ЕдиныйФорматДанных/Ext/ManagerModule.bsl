
#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьТаблицы(МассивЛогов = Неопределено) Экспорт
	//++ 03.07.2025 Кибернетика Корыткин
	Начало = ТекущаяДатаСеанса();
	//-- 03.07.2025 
	
	//++ 28.05.2024 Кибернетика Корыткин А.А. опциональность таблицы изменений
	ИспользоватьТаблицыИзменений = Ложь;
	//-- 28.05.2024
	
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();
	
	Команда = "
	|SET NOCOUNT ON
	|SET ANSI_NULLS ON
	|SET QUOTED_IDENTIFIER ON
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиныйФорматДанных.Ссылка КАК Ссылка,
	|	ЕдиныйФорматДанных.Наименование КАК Наименование,
	|	ЕдиныйФорматДанных.ВидТаблицы КАК ВидТаблицы,
	|	ЕдиныйФорматДанных.ЕстьВременнаяТаблица КАК ЕстьВременнаяТаблица,
	|	ЕдиныйФорматДанных.ЭтоВременнаяТаблица КАК ЭтоВременнаяТаблица,
	|	ЕСТЬNULL(ЕдиныйФорматДанных.ОсновнаяТаблица.Наименование, """") КАК ОсновнаяТаблица,
	|	ЕдиныйФорматДанных.ЕстьРегистратор КАК ЕстьРегистратор
	|ИЗ
	|	Справочник.ЕдиныйФорматДанных КАК ЕдиныйФорматДанных
	|ГДЕ
	|	НЕ ЕдиныйФорматДанных.ПометкаУдаления
	|	И ЕдиныйФорматДанных.ВидТаблицы.Ссылка ЕСТЬ НЕ NULL ";   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ОсновнаяТаблица) Тогда
			тИмя = СокрЛП(Выборка.ОсновнаяТаблица) + "_" + СокрЛП(Выборка.Наименование);
		Иначе
			тИмя = СокрЛП(Выборка.Наименование);	
		КонецЕсли;  
		
		СкриптИндексов = "";  
		СкриптТаблицыИзменений = "";
		
		Если Выборка.ВидТаблицы = Перечисления.ВидыТаблицSQL.Перечисление Тогда
			//Кибернетика Корыткин 07.09.2023
			СкриптТаблицы = 
			"
			|IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND type in (N'U'))
			|BEGIN
			|CREATE TABLE [dbo].[" + тИмя + "](
			|	[id] [decimal](18, 0) NOT NULL IDENTITY(1,1),
			|	[Name] [nvarchar](256) NULL,
			|	[Synonim] [nvarchar](256) NULL
			|) ON [PRIMARY]
			|END";  		
			СкриптВременнойТаблицы = 
			"SET NOCOUNT ON
			|IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "_tmp]') AND type in (N'U'))
			|BEGIN
			|CREATE TABLE [dbo].[" + тИмя + "_tmp](
			|	[Name] [nvarchar](256) NULL, 
			|	[Synonim] [nvarchar](256) NULL
			|) ON [PRIMARY]
			|END";  
			//..	
		Иначе
			
			тСтруктура = Выборка.Ссылка.СтруктураТаблицыSQL.Выгрузить(); 
			
			Если Выборка.ЭтоВременнаяТаблица Тогда
				СкриптТаблицы = 
				"IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND type in (N'U'))
				|BEGIN
				|CREATE TABLE [dbo].[" + тИмя + "](
				|	[Base] [nvarchar](20) NULL,";	
			Иначе
				СкриптТаблицы = 
				"IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND type in (N'U'))
				|BEGIN
				|CREATE TABLE [dbo].[" + тИмя + "](
				|	[id] [decimal](18, 0) NOT NULL IDENTITY(1,1),
				|	[Base] [nvarchar](20) NULL,"; 
			КонецЕсли;
			
			Если Выборка.ЕстьВременнаяТаблица Тогда
				СкриптВременнойТаблицы = 
				"IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "_tmp]') AND type in (N'U'))
				|BEGIN
				|CREATE TABLE [dbo].[" + тИмя + "_tmp](
				|	[Base] [nvarchar](20) NULL,
				|	[DeletionFlag] [bit] NULL,";  
				СкриптТаблицыИзменений = 
				"IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "_NewData]') AND type in (N'U'))
				|BEGIN
				|CREATE TABLE [dbo].[" + тИмя + "_NewData](
				|	[Base] [nvarchar](20) NULL";
			КонецЕсли;  	
			
			Если Выборка.ВидТаблицы = Перечисления.ВидыТаблицSQL.Справочник Тогда  
				СкриптТаблицы = СкриптТаблицы + "
				|	[GUID] [nvarchar](36) NULL,";
				Если Выборка.ЕстьВременнаяТаблица Тогда
					СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
					|	[GUID] [nvarchar](36) NULL,";
					СкриптТаблицыИзменений = СкриптТаблицыИзменений + ",
					|	[GUID] [nvarchar](36) NULL"; 
				КонецЕсли;
				СкриптИндексов = 
				"IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND name = N'" + тИмя + "_IDX1')
				|CREATE UNIQUE CLUSTERED INDEX [" + тИмя + "_IDX1] ON [dbo].[" + тИмя + "]
				|(  
				|	[Base],
				|	[GUID]	
				|)ON [PRIMARY]";
			ИначеЕсли Выборка.ВидТаблицы = Перечисления.ВидыТаблицSQL.ТабличнаяЧасть Тогда  
				СкриптТаблицы = СкриптТаблицы + "
				|	[GUID] [nvarchar](36) NULL,
				|	[StringNumber] [decimal](6, 0) NULL,";
				Если Выборка.ЕстьВременнаяТаблица Тогда
					СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
					|	[GUID] [nvarchar](36) NULL,
					|	[StringNumber] [decimal](6, 0) NULL,";
					СкриптТаблицыИзменений = СкриптТаблицыИзменений + ",
					|	[GUID] [nvarchar](36) NULL";
				КонецЕсли;
				СкриптИндексов = 
				"IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND name = N'" + тИмя + "_IDX1')
				|CREATE UNIQUE CLUSTERED INDEX [" + тИмя + "_IDX1] ON [dbo].[" + тИмя + "]
				|(    
				|	[Base],
				|	[GUID],
				|	[StringNumber]
				|)ON [PRIMARY]";
			ИначеЕсли Выборка.ВидТаблицы = Перечисления.ВидыТаблицSQL.Регистр Тогда  			
				//Если Выборка.ЕстьВременнаяТаблица Тогда
				//	СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
				//		|	[DeletionFlag] [bit] NULL,";
				//КонецЕсли;   
				Если Выборка.ЕстьРегистратор Тогда
					СкриптТаблицы = СкриптТаблицы + "
					|	[Registrator] [nvarchar](150) NULL,
					|	[RegistratorGUID] [nvarchar](36) NULL,";
					Если Выборка.ЕстьВременнаяТаблица Тогда
						СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
						|	[Registrator] [nvarchar](150) NULL,
						|	[RegistratorGUID] [nvarchar](36) NULL,";  
						СкриптТаблицыИзменений = СкриптТаблицыИзменений + ",
						|	[RegistratorGUID] [nvarchar](36) NULL";
					КонецЕсли;  
				КонецЕсли;
				Если Выборка.ЕстьВременнаяТаблица Тогда
					Для Каждого Строка Из тСтруктура Цикл
						Если Строка.Измерение Тогда 
							Если Строка.ТипПоля.GUID Тогда
								СкриптТаблицыИзменений = СкриптТаблицыИзменений + ",
								|	[" + СокрЛП(Строка.ИмяПоляSQL) + "_Table] [nvarchar](100) NULL";	
							КонецЕсли;
							СкриптТаблицыИзменений = СкриптТаблицыИзменений + ",
							|	[" + СокрЛП(Строка.ИмяПоляSQL) + "] " + Строка.ТипПоля.ИмяТипаSQL +  " NULL";	
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				СкриптИндексов = 
				"IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND name = N'" + тИмя + "_IDX1')
				|CREATE NONCLUSTERED INDEX [" + тИмя + "_IDX1] ON [dbo].[" + тИмя + "]
				|(
				|	[Base] " + ?(Выборка.ЕстьРегистратор, ",[RegistratorGUID]", "") + "
				|)ON [PRIMARY]";
				
				
				//04.01.2023 Корыткин добавляем для регистров кластерный индекс по периоду
				Если ТСтруктура.Найти("Period", "ИмяПоляSQL") <> Неопределено Тогда
					
					СкриптИндексов = СкриптИндексов + "
					|IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND name = N'" + тИмя + "_CIDX1')
					|CREATE CLUSTERED INDEX [" + тИмя + "_CIDX1] ON [dbo].[" + тИмя + "]
					|(
					|	[Base] ,[Period]
					|)";					
					
				КонецЕсли;
				
			КонецЕсли;
			
			НомерИндекса = 2; 
			
			Для Каждого Строка Из тСтруктура Цикл
				Если Строка.ТипПоля.GUID Тогда
					СкриптТаблицы = СкриптТаблицы + "
					|	[" + СокрЛП(Строка.ИмяПоляSQL) + "_Table] [nvarchar](100) NULL,";	
				КонецЕсли;
				СкриптТаблицы = СкриптТаблицы + "
				|	[" + СокрЛП(Строка.ИмяПоляSQL) + "] " + Строка.ТипПоля.ИмяТипаSQL +  " NULL,";  
				Если Выборка.ЕстьВременнаяТаблица Тогда  
					Если Строка.ТипПоля.GUID Тогда
						СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
						|	[" + СокрЛП(Строка.ИмяПоляSQL) + "_Table] [nvarchar](100) NULL,";	
					КонецЕсли;  
					Если Строка.ТипПоля.Дата Тогда
						СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
						|	[" + СокрЛП(Строка.ИмяПоляSQL) + "] [nvarchar](20) NULL,";	
					Иначе
						СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
						|	[" + СокрЛП(Строка.ИмяПоляSQL) + "] " + Строка.ТипПоля.ИмяТипаSQL +  " NULL,"; 
					КонецЕсли;
				КонецЕсли;
				Если Строка.Индекс Тогда
					СкриптИндексов = СкриптИндексов + "
					|IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND name = N'" + тИмя + "_IDX" + Строка(НомерИндекса) + "')
					|CREATE NONCLUSTERED INDEX [" + тИмя + "_IDX" + Строка(НомерИндекса) + "] ON [dbo].[" + тИмя + "]
					|(
					|	[" + СокрЛП(Строка.ИмяПоляSQL) + "]
					|)ON [PRIMARY]";
					НомерИндекса = НомерИндекса + 1;	
				КонецЕсли;  
			КонецЦикла;	 
			
			Если Не Выборка.ЭтоВременнаяТаблица Тогда 
				СкриптТаблицы = СкриптТаблицы + "
				|	CONSTRAINT PK_" + тИмя + " PRIMARY KEY NONCLUSTERED (id) ";
			КонецЕсли;			
			
			СкриптТаблицы = Лев(СкриптТаблицы, СтрДлина(СкриптТаблицы) - 1); 
			СкриптТаблицы = СкриптТаблицы + "
			|) ON [PRIMARY]
			|END";   
			
			Если Выборка.ЕстьВременнаяТаблица Тогда
				СкриптВременнойТаблицы = Лев(СкриптВременнойТаблицы, СтрДлина(СкриптВременнойТаблицы) - 1); 
				СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
				|) ON [PRIMARY]
				|END"; 
				СкриптТаблицыИзменений = СкриптТаблицыИзменений + ", 
				|	TimeInsert datetime NOT NULL 	
				|) ON [PRIMARY]
				|END"; 
			КонецЕсли;
			
		КонецЕсли; 
		
		//++ 28.05.2024 Кибернетика Корыткин А.А. опциональность таблицы изменений
		Если ИспользоватьТаблицыИзменений Тогда
			КомандаSQL = Команда + Символы.ПС + СкриптТаблицы + Символы.ПС + СкриптИндексов + Символы.ПС + СкриптВременнойТаблицы + Символы.ПС + СкриптТаблицыИзменений + Символы.ПС + "SET ANSI_PADDING ON";
		Иначе
			КомандаSQL = Команда + Символы.ПС + СкриптТаблицы + Символы.ПС + СкриптИндексов + Символы.ПС + СкриптВременнойТаблицы + Символы.ПС + "SET ANSI_PADDING ON";	
		КонецЕсли;
		//-- 28.05.2024
		
		Результат = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(КомандаSQL);
		
		//++ 03.07.2025 Кибернетика Корыткин
		Конец = ТекущаяДатаСеанса();
		
		Если Результат.ЕстьОшибки Тогда 
			Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);;
			ЗаписьЖурналаРегистрации("Ошибка при инициализации таблиц " + тИмя, УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
			
			Если МассивЛогов = Неопределено Тогда
	
				Обмен.ЗаписьВЖурналОбмена(Начало, Конец, "Ошибка при инициализации таблиц " + тИмя, , Ошибка);
		
			Иначе
				МассивЛогов.Добавить(Обмен.ЗаписьВЖурналОбмена(Начало, Конец, "Ошибка при инициализации таблиц " + тИмя, , Ошибка));
		
            КонецЕсли;
		КонецЕсли;
		
		///////

	КонецЦикла;   	
	
КонецПроцедуры

Процедура ЗаполнитьСправочникиИзВременныхТаблиц() Экспорт
	
	
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();

	//++ 28.05.2024 Кибернетика Корыткин А.А. опциональность таблицы изменений
	ИспользоватьТаблицыИзменений = ложь;
//Константы.ИспользоватьТаблицыИзменений.Получить();
	//-- 28.05.2024
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиныйФорматДанных.Ссылка КАК Ссылка,
	|	ЕдиныйФорматДанных.Наименование КАК Наименование,
	|	ЕдиныйФорматДанных.ВидТаблицы КАК ВидТаблицы,
	|	ЕдиныйФорматДанных.ЕстьВременнаяТаблица КАК ЕстьВременнаяТаблица,
	|	ЕдиныйФорматДанных.ЭтоВременнаяТаблица КАК ЭтоВременнаяТаблица,
	|	ЕдиныйФорматДанных.ОсновнаяТаблица КАК ОсновнаяТаблица,
	|	ЕдиныйФорматДанных.ЕстьРегистратор КАК ЕстьРегистратор
	|ИЗ
	|	Справочник.ЕдиныйФорматДанных КАК ЕдиныйФорматДанных
	|ГДЕ
	|	НЕ ЕдиныйФорматДанных.ПометкаУдаления
	|	И ЕдиныйФорматДанных.ЕстьВременнаяТаблица
	|	И НЕ ЕдиныйФорматДанных.НеЗаполнятьАвтоматически
	|	И ЕдиныйФорматДанных.ВидТаблицы.Ссылка ЕСТЬ НЕ NULL ";  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ОсновнаяТаблица) Тогда
			тИмя = СокрЛП(Выборка.ОсновнаяТаблица) + "_" + СокрЛП(Выборка.Наименование);
		Иначе
			тИмя = СокрЛП(Выборка.Наименование);	
		КонецЕсли;
		
		//Кибернетика Корыткин А.А. 07.09.2023
		Если Выборка.ВидТаблицы = Перечисления.ВидыТаблицSQL.Перечисление Тогда	
			
			СкриптТаблицы = "
			|SET NOCOUNT ON
            |
			|DECLARE @i int
			|SELECT @i=Count(*) FROM [dbo].[" + тИмя + "_tmp]
			|IF @i=0
			|RETURN 
			|
			|MERGE [dbo].[NewDataCheck] O
			|USING (SELECT '' AS Base, '" + тИмя + "' AS [Table], 1 AS [Check]) T
			|ON O.Base = T.Base 
			|	AND O.[Table] = T.[Table] 
			|WHEN MATCHED THEN
			|	UPDATE SET O.[Check] = T.[Check]
			|WHEN NOT MATCHED THEN 
			|	INSERT 
			|		([Base], [Table], [Check]) 
			|	VALUES 
			|		(T.[Base], T.[Table], T.[Check]);
			|
			|MERGE [dbo].[" + тИмя + "] O
			|USING (SELECT DISTINCT Name, Synonim FROM [dbo].[" + тИмя + "_tmp]) T
			|ON O.Name = T.Name  
			|WHEN MATCHED THEN
			| 	UPDATE SET O.[Synonim] = T.[Synonim]
			|WHEN NOT MATCHED THEN 
			|	INSERT 
			|		([Name], [Synonim]) 
			|	VALUES 
			|		(T.[Name], T.[Synonim]);"; 
			
		Иначе  
			
			тСтруктура = Выборка.Ссылка.СтруктураТаблицыSQL.Выгрузить(); 
			
			ПоляАпдейт = "";
			ПоляИнсерт = ""; 
			ПоляИнсертЗначения = ""; 
			ПоляИндекс = "Base, ";  
			ПоляДелет = тИмя + "_tmp.Base = " + тИмя + ".Base";   
			ПоляМержВложЗапрос = ""; 
			ПоляМержСвязь = "ND.Base = T.Base";
			ПоляМержИнсерт = "T.[Base], ";
			
			Если Выборка.ЕстьРегистратор Тогда   
				ПоляАпдейт = ПоляАпдейт + "
				|		[Registrator] = T.[Registrator],
				|		[RegistratorGUID] = T.[RegistratorGUID],"; 
				ПоляИнсерт = ПоляИнсерт + "
				|		[Registrator],
				|		[RegistratorGUID],";
				ПоляИнсертЗначения = ПоляИнсертЗначения + "
				|		T.[Registrator],
				|		T.[RegistratorGUID],";	
			КонецЕсли;
			
			Для Каждого Строка Из тСтруктура Цикл  
				Если Строка.ТипПоля.GUID Тогда
					ПоляАпдейт = ПоляАпдейт + "
					|		[" + Строка.ИмяПоляSQL + "_Table] = T.[" + Строка.ИмяПоляSQL + "_Table],"; 
					ПоляИнсерт = ПоляИнсерт + "
					|		[" + Строка.ИмяПоляSQL + "_Table],";
					ПоляИнсертЗначения = ПоляИнсертЗначения + "
					|		T.[" + Строка.ИмяПоляSQL + "_Table],";  
					Если Строка.Измерение Тогда
						ПоляИндекс = ПоляИндекс + Строка.ИмяПоляSQL + "_Table, "; 
						ПоляДелет = ПоляДелет + " AND ISNULL(" + тИмя + "_tmp." + Строка.ИмяПоляSQL + "_Table, '') = ISNULL(" + тИмя + "." + Строка.ИмяПоляSQL + "_Table, '')";  
						ПоляМержВложЗапрос = ПоляМержВложЗапрос + Строка.ИмяПоляSQL + "_Table AS " + Строка.ИмяПоляSQL + "_Table, "; 
						ПоляМержСвязь = ПоляМержСвязь + " AND ISNULL(ND." + Строка.ИмяПоляSQL + "_Table, '') = ISNULL(T." + Строка.ИмяПоляSQL + "_Table, '')";
						ПоляМержИнсерт = ПоляМержИнсерт + "T." + Строка.ИмяПоляSQL + "_Table, ";
					КонецЕсли;
				КонецЕсли;  
				ПоляИнсерт = ПоляИнсерт + "
				|		[" + Строка.ИмяПоляSQL + "],";
				Если Строка.ТипПоля.Дата Тогда
					ПоляАпдейт = ПоляАпдейт + "
					|		[" + Строка.ИмяПоляSQL + "] = CAST(T.[" + Строка.ИмяПоляSQL + "] AS DATETIME2),"; 
					ПоляИнсертЗначения = ПоляИнсертЗначения + "
					|		CAST(T.[" + Строка.ИмяПоляSQL + "] AS DATETIME2),";	
				Иначе
					ПоляАпдейт = ПоляАпдейт + "
					|		[" + Строка.ИмяПоляSQL + "] = T.[" + Строка.ИмяПоляSQL + "],"; 
					ПоляИнсертЗначения = ПоляИнсертЗначения + "
					|		T.[" + Строка.ИмяПоляSQL + "],";    
				КонецЕсли;
				Если Строка.Измерение Тогда
					ПоляИндекс = ПоляИндекс + Строка.ИмяПоляSQL + ", ";  
					Если Лев(Строка.ТипПоля.Наименование, 6) = "Строка" Тогда
						ПустоеЗначение = "''"; 
					ИначеЕсли Строка.ТипПоля.Дата Тогда
						ПустоеЗначение = "''";
					Иначе
						ПустоеЗначение = "0";
					КонецЕсли;
					
					ПоляДелет = ПоляДелет + " AND ISNULL(" + тИмя + "_tmp." + Строка.ИмяПоляSQL + ", " + ПустоеЗначение + ") = ISNULL(" + тИмя + "." + Строка.ИмяПоляSQL + ", " + ПустоеЗначение + ")";  
					
					
					ПоляМержВложЗапрос = ПоляМержВложЗапрос + Строка.ИмяПоляSQL + " AS " + Строка.ИмяПоляSQL + ", ";  
					ПоляМержСвязь = ПоляМержСвязь + " AND ISNULL(ND." + Строка.ИмяПоляSQL + ", " + ПустоеЗначение + ") = ISNULL(T." + Строка.ИмяПоляSQL + ", " + ПустоеЗначение + ")"; 
					ПоляМержИнсерт = ПоляМержИнсерт + "T." + Строка.ИмяПоляSQL + ", ";
					
				КонецЕсли;	
			КонецЦикла; 
			
			ПоляАпдейт = Лев(ПоляАпдейт, СтрДлина(ПоляАпдейт) - 1);
			ПоляИнсерт = Лев(ПоляИнсерт, СтрДлина(ПоляИнсерт) - 1);
			ПоляИнсертЗначения = Лев(ПоляИнсертЗначения, СтрДлина(ПоляИнсертЗначения) - 1);	
			ПоляИндекс =  Лев(ПоляИндекс, СтрДлина(ПоляИндекс) - 2);  
			ПоляМержВложЗапрос =  Лев(ПоляМержВложЗапрос, СтрДлина(ПоляМержВложЗапрос) - 2);  
			ПоляМержИнсерт =  Лев(ПоляМержИнсерт, СтрДлина(ПоляМержИнсерт) - 2);
			
			Если Выборка.ВидТаблицы = Перечисления.ВидыТаблицSQL.ТабличнаяЧасть Тогда    
				
				СкриптТаблицы = 
				"
				|SET NOCOUNT ON
            	|DECLARE @i int
				|SELECT @i=Count(*) FROM [dbo].[" + тИмя + "_tmp]
				|IF @i=0
				|RETURN";
				
				Если ИспользоватьТаблицыИзменений Тогда 
					СкриптТаблицы = СкриптТаблицы + "
					|MERGE [dbo].[NewDataCheck] O
					|USING (SELECT DISTINCT [Base] AS Base, '" + тИмя + "' AS [Table], 1 AS [Check] FROM [dbo].[" + тИмя + "_tmp]) T
					|ON O.Base = T.Base 
					|	AND O.[Table] = T.[Table] 
					|WHEN MATCHED THEN
					|	UPDATE SET O.[Check] = T.[Check]
					|WHEN NOT MATCHED THEN 
					|	INSERT 
					|		([Base], [Table], [Check]) 
					|	VALUES 
					|		(T.[Base], T.[Table], T.[Check]); 
					|
					|MERGE [dbo].[" + тИмя + "_NewData] ND
					|USING (SELECT DISTINCT [Base] AS Base, [GUID] AS GUID FROM [dbo].[" + тИмя + "_tmp]) T
					|ON ND.Base = T.Base 
					|	AND ND.GUID = T.GUID 
					|WHEN NOT MATCHED THEN 
					|	INSERT 
					|		([Base], [GUID], [TimeInsert]) 
					|	VALUES 
					|		(T.[Base], T.[GUID], CURRENT_TIMESTAMP);
					|"
				КонецЕсли;
				СкриптТаблицы = СкриптТаблицы + "
				|BEGIN TRY
				|	DROP INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp
				|END TRY
				|BEGIN CATCH
				|  IF ERROR_NUMBER() <> 3701
				|  THROW
				|END CATCH 
				|
				|CREATE INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp (Base, GUID)    
				|
				|DELETE FROM " + тИмя + " WHERE EXISTS (SELECT 1 FROM " + тИмя + "_tmp WHERE " + тИмя + ".[GUID] = " + тИмя + "_tmp.[GUID])
				|
				|INSERT INTO " + тИмя + "
				|	([Base],
				|	[GUID],
				|	[StringNumber]," + ПоляИнсерт + ")
				|SELECT 
				|	[Base],
				|	[GUID],
				|	[StringNumber]," + ПоляИнсерт + "
				|FROM [dbo].[" + тИмя + "_tmp]
				|WHERE 
				|	COALESCE([DeletionFlag], 0) <> 1
				|
				|DROP INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp 
				|
				|TRUNCATE TABLE " + тИмя + "_tmp;";	
				
			ИначеЕсли Выборка.ВидТаблицы = Перечисления.ВидыТаблицSQL.Регистр Тогда
				
				СкриптТаблицы = "
				|SET NOCOUNT ON
            	|DECLARE @i int
				|SELECT @i=Count(*) FROM [dbo].[" + тИмя + "_tmp]
				|IF @i=0
				|RETURN
				|";
				Если ИспользоватьТаблицыИзменений Тогда
					СкриптТаблицы = СкриптТаблицы + "
					|MERGE [dbo].[NewDataCheck] O
					|USING (SELECT DISTINCT [Base] AS Base, '" + тИмя + "' AS [Table], 1 AS [Check] FROM [dbo].[" + тИмя + "_tmp]) T
					|ON O.Base = T.Base 
					|	AND O.[Table] = T.[Table] 
					|WHEN MATCHED THEN
					|	UPDATE SET O.[Check] = T.[Check]
					|WHEN NOT MATCHED THEN 
					|	INSERT 
					|		([Base], [Table], [Check]) 
					|	VALUES 
					|		(T.[Base], T.[Table], T.[Check]); 
					|";
					
					Если Выборка.ЕстьРегистратор Тогда
						СкриптТаблицы = СкриптТаблицы + "	
						|MERGE [dbo].[" + тИмя + "_NewData] ND
						|USING (SELECT DISTINCT [Base] AS Base, [RegistratorGUID] AS RegistratorGUID FROM [dbo].[" + тИмя + "_tmp] WHERE DeletionFlag <> 1) T
						|ON ND.Base = T.Base 
						|	AND ND.RegistratorGUID = T.RegistratorGUID 
						|WHEN NOT MATCHED THEN 
						|	INSERT 
						|		([Base], [RegistratorGUID], [TimeInsert]) 
						|	VALUES 
						|		(T.[Base], T.[RegistratorGUID], CURRENT_TIMESTAMP);
						|"; 
					Иначе
						СкриптТаблицы = СкриптТаблицы + "	
						|MERGE [dbo].[" + тИмя + "_NewData] ND
						|USING (SELECT DISTINCT [Base] AS Base" + ?(ПоляМержВложЗапрос = "", "",", ") + ПоляМержВложЗапрос + " FROM [dbo].[" + тИмя + "_tmp] WHERE DeletionFlag <> 1) T
						|ON " + ПоляМержСвязь + " 
						|WHEN NOT MATCHED THEN 
						|	INSERT 
						|		(" + ПоляИндекс + ", [TimeInsert]) 
						|	VALUES 
						|		(" + ПоляМержИнсерт + ", CURRENT_TIMESTAMP);
						|";	
					КонецЕсли;
				КонецЕсли;
				
				СкриптТаблицы = СкриптТаблицы + "
				|BEGIN TRY
				|	DROP INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp
				|END TRY
				|BEGIN CATCH
				|  IF ERROR_NUMBER() <> 3701
				|  THROW
				|END CATCH";
				
				Если Выборка.ЕстьРегистратор Тогда  
					
					СкриптТаблицы = СкриптТаблицы + "
					|
					|CREATE INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp (Base, RegistratorGUID)  
					|
					|DELETE FROM " + тИмя + " WHERE EXISTS (SELECT 1 FROM " + тИмя + "_tmp WHERE " + тИмя + ".[RegistratorGUID] = " + тИмя + "_tmp.[RegistratorGUID])";
				Иначе 
					
					СкриптТаблицы = СкриптТаблицы + "
					|
					|CREATE INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp (" + ПоляИндекс + ")  
					|
					|DELETE FROM " + тИмя + " WHERE EXISTS (SELECT 1 FROM " + тИмя + "_tmp WHERE " + ПоляДелет + ")";	 
					
				КонецЕсли;  
				
				СкриптТаблицы = СкриптТаблицы + "
				| 
				|INSERT INTO " + тИмя + "
				|		([Base]," + ПоляИнсерт + ")
				|SELECT 
				|	[Base]," + ПоляИнсерт + "
				|FROM [dbo].[" + тИмя + "_tmp]
				|WHERE 
				|	COALESCE([DeletionFlag], 0) <> 1
				|
				|DROP INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp  
				|
				|TRUNCATE TABLE " + тИмя + "_tmp;";	    
				
			Иначе   
				
				СкриптТаблицы = "				
				|SET NOCOUNT ON
            	|DECLARE @i int
				|SELECT @i=Count(*) FROM [dbo].[" + тИмя + "_tmp]
				|IF @i=0
				|RETURN 
				|";
				
				Если ИспользоватьТаблицыИзменений Тогда
					СкриптТаблицы = СкриптТаблицы + "
					|MERGE [dbo].[NewDataCheck] O
					|USING (SELECT DISTINCT [Base] AS Base, '" + тИмя + "' AS [Table], 1 AS [Check] FROM [dbo].[" + тИмя + "_tmp]) T
					|ON O.Base = T.Base 
					|	AND O.[Table] = T.[Table] 
					|WHEN MATCHED THEN
					|	UPDATE SET O.[Check] = T.[Check]
					|WHEN NOT MATCHED THEN 
					|	INSERT 
					|		([Base], [Table], [Check]) 
					|	VALUES 
					|		(T.[Base], T.[Table], T.[Check]); 
					|
					|MERGE [dbo].[" + тИмя + "_NewData] ND
					|USING (SELECT DISTINCT [Base] AS Base, [GUID] AS GUID FROM [dbo].[" + тИмя + "_tmp]) T
					|ON ND.Base = T.Base 
					|	AND ND.GUID = T.GUID 
					|WHEN NOT MATCHED THEN 
					|	INSERT 
					|		([Base], [GUID], [TimeInsert]) 
					|	VALUES 
					|		(T.[Base], T.[GUID], CURRENT_TIMESTAMP);
					|";
				КонецЕсли;
				
				СкриптТаблицы = СкриптТаблицы + "
				|BEGIN TRY
				|	DROP INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp
				|END TRY
				|BEGIN CATCH
				|  IF ERROR_NUMBER() <> 3701
				|  THROW
				|END CATCH 
				|
				|CREATE INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp (Base, GUID)
				|
				|MERGE [dbo].[" + тИмя + "] O
				|	USING [dbo].[" + тИмя + "_tmp] T
				|	ON O.Base = T.Base AND O.GUID = T.GUID
				|WHEN MATCHED AND COALESCE(T.DeletionFlag, 0) = 1 THEN
				|	DELETE
				|WHEN MATCHED THEN
				|	UPDATE SET" + ПоляАпдейт + "
				|WHEN NOT MATCHED AND COALESCE(T.DeletionFlag, 0) = 0 THEN 
				|	INSERT
				|		([Base],
				|		[GUID]," + ПоляИнсерт + ")
				|	VALUES 
				|		(T.[Base],
				|		T.[GUID]," + ПоляИнсертЗначения + ");
				|
				|DROP INDEX " + тИмя + "_tmp_IDX1 ON " + тИмя + "_tmp
				|
				|TRUNCATE TABLE " + тИмя + "_tmp;";  
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		Результат = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(СкриптТаблицы);	
		
		Если Результат.ЕстьОшибки Тогда
			
			Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);;
			ЗаписьЖурналаРегистрации("Ошибка при заполнении таблиц", УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
		
		КонецЕсли;
	КонецЦикла;  	
	
КонецПроцедуры

Процедура УдалитьТаблицы(МассивЛогов = Неопределено) Экспорт
	
	//Кибернетика Корыткин А.А. от 27.07.2023. Добавлено условие проверки копирования
	
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицыДляУдаления.ТаблицаSQL КАК ТаблицаSQL,
	|	ТаблицыДляУдаления.ТаблицаSQL.Наименование КАК ТаблицаSQLНаименование,
	|	ЕСТЬNULL(ТаблицыДляУдаления.ТаблицаSQL.ОсновнаяТаблица.Наименование, """") КАК ОсновнаяТаблица,
	|	ТаблицыДляУдаления.ТаблицаSQL.ЕстьВременнаяТаблица КАК ЕстьВременнаяТаблица
	|ИЗ
	|	РегистрСведений.ТаблицыДляУдаления КАК ТаблицыДляУдаления
	|ГДЕ
	|	НЕ ТаблицыДляУдаления.Копировать"; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		тИмяОсновнойТаблицы = Выборка.ОсновнаяТаблица;   
		
		Если ЗначениеЗаполнено(тИмяОсновнойТаблицы) Тогда
			тИмя = тИмяОсновнойТаблицы + "_" + Выборка.ТаблицаSQLНаименование;
		Иначе
			тИмя = Выборка.ТаблицаSQLНаименование;	
		КонецЕсли;
		
		Начало = ТекущаяДатаСеанса(); //14.08.2023 Корыткин А.А.
	
		Коннектор.УдалитьТаблицу(тИмя);
		
		Если Выборка.ЕстьВременнаяТаблица Тогда 
			
			Коннектор.УдалитьТаблицу(тИмя + "_tmp");
			
			Коннектор.УдалитьТаблицу(тИмя + "_NewData");
			
		КонецЕсли;
		
		//14.08.2023 Корыткин А.А.
		Конец = ТекущаяДатаСеанса();   
		
		Если МассивЛогов = Неопределено Тогда
			Обмен.ЗаписьВЖурналОбмена(Начало, Конец, "Удаление группы таблиц " + тИмя);
		Иначе
			МассивЛогов.Добавить(Обмен.ЗаписьВЖурналОбмена(Начало, Конец, "Удаление группы таблиц " + тИмя));
		КонецЕсли;
		///////
		
		МенеджерЗаписи = РегистрыСведений.ТаблицыДляУдаления.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТаблицаSQL = Выборка.ТаблицаSQL; 
		МенеджерЗаписи.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

//Корыткин А.А. 02.11.2023 Добавлены синонимы и пояснения
Процедура ЗаполнитьТехническиеТаблицы() Экспорт
	
	Справочники.Базы.ЗаполнитьТаблицуБазы();
	
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();
	
	//Таблиц периодов расчитанных итогов 
	Команда = 
	"SET ANSI_NULLS ON
	|SET QUOTED_IDENTIFIER ON
	|
	|IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TotalPeriods]') AND type in (N'U'))
	|BEGIN
	|	CREATE TABLE [dbo].[TotalPeriods](
	|		[RgName] [nvarchar](120) NULL,
	|		[Period] [date] NULL
	|	) ON [PRIMARY]		
	|END";  
	
	
	Коннектор.ВыполнитьПроизвольныйDMLЗапрос(Команда);
	
	//Таблица для пересчета итогов
	Команда = 
	"SET ANSI_NULLS ON
	|SET QUOTED_IDENTIFIER ON
	|
	|IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TotalPeriodsChange]') AND type in (N'U'))
	|BEGIN
	|	CREATE TABLE [dbo].[TotalPeriodsChange](
	|		[Base] [nvarchar](20) NULL,
	|		[RgName] [nvarchar](120) NULL,
	|		[Period] [date] NULL
	|	) ON [PRIMARY]		
	|END";  
		
	Коннектор.ВыполнитьПроизвольныйDMLЗапрос(Команда); 
	
КонецПроцедуры    

Процедура ОчиститьТаблицыNewData() Экспорт
	
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиныйФорматДанных.Ссылка КАК Таблица,
	|	ЕдиныйФорматДанных.Наименование КАК Наименование,
	|	ЕдиныйФорматДанных.ВидТаблицы КАК ВидТаблицы,
	|	ЕдиныйФорматДанных.ЕстьВременнаяТаблица КАК ЕстьВременнаяТаблица,
	|	ЕдиныйФорматДанных.ЭтоВременнаяТаблица КАК ЭтоВременнаяТаблица,
	|	ЕдиныйФорматДанных.ОсновнаяТаблица КАК ОсновнаяТаблица,
	|	ЕдиныйФорматДанных.ЕстьРегистратор КАК ЕстьРегистратор
	|ИЗ
	|	Справочник.ЕдиныйФорматДанных КАК ЕдиныйФорматДанных
	|ГДЕ
	|	НЕ ЕдиныйФорматДанных.ПометкаУдаления
	|	И ЕдиныйФорматДанных.ЕстьВременнаяТаблица
	|	И НЕ ЕдиныйФорматДанных.НеЗаполнятьАвтоматически
	|	И ЕдиныйФорматДанных.ВидТаблицы <> ЗНАЧЕНИЕ(Перечисление.ВидыТаблицSQL.Перечисление)";  
	
	Выборка = Запрос.Выполнить().Выбрать();  
	
	ЗапросБазы = Новый Запрос;
	ЗапросБазы.Текст = 
	"ВЫБРАТЬ
	|	Базы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Базы КАК Базы
	|ГДЕ
	|	НЕ Базы.ПометкаУдаления"; 
	
	ВыборкаБазы = ЗапросБазы.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ОсновнаяТаблица) Тогда
			тИмя = СокрЛП(Выборка.ОсновнаяТаблица) + "_" + СокрЛП(Выборка.Наименование);
		Иначе
			тИмя = СокрЛП(Выборка.Наименование);	
		КонецЕсли;
		
		ВыборкаБазы.Сбросить();
		
		Пока ВыборкаБазы.Следующий() Цикл
			
			Команда = 
			"DECLARE @Check Bit 
			|
			|SELECT @Check = [Check] FROM NewDataCheck WHERE [Base] = '" + ВыборкаБазы.Наименование + "' AND [Table] = '" + тИмя + "'
			|
			|IF @Check = 0
			|	DELETE FROM " + тИмя + "_NewData WHERE [Base] = '" + ВыборкаБазы.Наименование + "'"; 
			
			Коннектор.ВыполнитьПроизвольныйЗапрос(Команда);	
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры

//Полный пересчет
Процедура ПересчитатьИтоги() Экспорт
	
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();

	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИтогиИзмерение КАК ИтогиИзмерение,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИтогиРесурс КАК ИтогиРесурс,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИмяПоляSQL КАК ИмяПоляSQL,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ТипПоля.ИмяТипаSQL КАК ТипПоля,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ТипПоля.GUID КАК GUID,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.Ссылка.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ЕдиныйФорматДанных.СтруктураТаблицыSQL КАК ЕдиныйФорматДанныхСтруктураТаблицыSQL
	               |ГДЕ
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.Ссылка.ЕстьТаблицаИтогов
	               |	И (ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИтогиИзмерение
	               |			ИЛИ ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИтогиРесурс)
	               |ИТОГИ ПО
	               |	Наименование";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ВыборкаТаблица = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Наименование");
		
		Пока ВыборкаТаблица.Следующий() Цикл
			
			Выборка = ВыборкаТаблица.Выбрать();
			
			МассивРесурсов = Новый Массив;
			МассивИзмерений = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
			
				Если Выборка.ИтогиРесурс Тогда
				    Ресурс = Новый Структура;
					Ресурс.Вставить("ИмяПоляSQL", Выборка.ИмяПоляSQL);
					Ресурс.Вставить("ТипПоляSQL", Выборка.ТипПоля);
					МассивРесурсов.Добавить(Ресурс);
				ИначеЕсли Выборка.ИтогиИзмерение Тогда	
				    Измерение = Новый Структура;
					Измерение.Вставить("ИмяПоляSQL", Выборка.ИмяПоляSQL);
					Измерение.Вставить("ТипПоляSQL", Выборка.ТипПоля);
					Измерение.Вставить("ГУИД", Выборка.GUID);
					
					МассивИзмерений.Добавить(Измерение);

				КонецЕсли; 
				
			
			КонецЦикла;
			
			ИмяТаблицы = ВыборкаТаблица.Наименование;
			ИмяТаблицыИтогов =  ВыборкаТаблица.Наименование + "_Totals";
			
			//Таблиц периода расчета итогов 
			СкриптТаблицы = 
			"SET ANSI_NULLS ON
			|SET QUOTED_IDENTIFIER ON
			|
		//	|IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].["+ ИмяТаблицыИтогов + "]') AND type in (N'U'))
		  	|IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + ИмяТаблицыИтогов + "]') AND type in (N'U'))
			|BEGIN
			|	DROP TABLE " + ИмяТаблицыИтогов + " 		
			|END 		
	
			|	CREATE TABLE [dbo].[" + ИмяТаблицыИтогов +"]( 
			|		[Period] [date] NULL,
			|		[Base] [nvarchar](20) NULL"; 
			                                              			
			Для каждого Измерение Из МассивИзмерений Цикл
				//Если Измерение.ГУИД Тогда
				//	СкриптТаблицы = СкриптТаблицы + ",
				//	|	[" + СокрЛП(Измерение.ИмяПоляSQL) + "_Table] [nvarchar](100) NULL";	
				//КонецЕсли;
				СкриптТаблицы = СкриптТаблицы + ",
							|	[" + СокрЛП(Измерение.ИмяПоляSQL) + "] " + Измерение.ТипПоляSQL + " NULL";	
			    			
			КонецЦикла;
						
            Для каждого Ресурс Из МассивРесурсов Цикл
				СкриптТаблицы = СкриптТаблицы + ",
						|	[" + СокрЛП(Ресурс.ИмяПоляSQL) + "] " + Ресурс.ТипПоляSQL + " NULL";			    			
			КонецЦикла;
			
						
			СкриптТаблицы = СкриптТаблицы + "
			|	) ON [PRIMARY]		
			//|END";  
			|";			
						
			Коннектор.ВыполнитьПроизвольныйЗапрос(СкриптТаблицы);
			
			
			СкриптИндексов = "IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + ИмяТаблицыИтогов + "]') AND name = N'" + ИмяТаблицыИтогов + "_IDX1')
				|CREATE CLUSTERED INDEX [" + ИмяТаблицыИтогов + "_IDX1] ON [dbo].[" + ИмяТаблицыИтогов + "]
				|(  
				|	[Period],
				|	[Base]	
				|)ON [PRIMARY]"; 
			
						
			Коннектор.ВыполнитьПроизвольныйЗапрос(СкриптИндексов);
						
			//Все даты
			
			СкриптПолученияДат = "WITH MonthGenerator AS (
	    		|SELECT EOMONTH(MIN(Period)) AS Period
	   			|FROM " + ИмяТаблицы + "
	   			| UNION ALL
				|SELECT EOMONTH(DATEADD(MONTH, 1, Period))
	   			|FROM MonthGenerator
	    		|WHERE Period < EOMONTH(GETDATE()))
				|,";
			
			
			//Комбинация всех измерений
			
			СкриптКомбинацииИзмерений = "DistinctStockDimensions AS (
    		|SELECT DISTINCT
			|Base";
			
			СкриптИзмерений = "";
			
			Для каждого Измерение Из МассивИзмерений Цикл
			
				СкриптИзмерений = СкриптИзмерений + ",
				|" + Измерение.ИмяПоляSQL;
				
			КонецЦикла; 
			
			СкриптРесурсов = "";
			
			Для каждого Ресурс Из МассивРесурсов Цикл
			
				СкриптРесурсов = СкриптРесурсов + ",
				|" + Ресурс.ИмяПоляSQL;
				
			КонецЦикла;
			
			СкриптКомбинацииИзмерений = СкриптКомбинацииИзмерений + СкриптИзмерений;
			
			СкриптКомбинацииИзмерений = СкриптКомбинацииИзмерений + "
			|   FROM " + ИмяТаблицы + "),"; 
			
			СкриптСводныхОборотов = "
			|
			|StockMovements AS (
    		|SELECT 
        	|EOMONTH(Period) AS Period,
        	|Base";
			
			//Сводные обороты
			СкриптСводныхОборотов = СкриптСводныхОборотов + СкриптИзмерений;
			
						
			Для каждого Ресурс Из МассивРесурсов Цикл
			
				СкриптСводныхОборотов = СкриптСводныхОборотов + ",
				|SUM(CASE 
                |WHEN TypeOfMovement IN ('Приход', 'Receipt') THEN " + Ресурс.ИмяПоляSQL + "
                |WHEN TypeOfMovement IN ('Расход', 'Expense') THEN -" + Ресурс.ИмяПоляSQL + " 
                |ELSE 0 
            	|END) AS " + Ресурс.ИмяПоляSQL;
				
			КонецЦикла;
			
			СкриптСводныхОборотов = СкриптСводныхОборотов + "
			 |FROM " + ИмяТаблицы + "
			 | GROUP BY
			 | EOMONTH(Period),
			 | Base";
			 
			 
		 	СкриптСводныхОборотов = СкриптСводныхОборотов + СкриптИзмерений + "
			|),";
			
			//Все обороты за все месяцы, включая нули
			
			СкриптВсехЗаписей = "
			|
			|CombinedData AS (
    		|SELECT 
   			|    g.Period,
			|	 d.Base";
			
			Для каждого Измерение Из МассивИзмерений Цикл
				//Если Измерение.ГУИД Тогда
				//	СкриптТаблицы = СкриптТаблицы + ",
				//	"|	d." + СокрЛП(Измерение.ИмяПоляSQL; + "_Table";	
				//КонецЕсли;
				
				СкриптВсехЗаписей = СкриптВсехЗаписей + ",
							|	d." + Измерение.ИмяПоляSQL;	
			    			
			КонецЦикла;
						
            Для каждого Ресурс Из МассивРесурсов Цикл
				СкриптВсехЗаписей = СкриптВсехЗаписей + ",
							|	 COALESCE(m." + Ресурс.ИмяПоляSQL + ", 0) AS " + Ресурс.ИмяПоляSQL;			    			
			КонецЦикла;

			
			
			СкриптВсехЗаписей = СкриптВсехЗаписей + "
			|FROM MonthGenerator g
    		|CROSS JOIN DistinctStockDimensions d
    		|LEFT JOIN StockMovements m
    		|ON g.Period = m.Period
			|AND d.Base = m.Base";
			
			Для каждого Измерение Из МассивИзмерений Цикл
			
				СкриптВсехЗаписей = СкриптВсехЗаписей + "
				|AND ISNULL(d." + Измерение.ИмяПоляSQL + ", 'Unknown') = ISNULL(m." + Измерение.ИмяПоляSQL+ ", 'Unknown')";
				
			КонецЦикла;
			СкриптВсехЗаписей =  СкриптВсехЗаписей + "),";
			
			
			//Расчет остатков
			
			СкриптОстатков = "
			|
			|RunningTotals AS (
		    |SELECT 
		    |    Period,
		    |    Base";
			
			СкриптОстатков = СкриптОстатков + СкриптИзмерений;
			
			Для каждого Ресурс Из МассивРесурсов Цикл
			
				СкриптОстатков = СкриптОстатков + ",
				|	SUM(" + Ресурс.ИмяПоляSQL + ") OVER (
		        |    PARTITION BY Base " + СкриптИзмерений + "
		        |    ORDER BY Period
		        |) AS " + Ресурс.ИмяПоляSQL;
				
			КонецЦикла;

			СкриптОстатков = СкриптОстатков + "
		    |FROM CombinedData
			|)"; 
			
			//Заполнение таблицы Остатков
			
			СкриптЗаписиОстатков = "
			|
			|INSERT INTO " + ИмяТаблицыИтогов + "( 
			|Period,
			|Base" + СкриптИзмерений + СкриптРесурсов + ")
			|SELECT
			|Period,
			|Base" + СкриптИзмерений + СкриптРесурсов + "
			|FROM RunningTotals
			|WHERE NOT (";
			
			Счетчик = 0;
			Для каждого Ресурс Из МассивРесурсов Цикл
			
				СкриптЗаписиОстатков = СкриптЗаписиОстатков + "
				 |"+ ?(Счетчик = 0, "", " AND ") + Ресурс.ИмяПоляSQL + " = 0";
				Счетчик = Счетчик + 1;
			КонецЦикла;
			
			СкриптЗаписиОстатков = СкриптЗаписиОстатков + ") 
			|OPTION (MAXRECURSION 0)";
			
			СкриптОкончания = "
			|DELETE FROM TotalPeriodsChange
			|WHERE RgName = '" + ИмяТаблицы + "'
			|
			|DELETE FROM TotalPeriods
			|WHERE RgName = '" + ИмяТаблицы + "'
			|		
			|INSERT INTO TotalPeriods (Period, RGName)
			|SELECT Max(Period), '" + ИмяТаблицы + "' 
			|FROM " + ИмяТаблицыИтогов; 
			
			 Команда = СкриптПолученияДат +
			 СкриптКомбинацииИзмерений + СкриптСводныхОборотов + 
			 СкриптВсехЗаписей + СкриптОстатков + СкриптЗаписиОстатков + СкриптОкончания;
			
			Коннектор.ВыполнитьПроизвольныйЗапрос(Команда);

		КонецЦикла;
		
	КонецЕсли;
	
	
	
	
КонецПроцедуры

//Пересчет по необходимости
Процедура РассчитатьИтоги() Экспорт

	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();

	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИтогиИзмерение КАК ИтогиИзмерение,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИтогиРесурс КАК ИтогиРесурс,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИмяПоляSQL КАК ИмяПоляSQL,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ТипПоля.ИмяТипаSQL КАК ТипПоля,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ТипПоля.GUID КАК GUID,
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.Ссылка.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ЕдиныйФорматДанных.СтруктураТаблицыSQL КАК ЕдиныйФорматДанныхСтруктураТаблицыSQL
	               |ГДЕ
	               |	ЕдиныйФорматДанныхСтруктураТаблицыSQL.Ссылка.ЕстьТаблицаИтогов
	               |	И (ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИтогиИзмерение
	               |			ИЛИ ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИтогиРесурс)
	               |ИТОГИ ПО
	               |	Наименование";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ВыборкаТаблица = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Наименование");
		
		Пока ВыборкаТаблица.Следующий() Цикл
			
			Выборка = ВыборкаТаблица.Выбрать();
			
			МассивРесурсов = Новый Массив;
			МассивИзмерений = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
			
				Если Выборка.ИтогиРесурс Тогда
				    Ресурс = Новый Структура;
					Ресурс.Вставить("ИмяПоляSQL", Выборка.ИмяПоляSQL);
					Ресурс.Вставить("ТипПоляSQL", Выборка.ТипПоля);
					МассивРесурсов.Добавить(Ресурс);
				ИначеЕсли Выборка.ИтогиИзмерение Тогда	
				    Измерение = Новый Структура;
					Измерение.Вставить("ИмяПоляSQL", Выборка.ИмяПоляSQL);
					Измерение.Вставить("ТипПоляSQL", Выборка.ТипПоля);
					Измерение.Вставить("ГУИД", Выборка.GUID);
					
					МассивИзмерений.Добавить(Измерение);

				КонецЕсли; 
				
			
			КонецЦикла;
			
			ИмяТаблицы = ВыборкаТаблица.Наименование;
			ИмяТаблицыИтогов =  ВыборкаТаблица.Наименование + "_Totals";
			
			//Таблиц периода расчета итогов 
			СкриптТаблицы = 
			"SET ANSI_NULLS ON
			|SET QUOTED_IDENTIFIER ON
			|
		//	|IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].["+ ИмяТаблицыИтогов + "]') AND type in (N'U'))
		  	|IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + ИмяТаблицыИтогов + "]') AND type in (N'U'))
			|BEGIN
			|	CREATE TABLE [dbo].[" + ИмяТаблицыИтогов +"]( 
			|		[Period] [date] NULL,
			|		[Base] [nvarchar](20) NULL"; 
			                                              			
			Для каждого Измерение Из МассивИзмерений Цикл
				//Если Измерение.ГУИД Тогда
				//	СкриптТаблицы = СкриптТаблицы + ",
				//	|	[" + СокрЛП(Измерение.ИмяПоляSQL) + "_Table] [nvarchar](100) NULL";	
				//КонецЕсли;
				СкриптТаблицы = СкриптТаблицы + ",
							|	[" + СокрЛП(Измерение.ИмяПоляSQL) + "] " + Измерение.ТипПоляSQL + " NULL";	
			    			
			КонецЦикла;
						
            Для каждого Ресурс Из МассивРесурсов Цикл
				СкриптТаблицы = СкриптТаблицы + ",
						|	[" + СокрЛП(Ресурс.ИмяПоляSQL) + "] " + Ресурс.ТипПоляSQL + " NULL";			    			
			КонецЦикла;
			
						
			СкриптТаблицы = СкриптТаблицы + "
			|	) ON [PRIMARY]		
			|END  
			|";			
						
			Коннектор.ВыполнитьПроизвольныйЗапрос(СкриптТаблицы);
 
			
			СкриптИндексов = "IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + ИмяТаблицыИтогов + "]') AND name = N'" + ИмяТаблицыИтогов + "_IDX1')
				|CREATE CLUSTERED INDEX [" + ИмяТаблицыИтогов + "_IDX1] ON [dbo].[" + ИмяТаблицыИтогов + "]
				|(  
				|	[Period],
				|	[Base]	
				|)ON [PRIMARY]"; 
			
			Коннектор.ВыполнитьПроизвольныйЗапрос(СкриптИндексов);
			
					
			//Получение всех дат, начиная с даты из таблицы пересчета
			
			СкриптПолученияДат = "WITH MonthGenerator AS 
			|(SELECT EOMONTH(MIN(Period),-1) AS Period
	   		|	FROM TotalPeriodsChange 
			|	Where RGName = '" + ИмяТаблицы + "'
			|	Having MIN(Period) IS NOT NULL
	   		|	 UNION ALL
			|	SELECT EOMONTH(DATEADD(MONTH, 1, Period))
	   		|	FROM MonthGenerator
	    	|	WHERE Period < EOMONTH(GETDATE()))
			|,";
			
			
			//общие скрипты списков измерений и ресурсов
			СкриптИзмерений = "";
			
			Для каждого Измерение Из МассивИзмерений Цикл
			
				СкриптИзмерений = СкриптИзмерений + ",
				|" + Измерение.ИмяПоляSQL;
				
			КонецЦикла; 
			
			СкриптРесурсов = "";
			
			Для каждого Ресурс Из МассивРесурсов Цикл
			
				СкриптРесурсов = СкриптРесурсов + ",
				|" + Ресурс.ИмяПоляSQL;
				
			КонецЦикла;
			//
			
			
					//Сводные обороты

			СкриптСводныхОборотов = "
			|
			|StockMovements AS (
    		|SELECT 
        	|EOMONTH(SM.Period) AS Period,
        	|SM.Base";
			
			СкриптСводныхОборотов = СкриптСводныхОборотов + СкриптИзмерений;
			
						
			Для каждого Ресурс Из МассивРесурсов Цикл
			
				СкриптСводныхОборотов = СкриптСводныхОборотов + ",
				|SUM(CASE 
                |WHEN TypeOfMovement IN ('Приход', 'Receipt') THEN " + Ресурс.ИмяПоляSQL + "
                |WHEN TypeOfMovement IN ('Расход', 'Expense') THEN -" + Ресурс.ИмяПоляSQL + " 
                |ELSE 0 
            	|END) AS " + Ресурс.ИмяПоляSQL;
				
			КонецЦикла;
			
			СкриптСводныхОборотов = СкриптСводныхОборотов + "
			 |FROM " + ИмяТаблицы + " SM
			 |INNER JOIN TotalPeriodsChange T ON SM.Base = T.Base 
			 |WHERE SM.Period >  EOMONTH(T.Period, -1)
			 | GROUP BY
			 | EOMONTH(SM.Period),
			 | SM.Base";
			 
			 
		 	СкриптСводныхОборотов = СкриптСводныхОборотов + СкриптИзмерений + "
			|UNION
			|
			|SELECT 
        	|EOMONTH(TM.Period),
        	|TM.Base" + СкриптИзмерений + СкриптРесурсов + " 
			|FROM " + ИмяТаблицы + "_Totals TM
			|INNER JOIN TotalPeriodsChange T ON TM.Base = T.Base 
			|WHERE TM.Period = EOMONTH(T.Period, -1)
		//    |GROUP BY
		//|EOMONTH(TM.Period),
		//|TM.Base" + СкриптИзмерений + "
			|),";

		
			//Комбинация всех измерений из таблицы сводных оборотов
			
			СкриптКомбинацииИзмерений = "DistinctStockDimensions AS (
    		|SELECT DISTINCT
			|Base" + СкриптИзмерений + "
			|   FROM StockMovements D),"; 
			
				
			//Все обороты за все месяцы, включая нули
			
			


			СкриптВсехЗаписей = "
			|
			|CombinedData AS (
    		|SELECT 
   			|    g.Period,
			|	 d.Base";
			
			Для каждого Измерение Из МассивИзмерений Цикл
				//Если Измерение.ГУИД Тогда
				//	СкриптТаблицы = СкриптТаблицы + ",
				//	"|	d." + СокрЛП(Измерение.ИмяПоляSQL; + "_Table";	
				//КонецЕсли;
				
				СкриптВсехЗаписей = СкриптВсехЗаписей + ",
							|	d." + Измерение.ИмяПоляSQL;	
			    			
			КонецЦикла;
						
            Для каждого Ресурс Из МассивРесурсов Цикл
				СкриптВсехЗаписей = СкриптВсехЗаписей + ",
							|	 COALESCE(m." + Ресурс.ИмяПоляSQL + ", 0) AS " + Ресурс.ИмяПоляSQL;			    			
			КонецЦикла;

			
			
			СкриптВсехЗаписей = СкриптВсехЗаписей + "
					
			|FROM DistinctStockDimensions d
			|INNER JOIN TotalPeriodsChange TPC ON TPC.RgName = '" + ИмяТаблицы + "'
			|AND TPC.Base = d.Base
			|INNER JOIN MonthGenerator g ON G.Period >= EOMONTH(TPC.Period, -1) 
			|LEFT JOIN StockMovements m
			|ON g.Period = m.Period
			|AND d.Base = m.Base";
			
			
			Для каждого Измерение Из МассивИзмерений Цикл
			
				СкриптВсехЗаписей = СкриптВсехЗаписей + "
				|AND ISNULL(d." + Измерение.ИмяПоляSQL + ", 'Unknown') = ISNULL(m." + Измерение.ИмяПоляSQL+ ", 'Unknown')";
				
			КонецЦикла;
			СкриптВсехЗаписей =  СкриптВсехЗаписей + "),";
			
			
			//Расчет остатков
			
			СкриптОстатков = "
			|
			|RunningTotals AS (
		    |SELECT 
		    |    Period,
		    |    Base";
			
			СкриптОстатков = СкриптОстатков + СкриптИзмерений;
			
			Для каждого Ресурс Из МассивРесурсов Цикл
			
				СкриптОстатков = СкриптОстатков + ",
				|	SUM(" + Ресурс.ИмяПоляSQL + ") OVER (
		        |    PARTITION BY Base " + СкриптИзмерений + "
		        |    ORDER BY Period
		        |) AS " + Ресурс.ИмяПоляSQL;
				
			КонецЦикла;

			СкриптОстатков = СкриптОстатков + "
		    |FROM CombinedData
			|)"; 
			
			//Заполнение таблицы Остатков
			
			СкриптЗаписиВТОстатков = "
			|SELECT * INTO #TempTable From RunningTotals
			|OPTION (MAXRECURSION 0)";
			
			СкриптУдаленияПересчитанныхИтогов = "
			|
			|DELETE W FROM " + ИмяТаблицы + "_Totals W
			|INNER JOIN TotalPeriodsChange TP ON TP.Base = W.Base 
			|WHERE W.Period >= EOMONTH(TP.Period,-1)
            |";
			
			СкриптЗаписиОстатков = "INSERT INTO " + ИмяТаблицы + "_Totals( 
			|Period,
			|Base" + СкриптИзмерений + СкриптРесурсов + ")
			|SELECT
			|Period,
			|Base" + СкриптИзмерений + СкриптРесурсов + "
			|FROM #TempTable
			|WHERE NOT (";
			
			Счетчик = 0;
			Для каждого Ресурс Из МассивРесурсов Цикл
			
				СкриптЗаписиОстатков = СкриптЗаписиОстатков + "
				 |"+ ?(Счетчик = 0, "", " AND ") + Ресурс.ИмяПоляSQL + " = 0";
				Счетчик = Счетчик + 1;
			КонецЦикла;  
			
			СкриптЗаписиОстатков = СкриптЗаписиОстатков + ")";

			СкриптОкончания = "
			|Drop TABLE #tempTable
			|
			|DELETE FROM TotalPeriodsChange
			|WHERE RgName = '" + ИмяТаблицы + "'
			|
			|DELETE FROM TotalPeriods
			|WHERE RgName = '" + ИмяТаблицы + "'
			|		
			|INSERT INTO TotalPeriods (Period, RGName)
			|SELECT Max(Period), '" + ИмяТаблицы + "' 
			|FROM " + ИмяТаблицыИтогов; 		
			
			 ИтоговыйСкрипт = СкриптПолученияДат +
			 СкриптСводныхОборотов +  СкриптКомбинацииИзмерений + 
			 СкриптВсехЗаписей + СкриптОстатков + СкриптЗаписиВТОстатков +
			 СкриптУдаленияПересчитанныхИтогов + СкриптЗаписиОстатков + СкриптОкончания;
			
			 Коннектор.ВыполнитьПроизвольныйЗапрос(ИтоговыйСкрипт);

		КонецЦикла;
		
	КонецЕсли;
	
	
	
	
КонецПроцедуры

Процедура ЗарегистрироватьОбъектыДляПовторнойВыгрузки(Таблица) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыБазКВыгрузке.Ссылка КАК Ссылка,
		|	ОбъектыБазКВыгрузке.Владелец КАК Владелец
		|ИЗ
		|	Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
		|ГДЕ
		|	ОбъектыБазКВыгрузке.ОбъектЕдиногоФормата = &Таблица
		|	И ОбъектыБазКВыгрузке.Выгружать
		|	И НЕ ОбъектыБазКВыгрузке.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		
		ПовторнаяВыгрузка = РегистрыСведений.ЗаданияНаПовторнуюВыгрузку.СоздатьМенеджерЗаписи();
		ПовторнаяВыгрузка.БазаДанных = ВыборкаДетальныеЗаписи.Владелец;
		ПовторнаяВыгрузка.ОбъектКВыгрузке = ВыборкаДетальныеЗаписи.Ссылка;
		ПовторнаяВыгрузка.Записать();
	КонецЦикла;

КонецПроцедуры
#КонецОбласти