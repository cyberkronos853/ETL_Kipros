 
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если ТекущийОбъект.Организации.Количество() Тогда
		Для Каждого ТекСтрока Из  ТекущийОбъект.Организации Цикл
			ОрганизацииСписок.Добавить(ТекСтрока.Организация);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаРеквизиты = Метаданные.Документы.ПрочиеПоказателиMDM.ТабличныеЧасти.ПрочиеПоказатели.Реквизиты;
	
	Для Каждого СтрокаМета Из МетаРеквизиты Цикл 
		
		ЭлементСписка = СписокКолонокТабличнойЧасти.Добавить(СтрокаМета.Имя,СтрокаМета.Синоним);
		Элементы.КолонкиПоказателейИмяКолонки.СписокВыбора.Добавить(СтрокаМета.Имя,СтрокаМета.Синоним);
		
	КонецЦикла;
	
	РедактироватьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьДерево(ДеревоПоказателей.ПолучитьЭлементы());
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбъектБазыДанных = Объект.Ссылка.ПолучитьОбъект();
	
	Если  ОбъектБазыДанных =Неопределено Или ОбъектБазыДанных.НомерВерсии <> Объект.НомерВерсии  Тогда 
		ИмеютсяИзменения = Истина; 
	Иначе
		Если Модифицированность И ОбъектБазыДанных.НомерВерсии = Объект.НомерВерсии Тогда 
			ТекущийОбъект.НомерВерсии = ТекущийОбъект.НомерВерсии +1;
			ИмеютсяИзменения = Истина; 
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры


&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	Если ИмеютсяИзменения Тогда 
		
		Для Каждого Организация Из Объект.Организации Цикл 
			
			Набор = РегистрыСведений.ОбновленияПрочихПоказателей.СоздатьНаборЗаписей();
			Набор.Отбор.ВидПрочегоПоказателя.Установить(Объект.Ссылка);
			Набор.Отбор.Организация.Установить(Организация.Организация); 
			ЗаписьНабора = Набор.Добавить();
			ЗаписьНабора.ВидПрочегоПоказателя = Объект.Ссылка;
			ЗаписьНабора.Организация = Организация.Организация; 
			ЗаписьНабора.НомерВерсии = Объект.НомерВерсии;
			Набор.Записать(Истина);
		КонецЦикла;
		
		
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура СтрокиПоказателейСтрокаПоказателяПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.СтрокиПоказателей.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущийДанные.Показатель) Тогда
		ТекущийДанные.КодПоказателя = ПолучитьКодПоказателя(ТекущийДанные.Показатель);
		ТекущийДанные.УровеньИерархии = ПолучитьУровеньИерархииПоказателя(ТекущийДанные.Показатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодПоказателя(Показатель)
	
	Возврат Показатель.Код;
	
КонецФункции // ПолучитьКодПоказателя() 

&НаСервереБезКонтекста
Функция ПолучитьУровеньИерархииПоказателя(Показатель)
	
	Возврат Показатель.УровеньИерархии;
	
КонецФункции // ПолучитьКодПоказателя()



&НаСервере
Процедура ЗаполнитьПодчиненныеНаСервере(Показатель)
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязиПрочихПоказателей.Ссылка КАК Ссылка,
	|	СвязиПрочихПоказателей.Владелец КАК Владелец,
	|	СвязиПрочихПоказателей.Владелец.УровеньИерархии КАК УровеньИерархии
	|ПОМЕСТИТЬ ВТ_СвязиПоказателей
	|ИЗ
	|	Справочник.СвязиПрочихПоказателей КАК СвязиПрочихПоказателей
	|ГДЕ
	|	НЕ СвязиПрочихПоказателей.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязиПрочихПоказателей.Ссылка,
	|	СвязиПрочихПоказателей.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	INDПрочиеПоказатели.Ссылка КАК Показатель,
	|	INDПрочиеПоказатели.Код КАК КодПоказателя,
	|	ВТ_СвязиПоказателей.Ссылка КАК СвязиПоказателя
	|ИЗ
	|	Справочник.INDПрочиеПоказатели КАК INDПрочиеПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвязиПоказателей КАК ВТ_СвязиПоказателей
	|		ПО (ВТ_СвязиПоказателей.Владелец = INDПрочиеПоказатели.Ссылка)
	|ГДЕ
	|	INDПрочиеПоказатели.Ссылка В ИЕРАРХИИ(&Показатель)";
	
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НайденныеСтрока = Объект.СтрокиПоказателей.НайтиСтроки(Новый Структура("Показатель",ВыборкаДетальныеЗаписи.Показатель));
		Если НайденныеСтрока.Количество() Тогда
			Для Каждого СтрокаПоказателя Из НайденныеСтрока Цикл 
				ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ВыборкаДетальныеЗаписи);
			КонецЦикла;  
		Иначе
			
		ЗаполнитьЗначенияСвойств(Объект.СтрокиПоказателей.Добавить(), ВыборкаДетальныеЗаписи);
			//Продолжить;
		КонецЕсли;
		
		
	КонецЦикла; 
	
	ОбновитьТаблицуКолонок();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодчиненные(Команда)
	
	
	//ТекущийДанные = Элементы.СтрокиПоказателей.ТекущиеДанные;
	
	
	ТекущийДанные = Элементы.СтрокиПоказателей.ТекущиеДанные;
	
	
	Если ЗначениеЗаполнено(ТекущийДанные.Показатель) Тогда
		ЗаполнитьПодчиненныеНаСервере(ТекущийДанные.Показатель);
	КонецЕсли; 
	
	РедактироватьДерево();
	РазвернутьДерево(ДеревоПоказателей.ПолучитьЭлементы());
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПоказателейИмяКолонкиПриИзменении(Элемент)
	
	ТекДанные = Элементы.КолонкиПоказателей.ТекущиеДанные;
	ПредставлениеКолонки = СписокКолонокТабличнойЧасти.НайтиПоЗначению(ТекДанные.ИмяКолонки);
	Если ПредставлениеКолонки <> Неопределено И ЗначениеЗаполнено(ПредставлениеКолонки.Представление) Тогда
		ТекДанные.СинонимКолонки = ПредставлениеКолонки.Представление;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура РедактироватьДерево()
	
	Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");
	Дерево.Строки.Очистить();
	МассивПоказателей = Объект.СтрокиПоказателей.Выгрузить(,"Показатель");
	МассивПоказателей.Свернуть("Показатель");
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	INDПрочиеПоказатели.Ссылка КАК Показатель,
	               |	INDПрочиеПоказатели.Родитель КАК Родитель,
	               |	INDПрочиеПоказатели.Код КАК КодПоказателя
	               |ИЗ
	               |	Справочник.INDПрочиеПоказатели КАК INDПрочиеПоказатели
	               |ГДЕ
	               |	INDПрочиеПоказатели.Ссылка В(&МассивПоказателей)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	INDПрочиеПоказатели.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = Объект.СтрокиПоказателей.НайтиСтроки(Новый Структура("Показатель",Выборка.Родитель));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Выборка);
		Иначе
			Пока СтрокаДерева.Показатель<>Выборка.Родитель Цикл
				СтрокаДерева=СтрокаДерева.Родитель;
			КонецЦикла;
			СтрокаДерева				= СтрокаДерева.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Выборка);
		КонецЕсли;
		
		//ЗаполнитьСтрокуВДерево(СтрокаДерева,Выборка.КодПоказателя,ТЗ);
		
	КонецЦикла;	 
	
	
	
	
	
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоПоказателей");
	
	
КонецПроцедуры // ОбновитьДерево()

&НаКлиенте
Процедура РазвернутьДерево(КоллекцияЭлементовДерева)
	
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл 
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.ДеревоПоказателей.Развернуть(ИдентификаторСтроки);
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы(); 
		Если ПодчиненныеСтроки.Количество() Тогда
			 РазвернутьДерево(ПодчиненныеСтроки);
		КонецЕсли;
		
		
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейПриИзменении(Элемент)
	РазвернутьДерево(ДеревоПоказателей.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииСписокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИнтеграцияКлиент.ПолучитьСписокЭлементовСправочника("Организации",,,ОрганизацииСписок);
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработатьЭлементыСправочника" Тогда
		Если ТипЗнч(Источник) = Тип("СписокЗначений") И Источник.Количество() Тогда
			Если  ТипЗнч(Источник[0].Значение)= Тип("СправочникСсылка.Организации") Тогда
				ОрганизацииСписок = Источник;
				Объект.Организации.Очистить();
				Для Каждого Организация Из ОрганизацииСписок Цикл
					ОрганизацииТЧ = Объект.Организации.Добавить();
					ОрганизацииТЧ.Организация = Организация.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиПоказателейСвязиПоказателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	ТекДанные = Элементы.СтрокиПоказателей.ТекущиеДанные;
	Показатель = ТекДанные.Показатель;
	Отбор = Новый Структура("Отбор",Новый Структура("Владелец",Показатель));
	ОткрытьФорму("Справочник.СвязиПрочихПоказателей.ФормаВыбора",Отбор,Элемент); 
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция СтрокиПоказателейСтрокаПоказателяОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвязиПрочихПоказателей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СвязиПрочихПоказателей КАК СвязиПрочихПоказателей
		|ГДЕ
		|	НЕ СвязиПрочихПоказателей.ПометкаУдаления
		|	И СвязиПрочихПоказателей.Владелец = &ВыбранноеЗначение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("ВыбранноеЗначение", ВыбранноеЗначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	
КонецФункции

&НаКлиенте
Процедура СтрокиПоказателейСтрокаПоказателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиПоказателя = СтрокиПоказателейСтрокаПоказателяОбработкаВыбораНаСервере(ВыбранноеЗначение);
	ТекДанные = Элементы.СтрокиПоказателей.ТекущиеДанные; 
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(НастройкиПоказателя) Тогда 
		ТекДанные.СвязиПоказателя = НастройкиПоказателя;
	КонецЕсли;
	ОбновитьТаблицуКолонок();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруУсловий() 
	
	
	ЕстьУсловияПоСтатьям = Ложь;
	ЕстьУсловияПоДвижениям = Ложь;
	ЕстьУсловияПоСчетам = Ложь;
	

	Для Каждого СтрокаПоказателя Из Объект.СтрокиПоказателей Цикл 
		Если ЗначениеЗаполнено(СтрокаПоказателя.СвязиПоказателя) Тогда 
			Если СтрокаПоказателя.СвязиПоказателя.СтатьиБюджета.Количество() Тогда  
				ЕстьУсловияПоСтатьям = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого СтрокаПоказателя Из Объект.СтрокиПоказателей Цикл 
		Если ЗначениеЗаполнено(СтрокаПоказателя.СвязиПоказателя) Тогда 
			Если СтрокаПоказателя.СвязиПоказателя.ВидыДвижения.Количество() Тогда  
				ЕстьУсловияПоДвижениям = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого СтрокаПоказателя Из Объект.СтрокиПоказателей Цикл 
		Если ЗначениеЗаполнено(СтрокаПоказателя.СвязиПоказателя) Тогда 
			Если СтрокаПоказателя.СвязиПоказателя.Счета.Количество() Тогда  
				ЕстьУсловияПоСчетам = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат  Новый Структура("ЕстьУсловияПоСтатьям,ЕстьУсловияПоДвижениям,ЕстьУсловияПоСчетам",ЕстьУсловияПоСтатьям,ЕстьУсловияПоДвижениям,ЕстьУсловияПоСчетам);
	
	

КонецФункции // ОбновитьТаблицуКолонок()

&НаСервере
Процедура ОбновитьТаблицуКолонок() 

	  СтруктураУсловий = ПолучитьСтруктуруУсловий();
	  
	  Объект.ОснованиеДляЗаполнения = "";
	  
	  Если СтруктураУсловий.ЕстьУсловияПоСтатьям Тогда 
		  
		  BS     = Объект.КолонкиПоказателей.НайтиСтроки(Новый Структура("ИмяКолонки","BS"));
		  Если НЕ BS.Количество() Тогда   
			  СтрокаТЧ = Объект.КолонкиПоказателей.Добавить();
			  СтрокаТЧ.ИмяКолонки = "BS";
			  СтрокаТЧ.СинонимКолонки = "Элемент BS (справочник СтатьиБюджетов подчиненный справочнику Бюджеты BS)";
			  СтрокаТЧ.НеОтображатьВДЗО = Истина;
			  
		  КонецЕсли;
		  
		  
		  BSname = Объект.КолонкиПоказателей.НайтиСтроки(Новый Структура("ИмяКолонки","BSname"));
		  
		  Если НЕ BSname.Количество() Тогда   
			  СтрокаТЧ = Объект.КолонкиПоказателей.Добавить();
			  СтрокаТЧ.ИмяКолонки = "BSname";
			  СтрокаТЧ.СинонимКолонки = "Наименование элемента справочника  BS";
			  
		  КонецЕсли;
		  
		  Объект.ОснованиеДляЗаполнения = "По статьям бюджета";
		  
	  КонецЕсли; 
	  
	  Если СтруктураУсловий.ЕстьУсловияПоДвижениям Тогда 
		  
		  TypeMovement     = Объект.КолонкиПоказателей.НайтиСтроки(Новый Структура("ИмяКолонки","TypeMovement")); 
		  
		  Если НЕ TypeMovement.Количество() Тогда   
			  
			  СтрокаТЧ = Объект.КолонкиПоказателей.Добавить();
			  СтрокаТЧ.ИмяКолонки = "TypeMovement";
			  СтрокаТЧ.СинонимКолонки = "Вид движения";
			  СтрокаТЧ.НеОтображатьВДЗО = Истина;
			  
		  КонецЕсли;
		  
		  
		  TypeMovementName = Объект.КолонкиПоказателей.НайтиСтроки(Новый Структура("ИмяКолонки","TypeMovementName")); 
		  
		  Если НЕ TypeMovementName.Количество() Тогда   
			  СтрокаТЧ = Объект.КолонкиПоказателей.Добавить();
			  СтрокаТЧ.ИмяКолонки = "TypeMovementName";
			  СтрокаТЧ.СинонимКолонки = "Виды движений";
			  
		  КонецЕсли;
		  
		  
		  Объект.ОснованиеДляЗаполнения = "По видам движения";
	  КонецЕсли;  
	  
	  Если СтруктураУсловий.ЕстьУсловияПоСчетам Тогда  
		  
		  account     = Объект.КолонкиПоказателей.НайтиСтроки(Новый Структура("ИмяКолонки","account"));
		  
		  Если НЕ account.Количество() Тогда   
			  СтрокаТЧ = Объект.КолонкиПоказателей.Добавить();
			  СтрокаТЧ.ИмяКолонки = "account";
			  СтрокаТЧ.СинонимКолонки = "Счет";
			  СтрокаТЧ.НеОтображатьВДЗО = Истина;
			  
		  КонецЕсли;
		  
		  AccountName = Объект.КолонкиПоказателей.НайтиСтроки(Новый Структура("ИмяКолонки","AccountName")); 
		  
		  Если НЕ account.Количество() Тогда   
			  СтрокаТЧ = Объект.КолонкиПоказателей.Добавить();
			  СтрокаТЧ.ИмяКолонки = "AccountName"; 
			  СтрокаТЧ.СинонимКолонки = "Счета";
			  
		  КонецЕсли;
		  
		  
	  КонецЕсли;  
	  
	  
	  Если СтруктураУсловий.ЕстьУсловияПоСчетам	Или  СтруктураУсловий.ЕстьУсловияПоДвижениям ИЛИ  СтруктураУсловий.ЕстьУсловияПоСтатьям Тогда
		  
		  Sum = Объект.КолонкиПоказателей.НайтиСтроки(Новый Структура("ИмяКолонки","Sum"));
		  
		  Если НЕ Sum.Количество() Тогда   
			  СтрокаТЧ = Объект.КолонкиПоказателей.Добавить();
			  СтрокаТЧ.ИмяКолонки = "Sum"; 
			  СтрокаТЧ.СинонимКолонки = "Сумма";
			  
		  КонецЕсли;
		  Объект.ОснованиеДляЗаполнения = "По счетам";
	  КонецЕсли;
	  
	  

КонецПроцедуры // ОбновитьТаблицуКолонок() ()


&НаКлиенте
Процедура ОрганизацииСписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры



