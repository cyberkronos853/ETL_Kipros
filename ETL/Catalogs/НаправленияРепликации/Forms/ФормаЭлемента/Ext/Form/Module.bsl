
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПостроитьДеревоИзТаблицы(ДеревоТаблиц,Объект.ТаблицыДляРепликации);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьДеревоВТаблицу(ДеревоТаблиц,ТекущийОбъект.ТаблицыДляРепликации);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТаблицы(Команда)
	ПостроитьДеревоТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоТаблиц()
	Таблица = Репликация.ПолучитьСписокТаблиц();
	Таблица.Сортировать("table_name");
	СтрокиДерева = ДеревоТаблиц.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	Для Каждого СтрокаТЧ Из Таблица Цикл
		Если Не ВРЕГ(СтрокаТЧ.table_type) = ВРЕГ("base table") 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("MSpeer")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("MSpub")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("sysarticles")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("sysdiagrams")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("syspublications")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("sysreplservers")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("sysschemaarticles")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("syssubscriptions")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("systranschemas")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("sysarticlecolumns")) = 0 
		ИЛИ Не СтрНайти(ВРЕГ(СтрокаТЧ.table_name),ВРЕГ("sysarticleupdates")) = 0 
		
		
		Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Наименование = СтрокаТЧ.table_name;
		
		АналитикаПоОрганизациям = Новый Структура("Используется,Наименование");
		СписокКолонок = СписокКолонокТаблицы(СтрокаТЧ.table_name,АналитикаПоОрганизациям);
		НоваяСтрока.АналитикаПоОрганизациям = АналитикаПоОрганизациям.Используется;
		НоваяСтрока.КолонкаОрганизация = АналитикаПоОрганизациям.Наименование;
		НоваяСтрока.Выгружать = Истина;
		Для Каждого Колонка Из СписокКолонок Цикл
			Колонки = НоваяСтрока.ПолучитьЭлементы();
			НоваяКолонка = Колонки.Добавить();
			НоваяКолонка.Наименование = КОлонка;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокКолонокТаблицы(ИмяТаблицы, АналитикаПоОрганизациям = Ложь)
	Таблица = Репликация.ПолучитьСписокКолонокТаблицы(ИмяТаблицы);
	СписокКолонок = Новый Массив;
	Для Каждого СтрокаТЧ Из Таблица Цикл
		СписокКолонок.Добавить(СтрокаТЧ.Column_Name);
		Если ВРЕГ(СтрокаТЧ.Column_Name) = ВРЕГ("base") 
			ИЛИ ВРЕГ(СтрокаТЧ.Column_Name) = ВРЕГ("company") 
			Тогда
			АналитикаПоОрганизациям.Используется = Истина;
			Если не ВРЕГ(АналитикаПоОрганизациям.Наименование) = ВРЕГ("BASE") Тогда
				АналитикаПоОрганизациям.Наименование = СтрокаТЧ.Column_Name;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	Возврат СписокКолонок;
КонецФункции

&НаСервере
Процедура ЗаписатьДеревоВТаблицу(Дерево,Таблица)
	СтрокиДерева = Дерево.ПолучитьЭлементы();
	Таблица.Очистить();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокиКолонки = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого СтрокаКолонки Из СтрокиКолонки Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.НаименованиеТаблицы = СтрокаДерева.Наименование;
			НоваяСтрока.НаименованиеКолонки = СтрокаКолонки.Наименование;
			НоваяСтрока.АналитикаПоОрганизациям = СтрокаДерева.АналитикаПоОрганизациям;
			НоваяСтрока.КолонкаОрганизация = СтрокаДерева.КолонкаОрганизация;
			НоваяСтрока.Выгружать = СтрокаДерева.Выгружать;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоИзТаблицы(Дерево,Таблица)
	МассивТаблиц = Таблица.Выгрузить();
	МассивТаблиц.Свернуть("НаименованиеТаблицы,АналитикаПоОрганизациям,КолонкаОрганизация,Выгружать");
	
	СтрокиДерева = Дерево.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	Для Каждого СтрокаТЧ Из МассивТаблиц Цикл
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Наименование = СтрокаТЧ.НаименованиеТаблицы;
		НоваяСтрока.АналитикаПоОрганизациям = СтрокаТЧ.АналитикаПоОрганизациям;
		НоваяСтрока.КолонкаОрганизация = СтрокаТЧ.КолонкаОрганизация;
		НоваяСтрока.Выгружать = СтрокаТЧ.Выгружать;
		ПараметрыПоиска = Новый Структура("НаименованиеТаблицы",СтрокаТЧ.НаименованиеТаблицы);
		СписокКолонок = Таблица.НайтиСтроки(ПараметрыПоиска);
		Для Каждого Колонка Из СписокКолонок Цикл
			Колонки = НоваяСтрока.ПолучитьЭлементы();
			НоваяКолонка = Колонки.Добавить();
			НоваяКолонка.Наименование = КОлонка.НаименованиеКолонки;
			НоваяКолонка.Выгружать = КОлонка.Выгружать;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для Каждого СтрокаДерева Из ДеревоТаблиц.ПолучитьЭлементы() Цикл
		//Элементы.ДеревоТаблиц.Развернуть(СтрокаДерева.ПолучитьИдентификатор(),Ложь);
		Элементы.ДеревоТаблиц.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьКоды(Команда)
	ПроставитьКодыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроставитьКодыНаСервере()
	
	СписокБазВОтбор = Новый Массив;
	Для Каждого База Из объект.БазыДляРепликации Цикл
		Для Каждого СтрокаБаза Из База.База.Организации Цикл
			База.КодОрганизации = СтрокаБаза.Организация.КодСправочника;
		КонецЦикла;
	КонецЦикла;
	
	СписокБаз = объект.БазыДляРепликации.Выгрузить(,"База");
	ПараметрыБаз = Репликация.ПолучитьПараметрыБаз(СписокБаз);
	Для каждого СтрокаТЧ Из ПараметрыБаз Цикл
		параметрыПоиска = новый Структура("КодОрганизации",СтрЗаменить(СтрокаТЧ.Code," ",""));
		НайденныеСтроки = Объект.БазыДляРепликации.НайтиСтроки(параметрыПоиска);
		для Каждого найденнаяСтрока из НайденныеСтроки Цикл
			НайденнаяСтрока.idорганизации = СтрокаТЧ.id;
		КонецЦикла;
	КонецЦикла;
	
		
КонецПроцедуры

&НаКлиенте
Процедура ТестСоединения(Команда)
	ТестСоединенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТестСоединенияНаСервере()
	
	НастройкиОбмена = объект;
	Попытка
		
		Команда     = Новый COMОбъект("ADODB.Command");
		Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");
		
		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 60;
		Соединение.ConnectionTimeout = 60;
		
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
		Сообщить("Проверка прошла успешно");
	Исключение
		Сообщить("Ошибка соединения. " + ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры


