
Функция GetTypesOfOtherIndicators(IIN="",ВидПоказателя=Неопределено) Экспорт
	
	ArrayOfTypesOfOtherIndicators = ПолучитьXDTO("ArrayOfTypesOfOtherIndicators");
	
	Если Не ЗначениеЗаполнено(IIN) Тогда
		Возврат ArrayOfTypesOfOtherIndicators;
	КонецЕсли;

	Если ЗначениеЗаполнено(IIN) Тогда 
		
		Организация = Справочники.Организации.НайтиПоРеквизиту("БИН",IIN);

		Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
			Возврат ArrayOfTypesOfOtherIndicators;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПрочихПоказателейMDM.Ссылка КАК Ссылка,
		|	ВидыПрочихПоказателейMDM.Код КАК Код,
		|	ВидыПрочихПоказателейMDM.Наименование КАК Наименование,
		|	ВидыПрочихПоказателейMDM.ОтображатьВДЗО КАК ОтображатьВДЗО,
		|	ВидыПрочихПоказателейMDM.Период КАК Период,
		|	ВидыПрочихПоказателейMDM.РучнойВвод КАК РучнойВвод,
		|	ВидыПрочихПоказателейMDM.ОснованиеДляЗаполнения КАК ОснованиеДляЗаполнения,
		|	ВидыПрочихПоказателейMDM.ТипПоказателя.Наименование КАК ТипПоказателяНаименование
		|ИЗ
		|	Справочник.ВидыПрочихПоказателейMDM.Организации КАК ВидыПрочихПоказателейMDMОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПрочихПоказателейMDM КАК ВидыПрочихПоказателейMDM
		|		ПО ВидыПрочихПоказателейMDMОрганизации.Ссылка = ВидыПрочихПоказателейMDM.Ссылка
		|ГДЕ
		|	ВидыПрочихПоказателейMDMОрганизации.Организация = &Организация";
		
		
		Запрос.УстановитьПараметр("Организация",Организация); 
		
		
	ИначеЕсли ВидПоказателя <> Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПрочихПоказателейMDM.Ссылка КАК Ссылка,
		|	ВидыПрочихПоказателейMDM.Код КАК Код,
		|	ВидыПрочихПоказателейMDM.Наименование КАК Наименование,
		|	ВидыПрочихПоказателейMDM.ОтображатьВДЗО КАК ОтображатьВДЗО,
		|	ВидыПрочихПоказателейMDM.Период КАК Период,
		|	ВидыПрочихПоказателейMDM.РучнойВвод КАК РучнойВвод,
		|	ВидыПрочихПоказателейMDM.ОснованиеДляЗаполнения КАК ОснованиеДляЗаполнения,
		|	ВидыПрочихПоказателейMDM.ТипПоказателя.Наименование КАК ТипПоказателяНаименование
		|ИЗ
		|	Справочник.ВидыПрочихПоказателейMDM.Организации КАК ВидыПрочихПоказателейMDMОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПрочихПоказателейMDM КАК ВидыПрочихПоказателейMDM
		|		ПО ВидыПрочихПоказателейMDMОрганизации.Ссылка = ВидыПрочихПоказателейMDM.Ссылка
		|ГДЕ
		|	ВидыПрочихПоказателейMDM.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ВидПоказателя);  
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПрочихПоказателейMDM.Ссылка КАК Ссылка,
		|	ВидыПрочихПоказателейMDM.Код КАК Код,
		|	ВидыПрочихПоказателейMDM.Наименование КАК Наименование,
		|	ВидыПрочихПоказателейMDM.ОтображатьВДЗО КАК ОтображатьВДЗО,
		|	ВидыПрочихПоказателейMDM.Период КАК Период,
		|	ВидыПрочихПоказателейMDM.РучнойВвод КАК РучнойВвод,
		|	ВидыПрочихПоказателейMDM.ОснованиеДляЗаполнения КАК ОснованиеДляЗаполнения,
		|	ВидыПрочихПоказателейMDM.ТипПоказателя.Наименование КАК ТипПоказателяНаименование
		|ИЗ
		|	Справочник.ВидыПрочихПоказателейMDM.Организации КАК ВидыПрочихПоказателейMDMОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПрочихПоказателейMDM КАК ВидыПрочихПоказателейMDM
		|		ПО ВидыПрочихПоказателейMDMОрганизации.Ссылка = ВидыПрочихПоказателейMDM.Ссылка";
		
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//Если НЕ ВыборкаДетальныеЗаписи.ОтображатьВДЗО Тогда
		//	Продолжить;
		//КонецЕсли;
		
		TypesOfOtherIndicators 					= ПолучитьXDTO("TypesOfOtherIndicators");
		TypesOfOtherIndicators.Code 			= ВыборкаДетальныеЗаписи.Код;
		TypesOfOtherIndicators.Name 			= ВыборкаДетальныеЗаписи.Наименование;
		TypesOfOtherIndicators.Period 			= ВыборкаДетальныеЗаписи.Период;
		TypesOfOtherIndicators.GUID 			= XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка);
		TypesOfOtherIndicators.ManualInput 		= ВыборкаДетальныеЗаписи.РучнойВвод;
		TypesOfOtherIndicators.BasisForFilling 	= ВыборкаДетальныеЗаписи.ОснованиеДляЗаполнения;
		TypesOfOtherIndicators.TypeInd         	= ВыборкаДетальныеЗаписи.ТипПоказателяНаименование;
		TypesOfOtherIndicators.Display         	= ВыборкаДетальныеЗаписи.ОтображатьВДЗО;
		КолонкиПоказателей = ВыборкаДетальныеЗаписи.Ссылка.КолонкиПоказателей;
		Если КолонкиПоказателей.Количество() Тогда
			ArrayColumnNamesMDM = ПолучитьXDTO("ArrayColumnNamesMDM");
			Для Каждого КолонкаПоказателя Из КолонкиПоказателей Цикл
				//Если КолонкаПоказателя.НеОтображатьВДЗО Тогда
				//	Продолжить;
				//КонецЕсли;
				ColumnNamesMDM = ПолучитьXDTO("ColumnNamesMDM");
				ColumnNamesMDM.ColumnNameMDM = КолонкаПоказателя.ИмяКолонки;
				ColumnNamesMDM.ColumnSynonym = КолонкаПоказателя.СинонимКолонки;
				ColumnNamesMDM.NotDisplay    = КолонкаПоказателя.НеОтображатьВДЗО;
				ColumnNamesMDM.ManualInput   = КолонкаПоказателя.РучнойВвод;
				ColumnNamesMDM.UsesSettings  = КолонкаПоказателя.ИспользуетНастройкиСвязей;
				ArrayColumnNamesMDM.ColumnNamesMDM.Добавить(ColumnNamesMDM);
			КонецЦикла;
			TypesOfOtherIndicators.ArrayColumnNamesMDM = ArrayColumnNamesMDM;
		КонецЕсли;
		
		СтрокиПоказателей = ВыборкаДетальныеЗаписи.Ссылка.СтрокиПоказателей;
		Если СтрокиПоказателей.Количество() Тогда
			ArrayIndicatorMDM = ПолучитьXDTO("ArrayIndicatorMDM");
			Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
				IndicatorMDM = ПолучитьXDTO("IndicatorMDM");
				IndicatorMDM.Code = СтрокаПоказателя.КодПоказателя;
				IndicatorMDM.ManualInput = СтрокаПоказателя.РучнойВвод;
				IndicatorMDM.NotCollectTotals = СтрокаПоказателя.НеСобиратьИтоги;
				
				Если ЗначениеЗаполнено(СтрокаПоказателя.СвязиПоказателя) Тогда
					Если СтрокаПоказателя.СвязиПоказателя.СтатьиБюджета.Количество() Тогда 
						Для КАждого СтатьяБюджета Из СтрокаПоказателя.СвязиПоказателя.СтатьиБюджета Цикл 
						    BudgetItemMDM = ПолучитьXDTO("BudgetItemMDM");
							BudgetItemMDM.BudgetItem = XMLСтрока(СтатьяБюджета.СтатьяБюджета);
							BudgetItemMDM.BudgetAccaunts = ПолучитьСчетаСтатьиБюджетаВИерархии(СтатьяБюджета.СтатьяБюджета);
							IndicatorMDM.BudgetItem.Добавить(BudgetItemMDM);
						КонецЦикла;
					КонецЕсли;
					Если СтрокаПоказателя.СвязиПоказателя.ВидыДвижения.Количество() Тогда 
						Для КАждого ВидДвижения Из СтрокаПоказателя.СвязиПоказателя.ВидыДвижения Цикл  
							IndicatorMDM.TypeMovement.Добавить(XMLСтрока(ВидДвижения.ВидДвижения));
						КонецЦикла;
					КонецЕсли;
					Если СтрокаПоказателя.СвязиПоказателя.Счета.Количество() Тогда
						Для КАждого Счет Из СтрокаПоказателя.СвязиПоказателя.Счета Цикл 
						    AccauntMDM = ПолучитьXDTO("AccauntMDM");
							AccauntMDM.AccauntGUID = XMLСтрока(Счет.Счет);
							AccauntMDM.AccauntTypeMovement = Строка(Счет.ТипДвижения);
							IndicatorMDM.Account.Добавить(AccauntMDM);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				ArrayIndicatorMDM.IndicatorMDM.Добавить(IndicatorMDM);
			КонецЦикла;
			TypesOfOtherIndicators.ArrayIndicatorMDM = ArrayIndicatorMDM;
		КонецЕсли;
		
		ArrayOfTypesOfOtherIndicators.TypesOfOtherIndicators.Добавить(TypesOfOtherIndicators);	
	КонецЦикла;
	
	
	
	
	Возврат ArrayOfTypesOfOtherIndicators;
	
КонецФункции // GetTypesOfOtherIndicators()()

Функция GetTypesOfOtherIndicatorsУпр(IIN="",ВидПоказателя=Неопределено) Экспорт
	
	Организация = Справочники.Организации.НайтиПоРеквизиту("БИН",IIN);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПрочихПоказателейMDM.Ссылка КАК Ссылка,
	|	ВидыПрочихПоказателейMDM.Код КАК Код,
	|	ВидыПрочихПоказателейMDM.Наименование КАК Наименование,
	|	ВидыПрочихПоказателейMDM.ОтображатьВДЗО КАК ОтображатьВДЗО,
	|	ВидыПрочихПоказателейMDM.Период КАК Период,
	|	ВидыПрочихПоказателейMDM.РучнойВвод КАК РучнойВвод,
	|	ВидыПрочихПоказателейMDM.ОснованиеДляЗаполнения КАК ОснованиеДляЗаполнения
	|ИЗ
	|	Справочник.ВидыПрочихПоказателейMDM.Организации КАК ВидыПрочихПоказателейMDMОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПрочихПоказателейMDM КАК ВидыПрочихПоказателейMDM
	|		ПО ВидыПрочихПоказателейMDMОрганизации.Ссылка = ВидыПрочихПоказателейMDM.Ссылка
	|ГДЕ
	|	ВидыПрочихПоказателейMDM.Ссылка = &Ссылка
	|	И ВидыПрочихПоказателейMDMОрганизации.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Ссылка",ВидПоказателя); 
	Запрос.УстановитьПараметр("Организация",Организация);  
	
	ArrayOfTypesOfOtherIndicators = ПолучитьXDTO("ArrayOfTypesOfOtherIndicators");
	//Если Организация.Пустая() Тогда
	//	Возврат ArrayOfTypesOfOtherIndicators;
	//КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НЕ ВыборкаДетальныеЗаписи.ОтображатьВДЗО Тогда
			Продолжить;
		КонецЕсли;
		
		TypesOfOtherIndicators = ПолучитьXDTO("TypesOfOtherIndicators");
		TypesOfOtherIndicators.Code = ВыборкаДетальныеЗаписи.Код;
		TypesOfOtherIndicators.Name = ВыборкаДетальныеЗаписи.Наименование;
		TypesOfOtherIndicators.Period = ВыборкаДетальныеЗаписи.Период;
		TypesOfOtherIndicators.GUID = XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка);
		TypesOfOtherIndicators.ManualInput = ВыборкаДетальныеЗаписи.РучнойВвод;
		TypesOfOtherIndicators.BasisForFilling = ВыборкаДетальныеЗаписи.ОснованиеДляЗаполнения;
		КолонкиПоказателей = ВыборкаДетальныеЗаписи.Ссылка.КолонкиПоказателей;
		Если КолонкиПоказателей.Количество() Тогда
			ArrayColumnNamesMDM = ПолучитьXDTO("ArrayColumnNamesMDM");
			Для Каждого КолонкаПоказателя Из КолонкиПоказателей Цикл
				//Если КолонкаПоказателя.НеОтображатьВДЗО Тогда
				//	Продолжить;
				//КонецЕсли;
				ColumnNamesMDM = ПолучитьXDTO("ColumnNamesMDM");
				ColumnNamesMDM.ColumnNameMDM = КолонкаПоказателя.ИмяКолонки;
				ColumnNamesMDM.ColumnSynonym = КолонкаПоказателя.СинонимКолонки;
				ColumnNamesMDM.NotDisplay    = КолонкаПоказателя.НеОтображатьВДЗО;
				ColumnNamesMDM.ManualInput   = КолонкаПоказателя.РучнойВвод;
				ColumnNamesMDM.UsesSettings   = КолонкаПоказателя.ИспользуетНастройкиСвязей;
				ArrayColumnNamesMDM.ColumnNamesMDM.Добавить(ColumnNamesMDM);
			КонецЦикла;
			TypesOfOtherIndicators.ArrayColumnNamesMDM = ArrayColumnNamesMDM;
		КонецЕсли;
		
		СтрокиПоказателей = ВыборкаДетальныеЗаписи.Ссылка.СтрокиПоказателей;
		Если СтрокиПоказателей.Количество() Тогда
			ArrayIndicatorMDM = ПолучитьXDTO("ArrayIndicatorMDM");
			Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
				IndicatorMDM = ПолучитьXDTO("IndicatorMDM");
				IndicatorMDM.Code = СтрокаПоказателя.КодПоказателя;
				IndicatorMDM.ManualInput = СтрокаПоказателя.РучнойВвод;
				IndicatorMDM.NotCollectTotals = СтрокаПоказателя.НеСобиратьИтоги;
				
				Если ЗначениеЗаполнено(СтрокаПоказателя.СвязиПоказателя) Тогда
					Если СтрокаПоказателя.СвязиПоказателя.СтатьиБюджета.Количество() Тогда 
						Для КАждого СтатьяБюджета Из СтрокаПоказателя.СвязиПоказателя.СтатьиБюджета Цикл 
							BudgetItemMDM = ПолучитьXDTO("BudgetItemMDM");
							BudgetItemMDM.BudgetItem = XMLСтрока(СтатьяБюджета.СтатьяБюджета);
							BudgetItemMDM.BudgetAccaunts = ПолучитьСчетаСтатьиБюджетаВИерархии(СтатьяБюджета.СтатьяБюджета);
							IndicatorMDM.BudgetItem.Добавить(BudgetItemMDM);
						КонецЦикла;
					КонецЕсли;
					Если СтрокаПоказателя.СвязиПоказателя.ВидыДвижения.Количество() Тогда 
						Для КАждого ВидДвижения Из СтрокаПоказателя.СвязиПоказателя.ВидыДвижения Цикл  
							IndicatorMDM.TypeMovement.Добавить(XMLСтрока(ВидДвижения.ВидДвижения));
						КонецЦикла;
					КонецЕсли;
					Если СтрокаПоказателя.СвязиПоказателя.Счета.Количество() Тогда
						Для КАждого Счет Из СтрокаПоказателя.СвязиПоказателя.Счета Цикл 
							AccauntMDM = ПолучитьXDTO("AccauntMDM");
							AccauntMDM.AccauntGUID = XMLСтрока(Счет.Счет);
							AccauntMDM.AccauntTypeMovement = Строка(Счет.ТипДвижения);
							IndicatorMDM.Account.Добавить(AccauntMDM);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				ArrayIndicatorMDM.IndicatorMDM.Добавить(IndicatorMDM);
			КонецЦикла;
			TypesOfOtherIndicators.ArrayIndicatorMDM = ArrayIndicatorMDM;
		КонецЕсли;
		
		ArrayOfTypesOfOtherIndicators.TypesOfOtherIndicators.Добавить(TypesOfOtherIndicators);	
	КонецЦикла;
	
	
	
	
	Возврат ArrayOfTypesOfOtherIndicators;
	
КонецФункции // GetTypesOfOtherIndicators()()

Функция SetDocOtherInd(aDocOtherInd,IIN) Экспорт
	
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.БИН = &БИН";
	
	Запрос.УстановитьПараметр("БИН",IIN);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат "Не найдена организация";
	КонецЕсли;	
	
	
	НомеДок = aDocOtherInd.Number;
	Запрос.Текст = "ВЫБРАТЬ
	|	авПрочиеПоказателиMDM.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.авПрочиеПоказателиMDM КАК авПрочиеПоказателиMDM
	|ГДЕ
	|	авПрочиеПоказателиMDM.Организация = &Организация
	|	И авПрочиеПоказателиMDM.НомерВходящего = &Номер";
	Запрос.УстановитьПараметр("Организация",НайденнаяОрг);
	Запрос.УстановитьПараметр("Номер",НомеДок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	//ПрочиеПоказателиMDMСсылка = Документы.авПрочиеПоказателиMDM.НайтиПоРеквизиту(aDocOtherInd.Number);
	
	Если Выборка.Следующий() Тогда
		ПрочиеПоказателиMDM = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ПрочиеПоказателиMDM = Документы.ПрочиеПоказателиMDM.СоздатьДокумент();
	КонецЕсли;
	
	ПрочиеПоказателиMDM.ВидПоказателя   = Справочники.ВидыПрочихПоказателейMDM.НайтиПоКоду(aDocOtherInd.IndicatorTypeCode);
	ПрочиеПоказателиMDM.Дата            = aDocOtherInd.Date; 
	ПрочиеПоказателиMDM.НачалоПериода   = aDocOtherInd.DateBeg;
	ПрочиеПоказателиMDM.КонецПериода    = aDocOtherInd.DateEnd;
	
	ПрочиеПоказателиMDM.НомерВходящего  = aDocOtherInd.Number;
	ПрочиеПоказателиMDM.Организация     =  НайденнаяОрг;
	ПрочиеПоказателиMDM.Комментарий     =  aDocOtherInd.Comment;
	ПрочиеПоказателиMDM.Статус          =  Перечисления.СтатусДокументаПрочиеПоказатели.Создан;
	ПрочиеПоказателиMDM.ЗапрещеноРедактировать          =  Истина;
	
	
	ПрочиеПоказателиMDM.ГодОтчета             =  aDocOtherInd.ReportingYear;         
	ПрочиеПоказателиMDM.ПериодОтчета          =  Справочники.ПериодыПрочихПоказателей.НайтиПоКоду(aDocOtherInd.ReportingPeriod); 
	ПрочиеПоказателиMDM.ОсобыйПериод          =  aDocOtherInd.Audited; 
	
	ПрочиеПоказателиMDM.Ответственный   = Пользователи.ТекущийПользователь();
	ПрочиеПоказателиMDM.ПрочиеПоказатели.Очистить();
	Для Каждого СтрокаOtherInd   Из aDocOtherInd.ListOthersInd Цикл
		
		СтрокаПрочегоПоказателя = ПрочиеПоказателиMDM.ПрочиеПоказатели.Добавить();
		СтрокаПрочегоПоказателя.КодПоказателя =  СтрокаOtherInd.KodInd;
		СтрокаПрочегоПоказателя.Показатель =  Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника",СтрокаOtherInd.KodInd);
		Если ЗначениеЗаполнено(СтрокаOtherInd.accountGUID) Тогда
			СтрокаПрочегоПоказателя.account =   Справочники.ПланСчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаOtherInd.accountGUID)); 
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.CounterpartyGUID) Тогда
			СтрокаПрочегоПоказателя.КонтрагентGUID =  СтрокаOtherInd.CounterpartyGUID;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.Counterparty) Тогда
			СтрокаПрочегоПоказателя.Контрагент =  СтрокаOtherInd.Counterparty;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.CounterpartyIIN) Тогда
			СтрокаПрочегоПоказателя.КонтрагентИИН =  СтрокаOtherInd.CounterpartyIIN;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.sum) Тогда
			СтрокаПрочегоПоказателя.Sum =  СтрокаOtherInd.sum;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.AmountDebt) Тогда
			СтрокаПрочегоПоказателя.AmountDebt =  СтрокаOtherInd.AmountDebt;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.AmountDebtMore100) Тогда
			СтрокаПрочегоПоказателя.AmountDebtMore100 =  СтрокаOtherInd.AmountDebtMore100;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.AmountDebtMore500) Тогда
			СтрокаПрочегоПоказателя.AmountDebtMore500 =  СтрокаOtherInd.AmountDebtMore500;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.AmountBalance) Тогда
			СтрокаПрочегоПоказателя.AmountBalance =  СтрокаOtherInd.AmountBalance;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.AmountBalance) Тогда
			СтрокаПрочегоПоказателя.AmountBalancePledge =  СтрокаOtherInd.AmountBalancePledge;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.DateFormation) Тогда
			СтрокаПрочегоПоказателя.DateFormation =  СтрокаOtherInd.DateFormation;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.MaturityDate) Тогда
			СтрокаПрочегоПоказателя.MaturityDate =  СтрокаOtherInd.MaturityDate;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.Date3) Тогда
			СтрокаПрочегоПоказателя.Дата3 =  СтрокаOtherInd.Date3;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.BS_GUID) Тогда
			СтрокаПрочегоПоказателя.BS =   Справочники.СтатьиБюджетов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаOtherInd.BS_GUID));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.AmountDebtMore100Count) Тогда
			СтрокаПрочегоПоказателя.AmountDebtMore100Count =  СтрокаOtherInd.AmountDebtMore100Count;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.AmountDebtMore500Count) Тогда
			СтрокаПрочегоПоказателя.AmountDebtMore500Count =  СтрокаOtherInd.AmountDebtMore500Count;
		КонецЕсли;
		//Если ЗначениеЗаполнено(СтрокаOtherInd.organization) Тогда
		//    СтрокаПрочегоПоказателя.Счет =  СтрокаOtherInd.organization;
		//КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.RatioApplicable) Тогда
			СтрокаПрочегоПоказателя.RatioApplicable =  СтрокаOtherInd.RatioApplicable;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаOtherInd.CUR) Тогда
			СтрокаПрочегоПоказателя.CUR =  Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора",СтрокаOtherInd.CUR);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.ReportSign) Тогда
			СтрокаПрочегоПоказателя.ReportSign =  Справочники.СписокОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаOtherInd.ReportSign));
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.Stock) Тогда
			СтрокаПрочегоПоказателя.Stock =  СтрокаOtherInd.Stock;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.BankName) Тогда
			СтрокаПрочегоПоказателя.BankName =  СтрокаOtherInd.BankName;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.DepositName) Тогда
			СтрокаПрочегоПоказателя.DepositName =  СтрокаOtherInd.DepositName;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.DepositRate) Тогда
			СтрокаПрочегоПоказателя.DepositRate =  СтрокаOtherInd.DepositRate;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.PRS) Тогда
			СтрокаПрочегоПоказателя.PRS =  Справочники.ТоварыИУслуги.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаOtherInd.PRS));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.ValuePercent) Тогда
			СтрокаПрочегоПоказателя.ValuePercent =  СтрокаOtherInd.ValuePercent;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.ReportSign) Тогда
			СтрокаПрочегоПоказателя.ReportSign =  СтрокаOtherInd.ReportSign;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.FairValue) Тогда
			СтрокаПрочегоПоказателя.FairValue =  СтрокаOtherInd.FairValue;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.HierarchyLevel) Тогда
			СтрокаПрочегоПоказателя.HierarchyLevel =  СтрокаOtherInd.HierarchyLevel;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.FairValueBoolean) Тогда
			СтрокаПрочегоПоказателя.FairValueBoolean =  СтрокаOtherInd.FairValueBoolean;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.OnRequest) Тогда
			СтрокаПрочегоПоказателя.OnRequest =  СтрокаOtherInd.OnRequest;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.less3months) Тогда
			СтрокаПрочегоПоказателя.less3months =  СтрокаOtherInd.less3months;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.Between3and12months) Тогда
			СтрокаПрочегоПоказателя.Between3and12months =  СтрокаOtherInd.Between3and12months;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.Between1and5years) Тогда
			СтрокаПрочегоПоказателя.Between1and5years =  СтрокаOtherInd.Between1and5years;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.TotalLiquidity) Тогда
			СтрокаПрочегоПоказателя.TotalLiquidity =  СтрокаOtherInd.TotalLiquidity;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.Quantity) Тогда
			СтрокаПрочегоПоказателя.Quantity =  СтрокаOtherInd.Quantity;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.SharePercent) Тогда
			СтрокаПрочегоПоказателя.SharePercent =  СтрокаOtherInd.SharePercent;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.CourseDirection) Тогда
			СтрокаПрочегоПоказателя.CourseDirection =  Перечисления.ВозможныеИзмененияКурса[СтрокаOtherInd.CourseDirection];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаOtherInd.values) Тогда
			СтрокаПрочегоПоказателя.Значение =  СтрокаOtherInd.values;
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	
	
	Попытка 
		ПрочиеПоказателиMDM.Записать();
		
		Возврат  "Документ успешно записан";
	Исключение
		Возврат "Не удалось записать документ";
	КонецПопытки;
	
	
	
	
	
КонецФункции // SetDocOtherInd() 


Функция CheckDocStatus(IIN, Number) Экспорт

	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.БИН = &БИН";
	
	Запрос.УстановитьПараметр("БИН",IIN);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат "Не найдена организация";
	КонецЕсли;	
	
	
	НомеДок = СокрЛП(Number);
	Запрос.Текст = "ВЫБРАТЬ
	               |	авПрочиеПоказателиMDM.Ссылка КАК Ссылка,
	               |	авПрочиеПоказателиMDM.Статус КАК Статус,
	               |	авПрочиеПоказателиMDM.ЗапрещеноРедактировать КАК ЗапрещеноРедактировать
	               |ИЗ
	               |	Документ.авПрочиеПоказателиMDM КАК авПрочиеПоказателиMDM
	               |ГДЕ
	               |	авПрочиеПоказателиMDM.Организация = &Организация
	               |	И авПрочиеПоказателиMDM.НомерВходящего = &Номер";
	Запрос.УстановитьПараметр("Организация",НайденнаяОрг);
	Запрос.УстановитьПараметр("Номер",НомеДок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Если Выборка.Следующий() Тогда 
		Если Не Выборка.ЗапрещеноРедактировать Тогда
			Возврат Строка(Перечисления.СтатусДокументаПрочиеПоказатели.Корректировка);
		Иначе
			Возврат "Запрещено редактировать";
		КонецЕсли;
		
	Иначе
		Возврат "Документ не найден";;
	КонецЕсли;
	
	
КонецФункции // CheckDocStatus(IIN, Number);()

Функция GetPeriodsOtherIndicators() Экспорт

	ArrayOfPeriodsOtherIndicators = ПолучитьXDTO("ArrayOfPeriodsOtherIndicators");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодыПрочихПоказателей.Наименование КАК Наименование,
		|	ПериодыПрочихПоказателей.Код КАК Код,
		|	ПериодыПрочихПоказателей.ДеньНачала КАК ДеньНачала,
		|	ПериодыПрочихПоказателей.ДеньОкончания КАК ДеньОкончания,
		|	ПериодыПрочихПоказателей.МесяцНачала КАК МесяцНачала,
		|	ПериодыПрочихПоказателей.МесяцОкончания КАК МесяцОкончания
		|ИЗ
		|	Справочник.ПериодыПрочихПоказателей КАК ПериодыПрочихПоказателей
		|ГДЕ
		|	НЕ ПериодыПрочихПоказателей.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		PeriodsOtherIndicators = ПолучитьXDTO("PeriodsOtherIndicators"); 
		PeriodsOtherIndicators.Name = ВыборкаДетальныеЗаписи.Наименование;
		PeriodsOtherIndicators.Code = ВыборкаДетальныеЗаписи.Код;
		PeriodsOtherIndicators.StartDay = ВыборкаДетальныеЗаписи.ДеньНачала;
		PeriodsOtherIndicators.EndDay = ВыборкаДетальныеЗаписи.ДеньОкончания;
		PeriodsOtherIndicators.StartMonth = Строка(ВыборкаДетальныеЗаписи.МесяцНачала);
		PeriodsOtherIndicators.EndMonth = Строка(ВыборкаДетальныеЗаписи.МесяцОкончания);
		
		
		ArrayOfPeriodsOtherIndicators.PeriodsOtherIndicators.Добавить(PeriodsOtherIndicators);
	КонецЦикла;
	
    Возврат ArrayOfPeriodsOtherIndicators;

КонецФункции // GetPeriodsOtherIndicators()

Функция GetKindOfIndicator() Экспорт

	ArrayKindOfIndicators = ПолучитьXDTO("ArrayKindOfIndicators");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыПрочихПоказателей.Ссылка.Наименование КАК Наименование,
	|	ТипыПрочихПоказателей.Ссылка.Код КАК Код,
	|	ТипыПрочихПоказателей.Ссылка КАК Ссылка,
	|	ТипыПрочихПоказателей.Подсказка КАК Подсказка
	|ИЗ
	|	Справочник.ТипыПрочихПоказателей КАК ТипыПрочихПоказателей
	|
	|СГРУППИРОВАТЬ ПО
	|	ТипыПрочихПоказателей.Ссылка.Код,
	|	ТипыПрочихПоказателей.Ссылка.Наименование,
	|	ТипыПрочихПоказателей.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		KindOfIndicator = ПолучитьXDTO("KindOfIndicator");
		KindOfIndicator.Name  = ВыборкаСсылка.Наименование;
		KindOfIndicator.Code  = ВыборкаСсылка.Код;
		KindOfIndicator.Note  = ВыборкаСсылка.Подсказка;
		
		Для Каждого  ВыборкаДетальныеЗаписи Из ВыборкаСсылка.Ссылка.ПериодыПрочихПоказателей Цикл 
			PeriodsKO = ПолучитьXDTO("PeriodsKO");
			PeriodsKO.Code = Строка(ВыборкаДетальныеЗаписи.Период.Код);
			PeriodsKO.Special = ВыборкаДетальныеЗаписи.ПодтвержденоАудитором;
			KindOfIndicator.PeriodsOtherIndicators.Добавить(PeriodsKO);
		КонецЦикла;
		
		ArrayKindOfIndicators.KindOfIndicators.Добавить(KindOfIndicator);	
	КонецЦикла;
	
	Возврат ArrayKindOfIndicators;

КонецФункции // GetKindOfIndicator()


Функция GetReferenceDocument(IIN, TypesOfOtherIndicators) Экспорт
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.БИН = &БИН";
	
	Запрос.УстановитьПараметр("БИН",IIN);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат "Не найдена организация";
	КонецЕсли;	
	
	
	ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоКоду(TypesOfOtherIndicators); 
	aDocOtherInd = ПолучитьXDTO("aDocOtherInd");
	
	
	НомеДок = aDocOtherInd.Number;
	Запрос.Текст = "ВЫБРАТЬ
	|	авПрочиеПоказателиMDM.Ссылка КАК Ссылка,
	|	авПрочиеПоказателиMDM.Дата КАК Дата,
	|	авПрочиеПоказателиMDM.Номер КАК Номер,
	|	авПрочиеПоказателиMDM.ВидПоказателя.Код КАК ВидПоказателяКод
	|ИЗ
	|	Документ.авПрочиеПоказателиMDM КАК авПрочиеПоказателиMDM
	|ГДЕ
	|	авПрочиеПоказателиMDM.Организация = &Организация
	|	И авПрочиеПоказателиMDM.ВидПоказателя = &ВидПоказателя";
	Запрос.УстановитьПараметр("Организация",НайденнаяОрг);
	Запрос.УстановитьПараметр("ВидПоказателя",ВидПоказателя);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		aDocOtherInd.Number = Выборка.Номер;
		aDocOtherInd.Date   = Выборка.Дата;
		aDocOtherInd.IndicatorTypeCode = Выборка.ВидПоказателяКод;
		//aDocOtherInd.Number = Выборка.Номер; 
		ПрочиеПоказатели = Выборка.Ссылка.ПрочиеПоказатели.Выгрузить();
		Для Каждого ПрочийПоказатель из ПрочиеПоказатели Цикл
			LineOthersInd = ПолучитьXDTO("LineOthersInd");
			LineOthersInd.KodInd = ПрочийПоказатель.КодПоказателя;
			LineOthersInd.BS_GUID = XMLСтрока(ПрочийПоказатель.BS);
			LineOthersInd.BSname = XMLСтрока(ПрочийПоказатель.BS.Наименование);
			aDocOtherInd.ListOthersInd.Добавить(LineOthersInd);
		КонецЦикла;
		
		
		
	КонецЕсли;
	
	
	
	
	
	Возврат aDocOtherInd;
	
КонецФункции // GetReferenceDocument(IIN, TypesOfOtherIndicators)()

Функция BudgeIitemAccounts1(ArrayAccountsQuery) Экспорт 
	
	
	ArrayAccountsResponse = ПолучитьXDTO("ArrayAccountsResponse");
	Для Каждого Строка Из ArrayAccountsQuery.LineAccountsQuery Цикл 
		ЭлементСправочника = Справочники[СокрЛП(Строка.ReferenceName)].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ReferenceGUID));
		Если ТипЗнч(ЭлементСправочника) = Тип("СправочникСсылка.INDПрочиеПоказатели") Тогда
			ВидПоказателя      = Справочники["ВидыПрочихПоказателейMDM"].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.TypesOfOtherIndicator));
			//СтатьиБюджета      = ВидПоказателя.СтрокиПоказателей
			
			
			//Запрос = Новый Запрос;
			//Запрос.Текст = 
			//	"ВЫБРАТЬ
			//	|	ВидыПрочихПоказателейMDMСтрокиПоказателей.СвязиПоказателя КАК СвязиПоказателя,
			//	|	ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель КАК Показатель
			//	|ИЗ
			//	|	Справочник.ВидыПрочихПоказателейMDM.СтрокиПоказателей КАК ВидыПрочихПоказателейMDMСтрокиПоказателей
			//	|ГДЕ
			//	|	ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель = &Показатель
			//	|	И ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка = &Ссылка";
			//
			//Запрос.УстановитьПараметр("Показатель", ЭлементСправочника);
			//Запрос.УстановитьПараметр("Ссылка", ВидПоказателя);
			//
			//РезультатЗапроса = Запрос.Выполнить();
			//
			//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			//
			//Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
			//	
			//	Если  ВыборкаДетальныеЗаписи.СвязиПоказателя.СтатьиБюджета.Количество()  Тогда   
			//		
			//		
			//		
			//		
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
			
			
			
			
			
		ИначеЕсли ТипЗнч(ЭлементСправочника) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтатьиБюджетов.Ссылка КАК Ссылка,
			|	СтатьиБюджетов.СписокСчетов КАК СписокСчетов
			|ИЗ
			|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
			|ГДЕ
			|	СтатьиБюджетов.Ссылка В ИЕРАРХИИ(&ЭлементСправочника)";
			
			Запрос.УстановитьПараметр("ЭлементСправочника", ЭлементСправочника);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выгрузка = РезультатЗапроса.Выгрузить();
			Выгрузка.Колонки.Добавить("Родитель");
			Выгрузка.ЗаполнитьЗначения(ЭлементСправочника,"Родитель");
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Копия = Выгрузка.Скопировать(,"Ссылка");
			Копия.Свернуть("Ссылка");
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СписокСчетов) Тогда
					LineAccountsResponse = ПолучитьXDTO("LineAccountsResponse");
					LineAccountsResponse.ReferenceGUID = XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка);
					LineAccountsResponse.Accounts = ВыборкаДетальныеЗаписи.СписокСчетов;
					LineAccountsResponse.ParentGUID = Строка.ReferenceGUID;
					ArrayAccountsResponse.LineAccountsResponse.Добавить(LineAccountsResponse);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЭлементСправочника) = Тип("СправочникСсылка.ВидыДвижения") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВидыДвиженияКорреспонденция.Ссылка КАК Ссылка,
			|	ВидыДвиженияКорреспонденция.Счет КАК Счет,
			|	ВидыДвиженияКорреспонденция.КорСчет КАК КорСчет,
			|	ВидыДвиженияКорреспонденция.ТипДвижения КАК ТипДвижения,
			|	ВидыДвиженияКорреспонденция.Счет.Код КАК СчетКод,
			|	ВидыДвиженияКорреспонденция.КорСчет.Код КАК КорСчетКод
			|ИЗ
			|	Справочник.ВидыДвижения.Корреспонденция КАК ВидыДвиженияКорреспонденция
			|ГДЕ
			|	ВидыДвиженияКорреспонденция.Ссылка В ИЕРАРХИИ(&ЭлементСправочника)";
			
			Запрос.УстановитьПараметр("ЭлементСправочника", ЭлементСправочника);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				LineAccountsResponse = ПолучитьXDTO("LineAccountsResponse");
				LineAccountsResponse.ReferenceGUID = XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка);
				LineAccountsResponse.Accounts = XMLСтрока(ВыборкаДетальныеЗаписи.Счет);
				LineAccountsResponse.ParentGUID = Строка.ReferenceGUID;
				LineAccountsResponse.CorrAccounts = XMLСтрока(ВыборкаДетальныеЗаписи.КорСчет); 
				LineAccountsResponse.MovementType = Строка(ВыборкаДетальныеЗаписи.ТипДвижения);
				ArrayAccountsResponse.LineAccountsResponse.Добавить(LineAccountsResponse);
			КонецЦикла;
			
			
		КонецЕсли;	
		
		
		
	КонецЦикла;
	
	
	
	Возврат  ArrayAccountsResponse;
	
КонецФункции // BudgeIitemAccounts(ArrayAccountsQuery)()

Функция BudgeIitemAccounts(ArrayAccountsQuery) Экспорт 
	
	
	ArrayAccountsResponse = ПолучитьXDTO("ArrayAccountsResponse");		
	ВидПоказателя      = Справочники["ВидыПрочихПоказателейMDM"].ПолучитьСсылку(Новый УникальныйИдентификатор(ArrayAccountsQuery.TypesOfOtherIndicator));
	
	Для Каждого Строка Из ArrayAccountsQuery.LineAccountsQuery Цикл 
		ЭлементСправочника = Справочники[СокрЛП(Строка.ReferenceName)].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ReferenceGUID));
		Показатель         = Справочники["INDПрочиеПоказатели"].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.OtherIndicators));
		
		Если ТипЗнч(ЭлементСправочника) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда 
			
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтатьиБюджетов.Ссылка КАК Ссылка,
			|	СтатьиБюджетов.СписокСчетов КАК СписокСчетов
			|ИЗ
			|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
			|ГДЕ
			|	СтатьиБюджетов.Ссылка В ИЕРАРХИИ(&ЭлементСправочника)";
			
			Запрос.УстановитьПараметр("ЭлементСправочника",ЭлементСправочника);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выгрузка = РезультатЗапроса.Выгрузить();
			СписокСчетов = "";
			Для Каждого СтрокаВыгрузки Из Выгрузка Цикл
				
				СписокСчетов = СписокСчетов + СтрокаВыгрузки.СписокСчетов;
				
			КонецЦикла;
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СвязиПрочихПоказателейСтатьиБюджета.СтатьяБюджета КАК СтатьяБюджета,
			|	СвязиПрочихПоказателейСтатьиБюджета.КатегорияАктивов КАК КатегорияАктивов
			|ИЗ
			|	Справочник.СвязиПрочихПоказателей.СтатьиБюджета КАК СвязиПрочихПоказателейСтатьиБюджета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПрочихПоказателейMDM.СтрокиПоказателей КАК ВидыПрочихПоказателейMDMСтрокиПоказателей
			|		ПО СвязиПрочихПоказателейСтатьиБюджета.Ссылка = ВидыПрочихПоказателейMDMСтрокиПоказателей.СвязиПоказателя
			|			И СвязиПрочихПоказателейСтатьиБюджета.Ссылка.Владелец = ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель
			|ГДЕ
			|	СвязиПрочихПоказателейСтатьиБюджета.Ссылка.Владелец = &Владелец
			|	И ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка = &ВидПоказателя
			|	И СвязиПрочихПоказателейСтатьиБюджета.СтатьяБюджета В ИЕРАРХИИ(&СтатьяБюджета)
			|
			|СГРУППИРОВАТЬ ПО
			|	СвязиПрочихПоказателейСтатьиБюджета.СтатьяБюджета,
			|	СвязиПрочихПоказателейСтатьиБюджета.КатегорияАктивов";
			
			Запрос.УстановитьПараметр("ВидПоказателя", ВидПоказателя);
			Запрос.УстановитьПараметр("Владелец", Показатель);
			Запрос.УстановитьПараметр("СтатьяБюджета", ЭлементСправочника);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КатегорияАктивов) Тогда 
					
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	КлассификаторОсновныхФондов.КодКОФ КАК КодКОФ
					|ИЗ
					|	Справочник.КлассификаторОсновныхФондов КАК КлассификаторОсновныхФондов
					|ГДЕ
					|	КлассификаторОсновныхФондов.КатегорияАктива = &КатегорияАктива
					|
					|СГРУППИРОВАТЬ ПО
					|	КлассификаторОсновныхФондов.КодКОФ";
					
					Запрос.УстановитьПараметр("КатегорияАктива", ВыборкаДетальныеЗаписи.КатегорияАктивов);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаКодКОФ = РезультатЗапроса.Выбрать();
					СтрокаКодКоф = "";
					Пока ВыборкаКодКОФ.Следующий() Цикл
						
						СтрокаКодКоф = СтрокаКодКоф + ВыборкаКодКОФ.КодКОФ +",";
						
					КонецЦикла;
					
					LineAccountsResponse = ПолучитьXDTO("LineAccountsResponse");
					LineAccountsResponse.ReferenceGUID 		= XMLСтрока(ВыборкаДетальныеЗаписи.СтатьяБюджета);
					LineAccountsResponse.Accounts 			= СписокСчетов;
					LineAccountsResponse.ParentGUID 		= Строка.ReferenceGUID;
					LineAccountsResponse.OtherIndicators 	= XMLСтрока(Показатель);
					LineAccountsResponse.CodeFAC    		= СтрокаКодКоф; 
					
					
					ArrayAccountsResponse.LineAccountsResponse.Добавить(LineAccountsResponse);
					
				Иначе
					
					
					LineAccountsResponse = ПолучитьXDTO("LineAccountsResponse");
					LineAccountsResponse.ReferenceGUID 		= XMLСтрока(ВыборкаДетальныеЗаписи.СтатьяБюджета);
					LineAccountsResponse.Accounts 			= СписокСчетов;
					LineAccountsResponse.ParentGUID 		= Строка.ReferenceGUID;
					LineAccountsResponse.OtherIndicators 	= XMLСтрока(Показатель);
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КатегорияАктивов) Тогда
						КлассификаторОсновныхФондов 	= Справочники.КлассификаторОсновныхФондов.НайтиПоРеквизиту("КатегорияАктива", ВыборкаДетальныеЗаписи.КатегорияАктивов);
						КодКОФ                      	= КлассификаторОсновныхФондов.КодКОФ;
						LineAccountsResponse.CodeFAC    = КодКОФ;
					КонецЕсли;
					
					ArrayAccountsResponse.LineAccountsResponse.Добавить(LineAccountsResponse);
					
				КонецЕсли;
				
			КонецЦикла;
			
			
			
		ИначеЕсли ТипЗнч(ЭлементСправочника) = Тип("СправочникСсылка.ВидыДвижения") Тогда  
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СвязиПрочихПоказателейВидыДвижения.СтатьяБюджета КАК СтатьяБюджета,
			|	СвязиПрочихПоказателейВидыДвижения.ВидДвижения КАК ВидДвижения
			|ИЗ
			|	Справочник.СвязиПрочихПоказателей.ВидыДвижения КАК СвязиПрочихПоказателейВидыДвижения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПрочихПоказателейMDM.СтрокиПоказателей КАК ВидыПрочихПоказателейMDMСтрокиПоказателей
			|		ПО СвязиПрочихПоказателейВидыДвижения.Ссылка = ВидыПрочихПоказателейMDMСтрокиПоказателей.СвязиПоказателя
			|			И СвязиПрочихПоказателейВидыДвижения.Ссылка.Владелец = ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель
			|ГДЕ
			|	СвязиПрочихПоказателейВидыДвижения.Ссылка.Владелец = &Владелец
			|	И ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка = &ВидПоказателя
			|	И СвязиПрочихПоказателейВидыДвижения.ВидДвижения = &ВидДвижения
			|
			|СГРУППИРОВАТЬ ПО
			|	СвязиПрочихПоказателейВидыДвижения.СтатьяБюджета,
			|	СвязиПрочихПоказателейВидыДвижения.ВидДвижения";
			
			Запрос.УстановитьПараметр("ВидДвижения", ЭлементСправочника);
			Запрос.УстановитьПараметр("ВидПоказателя", ВидПоказателя);
			Запрос.УстановитьПараметр("Владелец", Показатель);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			УдалитьВыгрузка = РезультатЗапроса.Выгрузить(); 
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
				
				
				
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СтатьяБюджета)Тогда 
					
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СвязиПрочихПоказателейВидыДвижения.СтатьяБюджета КАК СтатьяБюджета,
					|	СвязиПрочихПоказателейВидыДвижения.ВидДвижения КАК ВидДвижения
					|ПОМЕСТИТЬ ВТ_ОТбор
					|ИЗ
					|	Справочник.СвязиПрочихПоказателей.ВидыДвижения КАК СвязиПрочихПоказателейВидыДвижения
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПрочихПоказателейMDM.СтрокиПоказателей КАК ВидыПрочихПоказателейMDMСтрокиПоказателей
					|		ПО СвязиПрочихПоказателейВидыДвижения.Ссылка = ВидыПрочихПоказателейMDMСтрокиПоказателей.СвязиПоказателя
					|			И СвязиПрочихПоказателейВидыДвижения.Ссылка.Владелец = ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель
					|ГДЕ
					|	СвязиПрочихПоказателейВидыДвижения.Ссылка.Владелец = &Владелец
					|	И ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка = &ВидПоказателя
					|	И СвязиПрочихПоказателейВидыДвижения.ВидДвижения = &ВидДвижения
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СтатьиБюджетовСчета.Ссылка КАК СтатьяБюджета,
					|	СтатьиБюджетовСчета.Счет КАК Счет
					|ПОМЕСТИТЬ Вр_СтатьиБюджета
					|ИЗ
					|	Справочник.СтатьиБюджетов.Счета КАК СтатьиБюджетовСчета
					|ГДЕ
					|	СтатьиБюджетовСчета.Ссылка В ИЕРАРХИИ(&СтатьяБюджета)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВидыДвиженияКорреспонденция.Ссылка КАК ВидДвижения,
					|	ВидыДвиженияКорреспонденция.Счет КАК Счет,
					|	ВидыДвиженияКорреспонденция.КорСчет КАК КорСчет,
					|	ВидыДвиженияКорреспонденция.ТипДвижения КАК ТипДвижения,
					|	Вр_СтатьиБюджета.СтатьяБюджета КАК СтатьяБюджета
					|ИЗ
					|	Справочник.ВидыДвижения.Корреспонденция КАК ВидыДвиженияКорреспонденция
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОТбор КАК ВТ_ОТбор
					|		ПО ВидыДвиженияКорреспонденция.Ссылка = ВТ_ОТбор.ВидДвижения
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вр_СтатьиБюджета КАК Вр_СтатьиБюджета
					|		ПО ВидыДвиженияКорреспонденция.Счет = Вр_СтатьиБюджета.Счет
					|
					|СГРУППИРОВАТЬ ПО
					|	ВидыДвиженияКорреспонденция.Ссылка,
					|	ВидыДвиженияКорреспонденция.Счет,
					|	ВидыДвиженияКорреспонденция.КорСчет,
					|	ВидыДвиженияКорреспонденция.ТипДвижения,
					|	Вр_СтатьиБюджета.СтатьяБюджета";
					
					Запрос.УстановитьПараметр("ВидДвижения", ЭлементСправочника);
					Запрос.УстановитьПараметр("ВидПоказателя", ВидПоказателя);
					Запрос.УстановитьПараметр("Владелец", Показатель); 
					Запрос.УстановитьПараметр("СтатьяБюджета", ВыборкаДетальныеЗаписи.СтатьяБюджета);
					
					РезультатЗапроса = Запрос.Выполнить();
					Выгрузка = РезультатЗапроса.Выгрузить();
					
					ВыборкаДетали = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетали.Следующий() Цикл 
						LineAccountsResponse = ПолучитьXDTO("LineAccountsResponse");
						LineAccountsResponse.ReferenceGUID = XMLСтрока(ВыборкаДетали.ВидДвижения);
						LineAccountsResponse.Accounts = XMLСтрока(ВыборкаДетали.Счет);
						LineAccountsResponse.ParentGUID = Строка.ReferenceGUID;
						LineAccountsResponse.OtherIndicators = XMLСтрока(Показатель);
						LineAccountsResponse.CorrAccounts = XMLСтрока(ВыборкаДетали.КорСчет); 
						LineAccountsResponse.MovementType = Строка(ВыборкаДетали.ТипДвижения);
						
						ArrayAccountsResponse.LineAccountsResponse.Добавить(LineAccountsResponse);
					КонецЦикла;
					
					
					
					
				Иначе  
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СвязиПрочихПоказателейВидыДвижения.СтатьяБюджета КАК СтатьяБюджета,
					|	СвязиПрочихПоказателейВидыДвижения.ВидДвижения КАК ВидДвижения
					|ПОМЕСТИТЬ ВТ_ОТбор
					|ИЗ
					|	Справочник.СвязиПрочихПоказателей.ВидыДвижения КАК СвязиПрочихПоказателейВидыДвижения
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПрочихПоказателейMDM.СтрокиПоказателей КАК ВидыПрочихПоказателейMDMСтрокиПоказателей
					|		ПО СвязиПрочихПоказателейВидыДвижения.Ссылка = ВидыПрочихПоказателейMDMСтрокиПоказателей.СвязиПоказателя
					|			И СвязиПрочихПоказателейВидыДвижения.Ссылка.Владелец = ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель
					|ГДЕ
					|	СвязиПрочихПоказателейВидыДвижения.Ссылка.Владелец = &Владелец
					|	И ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка = &ВидПоказателя
					|	И СвязиПрочихПоказателейВидыДвижения.ВидДвижения = &ВидДвижения
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВидыДвиженияКорреспонденция.Ссылка КАК ВидДвижения,
					|	ВидыДвиженияКорреспонденция.Счет КАК Счет,
					|	ВидыДвиженияКорреспонденция.КорСчет КАК КорСчет,
					|	ВидыДвиженияКорреспонденция.ТипДвижения КАК ТипДвижения
					|ИЗ
					|	Справочник.ВидыДвижения.Корреспонденция КАК ВидыДвиженияКорреспонденция
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОТбор КАК ВТ_ОТбор
					|		ПО ВидыДвиженияКорреспонденция.Ссылка = ВТ_ОТбор.ВидДвижения
					|
					|СГРУППИРОВАТЬ ПО
					|	ВидыДвиженияКорреспонденция.ТипДвижения,
					|	ВидыДвиженияКорреспонденция.Счет,
					|	ВидыДвиженияКорреспонденция.Ссылка,
					|	ВидыДвиженияКорреспонденция.КорСчет";
					
					Запрос.УстановитьПараметр("ВидДвижения", ЭлементСправочника);
					Запрос.УстановитьПараметр("ВидПоказателя", ВидПоказателя);
					Запрос.УстановитьПараметр("Владелец", Показатель);
					
					РезультатЗапроса = Запрос.Выполнить();
					Выгрузка = РезультатЗапроса.Выгрузить();
					
					ВыборкаДетали = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетали.Следующий() Цикл 
						LineAccountsResponse = ПолучитьXDTO("LineAccountsResponse");
						LineAccountsResponse.ReferenceGUID = XMLСтрока(ВыборкаДетали.ВидДвижения);
						LineAccountsResponse.Accounts = XMLСтрока(ВыборкаДетали.Счет);
						LineAccountsResponse.ParentGUID = Строка.ReferenceGUID;
						LineAccountsResponse.CorrAccounts = XMLСтрока(ВыборкаДетали.КорСчет); 
						LineAccountsResponse.MovementType = Строка(ВыборкаДетали.ТипДвижения);
						LineAccountsResponse.OtherIndicators = XMLСтрока(Показатель);
						ArrayAccountsResponse.LineAccountsResponse.Добавить(LineAccountsResponse);
					КонецЦикла;
					
					
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЭлементСправочника) = Тип("СправочникСсылка.ПланСчетов") Тогда 
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СвязиПрочихПоказателейСчета.Счет КАК Счет,
			|	СвязиПрочихПоказателейСчета.ТипДвижения КАК ТипДвижения
			|ИЗ
			|	Справочник.СвязиПрочихПоказателей.Счета КАК СвязиПрочихПоказателейСчета
			|ГДЕ
			|	СвязиПрочихПоказателейСчета.Ссылка.Владелец = &Владелец
			|	И НЕ СвязиПрочихПоказателейСчета.Ссылка.ПометкаУдаления
			|	И СвязиПрочихПоказателейСчета.Счет = &Счет
			|
			|СГРУППИРОВАТЬ ПО
			|	СвязиПрочихПоказателейСчета.ТипДвижения,
			|	СвязиПрочихПоказателейСчета.Счет";
			
			Запрос.УстановитьПараметр("Владелец", Показатель);
			Запрос.УстановитьПараметр("Счет", ЭлементСправочника);
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				LineAccountsResponse = ПолучитьXDTO("LineAccountsResponse");
				LineAccountsResponse.ReferenceGUID = XMLСтрока(ВыборкаДетальныеЗаписи.Счет);
				LineAccountsResponse.Accounts = XMLСтрока(ВыборкаДетальныеЗаписи.Счет);
				LineAccountsResponse.ParentGUID = Строка.ReferenceGUID;
				LineAccountsResponse.MovementType = Строка(ВыборкаДетальныеЗаписи.ТипДвижения);
				LineAccountsResponse.OtherIndicators = XMLСтрока(Показатель);
				ArrayAccountsResponse.LineAccountsResponse.Добавить(LineAccountsResponse);
			КонецЦикла;
			
		КонецЕсли;	
	КонецЦикла;
	
	
	
	Возврат  ArrayAccountsResponse;
	
КонецФункции // BudgeIitemAccounts(ArrayAccountsQuery)()

Функция ComplianceGoodsWithOtherIndicators(ArrayComplianceGoodsWithOtherIndicators) Экспорт 
	
	
	
	Массив = Новый Массив;
	Массив.Добавить("map_Organizations");
	Массив.Добавить("map_NomenclatureGroups");
	Массив.Добавить("map_IND");
	
	
	
	
	Результат = ПолучитьЗначения_ID_из_SQL_по_GUID(Массив);
	
	
	Если ArrayComplianceGoodsWithOtherIndicators.ComplianceGoodsWithOtherIndicators.Количество() Тогда 
		
		ИмяБазы = ArrayComplianceGoodsWithOtherIndicators.ComplianceGoodsWithOtherIndicators[0].BaseName;
		Организация = Справочники.Организации.НайтиПоРеквизиту("БИН",ArrayComplianceGoodsWithOtherIndicators.ComplianceGoodsWithOtherIndicators[0].IIN);	
		IDОрганизации =ПолучитьIDСправочника(Организация,"map_Organizations",Результат); 
		ТекстЗапросаУдаления = "DELETE  FROM map_ComplianceGoodsWithOtherIndicators 
		|WHERE [HeadCompany] = '"+IDОрганизации+"' AND 
		|Base = '"+ИмяБазы+"'"; 
		
	Иначе
		Возврат "Не записей в таблице";
		
	КонецЕсли;
	
	
	
	Для Каждого Показателль Из ArrayComplianceGoodsWithOtherIndicators.ComplianceGoodsWithOtherIndicators Цикл 
		
		
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_ComplianceGoodsWithOtherIndicators]
		|           ([Base]
		|           ,[NomenclatureGroup]
		|           ,[HeadCompany]
		|           ,[OtherIndicators])
		|     VALUES
		|           (N'"+ИмяБазы+"'
		|           ,'"+ПолучитьIDСправочника(Показателль.PRS_GUID,"map_NomenclatureGroups",Результат)+"'
		|           ,'"+IDОрганизации+"'
		|           ,'"+ПолучитьIDСправочника(Показателль.OtherInd_GUID,"map_IND",Результат)+"')";
		
		
		Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
		
	КонецЦикла; 
	
	Возврат "Перенесены справочники";
	

КонецФункции // ComplianceGoodsWithOtherIndicators(ArrayComplianceGoodsWithOtherIndicators)()

Функция GetKPI(IIN="")Экспорт

	ArrayOfKPI = ПолучитьXDTO("ArrayOfKPI");
	
	Если Не ЗначениеЗаполнено(IIN) Тогда
    	Возврат ArrayOfKPI;
	КонецЕсли;    
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.БИН = &БИН";
	
	Запрос.УстановитьПараметр("БИН",IIN);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	

	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
    	Возврат ArrayOfKPI;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеПоказателиДеятельностиБизнесНаправления.Ссылка КАК Ссылка,
		|	КлючевыеПоказателиДеятельностиБизнесНаправления.Ссылка.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	КлючевыеПоказателиДеятельностиБизнесНаправления.Ссылка.Код КАК Код,
		|	КлючевыеПоказателиДеятельностиБизнесНаправления.Ссылка.Наименование КАК Наименование,
		|	КлючевыеПоказателиДеятельностиБизнесНаправления.Ссылка.Родитель КАК Родитель,
		|	КлючевыеПоказателиДеятельностиБизнесНаправления.Ссылка.КодСправочника КАК КодСправочника
		|ИЗ
		|	Справочник.КлючевыеПоказателиДеятельности.БизнесНаправления КАК КлючевыеПоказателиДеятельностиБизнесНаправления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КлючевыеПоказателиДеятельностиБизнесНаправления.БизнесНаправление = Организации.БизнесНаправление
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
	
	
	Запрос.УстановитьПараметр("Организация",НайденнаяОрг);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		LineKPI 			= ПолучитьXDTO("LineKPI");
		LineKPI.Code 		= ВыборкаДетальныеЗаписи.Код;
		LineKPI.Name 		= ВыборкаДетальныеЗаписи.Наименование;
		LineKPI.GUID 		= XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка);
		LineKPI.CodeRef 	= ВыборкаДетальныеЗаписи.КодСправочника;
		LineKPI.ParentGUID 	= XMLСтрока(ВыборкаДетальныеЗаписи.Родитель);
		LineKPI.ItemGUID	= XMLСтрока(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		
		ArrayOfKPI.LineKPI.Добавить(LineKPI);
	КонецЦикла;
	
    Возврат ArrayOfKPI;
	
КонецФункции // GetKPI(IIN)()

Функция SetDocKPI(aDocKPI) Экспорт
	
	
	   авКПД = Документы.КПД.НайтиПоРеквизиту("НомерВходящего",aDocKPI.IncomingDoc);
	   
	   Если авКПД.Ссылка.Пустая() Тогда  
		   ДокОбъект  = Документы.КПД.СоздатьДокумент();
	   Иначе  
		  ДокОбъект =  авКПД.Ссылка.ПолучитьОбъект(); 
	  КонецЕсли;
	  
	  ДокОбъект.Дата           = aDocKPI.Date;
	  ДокОбъект.НомерВходящего = aDocKPI.IncomingDoc;
	  ДокОбъект.Организация    = Справочники.Организации.НайтиПоРеквизиту("БИН",aDocKPI.OrganizationINN);
	  ДокОбъект.ТекущийГод    = aDocKPI.ThisYear;
	  ДокОбъект.Комментарий    = aDocKPI.Comment;
	  ДокОбъект.Версия        = Справочники.Версии.ПолучитьСсылку(Новый УникальныйИдентификатор(aDocKPI.VersionGUID));
	  Для Каждого LineDocKPI Из aDocKPI.ArrayLineDocKPI Цикл
		    СтрокаТЧ = ДокОбъект.Состав.Добавить();
			СтрокаТЧ.КлючевойПоказатель = Справочники.КлючевыеПоказателиДеятельности.ПолучитьСсылку(Новый УникальныйИдентификатор(LineDocKPI.KPI_GUID));
			СтрокаТЧ.Код              = СтрокаТЧ.КлючевойПоказатель.Код; 
			СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.КлючевойПоказатель.ЕдиницаИзмерения;
			СтрокаТЧ.Январь           = LineDocKPI.M1;
			СтрокаТЧ.Февраль          = LineDocKPI.M2;
			СтрокаТЧ.Март             = LineDocKPI.M3;
			СтрокаТЧ.Апрель           = LineDocKPI.M4;
			СтрокаТЧ.Май              = LineDocKPI.M5;
			СтрокаТЧ.Июнь             = LineDocKPI.M6;
			СтрокаТЧ.Июль             = LineDocKPI.M7;
			СтрокаТЧ.Август           = LineDocKPI.M8;
			СтрокаТЧ.Сентябрь         = LineDocKPI.M9;
			СтрокаТЧ.Октябрь          = LineDocKPI.M10;
			СтрокаТЧ.Ноябрь           = LineDocKPI.M11;
			СтрокаТЧ.Декабрь          = LineDocKPI.M12;
			СтрокаТЧ.ТекущийГод       = LineDocKPI.YEAR;
			СтрокаТЧ.ГодПлюс1         = LineDocKPI.YEAR1;
			СтрокаТЧ.ГодПлюс2         = LineDocKPI.YEAR2;
			СтрокаТЧ.ГодПлюс3         = LineDocKPI.YEAR3;
			СтрокаТЧ.ГодПлюс4         = LineDocKPI.YEAR4;
			
			
		КонецЦикла;
		Попытка
			ДокОбъект.Записать(); 
			Возврат "Запись успешна"; 
		Исключение  
			Возврат "Не удалось записать документ";
		КонецПопытки;
		
 
КонецФункции // SetDocKPI(aDocKPI)()
 
Функция  SensitivityToPossibleCourseChanges() Экспорт
	
	ArraySensitivityToPossibleCourseChanges = ПолучитьXDTO("ArraySensitivityToPossibleCourseChanges");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧувствительностьКВозможнымИзменениямКурса.Период КАК Период,
	|	ЧувствительностьКВозможнымИзменениямКурса.Валюта.БуквенныйКод КАК БуквенныйКод,
	|	ЧувствительностьКВозможнымИзменениямКурса.НаправлениеИзмененияКурса КАК НаправлениеИзмененияКурса,
	|	ЧувствительностьКВозможнымИзменениямКурса.СтавкаИзмененияКурса КАК СтавкаИзмененияКурса,
	|	ЧувствительностьКВозможнымИзменениямКурса.ПрочийПоказатель КАК ПрочийПоказатель,
	|	ЧувствительностьКВозможнымИзменениямКурса.ПрочийПоказатель.КодСправочника КАК ПрочийПоказательКодСправочника
	|ИЗ
	|	РегистрСведений.ЧувствительностьКВозможнымИзменениямКурса КАК ЧувствительностьКВозможнымИзменениямКурса";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		SensitivityToPossibleCourseChanges = ПолучитьXDTO("SensitivityToPossibleCourseChanges");
		SensitivityToPossibleCourseChanges.Period       = ВыборкаДетальныеЗаписи.Период;
		SensitivityToPossibleCourseChanges.IndCode          = ВыборкаДетальныеЗаписи.ПрочийПоказательКодСправочника;
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.БуквенныйКод) Тогда
			SensitivityToPossibleCourseChanges.Currency     = ВыборкаДетальныеЗаписи.БуквенныйКод;
		КонецЕсли;
		SensitivityToPossibleCourseChanges.Direction    = Строка(ВыборкаДетальныеЗаписи.НаправлениеИзмененияКурса);
		SensitivityToPossibleCourseChanges.ExchangeRate = ВыборкаДетальныеЗаписи.СтавкаИзмененияКурса;		
		
		ArraySensitivityToPossibleCourseChanges.SensitivityToPossibleCourseChanges.Добавить(SensitivityToPossibleCourseChanges); 		
	КонецЦикла;
	
	Возврат ArraySensitivityToPossibleCourseChanges;  	
КонецФункции

Функция CheckUpdatesOtherInd(KindOtherInd,IIN)  Экспорт 
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.БИН = &БИН";
	
	Запрос.УстановитьПараметр("БИН",IIN);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;
	ТипПоказателя = Справочники.ТипыПрочихПоказателей.НайтиПоКоду(KindOtherInd);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбновленияПрочихПоказателей.ВидПрочегоПоказателя КАК ВидПрочегоПоказателя,
		|	ОбновленияПрочихПоказателей.Организация КАК Организация,
		|	ОбновленияПрочихПоказателей.НомерВерсии КАК НомерВерсии
		|ИЗ
		|	РегистрСведений.ОбновленияПрочихПоказателей КАК ОбновленияПрочихПоказателей
		|ГДЕ
		|	ОбновленияПрочихПоказателей.Организация = &Организация
		|	И ОбновленияПрочихПоказателей.ВидПрочегоПоказателя.ТипПоказателя = &ТипПоказателя";
	
	Запрос.УстановитьПараметр("Организация", НайденнаяОрг);
	Запрос.УстановитьПараметр("ТипПоказателя", ТипПоказателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат Истина;
		
	Иначе 
		
		Возврат Ложь;
		
	КонецЕсли;
	

	
	

	//Возврат Истина;

КонецФункции // CheckUpdatesOtherInd()


Функция UpdatesOtherIndInstalled(UpdateResult,IIN) Экспорт 
	
	
	Если UpdateResult Тогда  
		
		
		НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.БИН = &БИН";
		
		Запрос.УстановитьПараметр("БИН",IIN);
		РезОрг = запрос.Выполнить().Выбрать();
		если РезОрг.Следующий() Тогда
			НайденнаяОрг = РезОрг.Организация;
		КонецЕсли;	
		
		Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбновленияПрочихПоказателей.ВидПрочегоПоказателя КАК ВидПрочегоПоказателя,
		|	ОбновленияПрочихПоказателей.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОбновленияПрочихПоказателей КАК ОбновленияПрочихПоказателей
		|ГДЕ
		|	ОбновленияПрочихПоказателей.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", НайденнаяОрг);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока  ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			Набор = РегистрыСведений.ОбновленияПрочихПоказателей.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(НайденнаяОрг); 
			Набор.Прочитать();
			Набор.Очистить();
			Набор.Записать(Истина);
			
			
		КонецЦикла;
	КонецЕсли;
	
		
	Возврат "Успех";	
		
	
	
	
	
КонецФункции // CheckUpdatesOtherInd(UpdateResult,KindOtherInd,IIN)()


Функция ЗагрузитьДокументПрочиеПоказателиВ_SQL(Знач Объект) Экспорт


	Массив = Новый Массив;
	Массив.Добавить("map_Organizations");
	Массив.Добавить("map_rpt_ReportLines");
	Массив.Добавить("map_Revenues");
	Массив.Добавить("map_Expenditures");
	Массив.Добавить("map_AssetCategories");
	//Массив.Добавить("Counterparties");
	Массив.Добавить("map_NomenclatureGroups");
	Массив.Добавить("map_TypesOfMovements");
	Массив.Добавить("map_IND"); 
	Массив.Добавить("map_IND_Type"); 
	//Массив.Добавить("map_Currencies"); 
	Массив.Добавить("map_ChartOfAccounts"); 
	
	
	
	
	
	Результат = ИнтеграцияДЗО.ПолучитьЗначения_ID_из_SQL_по_GUID(Массив);
	IDОрганизации =ПолучитьIDСправочника(Объект.Организация,"map_Organizations",Результат); 
	
	
	ТекстЗапросаУдаления = "DELETE  FROM map_DocumentOtherIndicators 
	|WHERE [Company] = '"+IDОрганизации+"' AND ";
	Если ЗначениеЗаполнено(Объект.НомерВходящего) Тогда
		ТекстЗапросаУдаления = ТекстЗапросаУдаления + "[RegistratorGUID] = '" + СокрЛП(Объект.НомерВходящего) + "'";
	Иначе
		ТекстЗапросаУдаления = ТекстЗапросаУдаления + "[RegistratorNumber] = '"+СокрЛП(Объект.Номер)+"'";// AND 
	КонецЕсли;
		
	//|Period = '"+Формат(Объект.Дата,"ДФ='yyyyMMdd HH:mm:ss'")+"'";
	ВыполнитьИнструкциюУдаления(ТекстЗапросаУдаления);
	//Сообщить(Ответ);
	
	СтрокаСообщения = "";
	Для Каждого СтрокаТЧ Из Объект.ПрочиеПоказатели Цикл
		 DateFormation = ?(ЗначениеЗаполнено(СтрокаТЧ.DateFormation),Формат(СтрокаТЧ.DateFormation,"ДФ='yyyyMMdd'"),NULL);
		 MaturityDate = ?(ЗначениеЗаполнено(СтрокаТЧ.MaturityDate),Формат(СтрокаТЧ.MaturityDate,"ДФ='yyyyMMdd'"),NULL);
		 
		Если ЗначениеЗаполнено(СокрЛП(СтрокаТЧ.КонтрагентИИН)) Тогда
			IDКонтрагент = ПолучитьIDКонтрагента(СокрЛП(СтрокаТЧ.КонтрагентИИН));
		Иначе 
			IDКонтрагент = 0;
		КонецЕсли;
		//Сообщить(СтрокаТЧ.КодПоказателя); 
		 
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_DocumentOtherIndicators]
		|           ([indicator]
		|           ,[indicatorCode]
		|           ,[Sum]
		|           ,[account]
		|           ,[counterparty]
		|           ,[AmountDebt]
		|           ,[AmountDebtMore100Count]
		|           ,[AmountDebtMore500Count]
		|           ,[AmountDebtMore100]
		|           ,[AmountDebtMore500]
		|           ,[BS]
		|           ,[BSname]
		|           ,[AmountBalance]
		|           ,[AmountBalancePledge]
		|           ,[Stock]
		|           ,[BankName]
		|           ,[DepositName]
		|           ,[DateFormation]
		|           ,[MaturityDate]
		|           ,[DepositRate]
		|           ,[PRS]
		|           ,[RatioApplicable]
		|           ,[CUR]
		|           ,[ValuePercent]
		|           ,[ReportSign]
		|           ,[FairValue]
		|           ,[HierarchyLevel]
		|           ,[FairValueBoolean]
		|           ,[OnRequest]
		|           ,[less3months]
		|           ,[Between3and12months]
		|           ,[Between1and5years]
		|           ,[TotalLiquidity]
		|           ,[Quantity]
		|           ,[SharePercent]
		|           ,[TypeOtherIndicator]
		|           ,[Company]
		|           ,[RegistratorGUID]
		|           ,[TypesOfMovement]
		|           ,[CourseDirection] 
		|           ,[ValueBool]
		|           ,[ValueString]
		|           ,[ValueDate]
		|           ,[ValueNumerical]
		|           ,[Opening] 
		|           ,[Closing]
		|           ,[Period]
		|			,[RegistratorNumber])
		|     VALUES
		|           ('"+ПолучитьIDСправочника(СтрокаТЧ.Показатель,"map_IND",Результат)+"'
		|           ,N'"+СокрЛП(СтрокаТЧ.КодПоказателя)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Sum)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.account,"map_ChartOfAccounts",Результат)+"'
		|           ,'"+IDКонтрагент+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebt)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore100)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore500Count)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore100)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore500)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.BS,"map_rpt_ReportLines",Результат)+"'
		|           ,N'"+СтрокаТЧ.BSname+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountBalance)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountBalancePledge)+"'
		|           ,N'"+СтрокаТЧ.Stock+"'
		|           ,N'"+СтрокаТЧ.BankName+"'
		|           ,N'"+СтрокаТЧ.DepositName+"'
		|           ,'"+DateFormation+"'
		|           ,'"+MaturityDate+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.DepositRate)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.PRS,"map_NomenclatureGroups",Результат)+"'
		|           ,'"+?(СтрокаТЧ.RatioApplicable=Истина,1,0)+"'
		|           ,'"+57+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.ValuePercent)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.ReportSign)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.FairValue)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.HierarchyLevel)+"'
		|           ,'"+?(СтрокаТЧ.FairValueBoolean=Истина,1,0)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.OnRequest)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.less3months)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Between3and12months)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Between1and5years)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.TotalLiquidity)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Quantity)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.SharePercent)+"'
		|           ,'"+ПолучитьIDСправочника(Объект.ВидПоказателя,"map_IND_Type",Результат)+"'
		|           ,'"+IDОрганизации+"'
		|           ,N'"+?(ЗначениеЗаполнено(Объект.НомерВходящего),СокрЛП(Объект.НомерВходящего),СокрЛП(Объект.Номер))+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.TypeMovement,"map_TypesOfMovements",Результат)+"'
		|           ,N'"+ПеречислениеВозможныеИзмененияКурса(СтрокаТЧ.CourseDirection)+"'
		|           ,'"+?(ТипЗнч(СтрокаТЧ.Значение)=Тип("Булево"),?(СтрокаТЧ.Значение=Истина,1,0),0)+"'
		|           ,N'"+?(ТипЗнч(СтрокаТЧ.Значение)=Тип("Строка"),СтрокаТЧ.Значение,"")+"'
		|           ,'"+?(ТипЗнч(СтрокаТЧ.Значение)=Тип("Дата"),Формат(СтрокаТЧ.Значение,"ДФ='yyyyMMdd'"),Null)+"'
		|           ,'"+?(ТипЗнч(СтрокаТЧ.Значение)=Тип("Число"),УдалитьПробелы(СтрокаТЧ.Значение),0)+"'
		|           ,'"+Формат(Объект.НачалоПериода,"ДФ='yyyyMMdd HH:mm:ss'")+"'
		|           ,'"+Формат(Объект.КонецПериода,"ДФ='yyyyMMdd HH:mm:ss'")+"'
		|           ,'"+Формат(Объект.Дата,"ДФ='yyyyMMdd HH:mm:ss'")+"'
		|           ,'"+СокрЛП(Объект.Номер)+"')";
		
		
		//Сообщить(ТекстЗапросаЗаписи); 
		Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
		Если ТипЗнч(Ответ) = Тип("Строка") Тогда
			СтрокаСообщения = "" +СтрокаСообщения + Ответ + Символы.ПС  +Символы.ПС; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаСообщения;
	
	


КонецФункции // ЗагрузитьДокументnПроциеПоказателиВ_SQL()

Функция ЗагрузитьДокументKPI_В_SQL(Знач Объект) Экспорт 
	
	
	

	Массив = Новый Массив;
	Массив.Добавить("map_Organizations");
	Массив.Добавить("map_KeyPerformanceIndicators");
	Массив.Добавить("map_ItemKPI"); 
	Массив.Добавить("map_Versions"); 
	
	Результат = ИнтеграцияДЗО.ПолучитьЗначения_ID_из_SQL_по_GUID(Массив);
	IDОрганизации =ПолучитьIDСправочника(Объект.Организация,"map_Organizations",Результат); 
	IDВерсии      = ПолучитьIDСправочника(Объект.Версия,"map_Versions",Результат);
	
	
	ТекстЗапросаУдаления = "DELETE  FROM map_DocumentKPI 
	|WHERE [Company] = '"+IDОрганизации+"' AND 
	|registratorGUID = N'"+XMLСтрока(Объект.Ссылка)+"'";
	ВыполнитьИнструкциюУдаления(ТекстЗапросаУдаления);
	
	Попытка
		Год = Формат(Объект.ДатаОтчета,"ДФ='yyyy'");
	Исключение
		Год = Формат(Объект.ПериодПланирования,"ДФ='yyyy'");
	КонецПопытки;

	Для Каждого СтрокаСостава Из Объект.ДанныеКПД Цикл

	  СтрокиСостава = СформироватьСтрокиСостава(СтрокаСостава,Результат,IDОрганизации,Объект,Год,IDВерсии);
	
	  ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_DocumentKPI]
	       |([Company]
	       |,[month]
	       |,[year]
	       |,[kpi]
	       |,[unit]
	       |,[amount]
	       |,[Version]
	       |,[registratorGUID])
	 |VALUES
	 |      "+СтрокиСостава+"";
	
		Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	
	 КонецЦикла;
	

КонецФункции // ЗагрузитьДокументKPI_В_SQL() 

Процедура ЗаписатьСправочникВ_SQL(ИмяСправочника,ИмяТаблицы,ЕстьРодитель=Истина) Экспорт  
	
	
	ТекстНаИсполнение = "TRUNCATE TABLE [dbo].["+ИмяТаблицы+"]";
	ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстНаИсполнение);
	
	//Если Метаданные.Справочники[ИмяСправочника].Иерархический  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныйСправочник.Ссылка КАК Ссылка,
		|	ИсходныйСправочник.КодСправочника КАК КодСправочника,
		|	&ЕстьРодитель
		|	ИсходныйСправочник.Наименование КАК Наименование,
		|	ИсходныйСправочник.Код КАК Код
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК ИсходныйСправочник
		|ГДЕ
		|	НЕ ИсходныйСправочник.ПометкаУдаления
		|Упорядочить по
		| Код
		|";
		
		Если ЕстьРодитель Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ЕстьРодитель"," ИсходныйСправочник.Родитель КАК Родитель,");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ЕстьРодитель"," ");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстЗапросаЗаписи = "INSERT INTO [dbo].["+ИмяТаблицы+"]
			|([GUID]
			|,[Name]
			|,[Code]
			|,[Parent])
			|VALUES
			|('"+XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка)+"'
			|,'"+ВыборкаДетальныеЗаписи.Наименование+"'
			|,'"+?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодСправочника),ВыборкаДетальныеЗаписи.КодСправочника,ВыборкаДетальныеЗаписи.Код)+"'
			|,'"+?(ЕстьРодитель,XMLСтрока(ВыборкаДетальныеЗаписи.Родитель),"")+"')";
			
			Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи); 
		КонецЦикла;
		
	//Иначе 
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ИсходныйСправочник.Ссылка КАК Ссылка,
	//	|	ИсходныйСправочник.КодСправочника КАК Код,
	//	|	ИсходныйСправочник.Наименование КАК Наименование
	//	|ИЗ
	//	|	Справочник."+ИмяСправочника+" КАК ИсходныйСправочник
	//	|ГДЕ
	//	|	НЕ ИсходныйСправочник.ПометкаУдаления
	//	|Упорядочить по
	//	| Код
	//	|";
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		ТекстЗапросаЗаписи = "INSERT INTO [dbo].["+ИмяТаблицы+"]
	//		|([GUID]
	//		|,[Name]
	//		|,[Code])
	//		|VALUES
	//		|('"+XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка)+"'
	//		|,'"+ВыборкаДетальныеЗаписи.Наименование+"'
	//		|,'"+ВыборкаДетальныеЗаписи.Код+"')";
	//		
	//		Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	//		
	//	КонецЦикла;
	//КонецЕсли;
	
	
КонецПроцедуры

	
Функция СформироватьСтрокиСостава(СтрокаСостава,Результат,IDОрганизации,Объект,Год,IDВерсии)
	
	
	                   
	
	
	СтрокаС = "";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+1+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Январь)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+2+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Февраль)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+3+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Март)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+4+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Апрель)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+5+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Май)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+6+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Июнь)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+7+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Июль)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+8+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Август)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+9+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Сентябрь)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+10+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Октябрь)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+11+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Ноябрь)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"'),";
	СтрокаС = СтрокаС + "("+IDОрганизации+","+12+","+Год+","+ПолучитьIDСправочника(СтрокаСостава.КлючевойПоказатель,"map_KeyPerformanceIndicators",Результат)+","+ПолучитьIDСправочника(СтрокаСостава.ЕдиницаИзмерения,"map_ItemKPI",Результат)+","+УдалитьПробелы(СтрокаСостава.Декабрь)+","+IDВерсии+",N'"+XMLСтрока(Объект.Ссылка)+"')";
	
	
	
	Возврат СтрокаС; 
	
КонецФункции // СформироватьСтрокиСостава()

Функция ПеречислениеВозможныеИзмененияКурса(ЗначениеПеречисления)

	Если ЗначениеПеречисления = Перечисления.ВозможныеИзмененияКурса.Уменьшение Тогда
		Возврат "-";
	ИначеЕсли  ЗначениеПеречисления = Перечисления.ВозможныеИзмененияКурса.Увеличение Тогда
		Возврат "+";
	Иначе
		Возврат "";
	КонецЕсли;
	

КонецФункции // ПеречислениеВозможныеИзмененияКурса()


функция ЗаполнитьПараметрыXDTO(Класс,СтруктураПараметров) Экспорт
	
	ТипWSПараметра = ФабрикаXDTO.Пакеты.Получить("http://EtalonRefSyncEx").Получить(Класс);
	WSПараметр = ФабрикаXDTO.Создать(ТипWSПараметра);
	
	Для Каждого Параметр из СтруктураПараметров Цикл
		Если ТипЗнч(Параметр.Значение) <> Тип("ОбъектXDTO") Тогда
			Если ТипЗнч(Параметр.Значение) = Тип("Дата") Тогда
				WSПараметр[Параметр.Ключ]= Параметр.Значение;
				WSПараметр[Параметр.Ключ]= Строка(Параметр.Значение);
			ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Число")  Тогда
				WSПараметр[Параметр.Ключ]= Параметр.Значение;
			ИначеЕсли  ТипЗнч(Параметр.Значение) = Тип("Булево") Тогда
				Если Параметр.Значение Тогда
					WSПараметр[Параметр.Ключ] = 1;
				Иначе
					WSПараметр[Параметр.Ключ] = 0;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Параметр.Значение) Тогда
					Если ТипЗнч(Параметр.Значение) <> Тип("ТаблицаЗначений") Тогда
						WSПараметр[Параметр.Ключ]= Параметр.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат WSПараметр;
	
КонецФункции // ЗаполнитьПараметрыКлассаЕСБД()

Функция СформироватьСтруктуруПараметровXDTO(Класс)  Экспорт
	
	СтруктураПараметров = Новый Структура;
	ТипWSПараметра = ФабрикаXDTO.Пакеты.Получить("http://EtalonRefSyncEx").Получить(Класс);
	КоллекцияСвойств = ТипWSПараметра.Свойства;
	Если КоллекцияСвойств.Количество() > 0 Тогда
		Для Каждого Свойство Из КоллекцияСвойств Цикл
			СтруктураПараметров.Вставить(Свойство.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции // СформироватьСтруктуруПараметровКлассаЕСБД()

Функция ПолучитьXDTO(Класс) Экспорт
	
	СтруктураПараметров =  СформироватьСтруктуруПараметровXDTO(Класс);
	Возврат  ЗаполнитьПараметрыXDTO(Класс,СтруктураПараметров);
	
КонецФункции // ПолучитьXDTOклассаЕСБД()

Функция ПолучитьIDСправочника(Ссылка,ИмяТаблицы,ДанныеSQL) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		GUID = Ссылка;
	Иначе 
		Если ЗначениеЗаполнено(Ссылка)Тогда
			GUID = XMLСтрока(Ссылка); 
		Иначе 
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТЗ = ДанныеSQL[ИмяТаблицы];
	Результат = ДанныеSQL[ИмяТаблицы].Найти(GUID,"GUID");	Если Результат <> Неопределено Тогда
		Возврат Результат.ID;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьIDСправочника()

Функция ПолучитьIDКонтрагента(ИИН)

	ID = ИнтеграцияДЗО.ПолучитьIDКонтрагентаПоИИН(ИИН);	
	Возврат ID; 

КонецФункции // ПолучитьIDКонтрагента()

Функция УдалитьПробелы(ТекЧисло) Экспорт
	
	Если ЗначениеЗаполнено(ТекЧисло) Тогда
		Возврат СтрЗаменить(Формат(ТекЧисло,"ЧГ="),",",".");
	Иначе
		Возврат "0";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМесяцПоЧислу()  Экспорт

	Соответствие = Новый Соответствие;
	Соответствие.Вставить(1,"Январь");
	Соответствие.Вставить(2,"Февраль");
	Соответствие.Вставить(3,"Март");
	Соответствие.Вставить(4,"Апрель");
	Соответствие.Вставить(5,"Май");
	Соответствие.Вставить(6,"Июнь");
	Соответствие.Вставить(7,"Июль");
	Соответствие.Вставить(8,"Август");
	Соответствие.Вставить(9,"Сентябрь"); 
	Соответствие.Вставить(10,"Октябрь");
	Соответствие.Вставить(11,"Ноябрь");
	Соответствие.Вставить(12,"Декабрь"); 
	
	Возврат Соответствие;

КонецФункции // ПолучитьМесяцПоЧислу()

Функция ПолучитьЧислоМесяца() Экспорт

	 Структура = Новый Структура;
	 Структура.Вставить("Январь",1);
	 Структура.Вставить("Февраль",2);
	 Структура.Вставить("Март",3);
	 Структура.Вставить("Апрель",4);
	 Структура.Вставить("Май",5);
	 Структура.Вставить("Июнь",6);
	 Структура.Вставить("Июль",7);
	 Структура.Вставить("Август",8);
	 Структура.Вставить("Сентябрь",9);
	 Структура.Вставить("Октябрь",10);
	 Структура.Вставить("Ноябрь",11);
	 Структура.Вставить("Декабрь",12);
	 
	 
	 Возврат Структура;
	 

КонецФункции // ПолучитьЧислоМесяца()

Функция ПолучитьСчетаСтатьиБюджетаВИерархии(Статья) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка КАК Ссылка,
	|	СтатьиБюджетов.СписокСчетов КАК СписокСчетов
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка В ИЕРАРХИИ(&ЭлементСправочника)";
	
	Запрос.УстановитьПараметр("ЭлементСправочника",Статья);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	СписокСчетов = "";
	Для Каждого СтрокаВыгрузки Из Выгрузка Цикл
		
		СписокСчетов = СписокСчетов + СтрокаВыгрузки.СписокСчетов;
		
	КонецЦикла;  
	
	Возврат СписокСчетов;
	
КонецФункции // ПолучитьСчетаСтатьиБюджетаВИерархии()


Функция Соединение() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Попытка
		
		Команда     = Новый COMОбъект("ADODB.Command");
		Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");
		
		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 600;
		Соединение.ConnectionTimeout = 180;
		
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
		
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	СтркутураСоединения = Новый Структура("Команда,Выборка,Соединение",Команда,Выборка,Соединение);
	Возврат СтркутураСоединения;
	
КонецФункции

Функция ВыполнитьИнструкциюУдаления(Запрос) Экспорт
	
	СтркутураСоединения = ИнтеграцияДЗО.Соединение();
	Попытка
		СтркутураСоединения.Соединение.Execute(Запрос,,128);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	
	
	
КонецФункции // ВыполнитьИнструкцию()

Функция ВыполнитьИнструкциюЗаписи(Запрос) Экспорт
	
	СтркутураСоединения = ИнтеграцияДЗО.Соединение();
	Попытка
		СтркутураСоединения.Соединение.Execute(Запрос,,128);
		Возврат Ложь;
	Исключение  
		Сообщить(ОписаниеОшибки());
		//Ошибка = ОписаниеОшибки();
		Возврат Истина;
	КонецПопытки;
	
КонецФункции // ВыполнитьИнструкциюЗаписи()

Функция ВыполнитьИнструкциюЧтения(Запрос)  Экспорт
	
	СтркутураСоединения = ИнтеграцияДЗО.Соединение();
	Попытка
		СтркутураСоединения.Команда.CommandText = Запрос;      
		СтркутураСоединения.Выборка = СтркутураСоединения.Команда.Execute();
		Возврат СтркутураСоединения.Выборка; 
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции // ВыполнитьИнструкциюЧтения()


Функция ПолучитьЗначения_ID_из_SQL_по_GUID(МассивТаблиц) Экспорт
	
	Структура = Новый Структура;
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл 
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("GUID");
		ТЗ.Колонки.Добавить("ID"); 
		
		
		ТекстЗапроса = "SELECT [GUID]
		|,[id]
		|FROM [dbo].["+ИмяТаблицы+"]";		
		
		
		
		Выборка = ВыполнитьИнструкциюЧтения(ТекстЗапроса);
		Если Выборка.BOF = Ложь Тогда
			Выборка.MoveFirst();
			Пока Выборка.EOF = Ложь Цикл 
				
				СтрокаТЗ = ТЗ.Добавить(); 
				СтрокаТЗ.GUID = Выборка.Fields("GUID").Value; 
				СтрокаТЗ.ID = Выборка.Fields("ID").Value; 
				Выборка.MoveNext();
			КонецЦикла;
		КонецЕсли;
		
		Структура.Вставить(ИмяТаблицы,ТЗ);
		
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции // ПолучитьЗначенияIDИзSQL()

Функция ПолучитьIDКонтрагентаПоИИН(ИИН) Экспорт
	
	Id=0;
	
	ТекстЗапроса = "SELECT TOP (1) 
	|    [id]
	|FROM [BW].[dbo].[Counterparties]
	|where IIN = '"+ИИН+"'";
	
	Выборка = ВыполнитьИнструкциюЧтения(ТекстЗапроса);
	Если Выборка.BOF = Ложь Тогда
		Выборка.MoveFirst();
		Пока Выборка.EOF = Ложь Цикл 
			Id =  Выборка.Fields("id").Value; 
			Выборка.MoveNext();
		КонецЦикла;
	КонецЕсли;
	
	Возврат Id;
	
КонецФункции // ПолучитьIDКонтрагентаПоИИН()

Функция ПолучитьIDВалюты(Code) Экспорт
	
	Id=0;
	
	ТекстЗапроса = "SELECT TOP (1) 
	|    [id]
	|FROM [BW].[dbo].[map_Currencies]
	|where Code = '"+Code+"'";
	
	Выборка = ВыполнитьИнструкциюЧтения(ТекстЗапроса);
	Если Выборка.BOF = Ложь Тогда
		Выборка.MoveFirst();
		Пока Выборка.EOF = Ложь Цикл 
			Id =  Выборка.Fields("id").Value; 
			Выборка.MoveNext();
		КонецЦикла;
	КонецЕсли;
	
	Возврат Id;
	
КонецФункции // ПолучитьIDКонтрагентаПоИИН()

Процедура ЗагрузитьДокументПрочиеПоказатели() Экспорт
	Документы.ПрочиеПоказателиMDM.ОтправитьВSQLНаСервере();	
КонецПроцедуры

Функция ПолучитьДанныеДокументаПрочиеПоказателиИзSQLПерваяЗапись(Объект) Экспорт
	
	
	ТекстЗапроса = "SELECT TOP (1) * 
	|FROM [BW].[dbo].[map_DocumentOtherIndicators]
	|where RegistratorGUID = '"+СокрЛП(Объект.НомерВходящего)+"'";
	
	Выборка = ВыполнитьИнструкциюЧтения(ТекстЗапроса);
	Возврат Выборка;
	
КонецФункции // ПолучитьIDКонтрагентаПоИИН()

Функция ПолучитьДанныеДокументаПрочиеПоказателиИзSQL(Объект) Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	ТекстЗапроса = "SELECT * 
	|FROM ["+НастройкиОбмена.БазаДанныхSQL+"].[dbo].[map_DocumentOtherIndicators]
	|where RegistratorGUID = '"+СокрЛП(Объект.НомерВходящего)+"'";
	
	Выборка = ВыполнитьИнструкциюЧтения(ТекстЗапроса);
	Возврат Выборка;
	
КонецФункции // ПолучитьIDКонтрагентаПоИИН()

Процедура ЗагрузитьДокументВSQL() Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаданиеНаИнтеграциюВSQL.Документ КАК Документ,
	               |	ЗаданиеНаИнтеграциюВSQL.Интегрирован КАК Интегрирован
	               |ИЗ
	               |	РегистрСведений.ЗаданиеНаИнтеграциюВSQL КАК ЗаданиеНаИнтеграциюВSQL
	               |ГДЕ
	               |	ЗаданиеНаИнтеграциюВSQL.Интегрирован = ЛОЖЬ
	               |	И ЗаданиеНаИнтеграциюВSQL.Документ.ПометкаУдаления = ЛОЖЬ";
	Рез = Запрос.Выполнить().Выбрать();
	пока рез.Следующий() Цикл
		Об = Рез.Документ.ПолучитьОбъект();
		Об.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;	
КонецПроцедуры

Функция GetCodeKOF() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлассификаторОсновныхФондов.Ссылка КАК Ссылка,
	               |	КлассификаторОсновныхФондов.Код КАК Код,
	               |	КлассификаторОсновныхФондов.Наименование КАК Наименование,
	               |	КлассификаторОсновныхФондов.КодКОФ КАК КодКОФ
	               |ИЗ
	               |	Справочник.КлассификаторОсновныхФондов КАК КлассификаторОсновныхФондов";
	Рез = Запрос.Выполнить().Выбрать();
	
	ArraysOfKOF = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArraysOfKOF"));
	
	Пока Рез.Следующий() Цикл
		
		ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfKOF"));
		ТекСтрока.CodeKOF 	= Рез.КодКОФ;
		ArraysOfKOF.ArrayOfKOF.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат ArraysOfKOF;
КонецФункции
