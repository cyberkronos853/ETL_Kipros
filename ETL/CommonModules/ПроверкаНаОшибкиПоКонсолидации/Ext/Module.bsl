#Область СлужебныйПрограммныйИнтерфейс
	
//   СтруктураПараметров - содержит:
//     * ДатаНачала - Дата 
//     * Дата Окончания - Дата 
//     * База - Строка
Процедура ВыполнитьПроверку(ВсеПроверки, МассивПроверок = Неопределено, Коннектор, СтруктураПараметров, ТаблицаОшибок) Экспорт  
	Если ВсеПроверки тогда
		МассивПроверок = ПолучитьМассивВсехОбработчиковПроверок();
	КонецЕсли;
	Для Каждого ОбработчикПроверок из МассивПроверок цикл
		Выполнить(ОбработчикПроверок);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПолучитьМассивВсехОбработчиковПроверок()
	МассивПроверок = Новый Массив;
	МассивПроверок.Добавить("ПроверкаЗаполненияЭталоновСтатьиЗатрат(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаЗаполненияЭталоновДоходы(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаЗаполненияЭталоновСтатьиДДС(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаЗаполненияЭталоновНоменклатурныеГруппы(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаКодовКОФОсновныеСредства(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаКодовКОФНематериальныеАктивы(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаКодовКОФСтроительныеОбъекты(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаЭталоновСчетов(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаНаЗакрытиеСчетов(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаВалютныхСчетов(Коннектор, СтруктураПараметров, ТаблицаОшибок)");
	МассивПроверок.Добавить("ПроверкаМаппингаСчетов(Коннектор, СтруктураПараметров, ТаблицаОшибок)");

	Возврат МассивПроверок;	
КонецФункции

Процедура ПроверкаЗаполненияЭталоновСтатьиЗатрат(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	Аналитика = "Expenditure";  
	Уник = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");	  
	СтруктураПараметров.Вставить("ИмяВТ", Уник);
	РезультатВТ = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(ЗапросПоАналитикеВТ(Аналитика, СтруктураПараметров));
	
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросПоАналитике(Аналитика, СтруктураПараметров));
	
	Если РезультатВТ.ЕстьОшибки ИЛИ Результат.ЕстьОшибки Тогда 
		
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаЗаполненияЭталоновСтатьиЗатрат";

		Отказ = Истина;
		
	Иначе
		Для каждого Данные из Результат.Данные Цикл
			Если Данные.AccountCode = "2930" ИЛИ Данные.ParentAccountCode = "2930"
				ИЛИ Данные.CorAccountCode = "5710" Тогда //исключим проверку т.к. могут быть пустые статьи при закрытии незавершенки
				Продолжить;
			КонецЕсли;		
			//Если стр.АналитикаНеЗаполнена Тогда
			//	ЕстьОшибки = истина;
			//	ТекстОшибки = "--> по обороту Счет "+стр.Счет+" - Корсчет "+стр.КорСчет+" на сумму "+Строка(Стр.СуммаОборот)+" не заполнено субконто "+ ИмяАналитики;
			//	Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
			//	НовТ = ТаблицаОшибок.Добавить();
			//	НовТ.ТекстОшибки = ТекстОшибки;
			//КонецЕсли;
			
			Если Данные.IsSubcontoNull Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " по обороту Счет "+Данные.AccountCode+" - Корсчет "+Данные.CorAccountCode+" на сумму "+Строка(Данные.TotalRegulatedAmount)+" не заполнено субконто СтатьиЗатрат";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			ИначеЕсли Данные.IsMapNull Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " по обороту Счет "+Данные.AccountCode+" - Корсчет "+Данные.CorAccountCode+" на сумму "+Строка(Данные.TotalRegulatedAmount)+" не заполнен маппинг по "+Данные.Name;
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
			Если Данные.IsMapAccountNull Тогда
				ЕстьОшибки = Истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Указана эталонная статья которая <Не используется> "+Данные.Name+". Необходимо выбрать другой эталон";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

Процедура ПроверкаЗаполненияЭталоновДоходы(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	Аналитика = "Revenue";             
	Уник = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");	  

	СтруктураПараметров.Вставить("ИмяВТ", Уник);
	РезультатВТ = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(ЗапросПоАналитикеВТ(Аналитика, СтруктураПараметров));
	
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросПоАналитике(Аналитика, СтруктураПараметров));
	
	Если РезультатВТ.ЕстьОшибки ИЛИ Результат.ЕстьОшибки Тогда 
		
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаЗаполненияЭталоновДоходы";

		Отказ = Истина;
		
	Иначе
		Для каждого Данные из Результат.Данные Цикл
			Если Данные.AccountCode = "2930" ИЛИ Данные.ParentAccountCode = "2930"
				ИЛИ Данные.CorAccountCode = "5710" Тогда //исключим проверку т.к. могут быть пустые статьи при закрытии незавершенки
				Продолжить;
			КонецЕсли;
		
			//Если стр.АналитикаНеЗаполнена Тогда
			//	ЕстьОшибки = истина;
			//	ТекстОшибки = "--> по обороту Счет "+стр.Счет+" - Корсчет "+стр.КорСчет+" на сумму "+Строка(Стр.СуммаОборот)+" не заполнено субконто "+ ИмяАналитики;
			//	Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
			//	НовТ = ТаблицаОшибок.Добавить();
			//	НовТ.ТекстОшибки = ТекстОшибки;
			//КонецЕсли;
			
			Если Данные.IsSubcontoNull Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " по обороту Счет "+Данные.AccountCode+" - Корсчет "+Данные.CorAccountCode+" на сумму "+Строка(Данные.TotalRegulatedAmount)+" не заполнено субконто Доходы";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			ИначеЕсли Данные.IsMapNull Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " по обороту Счет "+Данные.AccountCode+" - Корсчет "+Данные.CorAccountCode+" на сумму "+Строка(Данные.TotalRegulatedAmount)+" не заполнен маппинг по "+Данные.Name;
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
			Если Данные.IsMapAccountNull Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Указана эталонная статья которая <Не используется> "+Данные.Name+". Необходимо выбрать другой эталон";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаЗаполненияЭталоновСтатьиДДС(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	Аналитика = "CashFlowItem"; 
	Уник = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");	  

	СтруктураПараметров.Вставить("ИмяВТ", Уник);
	РезультатВТ = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(ЗапросПоАналитикеВТ(Аналитика, СтруктураПараметров));
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросПоАналитике(Аналитика, СтруктураПараметров));

	Если РезультатВТ.ЕстьОшибки ИЛИ Результат.ЕстьОшибки Тогда 
		
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаЗаполненияЭталоновСтатьиДДС";

		Отказ = Истина;
		
	Иначе
		Для каждого Данные из Результат.Данные Цикл
			Если Данные.AccountCode = "2930" или Данные.ParentAccountCode = "2930"
				ИЛИ Данные.CorAccountCode = "5710" Тогда //исключим проверку т.к. могут быть пустые статьи при закрытии незавершенки
				Продолжить;
			КонецЕсли;
		
			//Если стр.АналитикаНеЗаполнена Тогда
			//	ЕстьОшибки = истина;
			//	ТекстОшибки = "--> по обороту Счет "+стр.Счет+" - Корсчет "+стр.КорСчет+" на сумму "+Строка(Стр.СуммаОборот)+" не заполнено субконто "+ ИмяАналитики;
			//	Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
			//	НовТ = ТаблицаОшибок.Добавить();
			//	НовТ.ТекстОшибки = ТекстОшибки;
			//КонецЕсли; 
			
			Если Данные.IsSubcontoNull Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " по обороту Счет "+Данные.AccountCode+" - Корсчет "+Данные.CorAccountCode+" на сумму "+Строка(Данные.TotalRegulatedAmount)+" не заполнено субконто СтатьиДДС";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			ИначеЕсли Данные.IsMapNull = 1 Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " по обороту Счет "+Данные.AccountCode+" - Корсчет "+Данные.CorAccountCode+" на сумму "+Строка(Данные.TotalRegulatedAmount)+" не заполнен маппинг по "+Данные.Name;
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
			Если Данные.IsMapAccountNull = 1 Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Указана эталонная статья которая <Не используется> "+Данные.Name+". Необходимо выбрать другой эталон";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаЗаполненияЭталоновНоменклатурныеГруппы(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	Аналитика = "NomenclatureGroup"; 
	Уник = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");	  

	СтруктураПараметров.Вставить("ИмяВТ", Уник);
	РезультатВТ = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(ЗапросПоАналитикеВТ(Аналитика, СтруктураПараметров));
	
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросПоАналитике(Аналитика, СтруктураПараметров));

	Если РезультатВТ.ЕстьОшибки ИЛИ Результат.ЕстьОшибки Тогда 
		
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения к базе в ПроверкаЗаполненияЭталоновНоменклатурныеГруппы";

		Отказ = Истина;
		
	Иначе
		Для каждого Данные из Результат.Данные Цикл
			Если Данные.AccountCode = "2930" или Данные.ParentAccountCode = "2930"
				ИЛИ Данные.CorAccountCode = "5710" Тогда //исключим проверку т.к. могут быть пустые статьи при закрытии незавершенки
				Продолжить;
			КонецЕсли;	
		
			//Если стр.АналитикаНеЗаполнена Тогда
			//	ЕстьОшибки = истина;
			//	ТекстОшибки = "--> по обороту Счет "+стр.Счет+" - Корсчет "+стр.КорСчет+" на сумму "+Строка(Стр.СуммаОборот)+" не заполнено субконто "+ ИмяАналитики;
			//	Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
			//	НовТ = ТаблицаОшибок.Добавить();
			//	НовТ.ТекстОшибки = ТекстОшибки;
			//КонецЕсли;
			
			Если Данные.IsSubcontoNull Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " по обороту Счет "+Данные.AccountCode+" - Корсчет "+Данные.CorAccountCode+" на сумму "+Строка(Данные.TotalRegulatedAmount)+" не заполнено субконто НоменклатурныеГруппы";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			ИначеЕсли Данные.IsMapNull = 1 Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " по обороту Счет "+Данные.AccountCode+" - Корсчет "+Данные.CorAccountCode+" на сумму "+Строка(Данные.TotalRegulatedAmount)+" не заполнен маппинг по "+Данные.Name;
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
			Если Данные.IsMapAccountNull = 1 Тогда
				ЕстьОшибки = истина;
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Указана эталонная статья которая <Не используется> "+Данные.Name+". Необходимо выбрать другой эталон";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаКодовКОФОсновныеСредства(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	Аналитика = "FixedAsset"; 
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросПОКодамКОФ(Аналитика, СтруктураПараметров));
//	КодыКоф = ПолучитьКодыКОФ();
	Если Результат.ЕстьОшибки Тогда 
		
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаКодовКОФОсновныеСредства";

	Иначе
		Для каждого Данные из Результат.Данные Цикл
			Если Данные.IsFixedAssetCOFNull = 1 тогда
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Основные средства. Не заполнен код КОФ по "+Данные.FixedAssetName;
			//ИначеЕсли КодыКоф.НайтиСтроки(Новый Структура("КодКОФ", Данные.ClassifierCOF)).Количество() = 0 Тогда
			//	ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Основные средства. Код КОФ по "+Данные.FixedAssetName+" не найден в Кодах КОФ на сервере";
			ИначеЕсли Данные.IsMapFixedAssetCOFNull = 1	Тогда
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Основные средства. Код КОФ по "+Данные.FixedAssetName+" не найден в Кодах КОФ на сервере";

			Иначе
				Продолжить;
			КонецЕсли;
			Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
			НовТ = ТаблицаОшибок.Добавить();
			НовТ.ТекстОшибки = ТекстОшибки;
			КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаКодовКОФНематериальныеАктивы(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	Аналитика = "IntangibleAsset"; 
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросПОКодамКОФ(Аналитика, СтруктураПараметров));
	Если Результат.ЕстьОшибки Тогда 
		
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаКодовКОФНематериальныеАктивы";

	Иначе
		Для каждого Данные из Результат.Данные Цикл
				
			Если Данные.IsFixedAssetCOFNull = 1 тогда
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Нематериальные Активы. Не заполнен код КОФ по "+Данные.FixedAssetName;
			ИначеЕсли Данные.IsMapFixedAssetCOFNull = 1	Тогда
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Нематериальные Активы. Код КОФ по "+Данные.FixedAssetName+" не найден в Кодах КОФ на сервере";
         	Иначе
				Продолжить;
			КонецЕсли;

			Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
			НовТ = ТаблицаОшибок.Добавить();
			НовТ.ТекстОшибки = ТекстОшибки;
			КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаКодовКОФСтроительныеОбъекты(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	Аналитика = "ConstructionObject"; 
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросПОКодамКОФ(Аналитика, СтруктураПараметров));
	Если Результат.ЕстьОшибки Тогда 
		
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаКодовКОФСтроительныеОбъекты";

	Иначе
		Для каждого Данные из Результат.Данные Цикл
			
			Если Данные.IsFixedAssetCOFNull = 1 тогда
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Строительные Объекты. Не заполнен код КОФ по "+Данные.FixedAssetName;
			ИначеЕсли Данные.IsMapFixedAssetCOFNull = 1	Тогда
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Строительные Объекты. Код КОФ по "+Данные.FixedAssetName+" не найден в Кодах КОФ на сервере";
         	Иначе
				Продолжить;
			КонецЕсли;

			
			Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
			НовТ = ТаблицаОшибок.Добавить();
			НовТ.ТекстОшибки = ТекстОшибки;
			КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаЭталоновСчетов(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	Уник = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");	  
	СтруктураПараметров.Вставить("ИмяВТ", Уник);
   	Результат = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(ЗапросПоСчетамВТ(СтруктураПараметров));

	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросПоСчетам(СтруктураПараметров));
	Если Результат.ЕстьОшибки Тогда 
		
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаЭталоновСчетов";

	Иначе
		Для каждого Данные из Результат.Данные Цикл
			Если Данные.AccountCode = "5710" или Данные.CorAccountCode = "5710" Тогда //исключим проверку т.к. могут быть пустые статьи при закрытии незавершенки
				Продолжить;
			КонецЕсли;
			Если Данные.IsMapAccountNull = 1 тогда
				ТекстОшибки = "Организация: " + Данные.OrganizationName +"Счет БУ "+Строка(Данные.AccountCode)+" в сумме ("+(Данные.TotalRegulatedAmount)+") не заполнен эталон!!!";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаНаЗакрытиеСчетов(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросНаНезакрытыеСчета(СтруктураПараметров));
	Если Результат.ЕстьОшибки Тогда 
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаНаЗакрытиеСчетов";
	Иначе
		для каждого Данные из Результат.Данные цикл
				ТекстОшибки = "-->Существует не закрытый счет "+Строка(Данные.AccountCode)+" на отчетную дату. Остаток: "+Строка(Данные.RegulatedAmount);
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаВалютныхСчетов(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	
	Уник = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");	  

	СтруктураПараметров.Вставить("ИмяВТ", Уник);

	Результат = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(ЗапросНаВалютныеСчетаВТ(СтруктураПараметров));

	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросНаВалютныеСчета(СтруктураПараметров));
	

	Если Результат.ЕстьОшибки Тогда 
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаВалютныхСчетов";
	Иначе 
		СчетЭталонОтрицПереоценки 	= "7430";
		СчетЭталонПоложитПереоценки = "6250";
		Счет1020 = "1020";
		Счет1021 = "1021";
		Счет1022 = "1022";
		для каждого Данные из Результат.Данные цикл
			если Данные.CorMapAccountCode = СчетЭталонОтрицПереоценки или Данные.CorMapAccountCode = СчетЭталонПоложитПереоценки Тогда
				Продолжить;
			КонецЕсли;
			Если Данные.IsCurrency = 1 Тогда
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Не заполнена Валюта по счету БУ "+Строка(Данные.AccountCode)+" в сумме ("+(Данные.TotalRegulatedAmount)+")!!!";
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			Если Данные.TotalCurrencyAmount = 0 Тогда
				
				если Данные.MapAccountCode = Счет1020 или Данные.MapAccountCode = Счет1021 или Данные.MapAccountCode = Счет1022 Тогда
					Продолжить;
				КонецЕсли;	
				
				ТекстОшибки = "-->"+ "Организация: " + Данные.OrganizationName + " Не заполнена Валютная сумма по счету БУ "+Строка(Данные.AccountCode)+" в документе " + Строка(Данные.Recorder) + "!!!";
				
				
				ЕстьОшибки = Истина;
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаМаппингаСчетов(Коннектор, СтруктураПараметров, ТаблицаОшибок)
	

	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ЗапросМаппингаСчетов(СтруктураПараметров));
	

	Если Результат.ЕстьОшибки Тогда 
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);
		НовТ = ТаблицаОшибок.Добавить();
		НовТ.ТекстОшибки = "Ошибка подключения в ПроверкаМаппингаСчетов";
	Иначе 
		Для Каждого Данные из Результат.Данные Цикл
				
				ТекстОшибки = "-->"+ "Счет: " + Данные.AccCode + " соответствует группе счетов "+Строка(Данные.MAccCode);
				
				
				ЕстьОшибки = Истина;
				Сообщить(ТекстОшибки,СтатусСообщения.Внимание);
				НовТ = ТаблицаОшибок.Добавить();
				НовТ.ТекстОшибки = ТекстОшибки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Expenditure - Статьи затрат
// Revenue - Доходы
// CashFlowItems - Статьи ДДС
// NomenclatureGroup - Номенклатурные группы
Функция ЗапросПоАналитике(Аналитика, СтруктураПараметров)	
	
	Уник = СтруктураПараметров.ИмяВТ;
	Текст = " SELECT 
	|   t." + Аналитика + ",
	|   a1.Code AS AccountCode,
	|   pa1.Code AS ParentAccountCode,
	|   a2.Code AS CorAccountCode,  
 	|	CASE 
	|		WHEN ISNULL(t." + Аналитика + ", '00000000-0000-0000-0000-000000000000') = '00000000-0000-0000-0000-000000000000'
	|		THEN 1 
	|		ELSE 0 
	|	END AS IsSubcontoNull,	
	|   CASE WHEN e.map_" + Аналитика + " IS NULL THEN 1 ELSE 0 END AS IsMapNull,
	|   CASE WHEN m.map_Account IS NULL THEN 1 ELSE 0 END AS IsMapAccountNull,
	|   e.Name,
	|   o.Name AS OrganizationName,
	|   t.TypeOfTurnovers,
	|   SUM(t.RegulatedAmount) AS TotalRegulatedAmount
	|FROM tt" + Уник +" t
	|INNER JOIN dbo.ChartOfAccounts_h a1 ON t.Account = a1.GUID and t.Base = a1.Base
	|LEFT JOIN dbo.ChartOfAccounts_h pa1 ON a1.Parent = pa1.GUID and a1.base = pa1.base
	|INNER JOIN dbo.ChartOfAccounts_h a2 ON t.CorAccount = a2.GUID and t.Base = a2.Base
	|LEFT JOIN dbo." + Аналитика + "s e ON t." + Аналитика + " = e.GUID and t.Base = e.Base
	|LEFT JOIN dbo.map_ChartOfAccountsMapping m ON t.Account = m.Account and t.Base = m.Base 
	|INNER JOIN dbo.Organizations o ON t.Organization = o.GUID and t.base = o.base
	|WHERE a1.Code LIKE '[0-7]%'
	| AND t.Account IN (SELECT GUID FROM ChartOfAccounts WHERE Base = '" + Строка(СтруктураПараметров.База) + "' AND
 	| (TypeOfCut1 = '" + Аналитика + "' OR TypeOfCut2 = '" + Аналитика + "' OR TypeOfCut3 = '" + Аналитика + "'))
	|GROUP BY t." + Аналитика + ", 
	|         a1.Code, 
	|         pa1.Code, 
	|         a2.Code, 
	|         e.map_" + Аналитика + ", 
	|         m.map_Account, 
	|         e.Name,
	|         o.Name,
	|         t.TypeOfTurnovers;
	|		 drop table tt" + Уник;
	Возврат Текст;
	
КонецФункции  

Функция ЗапросПоАналитикеВТ(Аналитика, СтруктураПараметров)	
			
	  
	Уник = СтруктураПараметров.ИмяВТ;
		
	Текст = "SELECT 
	|   tt." + Аналитика + ",
	|	tt.base,
	|	tt.Account,
	|	tt.CorAccount,
	|   tt.TypeOfTurnovers,
	|	tt.Organization,
	|SUM(CASE WHEN tt.TypeOfTurnovers = N'ДТ' THEN tt.RegulatedAmount
	|ELSE -tt.RegulatedAmount END) AS RegulatedAmount
	|INTO tt" + Уник +"
	|FROM dbo.Turnovers tt
	|	
	|WHERE tt.Period BETWEEN '"+ Строка(Формат(СтруктураПараметров.ДатаНачала,"ДФ=yyyy-MM-dd")) +"' AND '"+ Строка(Формат(СтруктураПараметров.ДатаОкончания,"ДФ=yyyy-MM-dd")) +"'
	| AND tt.Base =  '" + Строка(СтруктураПараметров.База) + "'
//	| AND tt.Account IN (SELECT GUID FROM ChartOfAccounts WHERE Base = '" + Строка(СтруктураПараметров.База) + "' AND
// 	| (TypeOfCut1 = '" + Аналитика + "' OR TypeOfCut2 = '" + Аналитика + "' OR TypeOfCut3 = '" + Аналитика + "'))
	|Group BY
	|tt." + Аналитика + ", 
	|tt.TypeOfTurnovers,
	|tt.base,
	|tt.account,
	|tt.corAccount,
	|tt.Organization";
		
	Возврат Текст;
	
КонецФункции  
  
Функция ЗапросПОКодамКОФ(Аналитика, СтруктураПараметров)
	Текст = "SELECT DISTINCT 
            |    t." + Аналитика + ",
            |    fa.COF AS FixedAssetCOF,
			|    o.Name AS OrganizationName,
			|    CASE 
            |        WHEN  
			|    mcf.COF IS NULL THEN 1 
            |        ELSE 0 
            |    END AS IsMapFixedAssetCOFNull,
           	|    fa.Name AS FixedAssetName,
            |    CASE 
            |        WHEN fa.COF IS NULL THEN 1 
            |        ELSE 0 
            |    END AS IsFixedAssetCOFNull
            |FROM dbo.Turnovers t
            |INNER JOIN dbo.ChartOfAccounts_h a1 ON t.Account = a1.GUID and t.Base = a1.Base
            |INNER JOIN dbo." + Аналитика + "s fa ON t." + Аналитика + " = fa.GUID and t.base =fa.base 
			|INNER JOIN dbo.Organizations o ON t.Organization = o.GUID  and t.base = o.base
            |LEFT JOIN dbo.map_ClassifierOfFixedAssets mcf ON fa.COF = mcf.COF
            |WHERE t." + Аналитика + " IS NOT NULL
            |  AND t.Period BETWEEN '"+ Строка(Формат(СтруктураПараметров.ДатаНачала,"ДФ=yyyy-MM-dd")) +"' AND '"+ Строка(Формат(СтруктураПараметров.ДатаОкончания,"ДФ=yyyy-MM-dd")) +"'
            |  AND t.TypeOfTurnovers = N'ДТ'
			|  AND t.Base = '" + Строка(СтруктураПараметров.База) + "'
            |  AND a1.Code LIKE '[0-7]%';";
	Возврат Текст;
КонецФункции

Функция ЗапросПоСчетамВТ(СтруктураПараметров) 
	
УникальныйИД = СтруктураПараметров.ИмяВТ;	
	Текст = "SELECT 
             |    tt.Account,
             |    tt.Base,
             |    tt.Organization,
             |    tt.CorAccount,
             |    SUM(tt.RegulatedAmount) AS RegulatedAmount
             |INTO tt" + УникальныйИД + " 
             |FROM dbo.Turnovers tt
             |WHERE tt.Period BETWEEN '"+ Строка(Формат(СтруктураПараметров.ДатаНачала,"ДФ=yyyy-MM-dd")) +"' AND '"+ Строка(Формат(СтруктураПараметров.ДатаОкончания,"ДФ=yyyy-MM-dd")) +"'
             |  AND tt.Base = '" + Строка(СтруктураПараметров.База) + "'
             |GROUP BY 
             |    tt.Account, 
             |    tt.Base,
             |    tt.Organization,
             |    tt.CorAccount";
             	Возврат Текст;
	
КонецФункции

Функция ЗапросПоСчетам(СтруктураПараметров) 
	
УникальныйИД = СтруктураПараметров.ИмяВТ;	
	Текст  = "SELECT 
             |    t.Account,
             |    a1.Code AS AccountCode,
             |    m.map_Account,
             |    o.Name AS OrganizationName,
             |    a2.Code AS CorAccountCode,
             |    CASE 
             |        WHEN m.map_Account IS NULL THEN 1 
             |        ELSE 0 
             |    END AS IsMapAccountNull,
             |    SUM(t.RegulatedAmount) AS TotalRegulatedAmount
             |FROM tt" + УникальныйИД + " t
             |INNER JOIN dbo.ChartOfAccounts_h a1 ON t.Account = a1.GUID AND t.Base = a1.Base
             |INNER JOIN dbo.Organizations o ON t.Organization = o.GUID AND t.Base = o.Base
             |LEFT JOIN dbo.map_ChartOfAccountsMapping m ON t.Account = m.Account
             |INNER JOIN dbo.ChartOfAccounts_h a2 ON t.CorAccount = a2.GUID AND t.Base = a2.Base
             |WHERE a1.Code LIKE '[0-7]%'
             |GROUP BY 
             |    t.Account, 
             |    a1.Code, 
             |    m.map_Account,
             |    o.Name,
             |    a2.Code
             |ORDER BY a1.Code, o.Name;
			 |Drop table tt" + УникальныйИД;
			 
		Возврат Текст;
	
КонецФункции

Функция ЗапросМаппингаСчетов(СтруктураПараметров) 
	
	Текст  = "SELECT DISTINCT ch.code AS AccCode, mch.code AS MAccCode
		|FROM ChartOfAccounts ch
		|INNER JOIN map_ChartOfAccountsMapping map
		|ON ch.GUID = map.Account and ch.Base = map.Base
		|INNER JOIN map_ChartOfAccounts mch
		|ON mch.GUID = map.map_Account
		|WHERE mch.GUID IN (SELECT Parent FROM map_ChartOfAccounts WHERE Parent IS NOT NULL)
		|AND ch.Base = '" + Строка(СтруктураПараметров.База) + "'";
			 
		Возврат Текст;
	
КонецФункции

Функция ЗапросНаНезакрытыеСчета(СтруктураПараметров) 
	Текст = "SELECT 
             |    t.Account,
             |    a1.Code AS AccountCode,
             |    t.RegulatedAmount,
			 |    o.Name AS OrganizationName,
             |    t.CurrencyAmount,
             |    t.ManagementAmount
             |FROM dbo.BalancesMonth_s t
             |INNER JOIN dbo.ChartOfAccounts_h a1 ON t.Account = a1.GUID and t.Base = a1.Base
			 |INNER JOIN dbo.Organizations o ON t.Organization = o.GUID and t.Base = o.Base
             |WHERE t.Period = '"+ Строка(Формат(НачалоМесяца(СтруктураПараметров.ДатаОкончания),"ДФ=yyyy-MM-dd")) +"'
             |  AND a1.Code LIKE '[6-7]%'
			 |  AND t.Base = '" + Строка(СтруктураПараметров.База) + "'
             |ORDER BY a1.Code, t.Account;";
	Возврат Текст;
КонецФункции

Функция ЗапросНаВалютныеСчета(СтруктураПараметров)	
  УникальныйИД = СтруктураПараметров.ИмяВТ;
	
  Текст = "SELECT 
             |    a1.Code AS AccountCode,
			 |	  t.Recorder,
             |    t.Currency,
             |    m1.map_Account AS MapAccount,
             |    a3.Code AS MapAccountCode,
             |    m2.map_Account AS CorMapAccount,
             |    a4.Code AS CorMapAccountCode,
             |    CASE 
             |        WHEN t.Currency IS NULL THEN 1 
             |        ELSE 0 
             |    END AS IsCurrency,
             |    o.Name AS OrganizationName,  
			 |    t.CurrencyAmount AS TotalCurrencyAmount,
			 |    t.RegulatedAmount AS TotalRegulatedAmount

			 ////|    SUM(t.CurrencyAmount) AS TotalCurrencyAmount,
			 ////|    SUM(t.RegulatedAmount) AS TotalRegulatedAmount
			 |FROM tt" + УникальныйИД + " t
             |INNER JOIN dbo.ChartOfAccounts_h a1 ON t.Account = a1.GUID AND t.Base = a1.Base
             |LEFT JOIN dbo.map_ChartOfAccountsMapping m1 ON t.Account = m1.Account and t.Base = m1.Base
             |LEFT JOIN dbo.map_ChartOfAccounts a3 ON m1.map_Account = a3.GUID
             |LEFT JOIN dbo.map_ChartOfAccountsMapping m2 ON t.CorAccount = m2.Account and t.Base = m2.Base 
             |LEFT JOIN dbo.map_ChartOfAccounts a4 ON m2.map_Account = a4.GUID
             |INNER JOIN dbo.Organizations o ON t.Organization = o.GUID AND t.Base = o.Base
             |WHERE a1.Code LIKE '[0-7]%'
             |  AND a1.Currency = 1 
			 |  AND t.CurrencyAmount = 0 AND  t.RegulatedAmount <> 0
			 //|GROUP BY 
			 //|    a1.Code, 
			 //|    t.Currency, 
			 //|    m1.map_Account, 
			 //|    a3.Code,
			 //|    m2.map_Account,
			 //|    a4.Code,
			 //|    o.Name
             |ORDER BY a1.Code, t.Currency;
			 |DROP TABLE tt" + УникальныйИД;
	Возврат Текст;
КонецФункции

Функция ЗапросНаВалютныеСчетаВТ(СтруктураПараметров)	

	 УникальныйИД = СтруктураПараметров.ИмяВТ;
	
	Текст = "SELECT 
			 |    tt.Recorder,
			 |    tt.Account,
             |    tt.CorAccount,
             |    tt.Currency,
             |    tt.Organization,
             |    tt.Base,
             |    tt.CurrencyAmount AS CurrencyAmount,
             |    tt.RegulatedAmount AS RegulatedAmount
             |INTO tt" + УникальныйИД + " 
             |FROM dbo.Turnovers tt
             |WHERE tt.Period BETWEEN '"+ Строка(Формат(СтруктураПараметров.ДатаНачала,"ДФ=yyyy-MM-dd")) +"' AND '"+ Строка(Формат(СтруктураПараметров.ДатаОкончания,"ДФ=yyyy-MM-dd")) +"'
             |  AND tt.Base = '" + Строка(СтруктураПараметров.База) + "'";
			 //|GROUP BY 
			 //|    tt.Account, 
			 //|    tt.CorAccount,
			 //|    tt.Currency,
			 //|    tt.Organization,
			 //|    tt.Base";
	
	
	Возврат Текст;
КонецФункции
  
Функция ПолучитьКодыКОФ()	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторОсновныхФондов.КодКОФ КАК КодКОФ
		|ИЗ
		|	Справочник.КлассификаторОсновныхФондов КАК КлассификаторОсновныхФондов";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции


#КонецОбласти
