Функция ОтправитьНаСервере(Объект)  Экспорт
	
	Прокси = ПолучитьПроксиСервер.Прокси();
	Если Прокси = Неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	Base = Константы.авИмяБазы.Получить();
	
	Рез = Прокси.CheckBase(Base);
	Если Рез <> "1"  Тогда
		Сообщить("Не найдена орг-ция по имени базы "+Строка(Base));
		возврат ложь;
	КонецЕсли;	
	
	ТипСвойства = Прокси.ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "aDocOtherInd"); 
	aDoc = Прокси.ФабрикаXDTO.Создать(ТипСвойства);
	
	aDoc.Number 	                   = XMLСтрока(Объект.ССылка);
	aDoc.Date 		                   = Объект.Дата;
	aDoc.DateBeg 		               = Объект.НачалоПериода;
	aDoc.DateEnd 		               = Объект.КонецПериода;
	aDoc.IndicatorTypeCode             = Объект.ВидПоказателя.Код; 
	aDoc.Comment            		   = Объект.Комментарий;
	ТипСвойства = Прокси.ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "LineOthersInd"); 
	Для Каждого стр из Объект.ПрочиеПоказатели Цикл
		
		НовСтр 							= Прокси.ФабрикаXDTO.Создать(ТипСвойства); 
		АвтозаполняемыеСвойства = "Sum,AmountDebt,AmountDebtMore100,AmountDebtMore500,AmountBalance,AmountBalancePledge,DateFormation,MaturityDate,AmountDebtMore100Count,AmountDebtMore500Count,RatioApplicable,Stock,BankName,DepositName,DepositRate,ValuePercent,FairValue,HierarchyLevel,FairValueBoolean,OnRequest,less3months,Between3and12months,Between1and5years,TotalLiquidity,Quantity,SharePercent";
		ЗаполнитьЗначенияСвойств(НовСтр,стр,АвтозаполняемыеСвойства);
		НовСтр.KodInd 			        = стр.КодПоказателя;
		НовСтр.Ind				        = ?(ЗначениеЗаполнено(стр.Показатель),стр.Показатель.GUID,"");
		НовСтр.accountGUID			    = ?(ЗначениеЗаполнено(стр.account),стр.account.GUID,"");
		НовСтр.CounterpartyGUID			= ?(ЗначениеЗаполнено(стр.Контрагент),Строка(стр.Контрагент.УникальныйИдентификатор()),"");
		НовСтр.Counterparty				= ?(ЗначениеЗаполнено(стр.Контрагент),стр.Контрагент.Наименование,"");
		НовСтр.CounterpartyIIN			= ?(ЗначениеЗаполнено(стр.Контрагент),стр.Контрагент.ИдентификационныйКодЛичности,"");
		НовСтр.BS_GUID			        = ?(ЗначениеЗаполнено(стр.BS),стр.BS.GUID,"");
		НовСтр.ReportSign			    = ?(ЗначениеЗаполнено(стр.BS),стр.ReportSign.GUID,"");
		НовСтр.CUR			            = ?(ЗначениеЗаполнено(стр.CUR),стр.CUR.Код,"");
		НовСтр.organization			    = ?(ЗначениеЗаполнено(Объект.Организация),Объект.Организация.Наименование,"");
		
		aDoc.ListOthersInd.Добавить(НовСтр);
		
		
	КонецЦикла; 
	
	
	Попытка 
		Прокси.SetDocOtherInd(aDoc,объект.Организация.ИдентификационныйНомер);
		Отказ = Истина;
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки(); 
		Сообщить(ОписаниеОшибки);
		Отказ = Ложь;
	КонецПопытки;
	Возврат Отказ;	
	
КонецФункции

Функция ПолучитьЭталонныйДокументНаСервере(Объект) Экспорт
	
	Прокси = ПолучитьПроксиСервер.Прокси();;
	Если Прокси = Неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	Base = Константы.авИмяБазы.Получить();
	
	Рез = Прокси.CheckBase(Base);
	Если Рез <> "1"  Тогда
		Сообщить("Не найдена орг-ция по имени базы "+Строка(Base));
		возврат ложь;
	КонецЕсли;
	Попытка
		Ответ = Прокси.GetReferenceDocument(Объект.Организация.ИдентификационныйНомер,Объект.ВидПоказателя.Код);
		ПрочиеПоказатели = Объект.ПрочиеПоказатели;
		Для Каждого Стр Из Ответ.ListOthersInd Цикл 
			
			Результат = ПрочиеПоказатели.НайтиСтроки(Новый Структура("КодПоказателя",Стр.KodInd));
			Для Каждого СтрокаРезультата Из Результат Цикл 
				Если Стр.BS_GUID <> "00000000-0000-0000-0000-000000000000" И ЗначениеЗаполнено(Стр.BS_GUID) Тогда 
					СтрокаРезультата.BS = Справочники.авСтатьиБюджетов.НайтиПоРеквизиту("GUID",Стр.BS_GUID);
					СтрокаРезультата.BSname = Стр.BSname;
				КонецЕсли; 
			КонецЦикла;
			
		КонецЦикла;
		Возврат Истина;
	Исключение  
		Возврат Ложь;
	КонецПопытки;
	
	
	
КонецФункции // ПолучитьЭталонныйДокументНаСервере()


Процедура ЗагрузитьВSQLНаСервере(Объект) Экспорт
	
	
	ТекстЗапросаУдаления = "DELETE  FROM map_DocumentOtherIndicators 
	|WHERE [organization] = '"+XMLСтрока(Объект.Организация)+"' AND 
	|DocNumber = '"+?(ЗначениеЗаполнено(Объект.НомерВходящего),СокрЛП(Объект.НомерВходящего),СокрЛП(Объект.Номер))+"'";
	Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюУдаления(ТекстЗапросаУдаления);
	Сообщить(Ответ);
	
	
	Для Каждого СтрокаТЧ Из Объект.ПрочиеПоказатели Цикл
		DateFormation = ?(ЗначениеЗаполнено(СтрокаТЧ.DateFormation),СтрокаТЧ.DateFormation,Дата(1753,1,1));
		MaturityDate = ?(ЗначениеЗаполнено(СтрокаТЧ.MaturityDate),СтрокаТЧ.MaturityDate,Дата(1753,1,1));;
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_DocumentOtherIndicators]
		|           ([indicator]
		|           ,[indicatorCode]
		|           ,[Sum]
		|           ,[account]
		|           ,[counterparty]
		|           ,[AmountDebt]
		|           ,[AmountDebtMore100Count]
		|           ,[AmountDebtMore500Count]
		|           ,[AmountDebtMore100]
		|           ,[AmountDebtMore500]
		|           ,[BS]
		|           ,[BSname]
		|           ,[AmountBalance]
		|           ,[AmountBalancePledge]
		|           ,[Stock]
		|           ,[BankName]
		|           ,[DepositName]
		|           ,[DateFormation]
		|           ,[MaturityDate]
		|           ,[DepositRate]
		|           ,[PRS]
		|           ,[RatioApplicable]
		|           ,[CUR]
		|           ,[ValuePercent]
		|           ,[ReportSign]
		|           ,[FairValue]
		|           ,[HierarchyLevel]
		|           ,[FairValueBoolean]
		|           ,[OnRequest]
		|           ,[less3months]
		|           ,[Between3and12months]
		|           ,[Between1and5years]
		|           ,[TotalLiquidity]
		|           ,[Quantity]
		|           ,[SharePercent]
		|           ,[TypeOtherIndicator]
		|           ,[organization]
		|           ,[DocNumber])
		|     VALUES
		|           ('"+XMLСтрока(СтрокаТЧ.Показатель)+"'
		|           ,N'"+СокрЛП(СтрокаТЧ.КодПоказателя)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Sum)+"'
		|           ,N'"+XMLСтрока(СтрокаТЧ.account)+"'
		|           ,N'"+?(ЗначениеЗаполнено(СтрокаТЧ.КонтрагентGUID),СтрокаТЧ.КонтрагентGUID,"00000000-0000-0000-0000-000000000000")+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebt)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore100)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore500Count)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore100)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore500)+"'
		|           ,'"+XMLСтрока(СтрокаТЧ.BS)+"'
		|           ,N'"+СтрокаТЧ.BSname+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountBalance)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountBalancePledge)+"'
		|           ,N'"+СтрокаТЧ.Stock+"'
		|           ,N'"+СтрокаТЧ.BankName+"'
		|           ,N'"+СтрокаТЧ.DepositName+"'
		|           ,'"+DateFormation+"'
		|           ,'"+MaturityDate+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.DepositRate)+"'
		|           ,N'"+XMLСтрока(СтрокаТЧ.PRS)+"'
		|           ,'"+?(СтрокаТЧ.RatioApplicable=Истина,1,0)+"'
		|           ,'"+XMLСтрока(СтрокаТЧ.CUR)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.ValuePercent)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.ReportSign)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.FairValue)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.HierarchyLevel)+"'
		|           ,'"+?(СтрокаТЧ.FairValueBoolean=Истина,1,0)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.OnRequest)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.less3months)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Between3and12months)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Between1and5years)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.TotalLiquidity)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Quantity)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.SharePercent)+"'
		|           ,'"+XMLСтрока(Объект.ВидПоказателя)+"'
		|           ,'"+XMLСтрока(Объект.Организация)+"'
		|           ,N'"+?(ЗначениеЗаполнено(Объект.НомерВходящего),СокрЛП(Объект.НомерВходящего),СокрЛП(Объект.Номер))+"')";
		
		
		Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьIDСправочника(Ссылка,ИмяТаблицы,ДанныеSQL) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		GUID = Ссылка;
	Иначе 
		Если ЗначениеЗаполнено(Ссылка)Тогда
			GUID = XMLСтрока(Ссылка); 
		Иначе 
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТЗ = ДанныеSQL[ИмяТаблицы];
	Результат = ДанныеSQL[ИмяТаблицы].Найти(GUID,"GUID");
	Если Результат <> Неопределено Тогда
		Возврат Результат.ID;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьIDСправочника()

&НаСервере
Функция ПолучитьIDКонтрагента(ИИН)
	
	ID = ИнтеграцияДЗО.ПолучитьIDКонтрагентаПоИИН(ИИН);	
	Возврат ID; 
	
КонецФункции // ПолучитьIDКонтрагента()

Функция УдалитьПробелы(ТекЧисло)
	
	Если ЗначениеЗаполнено(ТекЧисло) Тогда
		Возврат Формат(ТекЧисло,"ЧГ=");
	Иначе
		Возврат "0";
	КонецЕсли;
	
КонецФункции // УдалитьПробелы¶()

Функция ПолучитьИсполняемуюТаблицу() Экспорт
	
	Таблица = Новый ТаблицаЗначений; 
	Таблица.Колонки.Добавить("ПрочийПоказатель",Новый ОписаниеТипов("СправочникСсылка.INDПрочиеПоказатели"));
	Таблица.Колонки.Добавить("СчетЭталон",Новый ОписаниеТипов("СправочникСсылка.ПланСчетов"));
	Таблица.Колонки.Добавить("Счет",Новый ОписаниеТипов("СправочникСсылка.ПланСчетов"));
	Таблица.Колонки.Добавить("ЕстьУсловияПоСчету",Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("КоличествоНастроек",Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СтатьяРасшифровка",Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов")); 
	МассивТиповСтатьи = Новый Массив;
	МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
	МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.ВидыДвижения"));
	МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.ПланСчетов"));
	Таблица.Колонки.Добавить("СтатьяДляИтогов",Новый ОписаниеТипов(МассивТиповСтатьи));
	Таблица.Колонки.Добавить("КлассификаторОсновныхФондов",Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("СписокАктивов",Новый ОписаниеТипов("СписокЗначений"));
	Таблица.Колонки.Добавить("НоменклатурныеГруппы",Новый ОписаниеТипов("СписокЗначений"));
	Таблица.Колонки.Добавить("КомпоновщикНастроекОтбор",Новый ОписаниеТипов("ХранилищеЗначения"));
	Таблица.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число")); 
	Таблица.Колонки.Добавить("ТипДвижения",Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КорСчетЭталон",Новый ОписаниеТипов("СправочникСсылка.ПланСчетов"));
	Таблица.Колонки.Добавить("КорСчет",Новый ОписаниеТипов("СправочникСсылка.ПланСчетов"));
	Таблица.Колонки.Добавить("ЕстьУсловияПоКорСчету",Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("ПредставлениеОтбора",Новый ОписаниеТипов("Строка"));
	
	Возврат  Таблица;
	
КонецФункции // ПолучитьИсполняемуюТаблицу() 

Функция ПолучитьНастройкиПланаСчетовПоЭталонномуСчету(ЭталонныйСчет) Экспорт
	
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаЭталоногоПланаСчетов.КомпоновщикНастроекОтбор КАК КомпоновщикНастроекОтбор,
	               |	ВЫРАЗИТЬ(НастройкаЭталоногоПланаСчетов.ПредставлениеОтбора КАК СТРОКА(1024)) КАК ПредставлениеОтбора,
	               |	НастройкаЭталоногоПланаСчетов.ИсточникДанных КАК ИсточникДанных
	               |ИЗ
	               |	РегистрСведений.авМаппингЭталонныхСправочников КАК авМаппингЭталонныхСправочников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.авНастройкаПланаСчетов КАК НастройкаЭталоногоПланаСчетов
	               |		ПО авМаппингЭталонныхСправочников.ЭталонСчет = НастройкаЭталоногоПланаСчетов.ЭталонныйСчет
	               |			И авМаппингЭталонныхСправочников.НастройкаПланаСчетов = НастройкаЭталоногоПланаСчетов.Ссылка
	               |ГДЕ
	               |	НЕ НастройкаЭталоногоПланаСчетов.ПометкаУдаления
	               |	И НастройкаЭталоногоПланаСчетов.ЭталонныйСчет = &ЭталонныйСчет";
	Запрос.УстановитьПараметр("ЭталонныйСчет", ЭталонныйСчет);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьСчетаПоЭталонномуСчету()

Функция ЭтоВид17(ВидПоказателя) Экспорт
	
	Возврат ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоНаименованию("17_Чувствительность к возможным изменениям курса тенге к изменению курсов соответствующих валют");
	
КонецФункции // ЭтоВид17()


Функция ЭтоВид26(ВидПоказателя) Экспорт
	
	Возврат ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоНаименованию("26_Чувствительность изменения процентных ставок по займам компании");
	
КонецФункции // ЭтоВид17()

Функция ЭтоВид9(ВидПоказателя) Экспорт
	
	Возврат ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоНаименованию("9_Информация по депозитам");
	
КонецФункции // ЭтоВид17()

Функция ЭтоВид27(ВидПоказателя) Экспорт
	
	Возврат ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоНаименованию("27_Риск ликвидности");
	
КонецФункции 

Функция ЭтоВид14(ВидПоказателя) Экспорт

	Возврат ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоНаименованию("14_Информация о собственниках");

КонецФункции // ЭтоВид14()

Функция ЭтоВид4(ВидПоказателя) Экспорт

	Возврат ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоНаименованию("4_Кредитный риск");

КонецФункции 

Функция ЭтоВид13(ВидПоказателя) Экспорт

	Возврат ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоНаименованию("13_Кредитование");

КонецФункции 

Функция ЭтоВид23(ВидПоказателя) Экспорт

	Возврат ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоНаименованию("23_Оценка справедливой стоимости");

КонецФункции // ЭтоВид23()

Функция ЭтоВид10(ВидПоказателя) Экспорт

	Возврат ВидПоказателя = Справочники.ВидыПрочихПоказателейMDM.НайтиПоНаименованию("10_Гарантийные удержания");

КонецФункции 

Функция ЭтоВид2(ВидПоказателя) Экспорт

	Возврат ВидПоказателя.ТипПоказателя = Справочники.ТипыПрочихПоказателей.Вид2;

КонецФункции 

Функция ЭтоВид7(ВидПоказателя)  Экспорт

	Возврат ВидПоказателя.ТипПоказателя = Справочники.ТипыПрочихПоказателей.Вид7;

КонецФункции // ЭтоВид7()


Функция ОстаткиПоВиду26(СтрокаТаблицы,Объект,Счет,КомпоновщикНастроекОтбор,ОграниченияПоСумме=Неопределено) Экспорт

	 СохраненныйКомпоновщикНастроек = КомпоновщикНастроекОтбор.Получить();
	 Если ТипЗнч(СохраненныйКомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда 
		 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 Иначе
		 ОтборНастройки = Неопределено;
	 КонецЕсли;
	 
	 ОСКД = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Остатки");
	 ПараметрыДанныхОСКД = ОСКД.Параметры;
	 
	 НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
	 ТЗ1 = Новый ТаблицаЗначений;
	 
	 
	 Если ОтборНастройки <> Неопределено И ОтборНастройки.Элементы.Количество() >0 Тогда
		 Для каждого ЭлементОтбора Из ОтборНастройки.Элементы Цикл
			 Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение));
				 НовыйЭлементОтбора.Использование 	= Истина;
				 НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
				 НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
				 
			 КонецЕсли;	
		 КонецЦикла;
		 
	 КонецЕсли;
	 
	 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("Организация");
	 НовыйЭлементОтбора.Использование 	= Истина;
	 НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	 НовыйЭлементОтбора.ПравоеЗначение 	= Объект.Организация; 
	 
	 Если ОграниченияПоСумме <> Неопределено Тогда
		 
		 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("СуммаОстаток");
		 НовыйЭлементОтбора.Использование 	= Истина;
		 НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		 НовыйЭлементОтбора.ПравоеЗначение 	= ОграниченияПоСумме.МинимальнаяСумма;
		 
		 Если ЗначениеЗаполнено(ОграниченияПоСумме.МасимальнаяСумма) Тогда
			 
			 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("СуммаОстаток");
			 НовыйЭлементОтбора.Использование 	= Истина;
			 НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Меньше;
			 НовыйЭлементОтбора.ПравоеЗначение 	= ОграниченияПоСумме.МасимальнаяСумма;
			 
		 КонецЕсли;
		 
		 
		 
	 КонецЕсли;
	 
	 
	 
	 ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("КонецПериода");
	 ЭлементКонецПериода.Значение = Новый Граница(КонецДня(Объект.КонецПериода),ВидГраницы.Включая);
	 
	 
	 ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет");
	 ЭлементСчет.Значение = Счет;
	 
	 
	 КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	 Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 
	 ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	 
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 ПроцессорВывода.УстановитьОбъект(ТЗ1);
	 ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД);  
	 
	 Возврат ТЗ1;
	 

КонецФункции // ОстаткиПоВиду26()

Функция ПолучитьОборотыПоВиду26(СтрокаТаблицы,Объект,Счет,КомпоновщикНастроекОтбор)  Экспорт

	 СохраненныйКомпоновщикНастроек = КомпоновщикНастроекОтбор.Получить();
	 Если ТипЗнч(СохраненныйКомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда 
		 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 Иначе
		 ОтборНастройки = Неопределено;
	 КонецЕсли;
	 
	 ОСКД = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Обороты");
	 ПараметрыДанныхОСКД = ОСКД.Параметры;
	 
	 НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
	 ТЗ1 = Новый ТаблицаЗначений;
	 
	 Если ОтборНастройки <> Неопределено И ОтборНастройки.Элементы.Количество() >0 Тогда
		 Для каждого ЭлементОтбора Из ОтборНастройки.Элементы Цикл
			 Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение));
				 НовыйЭлементОтбора.Использование 	= Истина;
				 НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
				 НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
				 
			 КонецЕсли;	
		 КонецЦикла;
		 
	 КонецЕсли; 
	 
	 ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("Начало");
	 ЭлементКонецПериода.Значение = НачалоДня(Объект.НачалоПериода);
	 
	 ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("Окончание");
	 ЭлементКонецПериода.Значение = Новый Граница(КонецДня(Объект.КонецПериода),ВидГраницы.Включая);
	 
	 
	 
	 
	 ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет");
	 ЭлементСчет.Значение = Счет;
	 
	 
	 КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	 Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 
	 ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	 
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 ПроцессорВывода.УстановитьОбъект(ТЗ1);
	 ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД);  
	 
	 Возврат ТЗ1;

КонецФункции // ПолучитьОборотыПоВиду26()

Процедура ПередЗаписьюНаСервереВид14(СтрокиДерева,ПрочиеПоказатели) Экспорт
	
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		НайденныеСтроки  = ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель,Контрагент",СтрокаДерева.Показатель,СтрокаДерева.Контрагент));
		Если НайденныеСтроки.Количество() Тогда
			Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока,СтрокаДерева);
			КонецЦикла; 
		Иначе
			ИндексТекСтроки = СтрокиДерева.Индекс(СтрокаДерева);
			ИзмененнаяСтрока = ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель,Контрагент",СтрокаДерева.Показатель,Справочники.Контрагенты.ПустаяСсылка()));
			Если ИзмененнаяСтрока.Количество() Тогда 
				ПрочиеПоказатели.Удалить(ИзмененнаяСтрока[0]);	
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПрочиеПоказатели.Вставить(ИндексТекСтроки),СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла; 
	
	Если СтрокаДерева.Строки.Количество() Тогда
		
		ПередЗаписьюНаСервереВид14(СтрокаДерева.Строки,ПрочиеПоказатели);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаПодчиненныхПоказателейСРеквизитом_Значение()   Экспорт

	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("КодРодителя");
	Таблица.Колонки.Добавить("КодПоказателя");
	Таблица.Колонки.Добавить("ТипЗначения");
	Таблица.Колонки.Добавить("Длина");
	Таблица.Колонки.Добавить("Разрядность");
	Таблица.Колонки.Добавить("Значение");
	
	Возврат Таблица;

КонецФункции // ТаблицаПодчиненныхПоказателейСРеквизитом_Значение()

Функция СписокВыбораПоВидуПоказателя(ВидПоказателя,ПодтвержденоАудитором) Экспорт 
	
	ПолныйСписок = Новый СписокЗначений;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодыПрочихПоказателей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПериодыПрочихПоказателей КАК ПериодыПрочихПоказателей";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПолная = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаПолная.Следующий() Цикл 
		
		ПолныйСписок.Добавить(ВыборкаПолная.Ссылка);	
		
	КонецЦикла; 
	
	СписокПоПоказателю = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ВидПоказателя) Тогда
		ТипПоказателя = ВидПоказателя.ТипПоказателя;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыПрочихПоказателейПериодыПрочихПоказателей.Период КАК Период
		|ИЗ
		|	Справочник.ТипыПрочихПоказателей.ПериодыПрочихПоказателей КАК ТипыПрочихПоказателейПериодыПрочихПоказателей
		|ГДЕ
		|	ТипыПрочихПоказателейПериодыПрочихПоказателей.ПодтвержденоАудитором = &ПодтвержденоАудитором
		|	И ТипыПрочихПоказателейПериодыПрочихПоказателей.Ссылка = &ТипПоказателя
		|	И НЕ ТипыПрочихПоказателейПериодыПрочихПоказателей.Ссылка.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ТипПоказателя", ТипПоказателя);
		Запрос.УстановитьПараметр("ПодтвержденоАудитором", ПодтвержденоАудитором);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаПоПоказателю = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаПоПоказателю.Следующий() Цикл  
			
			СписокПоПоказателю.Добавить(ВыборкаПоПоказателю.Период);
			
		КонецЦикла;
	КонецЕсли;
	Если СписокПоПоказателю.Количество() Тогда
		Возврат СписокПоПоказателю;
	Иначе
		Возврат ПолныйСписок;
	КонецЕсли;
	

КонецФункции // СписокВыбораПоВидуПоказателя()

Функция ПроверитьНаличиеНастроек(ВидПоказателя,Организация,Показатель,Статья) Экспорт

	Показатели = Показатель.ВыгрузитьКолонку("Показатель");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель КАК Показатель
		|ИЗ
		|	РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних(
		|			,
		|			ВидПоказателя = &ВидПоказателя
		|				И Организация = &Организация
		|				И Показатель В (&Показатели)) КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
		|ГДЕ
		|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи ССЫЛКА Справочник.СтатьиБюджетов";
	
	Запрос.УстановитьПараметр("ВидПоказателя", ВидПоказателя);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Показатели", Показатели); 
	
	Если Статья = "ВидыДвижения" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник.СтатьиБюджетов","Справочник.ВидыДвижения");
	ИначеЕсли Статья = "ПланСчетов"   Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник.СтатьиБюджетов","Справочник.ПланСчетов");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	


КонецФункции // ПроверитьНаличиеНастроек()
