
&НаСервере
Функция СформироватьОтчетВДЗ(Data1, Data2, ИияБазы, IIN,TypeOfReport) Экспорт
	
	//GUID	Name	Code	id
	//9dda0644-bf20-11eb-b828-005056a5cda3	BS	000000001	1
	//9dda0645-bf20-11eb-b828-005056a5cda3	PL	000000002	2
	//a3f06898-bf20-11eb-b828-005056a5cda3	CFD	000000003	3	
	
	БИН = IIN;
	
	Если БИН = "" Тогда
		НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БазыОрганизации.Ссылка КАК Ссылка,
		|	БазыОрганизации.Организация КАК Организация
		|ИЗ
		|	Справочник.Базы.Организации КАК БазыОрганизации
		|ГДЕ
		|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";            
		
		Запрос.УстановитьПараметр("ИмяБазы",ИияБазы);
		РезОрг = запрос.Выполнить().Выбрать();
		если РезОрг.Следующий() Тогда
			НайденнаяОрг = РезОрг.Организация;
		КонецЕсли;	
		
		Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		БИН = НайденнаяОрг.БИН;
	КонецЕсли;
	
	ДеревоЗн=Новый ДеревоЗначений;
	
	//если TypeOfReport=6 тогда
	//	возврат ДеревоЗн; 	
	//КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка КАК Ссылка,
	|	СтатьиБюджетов.Родитель КАК Родитель,
	|	СтатьиБюджетов.СписокСчетов КАК СписокСчетов,
	|	СтатьиБюджетов.КодСправочника КАК Код,
	|	СтатьиБюджетов.СписокСтатейCFI КАК СписокСтатейCFI
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Владелец.Код = &Бюджет
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБюджетов.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Бюджет",TypeOfReport);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Статья");
	ДеревоЗн.Колонки.Добавить("Code",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("GUID",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("AmountTotal",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Amount",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("BalAmount",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Аналитика");
	ДеревоЗн.Колонки.Добавить("СписокСчетов",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("СписокСтатейCFI",ОписаниеСтрока);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ТекЭлемент				= ДеревоЗн.Строки.Добавить();
			ТекЭлемент.Статья		= Выборка.Ссылка;
			ТекЭлемент.Code			= Выборка.Код;
			ТекЭлемент.СписокСчетов	= Выборка.СписокСчетов;
			ТекЭлемент.GUID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.СписокСтатейCFI	= Выборка.СписокСтатейCFI;
			ТекЭлемент.Аналитика	= Ложь;
		Иначе
			Пока ТекЭлемент.Статья<>Выборка.Родитель Цикл
				ТекЭлемент=ТекЭлемент.Родитель;
			КонецЦикла;
			ТекЭлемент				= ТекЭлемент.Строки.Добавить();
			ТекЭлемент.Статья		= Выборка.Ссылка;
			ТекЭлемент.Code			= Выборка.Код;
			ТекЭлемент.СписокСчетов	= Выборка.СписокСчетов;
			ТекЭлемент.GUID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.СписокСтатейCFI	= Выборка.СписокСтатейCFI;
			ТекЭлемент.Аналитика	= Ложь;
		КонецЕсли;
		MainParentCode = Выборка.Код;
		
	КонецЦикла;	

	ЗаписьЖурналаРегистрации("GetReportByIIN", УровеньЖурналаРегистрации.Информация,,, "База:"+ИияБазы+",TypeOfReport:"+TypeOfReport+",Период "+Формат(Data1, "ДЛФ=Д")+"-"+Формат(Data2, "ДЛФ=Д")+". Выполнение запроса");

	ТЗДанные = Выборка(Data1, Data2,БИН,ИияБазы,TypeOfReport);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("GUID,Code,RptLineName","BalAmount,Amount");
		ОбходДереваДетально_Расчет(ДеревоЗн,ТЗДанные,TypeOfReport);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("GetReportByIIN", УровеньЖурналаРегистрации.Информация,,, "База:"+ИияБазы+",TypeOfReport:"+TypeOfReport+",Период "+Формат(Data1, "ДЛФ=Д")+"-"+Формат(Data2, "ДЛФ=Д")+". Результат запроса. Количество записей "+Строка(ТЗДанные.Количество()));

	возврат ДеревоЗн; 	
	
КонецФункции 

&НаСервере
Функция СформироватьОтчетCFIВДЗ(Data1, Data2, ИияБазы, IIN,TypeOfReport) Экспорт
	
	БИН = IIN;
	
	Если БИН = "" Тогда
		НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БазыОрганизации.Ссылка КАК Ссылка,
		|	БазыОрганизации.Организация КАК Организация
		|ИЗ
		|	Справочник.Базы.Организации КАК БазыОрганизации
		|ГДЕ
		|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";            
		
		Запрос.УстановитьПараметр("ИмяБазы",ИияБазы);
		РезОрг = запрос.Выполнить().Выбрать();
		если РезОрг.Следующий() Тогда
			НайденнаяОрг = РезОрг.Организация;
		КонецЕсли;	
		
		Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		БИН = НайденнаяОрг.БИН;
	КонецЕсли;
	
	ДеревоЗн=Новый ДеревоЗначений;
	
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Соединение  = Новый COMОбъект("ADODB.Connection");	
	Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
	Соединение.CommandTimeout	 = 600;
	Соединение.ConnectionTimeout = 180;
	Соединение.Open();
	
	Выборка     = Новый COMОбъект("ADODB.RecordSet");
	Выборка.CursorType = 3;
	Выборка.ActiveConnection = Соединение;
	Выборка.Open("Select * from [" + НастройкиОбмена.БазаДанныхSQL+ "].[dbo].[map_rpt_ReportLineCFIStructures]");// Where ReportLine = 'a8972b33-e664-11ec-b835-005056a5cda3'
	
	ТаблицаCFI = Новый ТаблицаЗначений;
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			ТаблицаCFI.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = ТаблицаCFI.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка.Close();
	Соединение.Close();  
	
	
	
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка КАК Ссылка,
	|	СтатьиБюджетов.Родитель КАК Родитель,
	|	СтатьиБюджетов.СписокСчетов КАК СписокСчетов,
	|	СтатьиБюджетов.КодСправочника КАК Код,
	|	СтатьиБюджетов.СписокСтатейCFI КАК СписокСтатейCFI
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Владелец.Код = &Бюджет
	//|	И СтатьиБюджетов.КодСправочника = ""CFI3.11.2.""
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБюджетов.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Бюджет",TypeOfReport);
	
	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Статья");
	ДеревоЗн.Колонки.Добавить("Code",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("GUID",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("AmountTotal",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Amount",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("BalAmount",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Аналитика");
	ДеревоЗн.Колонки.Добавить("СписокСчетов",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("СписокСтатейCFI",ОписаниеСтрока);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ТекЭлемент				= ДеревоЗн.Строки.Добавить();
			ТекЭлемент.Статья		= Выборка.Ссылка;
			ТекЭлемент.Code			= Выборка.Код;
			ТекЭлемент.СписокСчетов	= Выборка.СписокСчетов;
			ТекЭлемент.GUID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.СписокСтатейCFI	= Выборка.СписокСтатейCFI;
			ТекЭлемент.Аналитика	= Ложь;
		Иначе
			Пока ТекЭлемент.Статья<>Выборка.Родитель Цикл
				ТекЭлемент=ТекЭлемент.Родитель;
			КонецЦикла;
			ТекЭлемент				= ТекЭлемент.Строки.Добавить();
			ТекЭлемент.Статья		= Выборка.Ссылка;
			ТекЭлемент.Code			= Выборка.Код;
			ТекЭлемент.СписокСчетов	= Выборка.СписокСчетов;
			ТекЭлемент.GUID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.СписокСтатейCFI	= Выборка.СписокСтатейCFI;
			ТекЭлемент.Аналитика	= Ложь;
			
			
		КонецЕсли;
		MainParentCode = Выборка.Код;
		
	КонецЦикла;	
	ТЗДанные = Выборка(Data1, Data2,БИН,ИияБазы,TypeOfReport);
	если ТЗДанные.Количество()>0 Тогда
		
		ТЗДанные.свернуть("GUID,Code,RptLineId,RptLineName,Expenditure,Revenue,CashFlowItem,TypesOfMovement","BalAmount,Amount");
		ОбходДереваДетально_РасчетCFI(ДеревоЗн,ТЗДанные,ТаблицаCFI);
		
	КонецЕсли;
	
	
	возврат ДеревоЗн; 	
	
КонецФункции  

&НаСервере
Процедура ОбходДереваДетально_РасчетCFI(ПереданноеДер,ТЗДанные,ТаблицаCFI)
	
	
	ПересчетСтрокPL_CFI(ТЗДанные);
	
	Для Каждого СтрПолученногоДерева Из ПереданноеДер.Строки Цикл
		Если СтрПолученногоДерева.Code = "CFI2." Тогда
			а = 1;
		КонецЕсли;
			
		
		Остаток 	= 0;
		ОборотДт 	= 0;
		ОборотКт 	= 0;
		Amount 		= 0;
		
		НайденныеСтрокиCFI =  ТаблицаCFI.НайтиСтроки(Новый Структура("ReportLine",СтрПолученногоДерева.GUID));
		для каждого стрCFI из НайденныеСтрокиCFI Цикл  
			
			Если стрCFI.ExpenditureAnalytics<>0 Тогда
				НайденныеСтроки =  ТЗДанные.НайтиСтроки(Новый Структура("Expenditure",стрCFI.ExpenditureAnalytics));
				для каждого стр из НайденныеСтроки Цикл
					Amount = Amount+(стр.Amount*стрCFI.Sign);	
				КонецЦикла;	
			КонецЕсли;	
			
			Если стрCFI.CashFlowItemAnalytics<>0 Тогда
				НайденныеСтроки =  ТЗДанные.НайтиСтроки(Новый Структура("CashFlowItem",стрCFI.CashFlowItemAnalytics));
				для каждого стр из НайденныеСтроки Цикл
					Amount = Amount+(стр.Amount*стрCFI.Sign);	
				КонецЦикла;	
			КонецЕсли;	
			
			Если стрCFI.RevenueAnalytics<>0 Тогда
				НайденныеСтроки =  ТЗДанные.НайтиСтроки(Новый Структура("Revenue",стрCFI.RevenueAnalytics));
				для каждого стр из НайденныеСтроки Цикл
					Amount = Amount+(стр.Amount*стрCFI.Sign);	
				КонецЦикла;	
			КонецЕсли;	
			
			Если стрCFI.ReportLineAnalitycs<>0 и стрCFI.TypesOfMovements=0 Тогда
				НайденныеСтроки =  ТЗДанные.НайтиСтроки(Новый Структура("RptLineId",стрCFI.ReportLineAnalitycs));
				для каждого стр из НайденныеСтроки Цикл
					Amount = Amount+(стр.Amount*стрCFI.Sign);	
				КонецЦикла;	
			КонецЕсли;	
			
			Если стрCFI.ReportLineAnalitycs<>0 и стрCFI.TypesOfMovements<>0 Тогда
				НайденныеСтроки =  ТЗДанные.НайтиСтроки(Новый Структура("RptLineId,TypesOfMovement",стрCFI.ReportLineAnalitycs,стрCFI.TypesOfMovements));
				для каждого стр из НайденныеСтроки Цикл
					Amount = Amount+(стр.Amount*стрCFI.Sign);	
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЦикла;
		
		СтрПолученногоДерева.Amount 	= СтрПолученногоДерева.Amount+Amount; 
		
		
		Если СтрПолученногоДерева.Строки.Количество()>0 Тогда
			
			ОбходДереваДетально_РасчетCFI(СтрПолученногоДерева,ТЗДанные,ТаблицаCFI);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчетСтрокPL_CFI(ТЗДанные)
	СуммаPL31 		= 0;
	СуммаPL32 		= 0;
	СуммаPL33 		= 0;
	СуммаPL6 		= 0;
	СуммаPL12 		= 0;
	СуммаPL12Оборот	= 0;

	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL1.1."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL31		= СуммаPL31		+ стр.Amount;
	КонецЦикла;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL2.1."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL31		= СуммаPL31		+ стр.Amount;
	КонецЦикла;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL1.2."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL32		= СуммаPL32		+ стр.Amount;
	КонецЦикла;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL2.2."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL32		= СуммаPL32		+ стр.Amount;
	КонецЦикла;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL1.3."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL33		= СуммаPL33		+ стр.Amount;
	КонецЦикла;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL2.3."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL33		= СуммаPL33		+ стр.Amount;
	КонецЦикла;	
	
	НайденнаяСтрока = ТЗДанные.Найти("PL3.1.","Code");
	если НайденнаяСтрока<>Неопределено тогда
		НайденнаяСтрока.Amount 	= СуммаPL31;
	КонецЕсли;	
	
	НайденнаяСтрока = ТЗДанные.Найти("PL3.2.","Code");
	если НайденнаяСтрока<>Неопределено тогда
		НайденнаяСтрока.Amount 	= СуммаPL32;
	КонецЕсли;	
	
	НайденнаяСтрока = ТЗДанные.Найти("PL3.3.","Code");
	если НайденнаяСтрока<>Неопределено тогда
		НайденнаяСтрока.Amount 	= СуммаPL33;
	КонецЕсли;	
	
	НайденнаяСтрока = ТЗДанные.Найти("PL3.","Code");
	если НайденнаяСтрока<>Неопределено тогда
		НайденнаяСтрока.Amount 	= СуммаPL31+СуммаPL32+СуммаPL33;
		
		СуммаPL6	= СуммаPL6+НайденнаяСтрока.Amount;
	КонецЕсли;	
		
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL4."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL6	= СуммаPL6+стр.Amount;
	КонецЦикла;	
		
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL5."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL6 	= СуммаPL6+стр.Amount;
	КонецЦикла;	
		
	НайденнаяСтрока = ТЗДанные.Найти("PL6.","Code");
	если НайденнаяСтрока<>Неопределено тогда
		НайденнаяСтрока.Amount 	= СуммаPL6;
		СуммаPL12 	 			= СуммаPL12+НайденнаяСтрока.Amount;
	КонецЕсли;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL7."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL12 	 	= СуммаPL12+стр.Amount;
	КонецЦикла;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL8."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL12 	 	= СуммаPL12+стр.Amount;
	КонецЦикла;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL9."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL12 	 = СуммаPL12+стр.Amount;
	КонецЦикла;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL10."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL12 	 	= СуммаPL12+стр.Amount;
	КонецЦикла;	
	
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL11."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL12 	 	= СуммаPL12+стр.Amount;
	КонецЦикла;	
	
	НайденнаяСтрока = ТЗДанные.Найти("PL12.","Code");
	если НайденнаяСтрока<>Неопределено тогда
		НайденнаяСтрока.Amount	= СуммаPL12;
	КонецЕсли;
	
	СуммаPL13 = 0;
	НайденныеСтроки = ТЗДанные.НайтиСтроки(Новый Структура("Code","PL13."));
	для каждого стр из НайденныеСтроки Цикл
		СуммаPL13 	= СуммаPL13+стр.Amount;
	КонецЦикла;	
	
	НайденнаяСтрока = ТЗДанные.Найти("PL16.","Code");
	если НайденнаяСтрока<>Неопределено тогда
		НайденнаяСтрока.Amount 	= СуммаPL12+СуммаPL13;
	КонецЕсли;
	
КонецПроцедуры	


&НаСервере
Функция СформироватьОтчетОСВВДЗ(Data1, Data2, ИияБазы, IIN,TypeOfReport) Экспорт
	
	БИН = IIN;
	
	Если БИН = "" Тогда
		НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БазыОрганизации.Ссылка КАК Ссылка,
		|	БазыОрганизации.Организация КАК Организация
		|ИЗ
		|	Справочник.Базы.Организации КАК БазыОрганизации
		|ГДЕ
		|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";            
		
		Запрос.УстановитьПараметр("ИмяБазы",ИияБазы);
		РезОрг = запрос.Выполнить().Выбрать();
		если РезОрг.Следующий() Тогда
			НайденнаяОрг = РезОрг.Организация;
		КонецЕсли;	
		
		Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		БИН = НайденнаяОрг.БИН;
	КонецЕсли;
	
	ДеревоЗн=Новый ДеревоЗначений;
	
	
	//TypeOfReport=4 ОСВ
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиБюджетовКатегорииАктивов.Ссылка КАК Ссылка,
	               |	СтатьиБюджетовКатегорииАктивов.НомерСтроки КАК НомерСтроки,
	               |	СтатьиБюджетовКатегорииАктивов.КатегорияАктива КАК КатегорияАктива,
	               |	СтатьиБюджетовКатегорииАктивов.КатегорияАктива.КодСправочника КАК КодКатегорияАктива
	               |ИЗ
	               |	Справочник.СтатьиБюджетов.КатегорииАктивов КАК СтатьиБюджетовКатегорииАктивов
	               |ГДЕ
	               |	СтатьиБюджетовКатегорииАктивов.Ссылка.Владелец.Код <> 4
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СтатьиБюджетовКатегорииАктивов.КатегорияАктива.Код";
	
	Запрос.УстановитьПараметр("Бюджет",TypeOfReport);
	ТЗ_КатегорииАктивов = Запрос.Выполнить().Выгрузить();
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиБюджетов.Ссылка КАК Ссылка,
	               |	СтатьиБюджетов.Родитель КАК Родитель,
	               |	СтатьиБюджетов.СписокСчетов КАК СписокСчетов,
	               |	СтатьиБюджетов.КодСправочника КАК Код,
	               |	ЕСТЬNULL(СтатьиБюджетов.АналитикаПоЭлементамЗатрат, ЛОЖЬ) КАК АналитикаПоЭлементамЗатрат,
	               |	ЕСТЬNULL(СтатьиБюджетов.АналитикаПоЭлементамДоходов, ЛОЖЬ) КАК АналитикаПоЭлементамДоходов,
	               |	ЕСТЬNULL(СтатьиБюджетов.АналитикаПоКатегориямАктива, ЛОЖЬ) КАК АналитикаПоКатегориямАктива,
	               |	СтатьиБюджетов.ЭлементЗатрат КАК ЭлементЗатрат,
	               |	СтатьиБюджетов.ЭлементДоходов КАК ЭлементДоходов,
	               |	СтатьиБюджетов.Владелец.Код КАК ВладелецКод,
	               |	СтатьиБюджетов.Владелец.Наименование КАК Владелец
	               |ИЗ
	               |	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	               |ГДЕ
	               |	СтатьиБюджетов.Владелец.Код <> 4
	               |	И СтатьиБюджетов.Владелец.Код <> 6
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВладелецКод,
	               |	СтатьиБюджетов.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Бюджет",TypeOfReport);
	
	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Статья");
	ДеревоЗн.Колонки.Добавить("MainCode",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("Code",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("AnalitCode",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("GUID",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("MainGUID",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("AmountTotal",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Amount",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("BalAmount",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Аналитика");
	ДеревоЗн.Колонки.Добавить("СписокСчетов",ОписаниеСтрока);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ТекЭлемент				= ДеревоЗн.Строки.Добавить();
			ТекЭлемент.Статья		= Выборка.Ссылка;
			ТекЭлемент.Code			= Выборка.Код;
			ТекЭлемент.MainCode		= Выборка.Код;
			ТекЭлемент.СписокСчетов	= Выборка.СписокСчетов;
			ТекЭлемент.GUID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.MainGUID		= ТекЭлемент.GUID;
			ТекЭлемент.Аналитика	= Ложь;
		Иначе
			Пока ТекЭлемент.Статья<>Выборка.Родитель Цикл
				ТекЭлемент=ТекЭлемент.Родитель;
			КонецЦикла;
			ТекЭлемент				= ТекЭлемент.Строки.Добавить();
			ТекЭлемент.Статья		= Выборка.Ссылка;
			ТекЭлемент.Code			= Выборка.Код;
			ТекЭлемент.MainCode		= Выборка.Код;
			ТекЭлемент.СписокСчетов	= Выборка.СписокСчетов;
			ТекЭлемент.GUID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.MainGUID		= ТекЭлемент.GUID;
			ТекЭлемент.Аналитика	= Ложь;
		КонецЕсли;
		MainParentCode = Выборка.Код;
		
		Если Выборка.АналитикаПоКатегориямАктива Тогда
			ТекСтрока = ТекЭлемент;
			СписокКатегорий = Новый СписокЗначений();
			НайденныеКатегории = ТЗ_КатегорииАктивов.НайтиСтроки(Новый Структура("Ссылка",Выборка.Ссылка));
			для каждого стрНК из НайденныеКатегории Цикл
				ТекЭлемент				= ТекСтрока.Строки.Добавить();
				ТекЭлемент.Статья		= стрНК.КатегорияАктива;
				ТекЭлемент.Code			= MainParentCode+стрНК.КодКатегорияАктива;
				ТекЭлемент.AnalitCode	= стрНК.КодКатегорияАктива;			
				ТекЭлемент.GUID 		= Строка(стрНК.КатегорияАктива.УникальныйИдентификатор());
				ТекЭлемент.MainCode		= ТекСтрока.MainCode;
				ТекЭлемент.MainGUID		= ТекСтрока.GUID;
				ТекЭлемент.Аналитика	= Истина;
				ТекЭлемент.СписокСчетов	= ТекСтрока.СписокСчетов;
				СписокКатегорий.Добавить(стрНК.КатегорияАктива);
				
			КонецЦикла;
			//ДобавитьСтрокиВДерево(ТекЭлемент,"КатегорииАктивов",СписокКатегорий,ТекЭлемент.СписокСчетов,MainParentCode);
			
		КонецЕсли;	
		
		Если Выборка.АналитикаПоЭлементамЗатрат Тогда
			ДобавитьСтрокиВДерево(ТекЭлемент,"СтатьиЗатрат",Выборка.ЭлементЗатрат,ТекЭлемент.СписокСчетов,ТекЭлемент.MainCode,ТекЭлемент.MainGUID,MainParentCode);
		КонецЕсли;	
		
		Если Выборка.АналитикаПоЭлементамДоходов Тогда
			ДобавитьСтрокиВДерево(ТекЭлемент,"Доходы",Выборка.ЭлементДоходов,ТекЭлемент.СписокСчетов,ТекЭлемент.MainCode,ТекЭлемент.MainGUID,MainParentCode);
		КонецЕсли;	
	КонецЦикла;	
	
	ТЗДанные = Выборка(Data1, Data2,БИН,ИияБазы,TypeOfReport);
	для каждого стр из ТЗДанные Цикл
		Если   (стр.Code = "BS1.3.4.1." 
			или стр.Code = "BS1.3.4.2."
			или стр.Code = "BS1.3.4.3." 
			
			или стр.Code = "BS1.3.3.1."
			или стр.Code = "BS1.3.3.2."
			или стр.Code = "BS1.3.3.3."
			)
			и не ЗначениеЗаполнено(стр.AnalitCode) Тогда
			стр.AnalitGUID = "4640d96d-cf2b-11eb-b828-005056a5cda3";            //прочие
			стр.AnalitCode = "AST1.6.";            //прочие
		КонецЕсли;	

		Если  стр.Code = "PL5." и не ЗначениеЗаполнено(стр.AnalitCode) Тогда
			стр.AnalitGUID = "759fbd8e-00af-11ec-b828-005056a5cda3";            //прочие
			стр.AnalitCode = "CEL24.2.";            //прочие
		КонецЕсли;	
		
		Если  стр.Code = "PL2.3." и не ЗначениеЗаполнено(стр.AnalitCode) Тогда
			стр.AnalitGUID = "759fbd8e-00af-11ec-b828-005056a5cda3";            //прочие
			стр.AnalitCode = "CEL24.2.";            //прочие
		КонецЕсли;	
		
	КонецЦикла;	
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("GUID,Code,RptLineName,Account,AnalitGUID,AnalitCode,AnalitName","BalAmount,Amount");
		ОбходДереваДетально_Расчет(ДеревоЗн,ТЗДанные,TypeOfReport);
	КонецЕсли;
	
	
	возврат ДеревоЗн; 	
	
КонецФункции

&НаСервере
Функция СформироватьОтчетКапиталВДЗ(Data1, Data2, ИияБазы, IIN,TypeOfReport) Экспорт
	БИН = IIN;
	
	Если БИН = "" Тогда
		НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БазыОрганизации.Ссылка КАК Ссылка,
		|	БазыОрганизации.Организация КАК Организация
		|ИЗ
		|	Справочник.Базы.Организации КАК БазыОрганизации
		|ГДЕ
		|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";            
		
		Запрос.УстановитьПараметр("ИмяБазы",ИияБазы);
		РезОрг = запрос.Выполнить().Выбрать();
		если РезОрг.Следующий() Тогда
			НайденнаяОрг = РезОрг.Организация;
		КонецЕсли;	
		
		Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		БИН = НайденнаяОрг.БИН;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Статья");
	ДеревоЗн.Колонки.Добавить("Code",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("CodeBalance",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("NameBal",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("Amount",ОписаниеЧисло);
	
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка КАК Ссылка,
	|	СтатьиБюджетов.Родитель КАК Родитель,
	|	СтатьиБюджетов.СписокСчетов КАК СписокСчетов,
	|	СтатьиБюджетов.Наименование КАК NameBal,
	|	СтатьиБюджетов.КодСправочника КАК CodeBalance,
	|	0 КАК Amount,
	|	0 КАК BalAmount,
	|	ЗНАЧЕНИЕ(Справочник.ВидыДвижения.ПустаяСсылка) КАК ВидДвижения
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Владелец.Код = &Бюджет
	|	И (ВЫРАЗИТЬ(СтатьиБюджетов.КодСправочника КАК СТРОКА(3))) = ""BS3""
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБюджетов.Код ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Бюджет",1);
	ТЗБюджет = Запрос.Выполнить().Выгрузить();
	//ТЗБюджет.Колонки.Добавить("Account",ОписаниеСтрока);
	//ТЗБюджет.Колонки.Добавить("CorAccount",ОписаниеСтрока);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыДвиженияКорреспонденция.Ссылка КАК ВидДвижения,
	               |	ВидыДвиженияКорреспонденция.Счет.КодСправочника КАК Счет,
	               |	ВидыДвиженияКорреспонденция.КорСчет.КодСправочника КАК КорСчет,
	               |	ВЫБОР
	               |		КОГДА ВидыДвиженияКорреспонденция.ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДтКт.ОборотДт)
	               |			ТОГДА ""Дт""
	               |		КОГДА ВидыДвиженияКорреспонденция.ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДтКт.ОборотКт)
	               |			ТОГДА ""Кт""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ТипДвижения
	               |ИЗ
	               |	Справочник.ВидыДвижения.Корреспонденция КАК ВидыДвиженияКорреспонденция
	               |ГДЕ
	               |	НЕ ВидыДвиженияКорреспонденция.Ссылка.ФормироватьПоСальдо
	               |	И ВидыДвиженияКорреспонденция.Ссылка.ВключитьВОтчетОКапитале
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВидыДвиженияКорреспонденция.Ссылка,
	               |	ВидыДвиженияКорреспонденция.Счет.КодСправочника,
	               |	ВидыДвиженияКорреспонденция.КорСчет.КодСправочника,
	               |	ВЫБОР
	               |		КОГДА ВидыДвиженияКорреспонденция.ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДтКт.ОборотДт)
	               |			ТОГДА ""Дт""
	               |		КОГДА ВидыДвиженияКорреспонденция.ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДтКт.ОборотКт)
	               |			ТОГДА ""Кт""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ";
	ТЗСчетаВидовДвижений = Запрос.Выполнить().Выгрузить(); 
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыДвиженияКорреспонденция.Ссылка КАК ВидДвижения,
	|	ВидыДвиженияКорреспонденция.Счет.КодСправочника КАК Счет,
	|	ЕСТЬNULL(ВидыДвиженияКорреспонденция.КорСчет.КодСправочника, """") КАК КорСчет
	|ИЗ
	|	Справочник.ВидыДвижения.Корреспонденция КАК ВидыДвиженияКорреспонденция
	|ГДЕ
	|	ВидыДвиженияКорреспонденция.Ссылка.ФормироватьПоСальдо
	|	И ВидыДвиженияКорреспонденция.Ссылка.ВключитьВОтчетОКапитале
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыДвиженияКорреспонденция.Ссылка,
	|	ВидыДвиженияКорреспонденция.Счет.КодСправочника,
	|	ВидыДвиженияКорреспонденция.КорСчет.КодСправочника";
	ТЗСчетаВидовДвиженийОстатки = Запрос.Выполнить().Выгрузить();
	
	
	
	ТЗДанные = Выборка(Data1, Data2,БИН,ИияБазы,5);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Code,RptLineName,Account,CorAccount,TypeOfTurnovers","Amount,BalAmount");
		ТЗДанные.Колонки.Добавить("ВидДвижения");
		
		
		для каждого Стр из ТЗДанные Цикл
			
			//Если Стр.Code = "BS3.1.7.1." Тогда
			//	Если Лев(Стр.Account,1) = "6" или Лев(Стр.Account,1) = "7" или Лев(Стр.Account,1) = "8" 
			//		или Лев(Стр.CorAccount,1) = "6" или Лев(Стр.CorAccount,1) = "7" или Лев(Стр.CorAccount,1) = "8" Тогда
			//		 Продолжить;
			//	КонецЕсли;
			//КонецЕсли;	
			если Стр.BalAmount<>0 тогда
				//остатки
				НайденныеСтроки = ТЗСчетаВидовДвиженийОстатки.НайтиСтроки(Новый Структура("Счет,КорСчет",Стр.Account,""));
				для каждого стрН из  НайденныеСтроки Цикл
					Стр.ВидДвижения = стрН.ВидДвижения;
				КонецЦикла;	
			Иначе
				//оборотные   
				//Если Стр.TypeOfTurnovers = "Дт" Тогда
				//	TypeOfTurnovers = "Оборот Дт";					
				//ИначеЕсли Стр.TypeOfTurnovers = "Кт" Тогда
				//	TypeOfTurnovers = "Оборот Кт";					
				//Иначе
				//	TypeOfTurnovers = "";					
				//КонецЕсли;
				TypeOfTurnovers = Стр.TypeOfTurnovers;					
					
				
				НайденныеСтроки = ТЗСчетаВидовДвижений.НайтиСтроки(Новый Структура("Счет,КорСчет,ТипДвижения",Стр.Account,Стр.CorAccount,TypeOfTurnovers));
				для каждого стрН из  НайденныеСтроки Цикл
					Стр.ВидДвижения = стрН.ВидДвижения;
				КонецЦикла;	
				Если Не ЗначениеЗаполнено(Стр.ВидДвижения) Тогда
					НайденныеСтроки = ТЗСчетаВидовДвижений.НайтиСтроки(Новый Структура("Счет,КорСчет,ТипДвижения",Стр.CorAccount,Стр.Account,TypeOfTurnovers));
					для каждого стрН из  НайденныеСтроки Цикл
						Стр.ВидДвижения = стрН.ВидДвижения;
					КонецЦикла;	
				Конецесли;	
				
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		СтатьяОстатокНаКонец = Справочники.ВидыДвижения.НайтиПоРеквизиту("КодСправочника","RFW3.");
		
		
		ТЗДанные.свернуть("Code,ВидДвижения","Amount,BalAmount");
		ТЗОстДанные = ТЗДанные.Скопировать();
		ТЗОстДанные.ЗаполнитьЗначения(СтатьяОстатокНаКонец,"ВидДвижения");	
		
		для каждого стр из ТЗОстДанные Цикл
			НовСтр = ТЗДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,стр);
		КонецЦикла;	
		
		ТЗДанные.свернуть("Code,ВидДвижения","Amount,BalAmount");
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВидыДвижения.Ссылка КАК Ссылка,
		               |	ВидыДвижения.Ссылка.Родитель КАК Родитель,
		               |	ВидыДвижения.Ссылка.КодСправочника КАК Код,
		               |	ВидыДвижения.Ссылка.Порядок КАК Порядок,
		               |	ВидыДвижения.ФормироватьПоСальдо КАК ФормироватьПоСальдо,
		               |	ВидыДвижения.ВключитьВОтчетОКапитале КАК ВключитьВОтчетОКапитале
		               |ИЗ
		               |	Справочник.ВидыДвижения КАК ВидыДвижения
		               |ГДЕ
		               |	НЕ ВидыДвижения.НеИспользуется
		               |	И НЕ ВидыДвижения.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Порядок ИЕРАРХИЯ";
		
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ВключитьВОтчетОКапитале Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.Родитель) Тогда
				ТекЭлемент				= ДеревоЗн.Строки.Добавить();
				ТекЭлемент.Статья		= Выборка.Ссылка;
				ТекЭлемент.Code			= Выборка.Код;
			Иначе
				Если ТекЭлемент = Неопределено Тогда
					ТекЭлемент				= ДеревоЗн.Строки.Добавить();
					ТекЭлемент.Статья		= Выборка.Ссылка;
					ТекЭлемент.Code			= Выборка.Код;
				Иначе	
					
					Пока ТекЭлемент.Статья<>Выборка.Родитель Цикл
						ТекЭлемент=ТекЭлемент.Родитель;
					КонецЦикла;
					ТекЭлемент				= ТекЭлемент.Строки.Добавить();
					ТекЭлемент.Статья		= Выборка.Ссылка;
					ТекЭлемент.Code			= Выборка.Код;
				КонецЕсли;
			КонецЕсли;
			
			
			
			НайденныеСтроки = ТЗДанные.найтиСтроки(Новый Структура("ВидДвижения",ТекЭлемент.Статья));
			ПервыйВход = Истина;
			для каждого стрН из НайденныеСтроки Цикл
				НайденнаяСтрокаБ = ТЗБюджет.найти(стрН.Code,"CodeBalance");
				Если НайденнаяСтрокаБ<>Неопределено тогда
					//Если Не ПервыйВход Тогда
					//	Пока ТекЭлемент.Статья<>Выборка.Родитель Цикл
					//		ТекЭлемент=ТекЭлемент.Родитель;
					//	КонецЦикла;
					//	ТекЭлемент				= ТекЭлемент.Строки.Добавить();
					//	ТекЭлемент.Статья		= Выборка.Ссылка;
					//	ТекЭлемент.Code			= Выборка.Код;
					//КонецЕсли;	
					Если Не ПервыйВход Тогда
						Если ТекЭлемент.Родитель = Неопределено Тогда
							ТекЭлемент=ДеревоЗн;
						Иначе
							ТекЭлемент=ТекЭлемент.Родитель;
						КонецЕсли;
						ТекЭлемент				= ТекЭлемент.Строки.Добавить();
						ТекЭлемент.Статья		= Выборка.Ссылка;
						ТекЭлемент.Code			= Выборка.Код;
					КонецЕсли;	
					
					ТекЭлемент.CodeBalance	= НайденнаяСтрокаБ.CodeBalance;
					ТекЭлемент.NameBal		= НайденнаяСтрокаБ.NameBal; 
					
					Если ТекЭлемент.Статья = СтатьяОстатокНаКонец Тогда
						ТекЭлемент.Amount	= стрН.BalAmount+стрН.Amount;
					Иначе
						
						если Выборка.ФормироватьПоСальдо Тогда
							ТекЭлемент.Amount	= стрН.BalAmount;
						Иначе
							ТекЭлемент.Amount	= стрН.Amount;
						Конецесли;
					КонецЕсли;
					
				КонецЕсли;	
				
				ПервыйВход = Ложь;	
				
			КонецЦикла;	
		КонецЦикла;	
		
	КонецЕсли;
	возврат ДеревоЗн; 	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиВДерево(ТекСтрока,ИмяСпр,ОтборПоАналитике,СписокСчетов,MainCode,MainGUID,MainParentCode)
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка,
	|	Спр.Родитель КАК Родитель,
	|	Спр.КодСправочника КАК Код
	|ИЗ
	|	Справочник."+ИмяСпр+" КАК Спр
	|ГДЕ Не Спр.НеИспользуется
	|";
	
	//|	Справочник."+ИмяСпр+" КАК КатегорииАктивов
	если ЗначениеЗаполнено(ОтборПоАналитике) Тогда
		Запрос.УстановитьПараметр("ОтборПоАналитике",ОтборПоАналитике);	
		Запрос.Текст = 	Запрос.Текст+" 
		|И	Спр.Ссылка В ИЕРАРХИИ(&ОтборПоАналитике)
		|";
	КонецЕсли;	
	
	Запрос.Текст = 	Запрос.Текст+" 
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Ссылка ИЕРАРХИЯ";
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Рез.Родитель) Тогда
			ТекЭлемент				= ТекСтрока.Строки.Добавить();
			ТекЭлемент.Статья		= Рез.Ссылка;
			ТекЭлемент.Code			= MainParentCode+СокрЛП(Рез.Код);
			ТекЭлемент.MainCode		= MainCode;
			ТекЭлемент.MainGUID		= MainGUID;
			ТекЭлемент.GUID 		= Строка(Рез.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.AnalitCode	= СокрЛП(Рез.Код);			
			ТекЭлемент.Аналитика	= Истина;
			ТекЭлемент.СписокСчетов	= СписокСчетов;
		Иначе
			//Если ТекЭлемент=Неопределено тогда
			//	ТекЭлемент = ТекСтрока;
			//КонецЕсли;
			
			Пока ТекЭлемент.Статья<>Рез.Родитель Цикл
				ТекЭлемент=ТекЭлемент.Родитель;
			КонецЦикла;
			
			ТекЭлемент				= ТекЭлемент.Строки.Добавить();
			ТекЭлемент.Статья		= Рез.Ссылка;
			ТекЭлемент.Code			= MainParentCode+СокрЛП(Рез.Код);
			ТекЭлемент.MainCode		= MainCode;
			ТекЭлемент.MainGUID		= MainGUID;
			ТекЭлемент.AnalitCode	= СокрЛП(Рез.Код);			
			ТекЭлемент.GUID 		= Строка(Рез.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.Аналитика	= Истина;
			ТекЭлемент.СписокСчетов	= СписокСчетов;
		КонецЕсли;	
	КонецЦикла;  
	
КонецПроцедуры	

&НаСервере
Функция СформироватьОтчет(Data1, Data2, ИияБазы, IIN, TypeOfReport) Экспорт
	
	
	Если TypeOfReport=4 Тогда
		Дерево = СформироватьОтчетОСВВДЗ(Data1, Data2, ИияБазы, IIN,TypeOfReport);
		
	ИначеЕсли TypeOfReport=5 Тогда
		Дерево = СформироватьОтчетКапиталВДЗ(Data1, Data2, ИияБазы, IIN,TypeOfReport);
		
	ИначеЕсли TypeOfReport=6 Тогда //CFI
		Дерево = СформироватьОтчетCFIВДЗ(Data1, Data2, ИияБазы, IIN,TypeOfReport);
		
	Иначе	
		Дерево = СформироватьОтчетВДЗ(Data1, Data2, ИияБазы, IIN,TypeOfReport);
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(300);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Code",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("Name",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("GUID",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("ParentGUID",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("ParentCode",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("AccountList",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("AnalyticsList",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("Account",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("Amount",ОписаниеЧисло);
	ТЗ.Колонки.Добавить("BalAmount",ОписаниеЧисло);
	ТЗ.Колонки.Добавить("CodeBalance",ОписаниеСтрока);
	
	
	//ПреобразоватьВТЗРекурсия(Дерево, ТЗ, Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	ПреобразоватьВТЗРекурсия(Дерево, ТЗ, TypeOfReport,"");
	
	возврат  ТЗ; 	
	
КонецФункции

&НаСервере
Функция СформироватьОтчетДетально(Data1, Data2, ИияБазы, TypeOfReport) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Code",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("Name",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("GUID",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("ParentGUID",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("ParentCode",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("AccountList",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("Account",ОписаниеСтрока);
	ТЗ.Колонки.Добавить("Amount",ОписаниеЧисло);
	
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БазыОрганизации.Ссылка КАК Ссылка,
	|	БазыОрганизации.Организация КАК Организация
	|ИЗ
	|	Справочник.Базы.Организации КАК БазыОрганизации
	|ГДЕ
	|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";
	
	Запрос.УстановитьПараметр("ИмяБазы",ИияБазы);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	БИН = НайденнаяОрг.БИН;
	
	
	если TypeOfReport=6 тогда
		возврат ТЗ; 	
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка КАК Ссылка,
	|	СтатьиБюджетов.Родитель КАК Родитель,
	|	СтатьиБюджетов.СписокСчетов КАК СписокСчетов,
	|	СтатьиБюджетов.Код КАК Код,
	|	СтатьиБюджетовСчета.Счет.Код КАК Счет
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБюджетов.Счета КАК СтатьиБюджетовСчета
	|		ПО СтатьиБюджетов.Ссылка = СтатьиБюджетовСчета.Ссылка
	|ГДЕ
	|	СтатьиБюджетов.Владелец.Код = &Бюджет
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБюджетов.Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Бюджет",TypeOfReport);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекЭлемент				= ТЗ.Добавить();
		ТекЭлемент.Name			= Строка(Выборка.Ссылка);
		ТекЭлемент.Code			= Выборка.Код;
		ТекЭлемент.AccountList	= Выборка.СписокСчетов;
		//ТекЭлемент.Account		= Выборка.Счет;
		ТекЭлемент.GUID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ТекЭлемент.ParentCode 	= Выборка.Родитель.Код;
	КонецЦикла;	
	
	ТЗДанные = Выборка(Data1, Data2,БИН,ИияБазы,TypeOfReport);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("GUID,Code,RptLineName","BalAmount,Amount");
	КонецЕсли;
	
	
	Для Каждого Стр Из ТЗ Цикл
		Amount 		= 0;
		BalAmount 	= 0;
		OriginAccount = "";
		НайденныеСтроки =  ТЗДанные.НайтиСтроки(Новый Структура("GUID",Стр.GUID));
		для каждого стрН из НайденныеСтроки Цикл
			Amount 		= Amount	+ стрН.Amount;
			BalAmount 	= BalAmount	+ стрН.BalAmount;
			//OriginAccount = стрН.OriginAccount;
		КонецЦикла;
		
		Стр.Amount 	= Amount+BalAmount;
		//Стр.Account = OriginAccount;
	КонецЦикла;
	
	возврат  ТЗ; 	
	
КонецФункции

&НаСервере
Функция СформироватьОтчетАнализСчетов(Data1, Data2, ИияБазы,IIN) Экспорт
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Account");
	ТЗ.Колонки.Добавить("CorAccount");
	ТЗ.Колонки.Добавить("AmountDt",ОписаниеЧисло);
	ТЗ.Колонки.Добавить("AmountKt",ОписаниеЧисло);
	
	
	БИН = IIN;
	
	Если БИН = "" Тогда
		НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БазыОрганизации.Ссылка КАК Ссылка,
		|	БазыОрганизации.Организация КАК Организация
		|ИЗ
		|	Справочник.Базы.Организации КАК БазыОрганизации
		|ГДЕ
		|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";            
		
		Запрос.УстановитьПараметр("ИмяБазы",ИияБазы);
		РезОрг = запрос.Выполнить().Выбрать();
		если РезОрг.Следующий() Тогда
			НайденнаяОрг = РезОрг.Организация;
		КонецЕсли;	
		
		Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		БИН = НайденнаяОрг.БИН;
	КонецЕсли;
	
	
	ТЗДанные = Выборка(Data1, Data2,БИН,ИияБазы,9);
	
	возврат  ТЗДанные; 	
	
КонецФункции

&НаСервере
Функция СформироватьОтчетАнализСчета(Data1, Data2, ИияБазы,IIN,Account) Экспорт
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Account");
	ТЗ.Колонки.Добавить("CorAccount");
	ТЗ.Колонки.Добавить("AmountDt",ОписаниеЧисло);
	ТЗ.Колонки.Добавить("AmountKt",ОписаниеЧисло);
	
	
	БИН = IIN;
	
	Если БИН = "" Тогда
		НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БазыОрганизации.Ссылка КАК Ссылка,
		|	БазыОрганизации.Организация КАК Организация
		|ИЗ
		|	Справочник.Базы.Организации КАК БазыОрганизации
		|ГДЕ
		|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";            
		
		Запрос.УстановитьПараметр("ИмяБазы",ИияБазы);
		РезОрг = запрос.Выполнить().Выбрать();
		если РезОрг.Следующий() Тогда
			НайденнаяОрг = РезОрг.Организация;
		КонецЕсли;	
		
		Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		БИН = НайденнаяОрг.БИН;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	
	Попытка
		
		
		Param1 = Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд"));
		Команда.Parameters.Append(Param1);
		
		Param2 = Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд"));
		Команда.Parameters.Append(Param2);
		//
		Param4 = Команда.CreateParameter(,200,1,12,БИН);
		Команда.Parameters.Append(Param4);
		
		Param4 = Команда.CreateParameter(,200,1,12,Account);
		Команда.Parameters.Append(Param4);
		
		Запрос = "
		|SELECT 
		|Sc.Code as Account,
		|CorSch.Code as CorAccount,
		|SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Дт' then TrnOver.RegulatedAmount else 0 END) as AmountDt,
		|SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then TrnOver.RegulatedAmount else 0 END) as AmountKt 	
		|FROM [BW].[dbo].[Map_Turnovers] TrnOver 
		|left join [BW].[dbo].map_ChartOfAccounts Sc ON Account = Sc.id
		|left join [BW].[dbo].map_ChartOfAccounts CorSch ON CorAccount = CorSch.id
		|left join [BW].[dbo].[map_Organizations] Org ON TrnOver.HeadCompany = Org.id
		|where Period between ? and ?
		|and Org.IIN = ?
		|and Sc.Code = ?
		|group by 
		|Sc.Code,
		|CorSch.Code
		|order by Account,CorAccount";	
		
		Команда.CommandText = Запрос;
		
		Выборка = Команда.Execute();
		
		Если НЕ Выборка.BOF Тогда
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				ИмяСтолбца = Выборка.Fields.Item(А).Name;  
				
				Таблица.Колонки.Добавить(ИмяСтолбца);
				
			КонецЦикла;
			
			//Выборка.MoveFirst();
			
			Пока НЕ Выборка.EOF Цикл
				
				НоваяСтрока = Таблица.Добавить();
				
				Для А = 0 По Выборка.Fields.Count - 1 Цикл
					
					НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
					
				КонецЦикла;
				
				Выборка.MoveNext();
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат Таблица;
	
	ТЗДанные = Таблица;
	
	возврат  ТЗДанные; 	
	
КонецФункции

&НаСервере
Функция СформироватьОтчетКарточкаСчета(Data1, Data2, ИияБазы,IIN,Account) Экспорт
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	БИН = IIN;
	
	Если БИН = "" Тогда
		НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БазыОрганизации.Ссылка КАК Ссылка,
		|	БазыОрганизации.Организация КАК Организация
		|ИЗ
		|	Справочник.Базы.Организации КАК БазыОрганизации
		|ГДЕ
		|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";            
		
		Запрос.УстановитьПараметр("ИмяБазы",ИияБазы);
		РезОрг = запрос.Выполнить().Выбрать();
		если РезОрг.Следующий() Тогда
			НайденнаяОрг = РезОрг.Организация;
		КонецЕсли;	
		
		Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		БИН = НайденнаяОрг.БИН;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	
	Попытка
		
		
		Param1 = Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд"));
		Команда.Parameters.Append(Param1);
		
		Param2 = Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд"));
		Команда.Parameters.Append(Param2);
		//
		Param4 = Команда.CreateParameter(,200,1,12,БИН);
		Команда.Parameters.Append(Param4);
		
		Param5 = Команда.CreateParameter(,200,1,36,Account);
		Команда.Parameters.Append(Param5);
		
		Запрос = "
		|SELECT 
		|TrnOver.Period,
		|TrnOver.RecorderGUID,
		|Sc.Code as Account,
		|CorSch.Code as CorAccount,
		|TrnOver.RegulatedAmount as Amount	
		|FROM [BW].[dbo].[Map_Turnovers] TrnOver 
		|left join [BW].[dbo].map_ChartOfAccounts Sc ON Account = Sc.id
		|left join [BW].[dbo].map_ChartOfAccounts CorSch ON CorAccount = CorSch.id
		|left join [BW].[dbo].[map_Organizations] Org ON TrnOver.HeadCompany = Org.id
		|where TrnOver.Period between ? and ?
		|and Org.IIN = ?
		|and Sc.GUID = ?
		|Order by Period
		|";	
		
		
		//Запрос = "
		//		|SELECT 
		//		|TrnOver.Period,
		//		|T.Recorder as RecorderGUID,
		//		|Sc.Code as Account,
		//		|CorSch.Code as CorAccount,
		//		|TrnOver.RegulatedAmount as Amount	
		//		|FROM [BW].[dbo].[Map_Turnovers] TrnOver 
		//		|left join [BW].[dbo].map_ChartOfAccounts Sc ON Account = Sc.id
		//		|left join [BW].[dbo].map_ChartOfAccounts CorSch ON CorAccount = CorSch.id
		//		|left join [BW].[dbo].[map_Organizations] Org ON TrnOver.HeadCompany = Org.id
		//		|left join [BW].[dbo].Turnovers T ON TrnOver.RecorderGUID = T.RecorderGUID 
		//		|		and TrnOver.Period = T.Period 
		//		|		and TrnOver.Base = T.Base 
		//		|		and TrnOver.TypeOfTurnovers = t.TypeOfTurnovers
		//		|where TrnOver.Period between ? and ?
		//		|and Org.IIN = ?
		//		|and Sc.GUID = ?
		//		|order by TrnOver.Period
		//		|";		
		
		//Запрос = "
		//|SELECT 
		//|TrnOver.Period,
		//|TrnOver.RecorderGUID,
		//|Sc.Code as Account,
		//|CorSch.Code as CorAccount,
		//|TrnOver.RegulatedAmount as Amount	
		//|FROM [BW].[dbo].[Map_Turnovers] TrnOver 
		//|left join [BW].[dbo].map_ChartOfAccounts Sc ON Account = Sc.id
		//|left join [BW].[dbo].map_ChartOfAccounts CorSch ON CorAccount = CorSch.id
		//|left join [BW].[dbo].[map_Organizations] Org ON TrnOver.Company = Org.id
		//|where Period between ? and ?
		//|and Org.IIN = ?
		//|and Sc.GUID = ?
		//|";
		
		
		Команда.CommandText = Запрос;
		
		Выборка = Команда.Execute();
		
		Если НЕ Выборка.BOF Тогда
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				ИмяСтолбца = Выборка.Fields.Item(А).Name;  
				
				Таблица.Колонки.Добавить(ИмяСтолбца);
				
			КонецЦикла;
			
			//Выборка.MoveFirst();
			
			Пока НЕ Выборка.EOF Цикл
				
				НоваяСтрока = Таблица.Добавить();
				
				Для А = 0 По Выборка.Fields.Count - 1 Цикл
					
					НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
					
				КонецЦикла;
				
				Выборка.MoveNext();
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат Таблица;
	
	ТЗДанные = Таблица;
	
	возврат  ТЗДанные; 	
КонецФункции

&НаСервере
Процедура ПреобразоватьВТЗРекурсия(тДерево, тТаблица,TypeOfReport,Code)
	Для Каждого тСтр Из тДерево.Строки Цикл
		
		нСтр = тТаблица.Добавить();
		нСтр.Code 		= тСтр.Code;
		нСтр.Name 		= Строка(тСтр.Статья.Наименование);
		нСтр.GUID 		= Строка(тСтр.Статья.УникальныйИдентификатор());
		нСтр.ParentCode = Code;
		
		
		попытка
			нСтр.AccountList= тСтр.СписокСчетов;
		Исключение
			
		КонецПопытки;
		
		попытка
			нСтр.AnalyticsList= тСтр.СписокСтатейCFI;
		Исключение
			
		КонецПопытки;
		
		
		попытка
			нСтр.BalAmount	= тСтр.BalAmount;
		Исключение
			
		КонецПопытки;
		
		попытка
			нСтр.CodeBalance	= тСтр.CodeBalance;
		Исключение
			
		КонецПопытки;
		
		
		нСтр.Amount		= тСтр.Amount;
		
		Если тСтр.Строки.Количество()>0 Тогда
			ПреобразоватьВТЗРекурсия(тСтр, тТаблица,TypeOfReport,нСтр.Code);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПересчитатьВсеДерево(дз_стр)
	для каждого стр из дз_стр.Строки Цикл
		Если стр.строки.количество()>0 тогда
			ПересчитатьВсеДерево(стр);
		Иначе
			ПересчетСуммДерева(стр);
			прервать;
		КонецЕсли;
	КонецЦикла;
Конецпроцедуры

Процедура ПересчетСуммДерева(ТекСтрока)
	Родитель=ТекСтрока.Родитель;
	Если Родитель=Неопределено Тогда
		Возврат;
	КонецЕсли;
	родитель.Amount		= родитель.Строки.Итог("Amount");
	родитель.BalAmount 	= родитель.Строки.Итог("BalAmount");
	ПересчетСуммДерева(Родитель);
КонецПроцедуры

&НаСервере
Процедура ОбходДереваДетально_Расчет(ПереданноеДер,ТЗДанные,TypeOfReport)
	
	Для Каждого СтрПолученногоДерева Из ПереданноеДер.Строки Цикл
		
		Остаток 	= 0;
		ОборотДт 	= 0;
		ОборотКт 	= 0;
		Amount 		= 0;
		
		
		НайденныеСтроки =  ТЗДанные.НайтиСтроки(Новый Структура("GUID",СтрПолученногоДерева.GUID));
		для каждого стр из НайденныеСтроки Цикл
			Попытка
				СтрПолученногоДерева.Amount 	= СтрПолученногоДерева.Amount+стр.Amount; 
			Исключение
			КонецПопытки;  
			
			Попытка
				СтрПолученногоДерева.BalAmount 	= СтрПолученногоДерева.BalAmount+стр.BalAmount;
			Исключение
			КонецПопытки;  
			
		КонецЦикла;
		
		
		Если TypeOfReport = 4 Тогда  

			если СтрПолученногоДерева.MainCode = "PL1.1." Тогда
				а= 1;
			КонецЕсли;
			
			Если СтрПолученногоДерева.Аналитика Тогда
				
				//Счета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрПолученногоДерева.СписокСчетов, ",", Истина, Истина);
				//Если Счета.количество()>0 Тогда
					
				//	для каждого стрСч из Счета Цикл
						
						//НайденныеСтроки =  ТЗДанные.НайтиСтроки(Новый Структура("AnalitGUID,Account",СтрПолученногоДерева.GUID,стрСч));
						НайденныеСтроки =  ТЗДанные.НайтиСтроки(Новый Структура("GUID,AnalitCode",СтрПолученногоДерева.MainGUID,СтрПолученногоДерева.AnalitCode));
						для каждого стр из НайденныеСтроки Цикл
							СтрПолученногоДерева.Amount 	= СтрПолученногоДерева.Amount+стр.Amount;
							СтрПолученногоДерева.BalAmount 	= СтрПолученногоДерева.BalAmount+стр.BalAmount;
						КонецЦикла;
						
					//КонецЦикла;
				//КонецЕсли;
				
				
			КонецЕсли;
		КонецЕсли;
		
		
		//СтрПолученногоДерева.AmountTotal 	= СтрПолученногоДерева.Amount+СтрПолученногоДерева.BalAmount;
		//СтрПолученногоДерева.BalAmountTotal = СтрПолученногоДерева.BalAmount;
		
		
		Если СтрПолученногоДерева.Строки.Количество()>0 Тогда
			
			ОбходДереваДетально_Расчет(СтрПолученногоДерева,ТЗДанные,TypeOfReport);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиОтмеченноеЗначениеВДеревеЗначений(СтрокиДерева,ЗначениеПоиска) Экспорт
 
	// пробежимся по всем строкам (по всем строкам одного уровня, которые были переданы!)
	Для каждого Строка из СтрокиДерева Цикл
 
		// Вот наше условие, значение Выгружать у строки равно 1:
		Если Строка.Code = ЗначениеПоиска Тогда
			// Если условие сработало, возвращаем строку
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
 
	// Если не нашли строку, смотрим под-строки каждой строки
	Для каждого Строка из СтрокиДерева Цикл
 
		// Здесь осуществляется рекурсивный вызов
		НайденнаяСтрока = НайтиОтмеченноеЗначениеВДеревеЗначений(Строка.Строки,ЗначениеПоиска);
		Если НайденнаяСтрока <> неопределено Тогда
			// Если нашли, возвращается строка
			Возврат НайденнаяСтрока;
		КонецЕсли;
 
	КонецЦикла;
 
	// Не нашли строку по условию, возвращаем неопределено
	Возврат неопределено;
 
КонецФункции


Функция ПолучитьОстаткиПоПоДенежнымСредствам(Data1, Data2,БИН,ИияБазы)
	
	Запрос = "
	|USE BW
	|
	|
	|	SELECT 
	|		 Sc.Code Account,
	|		 SuM(Bal.RegulatedAmount) as BalAmount, 
	|		 SuM(0) as Amount 
	|		  FROM (
	|					SELECT 
	|					  Trn.Account as Account,
	|					  SuM(CASE WHEN Trn.TypeOfTurnovers = 'Кт' then -Trn.RegulatedAmount else Trn.RegulatedAmount END) as RegulatedAmount 	
	|				  FROM Map_Turnovers Trn
	|					  left join map_Organizations Org ON Trn.HeadCompany = Org.id
	|					  where Trn.TurnoverPeriod between '2017.01.01' and ?
	|                      and Trn.Base = ?
	|					  and Org.IIN = ?
	|					 group by
	|					 Trn.Account
	|
	|				 union 
	|
	|					SELECT  
	|					   Bal.Account as Account
	|				      ,Sum(Bal.RegulatedAmount) as RegulatedAmount
	|					  FROM map_Balances Bal
	|					  left join map_Organizations Org ON Bal.HeadCompany = Org.id
	|					  where Bal.Period = '2017.01.01' 
	|                      and Bal.Base = ?
	|					  and Org.IIN  = ?
	|				  group by 
	|					   Bal.Account) Bal
	|		  left join map_ChartOfAccounts Sc ON Bal.Account = Sc.id
	|		 WHERE 
	|         Sc.Code in ('1010','1021','1022','1030','1040','1050','1060','1070','1080','1090')
	|		 group by
	|		 Sc.Code
	|
	|	UNION 
	|
	|  		SELECT 
	|		 Sc.Code as Account,
	|		 SuM(0) as BalAmount, 
	|		 SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmount else TrnOver.RegulatedAmount END) as Amount 
	|		  FROM Map_Turnovers TrnOver
	|		  left join map_ChartOfAccounts Sc ON TrnOver.Account = Sc.id
	|		  left join map_Organizations Org ON TrnOver.HeadCompany = Org.id
	|		  where TurnoverPeriod between ? and ?
	|          and TrnOver.Base = ?
	|		  and Org.IIN = ?
	|          and Sc.Code in ('1010','1021','1022','1030','1040','1050','1060','1070','1080','1090')
	|		group by
	|		  Sc.Code
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;   
	
	//2 ДатаНачала-1 Дата окончания для сбора оборотов
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1-1,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
	Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
	
	Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
	Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));    
	
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
	Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции


//********************************************************************************************************

Функция Выборка(Data1, Data2,БИН,ИияБазы,TypeOfReport) Экспорт
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	
	Попытка
		
		если TypeOfReport=1 тогда
			
			ДатаНачалаОстатков = Дата(2017,1,1);
			//1 Дата начала остатков 01,01,2017
			//Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(ДатаНачалаОстатков,"ДФ=гггг.ММ.дд")));
			
			//2 ДатаНачала-1 Дата окончания для сбора оборотов
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1-1,"ДФ=гггг.ММ.дд")));
			
			//3 ИИН
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
			//4 Дата начала остатков 01,01,2017
			//Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(ДатаНачалаОстатков,"ДФ=гггг.ММ.дд")));
			
			//5 ИИН
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));    
			
			
			
			//6
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			
			//7
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			
			//8 ИИН
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			//
			
		ИначеЕсли TypeOfReport=2 тогда
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
		ИначеЕсли TypeOfReport=3 тогда
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
			
		ИНачеесли TypeOfReport=4 тогда
			
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1-1,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));

			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
		ИначеЕсли TypeOfReport=5 тогда
			//ДатаНачалаОстатков = Дата(2017,1,1);
			////1 Дата начала остатков 01,01,2017
			//Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(ДатаНачалаОстатков,"ДФ=гггг.ММ.дд")));
			//2 ДатаНачала-1 Дата окончалоя для сбора оборотов
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1-1,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));

			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));

			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
		ИначеЕсли TypeOfReport=6 тогда  //CFI
			
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
			Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
			
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
			Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
			
		ИначеЕсли TypeOfReport=8 тогда  //план факт
			
			Param1 = Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд"));
			Команда.Parameters.Append(Param1);
			
			Param2 = Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд"));
			Команда.Parameters.Append(Param2);
			//
			Param4 = Команда.CreateParameter(,200,1,12,БИН);
			Команда.Parameters.Append(Param4);
			
			Param4 = Команда.CreateParameter(,200,1,12,БИН);
			Команда.Parameters.Append(Param4);

		ИначеЕсли TypeOfReport=9 тогда  //анализ счета
			
			Param1 = Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд"));
			Команда.Parameters.Append(Param1);
			
			Param2 = Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд"));
			Команда.Parameters.Append(Param2);
			//
			Param4 = Команда.CreateParameter(,200,1,12,БИН);
			Команда.Parameters.Append(Param4);
			
		Иначе
			Param1 = Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд"));
			Команда.Parameters.Append(Param1);
			
			Param4 = Команда.CreateParameter(,200,1,12,БИН);
			Команда.Parameters.Append(Param4);
			
			//Param3 = Команда.CreateParameter(,2,1,,1);
			//Команда.Parameters.Append(Param3);
			
			Param1 = Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд"));
			Команда.Parameters.Append(Param1);
			
			Param2 = Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд"));
			Команда.Parameters.Append(Param2);
			//
			Param4 = Команда.CreateParameter(,200,1,12,БИН);
			Команда.Parameters.Append(Param4);
			
			//Param3 = Команда.CreateParameter(,2,1,,4);
			//Команда.Parameters.Append(Param3);
		КонецЕсли;
		
		Команда.CommandText = ПолучитЗапрос(TypeOfReport);
		
		Выборка = Команда.Execute();
		
		Если НЕ Выборка.BOF Тогда
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				ИмяСтолбца = Выборка.Fields.Item(А).Name;  
				
				Таблица.Колонки.Добавить(ИмяСтолбца);
				
			КонецЦикла;
			
			//Выборка.MoveFirst();
			
			Пока НЕ Выборка.EOF Цикл
				
				НоваяСтрока = Таблица.Добавить();
				
				Для А = 0 По Выборка.Fields.Count - 1 Цикл
					
					НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
					
				КонецЦикла;
				
				Выборка.MoveNext();
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат Таблица;
	
КонецФункции

//********************************************************************************************************
Функция Соединение() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Попытка
		
		Команда     = Новый COMОбъект("ADODB.Command");
		Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");
		
		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 1800;
		Соединение.ConnectionTimeout = 1800;
		
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
		
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Команда;
	
КонецФункции

//********************************************************************************************************
Функция ПолучитЗапрос(TypeOfReport)
	если TypeOfReport = 9 Тогда //анализ счетов
		Возврат ЗапросАнализСчетов();
	Иначе
		
		НайденныйСправочник = Справочники.Бюджеты.НайтиПоКоду(TypeOfReport);
		Возврат НайденныйСправочник.ТекстЗапроса;
	КонецЕсли;
КонецФункции
//********************************************************************************************************
Функция ЗапросОбороты(TypeOfReport)
	
	//Запрос = "SELECT 
	// 	|Sc.Code as Счет,
	//	|SuM(CASE WHEN TypeOfTurnovers = 'Дт' then RegulatedAmount
	//    |     else 0 END)	 as ОборотДт ,
	//	|SuM(CASE WHEN TypeOfTurnovers = 'Кт' then RegulatedAmount
	//    |     else 0 END) as ОборотКт, 	
	//	|SuM(CASE WHEN TypeOfTurnovers = 'Кт' then -RegulatedAmount
	//    |     else RegulatedAmount END) as Оборот 	
	// 	| FROM [BW_Copy].[dbo].[Map_Turnovers]
	//  	|left join map_ChartOfAccounts Sc ON Account = Sc.id
	//  	|left join map_ChartOfAccounts CorSch ON CorAccount = CorSch.id
	//  	|where Period between ? and ?
	//	|and CorSch.Code <>'5710'
	//	|group by
	// 	|Sc.Code
	// 	|order by Счет";
	
	
	Если TypeOfReport = 4 тогда	
		Запрос = "
		|SELECT 
		|Rpt.id as Report,			 
		|RptLineStr.ReportLine,			 
		|RptLine.Code as RptLineCode,
		|RptLine.Name as RptLineName,
		|RptLine.id as RptLineId, 
		|--Sc.Code,
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.GUID 
		|When RptLine.Revenue= 1 then map_Rev.GUID 
		|When RptLine.AssetCategory= 1 then map_Asset.GUID 
		|else NULL end as AnalitGUID,
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.Code 
		|When RptLine.Revenue= 1 then map_Rev.Code 
		|When RptLine.AssetCategory= 1 then map_Asset.Code 
		|else NULL end as AnalitCode, 
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.Name
		|When RptLine.Revenue= 1 then map_Rev.Name 
		|When RptLine.AssetCategory= 1 then map_Asset.Name 
		|else NULL end as AnalitName, 
		|SuM(Bal.RegulatedAmount) as BalAmount, 
		|SuM(0) as Amount 
		|FROM [BW_Copy].[dbo].[map_BalancesMonth] Bal
		|left join map_ChartOfAccounts Sc ON Bal.Account = Sc.id
		|left outer join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = Bal.Account
		|left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
		|left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
		|left join map_Expenditures map_Exp ON Bal.Expenditure = map_Exp.id
		|left join map_Revenues map_Rev ON Bal.Revenue = map_Rev.id
		|left join map_AssetCategories map_Asset ON Bal.AssetCategory = map_Asset.id
		|where Period = '2020.01.01'
		|and RptLine.GUID is not null
		|group by
		|Rpt.id,
		|RptLine.Report,
		|RptLine.Expenditure,
		|RptLine.AssetCategory,
		|RptLine.Revenue,
		|RptLineStr.ReportLine,
		|RptLine.Code,
		|RptLine.id,
		|RptLine.Name,
		|--Sc.Code,
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.GUID 
		|When RptLine.Revenue= 1 then map_Rev.GUID 
		|When RptLine.AssetCategory= 1 then map_Asset.GUID 
		|else NULL end,
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.Code 
		|When RptLine.Revenue= 1 then map_Rev.Code 
		|When RptLine.AssetCategory= 1 then map_Asset.Code 
		|else NULL end, 
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.Name
		|When RptLine.Revenue= 1 then map_Rev.Name 
		|When RptLine.AssetCategory= 1 then map_Asset.Name 
		|else NULL end 
		|
		|Union
		|
		|SELECT 
		|
		|Rpt.id as Report,			 
		|RptLineStr.ReportLine,			 
		|RptLine.Code as RptLineCode,
		|RptLine.Name as RptLineName,
		|RptLine.id as RptLineId, 
		|--Sc.Code,
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.GUID 
		|When RptLine.Revenue= 1 then map_Rev.GUID 
		|When RptLine.AssetCategory= 1 then map_Asset.GUID 
		|else NULL end as AnalitGUID,
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.Code 
		|When RptLine.Revenue= 1 then map_Rev.Code 
		|When RptLine.AssetCategory= 1 then map_Asset.Code 
		|else NULL end as AnalitCode, 
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.Name
		|When RptLine.Revenue= 1 then map_Rev.Name 
		|When RptLine.AssetCategory= 1 then map_Asset.Name 
		|else NULL end as AnalitName, 
		|SuM(0) as BalAmount, 
		|SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmount
		|else TrnOver.RegulatedAmount END) as Amount 
		|
		|FROM [BW_Copy].[dbo].[Map_Turnovers] TrnOver
		|left join map_ChartOfAccounts Sc ON TrnOver.Account = Sc.id
		|left join map_ChartOfAccounts CorSc ON TrnOver.CorAccount = CorSc.id
		|left outer join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = TrnOver.Account
		|left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
		|left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
		|left join map_Expenditures map_Exp ON TrnOver.Expenditure = map_Exp.id
		|left join map_Revenues map_Rev ON TrnOver.Revenue = map_Rev.id
		|left join map_AssetCategories map_Asset ON TrnOver.AssetCategory = map_Asset.id
		|where Period between '2020.01.01' and '2020.12.31'
		|and RptLine.GUID is not null
		|and Rpt.id = 1
		|and CorSc.Code <>'5710'
		|group by
		|Rpt.id,
		|RptLine.Report,
		|RptLine.Expenditure,
		|RptLine.AssetCategory,
		|RptLine.Revenue,
		|RptLineStr.ReportLine,
		|RptLine.Code,
		|RptLine.id,
		|RptLine.Name,
		|--Sc.Code,
		|--CorSc.Code,
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.GUID 
		|When RptLine.Revenue= 1 then map_Rev.GUID 
		|When RptLine.AssetCategory= 1 then map_Asset.GUID 
		|else NULL end,
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.Code 
		|When RptLine.Revenue= 1 then map_Rev.Code 
		|When RptLine.AssetCategory= 1 then map_Asset.Code 
		|else NULL end, 
		|Case 
		|When RptLine.Expenditure= 1 then map_Exp.Name
		|When RptLine.Revenue= 1 then map_Rev.Name 
		|When RptLine.AssetCategory= 1 then map_Asset.Name 
		|else NULL end 
		|";
	Иначе
		
		Запрос = "
		|SELECT 
		|RptLine.Code as RptLineCode
		|,RptLine.Name as RptLineName
		|,RptLine.Parent as RptLineParent
		|,RptLine.id as RptLineId 
		|,Sc.Code as Счет
		|,Sum(Opt.RegulatedAmount) as Amount
		|FROM [BW_Copy].[dbo].[map_rpt_Output] Opt
		|left JOIN map_rpt_ReportLines RptLine ON RptLine.id = Opt.ReportLine
		|left join map_ChartOfAccounts Sc ON Opt.Account = Sc.id
		|left join [dbo].[map_Organizations] Org ON Opt.Company = Org.id
		|where Opt.Period between ? and ?
		|and Opt.Report = ?
		|and Org.IIN = ?
		|group by
		|RptLine.Code,
		|RptLine.Name,
		|RptLine.Parent,
		|Sc.Code,
		|RptLine.id
		|order by RptLine.id";
	КонецЕсли;
	
	
	
	//'190240005470'
	
	Возврат Запрос;
	
КонецФункции

//********************************************************************************************************
Функция ЗапросОстатки(TypeOfReport)
	
	//Запрос = "SELECT ChOfAcc_m.Code as Счет
	//|,SuM(RegulatedAmount) as Остаток
	//|FROM [BW_Copy].[dbo].[Balances]
	//|left join [ChartOfAccounts] ChOfAcc ON Account = ChOfAcc.GUID
	//|left join map_ChartOfAccounts ChOfAcc_m ON ChOfAcc.ChartOfAccount_map = ChOfAcc_m.GUID
	//|group by
	//|ChOfAcc_m.Code
	//|order by 
	//|ChOfAcc_m.Code";
	
	//Запрос = "
	//|SELECT 
	//|Sc.Code as Счет,
	//|Sum(RegulatedAmount) as Amount
	//|FROM [BW_Copy].[dbo].[map_Balances]
	//  |left join map_ChartOfAccounts Sc ON Account = Sc.id
	//|left join [dbo].[map_Organizations] Org ON Company = Org.id
	//|where Period = ?
	//|and Org.IIN = ?
	//|group by
	//|Sc.Code
	//|order by Sc.Code";
	
	//Запрос = "SELECT ChOfAcc_m.Code as Счет
	//|,SuM(Bal.RegulatedAmount) as Остаток
	//|FROM [BW_Copy].[dbo].[map_BalancesMonth] Bal
	//|left join [BW_Copy].[dbo].[ChartOfAccounts] ChOfAcc ON Bal.Account = ChOfAcc.ID
	//|left join [BW_Copy].[dbo].map_ChartOfAccounts ChOfAcc_m ON ChOfAcc.ChartOfAccount_map = ChOfAcc_m.GUID
	//|left join [BW_Copy].[dbo].[map_Organizations] Org ON Bal.Company = Org.id
	//|where Period = ?
	//|and Org.IIN = ?
	//|group by
	//|ChOfAcc_m.Code
	//|order by 
	//|ChOfAcc_m.Code";
	
	
	
	Запрос = "SELECT 
	|	T.Account as Счет,
	|	Sum(T.RegulatedAmount) as Остаток
	|	from (
	|	SELECT 
	|		Sc.Code as Account,
	|	SuM(CASE WHEN Trn.TypeOfTurnovers = 'Кт' then -Trn.RegulatedAmount
	|				 else Trn.RegulatedAmount END) as RegulatedAmount 	
	|	  FROM [BW].[dbo].[Map_Turnovers] Trn
	|	  left join [BW].[dbo].map_ChartOfAccounts Sc ON Trn.Account = Sc.id
	|	  left join [BW].[dbo].[map_Organizations] Org ON Trn.HeadCompany = Org.id
	|	  where Trn.Period between '2017.01.01' and '2019.12.31'
	|	  and Trn.Base = 'zms_erp'
	|	  and Org.IIN = '001240001592'
	|	 group by
	|	 Sc.Code
	|
	|	 union 
	|
	|	SELECT  Sc.Code as Account
	|		  ,Sum(Bal.RegulatedAmount) as RegulatedAmount
	|	  FROM [BW].[dbo].[map_Balances] Bal
	|	  left join [BW].[dbo].map_ChartOfAccounts Sc ON Bal.Account = Sc.id
	|	  left join [BW].[dbo].[map_Organizations] Org ON Bal.HeadCompany = Org.id
	|	  where Bal.Period = '2017.01.01' 
	|	  and Bal.Base = 'zms_erp'
	|	  and Org.IIN = '001240001592'
	|	  group by 
	|	   Sc.Code)  T
	|	 group by
	|	 T.Account
	|";
	
	
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросАнализСчетов() экспорт
	
	Запрос = "
	|SELECT 
	|Sc.Code as Account,
	|CorSch.Code as CorAccount,
	|SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Дт' then TrnOver.RegulatedAmount else 0 END) as AmountDt,
	|SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then TrnOver.RegulatedAmount else 0 END) as AmountKt 	
	|FROM [BW].[dbo].[Map_Turnovers] TrnOver 
	|left join [BW].[dbo].map_ChartOfAccounts Sc ON Account = Sc.id
	|left join [BW].[dbo].map_ChartOfAccounts CorSch ON CorAccount = CorSch.id
	|left join [BW].[dbo].[map_Organizations] Org ON TrnOver.HeadCompany = Org.id
	|where Period between ? and ?
	|and Org.IIN = ?
	|group by 
	|Sc.Code,
	|CorSch.Code
	|order by Account,CorAccount	
	
	//|SELECT 
	//|--Sc.Code as Account,
	//|--CorSch.Code as CorAccount,
	//|ScChart.Code as Account,
	//|CorScChart.Code as CorAccount,
	//|SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Дт' then TrnOver.RegulatedAmount else 0 END) as AmountDt,
	//|SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then TrnOver.RegulatedAmount else 0 END) as AmountKt 	
	//|FROM [BW].[dbo].[Map_Turnovers] TrnOver 
	//|left join [BW].[dbo].map_ChartOfAccounts Sc ON Account = Sc.id
	//|left join [BW].[dbo].map_ChartOfAccounts CorSch ON CorAccount = CorSch.id
	//|left join [BW].[dbo].[ChartOfAccounts] ScChart ON Sc.GUID = ScChart.map_ChartOfAccount
	//|left join [BW].[dbo].[ChartOfAccounts] CorScChart ON CorSch.GUID = CorScChart.map_ChartOfAccount
	//|left join [BW].[dbo].[map_Organizations] Org ON TrnOver.Company = Org.id
	//|where Period between ? and ?
	//|and Org.IIN = ?
	//|group by 
	//|--Sc.Code,
	//|--CorSch.Code,
	//|ScChart.Code,
	//|CorScChart.Code
	//|order by Account,CorAccount		
	
	|";
	
	Возврат Запрос;
	
КонецФункции

