Функция Web_GetReportPlanFact(Data1, Data2, Base, IIN,TypeOfReport) Экспорт
	
	ТЗ  = GetReportPlanFact(Data1, Data2, Base,IIN, TypeOfReport);	
	ТЗ.свернуть("GUID,Period,AllPeriod","AmountPlan,AmountFact");  
	
	ArrayOfReport = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfReportPlanFact"));
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗ Цикл
		ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ReportLinePlanFact"));
		ЗаполнитьЗначенияСвойств(ТекСтрока,ВыборкаДетальныеЗаписи);
		
		ArrayOfReport.ReportLine.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат ArrayOfReport;
КонецФункции 

Функция GetReportPlanFact(Data1,Data2,Base,BIN,КодОтчета) экспорт
	НачВремя = ТекущаяДатаСеанса();
	Сообщить("Начало "+Строка(НачВремя));

	КолМесяцев = ПолучитьКоличествоМесяцев(Data1,Data2);
	МассивПериодов = Новый Массив();
	для а=1 по КолМесяцев Цикл  
		МассивПериодов.Добавить(Дата(Год(Data1),а,1));
	КонецЦикла;	
	
	Парам = Новый Структура();
	Парам.Вставить("Data1"			,Data1);	
	Парам.Вставить("Data2"			,Data2);	
	Парам.Вставить("Base" 			,Base);	
	Парам.Вставить("BIN"  			,BIN);	
	Парам.Вставить("КодОтчета"		,КодОтчета);	
	Парам.Вставить("КолМесяцев" 	,КолМесяцев);
	Парам.Вставить("МассивПериодов" ,МассивПериодов);
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(30, 10);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	тДерево = СформироватьДерево(КодОтчета);
	
	ТЗСтатьи = Новый ТаблицаЗначений;
	ТЗСтатьи.Колонки.Добавить("Статья");
	ТЗСтатьи.Колонки.Добавить("КодСправочника"	,ОписаниеСтрока);
	ТЗСтатьи.Колонки.Добавить("GUID"			,ОписаниеСтрока);
	ТЗСтатьи.Колонки.Добавить("Код"				,ОписаниеЧисло);
	ТЗСтатьи.Колонки.Добавить("ParentCode"		,ОписаниеСтрока);
	ТЗСтатьи.Колонки.Добавить("НеВключать"		,ОписаниеБулево);
	
	ПреобразоватьВТЗРекурсия(тДерево, ТЗСтатьи,"");
	
	ТЗ_Общий=Новый ТаблицаЗначений;
	ТЗ_Общий.Колонки.Добавить("Статья");
	ТЗ_Общий.Колонки.Добавить("Код"				,ОписаниеЧисло);
	ТЗ_Общий.Колонки.Добавить("КодСправочника"	,ОписаниеСтрока);
	ТЗ_Общий.Колонки.Добавить("ParentCode"		,ОписаниеСтрока);
	
	МассивКолонокСумм 		= Новый Массив;
	
	//для а=1 по КолМесяцев Цикл  
	Для Каждого Д Из МассивПериодов Цикл	
		
		СтрокаПериод = ПолучитьПериод(Д);
		
		НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
		тДерево.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_План_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
		тДерево.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
		тДерево.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
		тДерево.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
		МассивКолонокСумм.Добавить(НаимКолонки);
		
	КонецЦикла;
	
	НаимКолонки = "Зн_План_ЗаПериод"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	тДерево.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_Факт_ЗаПериод"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	тДерево.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ОтклонАбс_ЗаПериод"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	тДерево.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ОтклонОтнос_ЗаПериод"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	тДерево.Колонки.Добавить(НаимКолонки, ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	
	//добавим  строки по периодам
	ТЗ = ПолучитьСтатьиОтчетаИзSQL(КодОтчета);
	для каждого стр из ТЗ Цикл 
		//для а=1 по КолМесяцев Цикл  
		Для Каждого Д Из МассивПериодов Цикл	
			
			//Период 					= Дата(Год(Data1),а,1); 
			
			СтрокаПериод			= ПолучитьПериод(Д); 
			
			НовСтр 					= ТЗ_Общий.Добавить();
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			
			НаимКолонки = "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= 0;
			
			НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= 0;
		КонецЦикла;
		
	КонецЦикла;	
	
	
	Если КодОтчета = 1 Тогда
		
		//BS 
		РассчитатьBS_New(Парам,ТЗ_Общий,ТЗСтатьи,тДерево,МассивКолонокСумм);	
		
	ИначеЕсли КодОтчета  = 2 Тогда
		
		//PL
		РассчитатьPL(Парам,ТЗ_Общий,ТЗСтатьи,тДерево,МассивКолонокСумм);
		
	ИначеЕсли КодОтчета  = 3 Тогда  		
		
		//СFD   
		РассчитатьCFD(Парам,ТЗ_Общий,ТЗСтатьи,тДерево,МассивКолонокСумм);	
	КонецЕсли;	
	
	ЗаполнитьЗначенияКолонок(тДерево,тДерево.Колонки,ТЗ_Общий,МассивКолонокСумм);		 
	
	
	СтрокаКолонокСумм = СтрСоединить(МассивКолонокСумм, ",");
	//округлим факт и проставим отклонение
	ТЗ_Общий.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаКолонокСумм);  
	
	ТЗ_Общий.Колонки.Добавить("НеВключать",ОписаниеБулево);
	ТЗ_Общий.Колонки.Добавить("СтатьяРодитель");
	ТЗ_Общий.Колонки.Добавить("ID");
	
	для каждого стр из ТЗ_Общий Цикл   
		
		Если стр.КодСправочника = "BS4." Тогда
			а=1;
		КонецЕсли;	
		
		стр.ID				= стр.Код;   
		стр.СтатьяРодитель	= стр.Статья.Родитель;   
		стр.НеВключать		= стр.Статья.НеВключатьВУправленческуюОтчетность;   
		
		для а=1 по КолМесяцев Цикл  
			Период 						= Дата(Год(Data1),а,1); 
			СтрокаПериод				= ПолучитьПериод(Период); 
			
			НаимКолонкиПлан 			= "Зн_План_"+СтрокаПериод;
			НаимКолонкиФакт 			= "Зн_Факт_"+СтрокаПериод;
			НаимКолонкиОтклонАбс 		= "Зн_ОтклонАбс_"+СтрокаПериод;
			НаимКолонкиОтклонОтнос 		= "Зн_ОтклонОтнос_"+СтрокаПериод;
			стр[НаимКолонкиОтклонАбс] 	= стр[НаимКолонкиФакт] - стр[НаимКолонкиПлан];
			
			если стр[НаимКолонкиПлан]<>0 Тогда
				стр[НаимКолонкиОтклонОтнос] = (стр[НаимКолонкиОтклонАбс] / стр[НаимКолонкиПлан])*100;
			КонецЕсли;
			
		КонецЦикла;	  
		
		СтрокаПериод				= "ЗаПериод"; 
		
		НаимКолонкиПлан 			= "Зн_План_"+СтрокаПериод;
		НаимКолонкиФакт 			= "Зн_Факт_"+СтрокаПериод;
		НаимКолонкиОтклонАбс 		= "Зн_ОтклонАбс_"+СтрокаПериод;
		НаимКолонкиОтклонОтнос 		= "Зн_ОтклонОтнос_"+СтрокаПериод;
		стр[НаимКолонкиОтклонАбс] 	= стр[НаимКолонкиФакт] - стр[НаимКолонкиПлан];
		
		если стр[НаимКолонкиПлан]<>0 Тогда
			стр[НаимКолонкиОтклонОтнос] = (стр[НаимКолонкиОтклонАбс] / стр[НаимКолонкиПлан])*100;
		КонецЕсли;
		
	КонецЦикла;	  
	
	//Удалим строки которые исключены 
	НеВключатьСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("НеВключать",истина));
	Для каждого СтрокаТаблицы Из НеВключатьСтроки Цикл
		ТЗ_Общий.Удалить(СтрокаТаблицы)
	КонецЦикла;
	
	ТЗ_Общий.Сортировать("id");  
	
	//еще раз пересчитаем дерево т.к. удалили строки по плановым данным есть строки которые сидят на итоговых строках. 
	//поэтому удалив исключенные строки можно смело пересчитывать дерево
	тДерево.Строки.Очистить();
	ПреобразоватьВДЗРекурсия(тДерево, ТЗ_Общий, "");
	
	НовыйТЗ = Новый ТаблицаЗначений;
	НовыйТЗ.Колонки.Добавить("id"			,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("GUID"			,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("Code"			,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("Name"			,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("ParentCode"	,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("AmountPlan"	,Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AmountFact"	,Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("Period"		,ОписаниеДата);  
	НовыйТЗ.Колонки.Добавить("AllPeriod"	,ОписаниеБулево);  
	
	для Каждого стр из ТЗ_Общий Цикл
		
		
		для а=1 по КолМесяцев Цикл  
			Период 	= Дата(Год(Data1),а,1);  
			
			СтрокаПериод = Формат(Период,"ДФ=""ММММ"""); 
			
			
			НовСтр = НовыйТЗ.Добавить();
			НовСтр.id 			= Строка(стр.Код);
			НовСтр.Code 		= стр.КодСправочника;
			НовСтр.GUID 		= стр.Статья.УникальныйИдентификатор();
			НовСтр.Name 		= стр.Статья.Наименование;
			НовСтр.ParentCode 	= стр.ParentCode;
			НовСтр.Period 		= Период;
			
			НаимКолонкиПлан 	= "Зн_План_"+СтрокаПериод; 
			НовСтр.AmountPlan  	= стр[НаимКолонкиПлан];
			
			НаимКолонкиФакт 	= "Зн_Факт_"+СтрокаПериод; 
			НовСтр.AmountFact  	= стр[НаимКолонкиФакт];
			
		КонецЦикла; 
		
		СтрокаПериод = "ЗаПериод";
		
		НовСтр = НовыйТЗ.Добавить();
		НовСтр.id 			= стр.Код;
		НовСтр.Code 		= стр.КодСправочника;
		НовСтр.GUID 		= стр.Статья.УникальныйИдентификатор();
		НовСтр.Name 		= стр.Статья.Наименование;
		НовСтр.ParentCode 	= стр.ParentCode;
		//НовСтр.Period 		= Период;
		НовСтр.AllPeriod 	= Истина;
		
		НаимКолонкиПлан 	= "Зн_План_"+СтрокаПериод; 
		НовСтр.AmountPlan  	= стр[НаимКолонкиПлан];
		
		НаимКолонкиФакт 	= "Зн_Факт_"+СтрокаПериод; 
		НовСтр.AmountFact  	= стр[НаимКолонкиФакт];
	КонецЦикла;	
	НовыйТЗ.свернуть("id,Code,GUID,Name,ParentCode,Period,AllPeriod","AmountPlan,AmountFact");  
	
	КонВремя = ТекущаяДатаСеанса();
	Сообщить("Окончание "+Строка(КонВремя));
	Сообщить("Время выполнения "+Строка(КонВремя - НачВремя));
	
	
	Возврат НовыйТЗ;	
КонецФункции	

Функция GetReportPlanFactInvest(Дата1,Дата2,Base,IIN) Экспорт
	
	КолМесяцев = ПолучитьКоличествоМесяцев(Дата1,Дата2);
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ТЗ_Общий=Новый ТаблицаЗначений;
	ТЗ_Общий.Колонки.Добавить("ТипПроекта");	
	ТЗ_Общий.Колонки.Добавить("ТипИнвестиции");
	ТЗ_Общий.Колонки.Добавить("ДатаПогашения");
	ТЗ_Общий.Колонки.Добавить("КатегорияАктива");
	ТЗ_Общий.Колонки.Добавить("ЗаказчикПроекта");
	
	МассивКолонокСумм 		= Новый Массив;
	
	для а=1 по КолМесяцев Цикл  
		
		Период 	= Дата(Год(Дата1),а,1); 
		
		СтрокаПериод = ПолучитьПериод(Период);
		
		НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_План_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
		МассивКолонокСумм.Добавить(НаимКолонки);
		
	КонецЦикла;
	
	СтрокаПериод = "ЗаПериод";
	
	НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_План_"+СтрокаПериод; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	
	ТЗДанные = ПолучитьДанныеПоФактуИнвест(Дата1,Дата2,IIN);
	если ТЗДанные.Количество()>0 Тогда
		//ТЗДанные.свернуть("Month,Year,ContractNumber,PurposeOfFunds,DebtTool","AmountRepaymentBodyDebt,RewardAmount");
		для каждого стр из ТЗДанные Цикл 
			
			Период 					= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 			= ПолучитьПериод(Период);
			
			НовСтр 					= ТЗ_Общий.Добавить();
			
			НовСтр.ТипИнвестиции	= Справочники.ТипПроектаИИнвестиции.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.TypeInvestmentGUID));
			НовСтр.КатегорияАктива	= Справочники.КатегорииАктивов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.AssetCategoryGUID));
			НовСтр.ЗаказчикПроекта	= Справочники.ФЦО.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.ProjectCustomerGUID)); 
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.AmountExpenses;
			
			СтрокаПериод 			= "ЗаПериод";
			
			НовСтр 					= ТЗ_Общий.Добавить();
			НовСтр.ТипИнвестиции	= Справочники.ТипПроектаИИнвестиции.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.TypeInvestmentGUID));
			НовСтр.КатегорияАктива	= Справочники.КатегорииАктивов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.AssetCategoryGUID));
			НовСтр.ЗаказчикПроекта	= Справочники.ФЦО.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.ProjectCustomerGUID)); 
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.AmountExpenses;
			
		КонецЦикла;	 
	КонецЕсли;
	
	
	ТЗДанные = ПолучитьДанныеПоПлануИнвест(Дата1,Дата2,IIN);
	если ТЗДанные.Количество()>0 Тогда
		//ТЗДанные.свернуть("Month,Year,ContractNumber,PurposeOfFunds,DebtTool","AmountRepaymentBodyDebt,RewardAmount");
		для каждого стр из ТЗДанные Цикл 
			
			Период 					= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 			= ПолучитьПериод(Период);
			
			НовСтр 					= ТЗ_Общий.Добавить();
			
			НовСтр.ТипИнвестиции	= Справочники.ТипПроектаИИнвестиции.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.TypeInvestmentGUID));
			НовСтр.КатегорияАктива	= Справочники.КатегорииАктивов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.AssetCategoryGUID));
			НовСтр.ЗаказчикПроекта	= Справочники.ФЦО.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.ProjectCustomerGUID)); 
			
			НаимКолонки = "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.AmountExpenses;
			
			
			СтрокаПериод 			= "ЗаПериод";
			
			НовСтр 					= ТЗ_Общий.Добавить();
			НовСтр.ТипИнвестиции	= Справочники.ТипПроектаИИнвестиции.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.TypeInvestmentGUID));
			НовСтр.КатегорияАктива	= Справочники.КатегорииАктивов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.AssetCategoryGUID));
			НовСтр.ЗаказчикПроекта	= Справочники.ФЦО.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.ProjectCustomerGUID)); 
			
			НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.AmountExpenses;
			
		КонецЦикла;	 
	КонецЕсли;
	
	
	СтрокаКолонокСумм = СтрСоединить(МассивКолонокСумм, ",");
	//округлим факт и проставим отклонение
	ТЗ_Общий.свернуть("ТипПроекта,ТипИнвестиции,КатегорияАктива,ЗаказчикПроекта",СтрокаКолонокСумм);  
	для каждого стр из ТЗ_Общий Цикл 
		ТипИнвестиции = стр.ТипИнвестиции;
		Родитель = ПолучитьРодителя(ТипИнвестиции);
		стр.ТипПроекта = Родитель;
		
		для а=1 по КолМесяцев Цикл  
			Период 						= Дата(Год(Дата1),а,1); 
			СтрокаПериод				= ПолучитьПериод(Период); 
			
			НаимКолонкиСуммаРасходыПлан = "Зн_План_"+СтрокаПериод;
			НаимКолонкиСуммаРасходыФакт = "Зн_Факт_"+СтрокаПериод;
			
			НаимКолонкиСуммаРасходыОтклонАбс 	= "Зн_ОтклонАбс_"+СтрокаПериод;
			НаимКолонкиСуммаРасходыОтклонОтнос 	= "Зн_ОтклонОтнос_"+СтрокаПериод;
			
			стр[НаимКолонкиСуммаРасходыОтклонАбс] 	= стр[НаимКолонкиСуммаРасходыФакт] - стр[НаимКолонкиСуммаРасходыПлан];
			
			если стр[НаимКолонкиСуммаРасходыПлан]<>0 Тогда
				стр[НаимКолонкиСуммаРасходыОтклонОтнос] = (стр[НаимКолонкиСуммаРасходыОтклонАбс] / стр[НаимКолонкиСуммаРасходыПлан])*100;
			КонецЕсли;
			
		КонецЦикла;	  
		
		СтрокаПериод				= "ЗаПериод"; 
		
		НаимКолонкиСуммаРасходыПлан = "Зн_План_"+СтрокаПериод;
		НаимКолонкиСуммаРасходыФакт = "Зн_Факт_"+СтрокаПериод;
		
		НаимКолонкиСуммаРасходыОтклонАбс 	= "Зн_ОтклонАбс_"+СтрокаПериод;
		НаимКолонкиСуммаРасходыОтклонОтнос 	= "Зн_ОтклонОтнос_"+СтрокаПериод;
		
		стр[НаимКолонкиСуммаРасходыОтклонАбс] 	= стр[НаимКолонкиСуммаРасходыФакт] - стр[НаимКолонкиСуммаРасходыПлан];
		
		если стр[НаимКолонкиСуммаРасходыПлан]<>0 Тогда
			стр[НаимКолонкиСуммаРасходыОтклонОтнос] = (стр[НаимКолонкиСуммаРасходыОтклонАбс] / стр[НаимКолонкиСуммаРасходыПлан])*100;
		КонецЕсли;
		
	КонецЦикла;	 
	
	ТЗ_Общий.Сортировать("ТипПроекта,ТипИнвестиции,КатегорияАктива,ЗаказчикПроекта");  
	
	
	НовыйТЗ = Новый ТаблицаЗначений;
	НовыйТЗ.Колонки.Добавить("TypeOfProjectsGUID"	,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("TypeOfInvestmentGUID"	,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("AssetCategoryGUID"	,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("ProjectCustomerGUID"	,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("AmountPlan"			,Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AmountFact"			,Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("Period"				,ОписаниеДата);  
	НовыйТЗ.Колонки.Добавить("AllPeriod"			,ОписаниеБулево);  
	
	для Каждого стр из ТЗ_Общий Цикл
		
		
		для а=1 по КолМесяцев Цикл  
			Период 	= Дата(Год(Дата1),а,1);  
			
			СтрокаПериод = Формат(Период,"ДФ=""ММММ"""); 
			
			НовСтр 						= НовыйТЗ.Добавить();
			НовСтр.TypeOfProjectsGUID 	= Строка(стр.ТипПроекта.УникальныйИдентификатор());
			НовСтр.TypeOfInvestmentGUID = Строка(стр.ТипИнвестиции.УникальныйИдентификатор());
			НовСтр.AssetCategoryGUID 	= Строка(стр.КатегорияАктива.УникальныйИдентификатор());
			НовСтр.ProjectCustomerGUID 	= Строка(стр.ЗаказчикПроекта.УникальныйИдентификатор());
			НовСтр.Period 				= Период;
			
			НаимКолонкиПлан 	= "Зн_План_"+СтрокаПериод; 
			НовСтр.AmountPlan  	= стр[НаимКолонкиПлан];
			
			НаимКолонкиФакт 	= "Зн_Факт_"+СтрокаПериод; 
			НовСтр.AmountFact  	= Окр(стр[НаимКолонкиФакт]/1000,2);
			
		КонецЦикла; 
		
		СтрокаПериод = "ЗаПериод";
		
		НовСтр 						= НовыйТЗ.Добавить();
		НовСтр.TypeOfProjectsGUID 	= Строка(стр.ТипПроекта.УникальныйИдентификатор());
		НовСтр.TypeOfInvestmentGUID = Строка(стр.ТипИнвестиции.УникальныйИдентификатор());
		НовСтр.AssetCategoryGUID 	= Строка(стр.КатегорияАктива.УникальныйИдентификатор());
		НовСтр.ProjectCustomerGUID 	= Строка(стр.ЗаказчикПроекта.УникальныйИдентификатор());
		//НовСтр.Period 		= Период;
		НовСтр.AllPeriod 	= Истина;
		
		НаимКолонкиПлан 	= "Зн_План_"+СтрокаПериод; 
		НовСтр.AmountPlan  	= Окр(стр[НаимКолонкиПлан],2);
		
		НаимКолонкиФакт 	= "Зн_Факт_"+СтрокаПериод; 
		НовСтр.AmountFact  	= Окр(стр[НаимКолонкиФакт]/1000,2);
		
		
	КонецЦикла;	
	НовыйТЗ.свернуть("TypeOfProjectsGUID,TypeOfInvestmentGUID,AssetCategoryGUID,ProjectCustomerGUID,Period,AllPeriod","AmountPlan,AmountFact");  
	
	
	Возврат НовыйТЗ;	
	
КонецФункции  

Функция GetReportPlanFactCreditDebt(Дата1,Дата2,TypeOfReport,Base,IIN) Экспорт
	Если TypeOfReport = 9 Тогда
		Возврат GetReportPlanFactCredit(Дата1,Дата2,Base,IIN);
	ИначеЕсли TypeOfReport = 10 Тогда
		Возврат GetReportPlanFactDebt(Дата1,Дата2,Base,IIN)
	КонецЕсли;
	Возврат Новый ТаблицаЗначений
КонецФункции

Функция GetReportPlanFactCredit(Дата1,Дата2,Base,IIN) Экспорт
	
	КолМесяцев = ПолучитьКоличествоМесяцев(Дата1,Дата2);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ТЗ_Общий=Новый ТаблицаЗначений;
	ТЗ_Общий.Колонки.Добавить("PurposeOfFund");
	ТЗ_Общий.Колонки.Добавить("DebtTool");
	ТЗ_Общий.Колонки.Добавить("LoanLenderType");
	
	ТЗ_Общий.Колонки.Добавить("PurposeOfFundCode");
	ТЗ_Общий.Колонки.Добавить("DebtToolCode");
	ТЗ_Общий.Колонки.Добавить("LoanLenderTypeCode");
	
	ТЗ_Общий.Колонки.Добавить("CounterpartyINN");
	ТЗ_Общий.Колонки.Добавить("Counterpartу");
	
	МассивКолонокСумм 		= Новый Массив;
	
	
	НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	для а=1 по КолМесяцев Цикл  
		
		Период 	= Дата(Год(Дата1),а,1); 
		
		СтрокаПериод = ПолучитьПериод(Период);
		
		НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
	КонецЦикла;
	
	
	НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	ТЗДанные = ПолучитьДанныеПоФактуКредит(Дата1,Дата2,IIN);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,CounterpartyINN,PurposeOfFund,DebtTool,LoanLenderType,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode","PrincipalAmountBalance,AccruedInterestBalance,PrincipalAmountByPeriod,AccruedInterestByPeriod,RevaluationByPeriod,OtherOperationByPeriod,PrincipalAmountEndBalance,AccruedInterestEndBalance");
		для каждого стр из ТЗДанные Цикл 
			
			Период 						= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 				= ПолучитьПериод(Период);
			
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountByPeriod;
			
			НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestByPeriod;
			
			НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.RevaluationByPeriod + стр.OtherOperationByPeriod;
			
			//НаНачало
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountBalance;
			
			НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestBalance;
			
			
			//НаКонец
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountEndBalance;
			
			НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestEndBalance;
			
			
		КонецЦикла;	 
	КонецЕсли;
	
	ТЗДанные = ПолучитьДанныеПоПлануКредит(Дата1,Дата2,IIN);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,CounterpartyINN,PurposeOfFund,DebtTool,LoanLenderType,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode","PrincipalAmountBalance,AccruedInterestBalance,PrincipalAmountByPeriod,AccruedInterestByPeriod");
		для каждого стр из ТЗДанные Цикл 
			
			
			Период 						= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 				= ПолучитьПериод(Период);
			
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountByPeriod;
			
			НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestByPeriod;
			
			//НаНачало
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountBalance;
			
			НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestBalance;
			
			
			//НаКонец
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountBalance+стр.PrincipalAmountByPeriod;
			
			НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestBalance+стр.AccruedInterestByPeriod;
			
			
		КонецЦикла;	 
	КонецЕсли;   
	
	СтрокаКолонокСумм = СтрСоединить(МассивКолонокСумм, ",");
	//округлим факт и проставим отклонение
	ТЗ_Общий.свернуть("CounterpartyINN,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode,LoanLenderType,PurposeOfFund,DebtTool",СтрокаКолонокСумм);  
	
	МассивКолонокСумм.Очистить();
	
	НовыйТЗ = Новый ТаблицаЗначений;
	НовыйТЗ.Колонки.Добавить("PurposeOfFundCode"	,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("DebtToolCode"			,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("LoanLenderTypeCode"	,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("LoanLenderType"		,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("PurposeOfFund"		,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("DebtTool"				,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("CounterpartyINN"		,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("Counterparty"			,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("Period"				,ОписаниеДата);  
	НовыйТЗ.Колонки.Добавить("AllPeriod"			,ОписаниеБулево); 
	
	
	НовыйТЗ.Колонки.Добавить("PrincipalAmountBalancePlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("PrincipalAmountBalanceFact", Новый ОписаниеТипов("Число"));
	
	НовыйТЗ.Колонки.Добавить("AccruedInterestBalancePlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AccruedInterestBalanceFact", Новый ОписаниеТипов("Число"));
	
	НовыйТЗ.Колонки.Добавить("PrincipalAmountByPeriodPlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AccruedInterestByPeriodPlan", Новый ОписаниеТипов("Число"));
	
	НовыйТЗ.Колонки.Добавить("PrincipalAmountByPeriodFact", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AccruedInterestByPeriodFact", Новый ОписаниеТипов("Число"));     
	НовыйТЗ.Колонки.Добавить("OtherOperationsByPeriodFact", Новый ОписаниеТипов("Число"));     
	
	НовыйТЗ.Колонки.Добавить("PrincipalAmountEndBalancePlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("PrincipalAmountEndBalanceFact", Новый ОписаниеТипов("Число"));
	
	НовыйТЗ.Колонки.Добавить("AccruedInterestEndBalancePlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AccruedInterestEndBalanceFact", Новый ОписаниеТипов("Число"));
	
	для Каждого стр из ТЗ_Общий Цикл
		
		для а=1 по КолМесяцев Цикл  
			Период 	= Дата(Год(Дата1),а,1);  
			
			СтрокаПериод = Формат(Период,"ДФ=""ММММ"""); 
			
			НовСтр 						= НовыйТЗ.Добавить();
			НовСтр.PurposeOfFundCode 	= Строка(стр.PurposeOfFundCode);
			НовСтр.DebtToolCode 		= Строка(стр.DebtToolCode);
			НовСтр.LoanLenderTypeCode 	= Строка(стр.LoanLenderTypeCode);
			НовСтр.PurposeOfFund 		= Строка(стр.PurposeOfFund);
			НовСтр.DebtTool 			= Строка(стр.DebtTool);
			НовСтр.LoanLenderType 		= Строка(стр.LoanLenderType);
			НовСтр.CounterpartyINN 		= Строка(стр.CounterpartyINN);
			//НовСтр.Counterparty 		= Строка(стр.Counterparty);
			НовСтр.Period 				= Период;
			НовСтр.AllPeriod 			= Ложь;
			
			НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
			НовСтр.PrincipalAmountByPeriodPlan 	= стр[НаимКолонки];
			
			НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр.AccruedInterestByPeriodPlan  	= стр[НаимКолонки];
			
			НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
			НовСтр.PrincipalAmountByPeriodFact 	= стр[НаимКолонки];
			
			НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр.AccruedInterestByPeriodFact  	= стр[НаимКолонки];
			
			НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
			НовСтр.OtherOperationsByPeriodFact  	= стр[НаимКолонки];
			
		КонецЦикла; 
		
		
		НовСтр 						= НовыйТЗ.Добавить();
		НовСтр.PurposeOfFundCode 	= Строка(стр.PurposeOfFundCode);
		НовСтр.DebtToolCode 		= Строка(стр.DebtToolCode);
		НовСтр.LoanLenderTypeCode 	= Строка(стр.LoanLenderTypeCode);
		НовСтр.PurposeOfFund 		= Строка(стр.PurposeOfFund);
		НовСтр.DebtTool 			= Строка(стр.DebtTool);
		НовСтр.LoanLenderType 		= Строка(стр.LoanLenderType);
		НовСтр.CounterpartyINN 		= Строка(стр.CounterpartyINN);
		//НовСтр.Counterparty 		= Строка(стр.Counterparty);
		НовСтр.Period 				= "ЗаПериод";
		НовСтр.AllPeriod 			= Истина;
		
		НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
		НовСтр.PrincipalAmountBalancePlan 	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
		НовСтр.AccruedInterestBalancePlan  	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
		НовСтр.PrincipalAmountBalanceFact 	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
		НовСтр.AccruedInterestBalanceFact  	= стр[НаимКолонки];
		
		
		НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
		НовСтр.PrincipalAmountEndBalancePlan 	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
		НовСтр.AccruedInterestEndBalancePlan  	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
		НовСтр.PrincipalAmountEndBalanceFact 	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
		НовСтр.AccruedInterestEndBalanceFact  	= стр[НаимКолонки];
		
		
		
	КонецЦикла;
	
	НовыйТЗ.свернуть("Period,AllPeriod,Counterparty,CounterpartyINN,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode,LoanLenderType,PurposeOfFund,DebtTool","PrincipalAmountBalancePlan,PrincipalAmountBalanceFact,AccruedInterestBalancePlan,AccruedInterestBalanceFact,PrincipalAmountEndBalancePlan,PrincipalAmountEndBalanceFact,AccruedInterestEndBalancePlan,AccruedInterestEndBalanceFact,PrincipalAmountByPeriodPlan,AccruedInterestByPeriodPlan,PrincipalAmountByPeriodFact,AccruedInterestByPeriodFact,OtherOperationsByPeriodFact");  
	
	
	Возврат НовыйТЗ;	
КонецФункции	

Функция GetReportPlanFactDebt(Дата1,Дата2,Base,IIN) Экспорт
	
	КолМесяцев = ПолучитьКоличествоМесяцев(Дата1,Дата2);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ТЗ_Общий=Новый ТаблицаЗначений;
	ТЗ_Общий.Колонки.Добавить("PurposeOfFund");
	ТЗ_Общий.Колонки.Добавить("DebtTool");
	ТЗ_Общий.Колонки.Добавить("LoanLenderType");
	
	ТЗ_Общий.Колонки.Добавить("PurposeOfFundCode");
	ТЗ_Общий.Колонки.Добавить("DebtToolCode");
	ТЗ_Общий.Колонки.Добавить("LoanLenderTypeCode");
	
	ТЗ_Общий.Колонки.Добавить("CounterpartyINN");
	ТЗ_Общий.Колонки.Добавить("Counterpartу");
	
	МассивКолонокСумм 		= Новый Массив;
	
	
	НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	для а=1 по КолМесяцев Цикл  
		
		Период 	= Дата(Год(Дата1),а,1); 
		
		СтрокаПериод = ПолучитьПериод(Период);
		
		НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
		ТЗ_Общий.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
	КонецЦикла;
	
	
	НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
	ТЗ_Общий.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	ТЗДанные = ПолучитьДанныеПоФактуDebt(Дата1,Дата2,IIN);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,CounterpartyINN,PurposeOfFund,DebtTool,LoanLenderType,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode","PrincipalAmountBalance,AccruedInterestBalance,PrincipalAmountByPeriod,AccruedInterestByPeriod,RevaluationByPeriod,OtherOperationByPeriod,PrincipalAmountEndBalance,AccruedInterestEndBalance");
		для каждого стр из ТЗДанные Цикл 
			
			Период 						= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 				= ПолучитьПериод(Период);
			
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountByPeriod;
			
			НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestByPeriod;
			
			НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.RevaluationByPeriod + стр.OtherOperationByPeriod;
			
			
			//НаНачало
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountBalance;
			
			НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestBalance;
			
			//НаКонец
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountEndBalance;
			
			НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestEndBalance;
			
			
		КонецЦикла;	 
	КонецЕсли;
	
	ТЗДанные = ПолучитьДанныеПоПлануDebt(Дата1,Дата2,IIN);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,CounterpartyINN,PurposeOfFund,DebtTool,LoanLenderType,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode","PrincipalAmountBalance,AccruedInterestBalance,PrincipalAmountByPeriod,AccruedInterestByPeriod");
		для каждого стр из ТЗДанные Цикл 
			
			Период 						= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 				= ПолучитьПериод(Период);
			
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountByPeriod;
			
			НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestByPeriod;
			
			//НаНачало
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountBalance;
			
			НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestBalance;
			
			
			//НаКонец
			НовСтр 						= ТЗ_Общий.Добавить();
			НовСтр.CounterpartyINN		= стр.CounterpartyINN;
			НовСтр.LoanLenderType		= стр.LoanLenderType;
			НовСтр.PurposeOfFund		= стр.PurposeOfFund;
			НовСтр.DebtTool				= стр.DebtTool;
			НовСтр.LoanLenderTypeCode	= стр.LoanLenderTypeCode;
			НовСтр.PurposeOfFundCode	= стр.PurposeOfFundCode;
			НовСтр.DebtToolCode			= стр.DebtToolCode;
			
			
			НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
			НовСтр[НаимКолонки]  	= стр.PrincipalAmountBalance+стр.PrincipalAmountByPeriod;
			
			НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
			НовСтр[НаимКолонки]  	= стр.AccruedInterestBalance+стр.AccruedInterestByPeriod;
			
			
		КонецЦикла;	 
	КонецЕсли;   
	
	СтрокаКолонокСумм = СтрСоединить(МассивКолонокСумм, ",");
	//округлим факт и проставим отклонение
	ТЗ_Общий.свернуть("CounterpartyINN,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode,LoanLenderType,PurposeOfFund,DebtTool",СтрокаКолонокСумм);  
	
	МассивКолонокСумм.Очистить();
	
	НовыйТЗ = Новый ТаблицаЗначений;
	НовыйТЗ.Колонки.Добавить("PurposeOfFundCode"	,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("DebtToolCode"			,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("LoanLenderTypeCode"	,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("LoanLenderType"		,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("PurposeOfFund"		,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("DebtTool"				,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("CounterpartyINN"		,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("Counterparty"			,ОписаниеСтрока);
	НовыйТЗ.Колонки.Добавить("Period"				,ОписаниеДата);  
	НовыйТЗ.Колонки.Добавить("AllPeriod"			,ОписаниеБулево); 
	
	
	НовыйТЗ.Колонки.Добавить("PrincipalAmountBalancePlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("PrincipalAmountBalanceFact", Новый ОписаниеТипов("Число"));
	
	НовыйТЗ.Колонки.Добавить("AccruedInterestBalancePlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AccruedInterestBalanceFact", Новый ОписаниеТипов("Число"));
	
	НовыйТЗ.Колонки.Добавить("PrincipalAmountEndBalancePlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("PrincipalAmountEndBalanceFact", Новый ОписаниеТипов("Число"));
	
	НовыйТЗ.Колонки.Добавить("AccruedInterestEndBalancePlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AccruedInterestEndBalanceFact", Новый ОписаниеТипов("Число"));
	
	НовыйТЗ.Колонки.Добавить("PrincipalAmountByPeriodPlan", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AccruedInterestByPeriodPlan", Новый ОписаниеТипов("Число"));
	
	НовыйТЗ.Колонки.Добавить("PrincipalAmountByPeriodFact", Новый ОписаниеТипов("Число"));
	НовыйТЗ.Колонки.Добавить("AccruedInterestByPeriodFact", Новый ОписаниеТипов("Число"));     
	НовыйТЗ.Колонки.Добавить("OtherOperationsByPeriodFact", Новый ОписаниеТипов("Число"));     
	
	
	для Каждого стр из ТЗ_Общий Цикл
		
		для а=1 по КолМесяцев Цикл  
			Период 	= Дата(Год(Дата1),а,1);  
			
			СтрокаПериод = Формат(Период,"ДФ=""ММММ"""); 
			
			НовСтр 						= НовыйТЗ.Добавить();
			НовСтр.PurposeOfFundCode 	= Строка(стр.PurposeOfFundCode);
			НовСтр.DebtToolCode 		= Строка(стр.DebtToolCode);
			НовСтр.LoanLenderTypeCode 	= Строка(стр.LoanLenderTypeCode);
			НовСтр.PurposeOfFund 		= Строка(стр.PurposeOfFund);
			НовСтр.DebtTool 			= Строка(стр.DebtTool);
			НовСтр.LoanLenderType 		= Строка(стр.LoanLenderType);
			НовСтр.CounterpartyINN 		= Строка(стр.CounterpartyINN);
			//НовСтр.Counterparty 		= Строка(стр.Counterparty);
			НовСтр.Period 				= Период;
			НовСтр.AllPeriod 			= Ложь;
			
			НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
			НовСтр.PrincipalAmountByPeriodPlan 	= стр[НаимКолонки];
			
			НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр.AccruedInterestByPeriodPlan  	= стр[НаимКолонки];
			
			НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
			НовСтр.PrincipalAmountByPeriodFact 	= стр[НаимКолонки];
			
			НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр.AccruedInterestByPeriodFact  	= стр[НаимКолонки];
			
			НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
			НовСтр.OtherOperationsByPeriodFact  	= стр[НаимКолонки];
		КонецЦикла; 
		
		
		НовСтр 						= НовыйТЗ.Добавить();
		НовСтр.PurposeOfFundCode 	= Строка(стр.PurposeOfFundCode);
		НовСтр.DebtToolCode 		= Строка(стр.DebtToolCode);
		НовСтр.LoanLenderTypeCode 	= Строка(стр.LoanLenderTypeCode);
		НовСтр.PurposeOfFund 		= Строка(стр.PurposeOfFund);
		НовСтр.DebtTool 			= Строка(стр.DebtTool);
		НовСтр.LoanLenderType 		= Строка(стр.LoanLenderType);
		НовСтр.CounterpartyINN 		= Строка(стр.CounterpartyINN);
		//НовСтр.Counterparty 		= Строка(стр.Counterparty);
		НовСтр.Period 				= "ЗаПериод";
		НовСтр.AllPeriod 			= Истина;
		
		НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
		НовСтр.PrincipalAmountBalancePlan 	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
		НовСтр.AccruedInterestBalancePlan  	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
		НовСтр.PrincipalAmountBalanceFact 	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
		НовСтр.AccruedInterestBalanceFact  	= стр[НаимКолонки];
		
		
		НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
		НовСтр.PrincipalAmountEndBalancePlan 	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
		НовСтр.AccruedInterestEndBalancePlan  	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
		НовСтр.PrincipalAmountEndBalanceFact 	= стр[НаимКолонки];
		
		НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
		НовСтр.AccruedInterestEndBalanceFact  	= стр[НаимКолонки];
		
		
		
	КонецЦикла;
	
	НовыйТЗ.свернуть("Period,AllPeriod,Counterparty,CounterpartyINN,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode,LoanLenderType,PurposeOfFund,DebtTool","PrincipalAmountBalancePlan,PrincipalAmountBalanceFact,AccruedInterestBalancePlan,AccruedInterestBalanceFact,PrincipalAmountEndBalancePlan,PrincipalAmountEndBalanceFact,AccruedInterestEndBalancePlan,AccruedInterestEndBalanceFact,PrincipalAmountByPeriodPlan,AccruedInterestByPeriodPlan,PrincipalAmountByPeriodFact,AccruedInterestByPeriodFact,OtherOperationsByPeriodFact");  
	
	
	Возврат НовыйТЗ;	
КонецФункции	

Функция ПолучитьКоличествоМесяцев(Дата1,Дата2)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&Дата1, &Дата2, МЕСЯЦ)+1 КАК КолМесяцев";
	Запрос.УстановитьПараметр("Дата1",Дата1);
	Запрос.УстановитьПараметр("Дата2",Дата2);
	Рез = Запрос.Выполнить().Выбрать();			   
	Рез.Следующий();
	Возврат Рез.КолМесяцев;
	
КонецФункции	

&НаСервере
Функция СформироватьДерево(КодОтчета)  
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка КАК Ссылка,
	|	СтатьиБюджетов.Родитель КАК Родитель,
	|	СтатьиБюджетов.Код КАК Код,
	|	СтатьиБюджетов.КодСправочника КАК КодСправочника,
	|	СтатьиБюджетов.НеВключатьВУправленческуюОтчетность КАК НеВключать
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Владелец.Код = &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБюджетов.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Код",КодОтчета);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Код"				,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("КодСправочника"	,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("Статья"			,Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов"));
	ДеревоЗн.Колонки.Добавить("GUID"			,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("НеВключать"		,ОписаниеБулево);
	ДеревоЗн.Колонки.Добавить("Период"			,ОписаниеДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ТекЭлемент					= ДеревоЗн.Строки.Добавить();
			ТекЭлемент.Статья			= Выборка.Ссылка;
			ТекЭлемент.Код				= Выборка.Код;
			ТекЭлемент.КодСправочника	= Выборка.КодСправочника;
			ТекЭлемент.GUID 			= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.НеВключать		= Выборка.НеВключать;
		Иначе
			Пока ТекЭлемент.Статья<>Выборка.Родитель Цикл
				ТекЭлемент=ТекЭлемент.Родитель;
			КонецЦикла;
			ТекЭлемент					= ТекЭлемент.Строки.Добавить();
			ТекЭлемент.Статья			= Выборка.Ссылка;
			ТекЭлемент.Код				= Выборка.Код;
			ТекЭлемент.КодСправочника	= Выборка.КодСправочника;
			ТекЭлемент.GUID 			= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.НеВключать		= Выборка.НеВключать;
		КонецЕсли;
		
	КонецЦикла;	
	
	возврат ДеревоЗн; 	
	
КонецФункции

//********************************************************************************************************

Процедура РассчитатьBS(Парам,ТЗ_Общий,ТЗСтатьи,ДеревоЗн,МассивСумм)
	Data1 		= Парам.Data1;
	Data2 		= Парам.Data2;
	BIN 		= Парам.BIN;
	КодОтчета 	= Парам.КодОтчета;
	Base 		= Парам.Base;	
	КолМесяцев 	= Парам.КолМесяцев;	
	
	Сообщить("ПолучитьНачальныеДанныеПоBS - "+Строка(ТекущаяДатаСеанса()));
	ТЗНачальныеДанныеBS = ПолучитьНачальныеДанныеПоBS(Парам);
	
	
	//Скопируем ТЗ 
	//в Факт посадим полную ТЗ т.к. нам нужен полный справочник чтобы потом пересчитать дерево. иначе будет некорректно
	// в план посадим пустую таблицу т.к в плановых данных сидят цифры на итоговых строках без детализации.
	ТЗФакт = ТЗ_Общий.Скопировать();
	ТЗПлан = ТЗ_Общий.СкопироватьКолонки();
	
	ТЗФактЗаПериод = ТЗФакт.Скопировать();
	ТЗПланЗаПериод = ТЗПлан.СкопироватьКолонки();
	для а=1 по КолМесяцев Цикл  
		Период 			= Дата(Год(Data1),а,1); 
		Год				= Год(Data1); 
		
		НачПериода  	= Data1;
		
		НачМесяца 		= НачалоМесяца(Дата(Год,а,1));
		КонМесяца  		= КонецМесяца(Дата(Год,а,1)); 
		
		СтрокаПериод 	= ПолучитьПериод(Период);
		
		//Сообщить("ПолучитьОборотДанныеПоBS - "+а+" период - "+Строка(ТекущаяДатаСеанса()));
		ТЗДанныеFact = ПолучитьОборотДанныеПоBS(НачПериода,КонМесяца,BIN,Base);
		если ТЗДанныеFact.Количество()>0 Тогда
			ТЗДанныеFact.свернуть("GUID,Code,ID,RptLineId","Amount");
			для каждого стр из ТЗДанныеFact Цикл 
				
				НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
				
				НовСтр 					= ТЗФакт.Добавить();
				НовСтр.Статья 			= НайденнаяСтрока.Статья;   
				НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
				НовСтр.Код	 			= НайденнаяСтрока.Код;
				НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
				
				НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
				НовСтр[НаимКолонки]  	= стр.Amount;
			КонецЦикла;	 
		КонецЕсли;
		
		для каждого стр из ТЗНачальныеДанныеBS Цикл 
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;     
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки] 	= стр.BalAmount;
		КонецЦикла;	 
		
		
		//Сообщить("ПолучитьОборотДанныеПоPlanDataBS - "+а+" период - "+Строка(ТекущаяДатаСеанса()));
		ТЗДанныеPlan = ПолучитьОборотДанныеПоPlanDataBS(НачМесяца,КонМесяца,BIN,Base);
		если ТЗДанныеPlan.Количество()>0 Тогда
			ТЗДанныеPlan.свернуть("Report,GUID,Code,ID","Amount");
			для каждого стр из ТЗДанныеPlan Цикл
				
				НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
				
				НовСтр 					= ТЗПлан.Добавить();
				НовСтр.Статья 			= НайденнаяСтрока.Статья;   
				НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
				НовСтр.Код	 			= НайденнаяСтрока.Код;
				НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
				
				НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
				НовСтр[НаимКолонки] 	= стр.Amount;
			КонецЦикла;	 
		КонецЕсли;
		
	КонецЦикла;
	
	////ЗаПериод.
	////повторим запись последних таблиц чтоб собрать ЗаПериод т.к. это баланс то это сальдо то можно взять только последний месяц и собрать ГОД 
	СтрокаПериод  ="ЗаПериод";
	для каждого стр из ТЗДанныеFact Цикл 
		
		НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
		
		НовСтр 					= ТЗФакт.Добавить();
		НовСтр.Статья 			= НайденнаяСтрока.Статья;   
		НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
		НовСтр.Код	 			= НайденнаяСтрока.Код;
		НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
		
		НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
		НовСтр[НаимКолонки]  	= стр.Amount;
	КонецЦикла;	 
	//
	для каждого стр из ТЗНачальныеДанныеBS Цикл 
		НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
		
		НовСтр 					= ТЗФакт.Добавить();
		НовСтр.Статья 			= НайденнаяСтрока.Статья;   
		НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
		НовСтр.Код	 			= НайденнаяСтрока.Код;
		НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
		
		НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
		НовСтр[НаимКолонки] 	= стр.BalAmount;
	КонецЦикла;	 
	//
	для каждого стр из ТЗДанныеPlan Цикл 
		НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
		
		НовСтр 					= ТЗПлан.Добавить();
		НовСтр.Статья 			= НайденнаяСтрока.Статья;   
		НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
		НовСтр.Код	 			= НайденнаяСтрока.Код;
		НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
		
		НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
		НовСтр[НаимКолонки] 	= стр.Amount;
	КонецЦикла;	 
	
	//ЗаПериод.
	
	
	//Пересчитаем дерево по фактическим данным чтоб итоговые строки были
	
	СтрокаМассиваСумм = СтрСоединить(МассивСумм, ",");
	
	ДеревоЗн.Строки.Очистить();
	ТЗФакт.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	ПреобразоватьВДЗРекурсия(ДеревоЗн, ТЗФакт, "");
	ПересчитатьВсеДерево(Data1,Data2,ДеревоЗн.Строки,КолМесяцев);
	ПреобразоватьВТЗРекурсия(ДеревоЗн, ТЗ_Общий,"");
	
	
	ТЗПлан.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	//добавим данные по плану ничего не меняя. 
	Для каждого стр из ТЗПлан Цикл
		нСтр = ТЗ_Общий.Добавить();  
		ЗаполнитьЗначенияСвойств(нСтр,стр);
	КонецЦикла;	
	
	ТЗ_Общий.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	ДеревоЗн.Строки.Очистить();
	
	
	//Пересчет строк
	СтрокаАктивы 	= ТЗ_Общий.Найти("BS1.","КодСправочника");
	СтрокаПассивы 	= ТЗ_Общий.Найти("BS2.","КодСправочника");
	СтрокаКапитал 	= ТЗ_Общий.Найти("BS3.","КодСправочника");
	СтрокаБаланс 	= ТЗ_Общий.Найти("BS4.","КодСправочника");
	Для Каждого Кол Из ТЗ_Общий.Колонки Цикл
		НаимКолонки = "Зн_"; 
		Если Найти(Кол.Имя,НаимКолонки)>0 Тогда 
			СуммаАктивы 			= СтрокаАктивы[Кол.Имя];	
			СуммаПассивы 			= СтрокаПассивы[Кол.Имя];	
			СуммаКапитал 			= СтрокаКапитал[Кол.Имя];	
			СтрокаБаланс[Кол.Имя]	= Окр(СуммаАктивы + СуммаПассивы + СуммаКапитал,2);
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры	

Процедура РассчитатьBS_New(Парам,ТЗ_Общий,ТЗСтатьи,ДеревоЗн,МассивСумм)
	Data1 			= Парам.Data1;
	Data2 			= Парам.Data2;
	BIN 			= Парам.BIN;
	КодОтчета 		= Парам.КодОтчета;
	Base 			= Парам.Base;	
	КолМесяцев 		= Парам.КолМесяцев;	
	МассивПериодов 	= Парам.МассивПериодов;	
	
	СтрокаМассиваСумм = СтрСоединить(МассивСумм, ",");

	Сообщить("ПолучитьНачальныеДанныеПоBS - "+Строка(ТекущаяДатаСеанса()));
	ТЗНачальныеДанныеBS = ПолучитьНачальныеДанныеПоBS(Парам);
	
	
	//Скопируем ТЗ 
	//в Факт посадим полную ТЗ т.к. нам нужен полный справочник чтобы потом пересчитать дерево. иначе будет некорректно
	// в план посадим пустую таблицу т.к в плановых данных сидят цифры на итоговых строках без детализации.
	ТЗФакт = ТЗ_Общий.Скопировать();
	ТЗПлан = ТЗ_Общий.СкопироватьКолонки();
	
	ТЗФактЗаПериод = ТЗФакт.Скопировать();
	ТЗПланЗаПериод = ТЗПлан.СкопироватьКолонки();
	

	ТЗДанныеFact = ПолучитьОборотДанныеПоBS_New(Data1,Data2,BIN,Base);
	если ТЗДанныеFact.Количество()>0 Тогда
		ТЗДанныеFact.свернуть("Month,GUID,Code,ID,RptLineId","Amount");
		для каждого стр из ТЗДанныеFact Цикл 
			
			Период 			= Дата(Год(Data1),стр.Month,1); 
			СтрокаПериод 	= ПолучитьПериод(Период);
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.Amount; 
		КонецЦикла;	 
	КонецЕсли;

	
	//добавим нач.остаток в первый месяц
	СтрокаПериод 	= ПолучитьПериод(Data1);
	для каждого стр из ТЗНачальныеДанныеBS Цикл 
		НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
		
		НовСтр 					= ТЗФакт.Добавить();
		НовСтр.Статья 			= НайденнаяСтрока.Статья;   
		НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;     
		НовСтр.Код	 			= НайденнаяСтрока.Код;
		НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
		
		НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
		НовСтр[НаимКолонки] 	= стр.BalAmount;
	КонецЦикла;	 
	
	//прибавим сальдо пред периода.
	//за январь сальдо уже известно и сумма факт уже верная Сальдо+Оборот
	//необходимо по следующим месяцам прибавить сумму пред месяца чтоб сальдо было верным
	ТЗФакт.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	для каждого стр из ТЗФакт Цикл
		Для ИндексСтрока = 1 По МассивПериодов.Количество() - 1 Цикл

			СтрокаПредПериод = ПолучитьПериод(МассивПериодов[ИндексСтрока-1]);
			ПредЗначение = стр["Зн_Факт_"+СтрокаПредПериод];
			
			СтрокаТекПериод = ПолучитьПериод(МассивПериодов[ИндексСтрока]);
			стр["Зн_Факт_"+СтрокаТекПериод] = стр["Зн_Факт_"+СтрокаТекПериод]+ПредЗначение;
			
		КонецЦикла;	
	КонецЦикла;	
	
	
	
	//Сообщить("ПолучитьОборотДанныеПоPlanDataBS - "+Строка(ТекущаяДатаСеанса()));
	ТЗДанныеPlan = ПолучитьОборотДанныеПоPlanDataBS(Data1,Data2,BIN,Base);
	если ТЗДанныеPlan.Количество()>0 Тогда
		ТЗДанныеPlan.свернуть("Month,Report,GUID,Code,ID","Amount");
		для каждого стр из ТЗДанныеPlan Цикл
			
			Период 			= Дата(Год(Data1),стр.Month,1); 
			СтрокаПериод 	= ПолучитьПериод(Период);

			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			НовСтр 					= ТЗПлан.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			
			НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки] 	= стр.Amount;
		КонецЦикла;	 
	КонецЕсли;
	
	
	
	////ЗаПериод.
	////повторим запись последних таблиц чтоб собрать ЗаПериод т.к. это баланс то это сальдо то можно взять только последний месяц и собрать ГОД 
	СтрокаПериод  ="ЗаПериод";
	для каждого стр из ТЗДанныеFact Цикл 
		
		НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
		
		НовСтр 					= ТЗФакт.Добавить();
		НовСтр.Статья 			= НайденнаяСтрока.Статья;   
		НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
		НовСтр.Код	 			= НайденнаяСтрока.Код;
		НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
		
		НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
		НовСтр[НаимКолонки]  	= стр.Amount;
	КонецЦикла;	 
	//
	для каждого стр из ТЗНачальныеДанныеBS Цикл 
		НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
		
		НовСтр 					= ТЗФакт.Добавить();
		НовСтр.Статья 			= НайденнаяСтрока.Статья;   
		НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
		НовСтр.Код	 			= НайденнаяСтрока.Код;
		НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
		
		НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
		НовСтр[НаимКолонки] 	= стр.BalAmount;
	КонецЦикла;	 
	//                
	//
	если ТЗДанныеPlan.Количество()>0 Тогда
		НайденныеСтроки = ТЗДанныеPlan.НайтиСтроки(Новый Структура("Month",МассивПериодов.Количество()));
		для каждого стр из НайденныеСтроки Цикл 
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			НовСтр 					= ТЗПлан.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			
			НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки] 	= стр.Amount;
		КонецЦикла;	 
	КонецЕсли;	
	//ЗаПериод.
	
	
	//Пересчитаем дерево по фактическим данным чтоб итоговые строки были
	
	
	ТЗФакт.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  

	
	ДеревоЗн.Строки.Очистить();
	ПреобразоватьВДЗРекурсия(ДеревоЗн, ТЗФакт, "");
	ПересчитатьВсеДерево(Data1,Data2,ДеревоЗн.Строки,КолМесяцев);
	ПреобразоватьВТЗРекурсия(ДеревоЗн, ТЗ_Общий,"");
	
	
	ТЗПлан.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	//добавим данные по плану ничего не меняя. 
	Для каждого стр из ТЗПлан Цикл
		нСтр = ТЗ_Общий.Добавить();  
		ЗаполнитьЗначенияСвойств(нСтр,стр);
	КонецЦикла;	
	
	ТЗ_Общий.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	ДеревоЗн.Строки.Очистить();
	
	
	//Пересчет строк
	СтрокаАктивы 	= ТЗ_Общий.Найти("BS1.","КодСправочника");
	СтрокаПассивы 	= ТЗ_Общий.Найти("BS2.","КодСправочника");
	СтрокаКапитал 	= ТЗ_Общий.Найти("BS3.","КодСправочника");
	СтрокаБаланс 	= ТЗ_Общий.Найти("BS4.","КодСправочника");
	Для Каждого Кол Из ТЗ_Общий.Колонки Цикл
		НаимКолонки = "Зн_"; 
		Если Найти(Кол.Имя,НаимКолонки)>0 Тогда 
			СуммаАктивы 			= СтрокаАктивы[Кол.Имя];	
			СуммаПассивы 			= СтрокаПассивы[Кол.Имя];	
			СуммаКапитал 			= СтрокаКапитал[Кол.Имя];	
			СтрокаБаланс[Кол.Имя]	= Окр(СуммаАктивы + СуммаПассивы + СуммаКапитал,2);
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры	


Процедура РассчитатьPL(Парам,ТЗ_Общий,ТЗСтатьи,ДеревоЗн,МассивСумм)
	
	Data1 		= Парам.Data1;
	Data2 		= Парам.Data2;
	BIN 		= Парам.BIN;
	КодОтчета 	= Парам.КодОтчета;
	Base 		= Парам.Base;	
	КолМесяцев 	= Парам.КолМесяцев;	
	
	//Скопируем ТЗ 
	//в Факт посадим полную ТЗ т.к. нам нужен полный справочник чтобы потом пересчитать дерево. иначе будет некорректно
	// в план посадим пустую таблицу т.к в плановых данных сидят цифры на итоговых строках без детализации.
	ТЗФакт = ТЗ_Общий.Скопировать();
	ТЗПлан = ТЗ_Общий.СкопироватьКолонки();
	
	ТЗДанные = ПолучитьОборотДанныеПоPL(Data1,Data2,BIN,Base);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,Report,GUID,Code,RptLineName,ID","Amount");
		для каждого стр из ТЗДанные Цикл 
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			Период 					= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 			= ПолучитьПериод(Период);
			
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.Amount;
			
			
			СтрокаПериод 			= "ЗаПериод";
			
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.Amount;
			
		КонецЦикла;	 
	КонецЕсли;
	
	ТЗДанные = ПолучитьОборотДанныеПоPlanDataPL(Data1,Data2,BIN,Base);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,Report,GUID,Code,ID","Amount");
		для каждого стр из ТЗДанные Цикл 
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			Период 					= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 			= ПолучитьПериод(Период);
			
			НовСтр 					= ТЗПлан.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
			
			НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.Amount;
			
			
			СтрокаПериод 			= "ЗаПериод";
			
			НовСтр 					= ТЗПлан.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
			
			НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.Amount;
			
		КонецЦикла;	 
	КонецЕсли;   
	
	СтрокаМассиваСумм = СтрСоединить(МассивСумм, ",");
	//Пересчитаем дерево по фактическим данным чтоб итоговые строки были
	ДеревоЗн.Строки.Очистить();
	ТЗФакт.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	ПреобразоватьВДЗРекурсия(ДеревоЗн, ТЗФакт, "");
	ПересчитатьВсеДерево(Data1,Data2,ДеревоЗн.Строки,КолМесяцев);
	ПреобразоватьВТЗРекурсия(ДеревоЗн, ТЗ_Общий,"");
	
	
	//добавим данные по плану ничего не меняя. 
	ТЗПлан.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	
	//ДеревоЗн.Строки.Очистить();
	//ПреобразоватьВДЗРекурсия(ДеревоЗн, ТЗПлан, "");
	//ПересчитатьВсеДерево(Дата1,Дата2,ДеревоЗн.Строки,КолМесяцев);
	//ТЗПлан.очистить();
	//ПреобразоватьВТЗРекурсия(ДеревоЗн, ТЗПлан,"");
	
	Для каждого стр из ТЗПлан Цикл
		нСтр = ТЗ_Общий.Добавить();  
		ЗаполнитьЗначенияСвойств(нСтр,стр);
	КонецЦикла;	
	
	ТЗ_Общий.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	
	для а=1 по КолМесяцев Цикл  
		
		Период 			= Дата(Год(Data1),а,1); 
		
		СтрокаПериод 	= ПолучитьПериод(Период);
		РассчитатьСтрокиPL(СтрокаПериод,ТЗ_Общий);
	КонецЦикла;
	
	СтрокаПериод 	= "ЗаПериод";
	РассчитатьСтрокиPL(СтрокаПериод,ТЗ_Общий);
	
КонецПроцедуры	 

Процедура РассчитатьCFD(Парам,ТЗ_Общий,ТЗСтатьи,ДеревоЗн,МассивСумм)
	
	Data1 		= Парам.Data1;
	Data2 		= Парам.Data2;
	BIN 		= Парам.BIN;
	КодОтчета 	= Парам.КодОтчета;
	Base 		= Парам.Base;	
	КолМесяцев 	= Парам.КолМесяцев;	
	
	//Скопируем ТЗ 
	//в Факт посадим полную ТЗ т.к. нам нужен полный справочник чтобы потом пересчитать дерево. иначе будет некорректно
	// в план посадим пустую таблицу т.к в плановых данных сидят цифры на итоговых строках без детализации.
	ТЗФакт = ТЗ_Общий.Скопировать();
	ТЗПлан = ТЗ_Общий.СкопироватьКолонки();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(30, 10);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	Бюджет = Справочники.Бюджеты.НайтиПоКоду(КодОтчета);
	СтатьяУвеличУменьш  	= Справочники.СтатьиБюджетов.НайтиПоРеквизиту("КодСправочника","CFD6.",,Бюджет);
	СтатьяОстаткиНаНачало  	= Справочники.СтатьиБюджетов.НайтиПоРеквизиту("КодСправочника","CFD7.",,Бюджет);
	СтатьяОстаткиНаКонец  	= Справочники.СтатьиБюджетов.НайтиПоРеквизиту("КодСправочника","CFD8.",,Бюджет);
	
	//Начало.Соберем данные по BS по Денежным средствам
	ТЗ_ДС = ТЗ_Общий.СкопироватьКолонки();
	
	ТЗНачальныеДанныеBS = ПолучитьНачальныеДанныеПоBSПоДенежнымСредствам(Data1,Data2,BIN,Base);
	ТЗНачальныеДанныеBS.свернуть("Report","BalAmount");
	
	Год						= Год(Data1); 
	ПериодПервыйМесяц 		= Data1; 
	ПериодКрайнийМесяц 		= Data2; 
	
	для а=1 по КолМесяцев Цикл  
		Период 		= Дата(Год(Data1),а,1); 
		СтрокаПериод= ПолучитьПериод(Период);             
		
		НачПериода  = Data1;
		
		НачМесяца 	= НачалоМесяца(Дата(Год,а,1));
		КонМесяца  	= КонецМесяца(Дата(Год,а,1));
		
		//получим данные с нарастающим итогом
		ТЗДанныеFact = ПолучитьОборотДанныеПоBSПоДенежнымСредствам(НачПериода,НачМесяца,КонМесяца,BIN,Base);
		если ТЗДанныеFact.Количество()>0 Тогда
			ТЗДанныеFact.свернуть("Report","BalAmount,Amount");
			для каждого стр из ТЗДанныеFact Цикл 
				
				НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
				
				НовСтр 				= ТЗ_ДС.Добавить();
				НовСтр.Статья	 	= СтатьяОстаткиНаКонец;     
				НовСтр[НаимКолонки]	= стр.Amount+стр.BalAmount;
				
				НовСтр 				= ТЗ_ДС.Добавить();
				НовСтр.Статья 		= СтатьяОстаткиНаНачало;     
				НовСтр[НаимКолонки]	= стр.BalAmount;
			КонецЦикла;	 
		КонецЕсли;
		
		// добавим начальные остатки в каждый месяц
		для каждого стр из ТЗНачальныеДанныеBS Цикл 
			НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
			
			НовСтр 				= ТЗ_ДС.Добавить();
			НовСтр.Статья 		= СтатьяОстаткиНаНачало;     
			НовСтр[НаимКолонки]	= стр.BalAmount;
			
			НовСтр 				= ТЗ_ДС.Добавить();
			НовСтр.Статья 		= СтатьяОстаткиНаКонец;     
			НовСтр[НаимКолонки]	= стр.BalAmount;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	СтрокаМассиваСумм = СтрСоединить(МассивСумм, ",");
	
	
	ТЗ_ДС.Свернуть("Статья",СтрокаМассиваСумм);	
	
	//Посчитаем статью Разница
	для а=1 по КолМесяцев Цикл
		ОстНаКонец  = 0; 
		ОстНаНачало = 0; 
		Период 		= Дата(Год(Data1),а,1); 
		СтрокаПериод= ПолучитьПериод(Период);
		
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		
		НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",СтатьяОстаткиНаНачало));
		для каждого стрДС из НайденныеСтрокиДС Цикл
			ОстНаНачало  = ОстНаНачало +стрДС[НаимКолонки];
		КонецЦикла;	
		
		НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",СтатьяОстаткиНаКонец));
		для каждого стрДС из НайденныеСтрокиДС Цикл
			ОстНаКонец  = ОстНаКонец +стрДС[НаимКолонки];
		КонецЦикла;	
		
		Разница 			= ОстНаКонец-ОстНаНачало; 
		
		НовСтр 				= ТЗ_ДС.Добавить();
		НовСтр.Статья 		= СтатьяУвеличУменьш;     
		НовСтр[НаимКолонки]	= Разница;
		
	КонецЦикла;
	//Окончание.Соберем данные по BS по Денежным средствам
	
	
	//Сбор данных по SQL
	ТЗДанные = ПолучитьОборотДанныеПоCFD(Data1,Data2,BIN,Base);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,Report,GUID,Code,RptLineName,ID","Amount");
		для каждого стр из ТЗДанные Цикл 
			
			Период 		= Дата(стр.Year,стр.Month,1); 
			СтрокаПериод= ПолучитьПериод(Период);
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			Если НайденнаяСтрока.НеВключать тогда
				Продолжить;
			КонецЕсли;	
			
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;     
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]		= стр.Amount;
			
			
			СтрокаПериод= "ЗаПериод";
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;     
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]		= стр.Amount;
			
		КонецЦикла;	 
	КонецЕсли;
	
	ТЗДанные = ПолучитьОборотДанныеПоPlanDataCFD(Data1,Data2,BIN,Base);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,Report,GUID,Code,RptLineName,ID","Amount");
		для каждого стр из ТЗДанные Цикл 
			Период 		= Дата(стр.Year,стр.Month,1); 
			СтрокаПериод= ПолучитьПериод(Период);
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID"); 
			
			Если НайденнаяСтрока.НеВключать тогда
				Продолжить;
			КонецЕсли;	
			
			НовСтр 					= ТЗПлан.Добавить();
			
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			
			НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;     
			НовСтр.Код	 			= НайденнаяСтрока.Код;
			НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки]		= стр.Amount;
			
			
			Если НовСтр.Статья = СтатьяОстаткиНаНачало 
				или НовСтр.Статья = СтатьяОстаткиНаКонец
				или НовСтр.Статья = СтатьяУвеличУменьш Тогда
			Иначе
				СтрокаПериод= "ЗаПериод";
				НовСтр 					= ТЗПлан.Добавить();
				
				НовСтр.Статья 			= НайденнаяСтрока.Статья;   
				НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
				
				НовСтр.КодСправочника	= НайденнаяСтрока.КодСправочника;     
				НовСтр.Код	 			= НайденнаяСтрока.Код;
				НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
				НовСтр[НаимКолонки]		= стр.Amount;
			КонецЕсли;		
			
		КонецЦикла;	 
	КонецЕсли; 
	
	ТЗФакт.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	Для каждого стр из ТЗФакт Цикл
		нСтр = ТЗ_Общий.Добавить();  
		ЗаполнитьЗначенияСвойств(нСтр,стр);
	КонецЦикла;	
	
	//добавим данные по плану ничего не меняя. 
	ТЗПлан.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	Для каждого стр из ТЗПлан Цикл
		нСтр = ТЗ_Общий.Добавить();  
		ЗаполнитьЗначенияСвойств(нСтр,стр);
	КонецЦикла;	
	
	ДеревоЗн.Строки.Очистить();
	ТЗ_Общий.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	ПреобразоватьВДЗРекурсия(ДеревоЗн, ТЗ_Общий, "");
	ПересчитатьВсеДерево(Data1,Data2,ДеревоЗн.Строки,КолМесяцев);
	ТЗ_Общий.Очистить();
	ПреобразоватьВТЗРекурсия(ДеревоЗн, ТЗ_Общий,"");
	
	//свернем и проставим по статьям данные по BS
	ТЗ_Общий.свернуть("Статья,КодСправочника,ParentCode,Код",СтрокаМассиваСумм);  
	для каждого стр из ТЗ_Общий Цикл 
		
		для а=1 по КолМесяцев Цикл
			Период 		= Дата(Год(Data1),а,1); 
			СтрокаПериод= ПолучитьПериод(Период);
			
			НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
			ОстНаНачало = 0;
			ОстНаКонец  = 0;
			Если стр.Статья = СтатьяОстаткиНаНачало Тогда //Денежные средства и их эквиваленты на начало отчетного периода    
				СумммаДС 		= 0;
				НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",стр.Статья));
				для каждого стрДС из НайденныеСтрокиДС Цикл
					СумммаДС 	= СумммаДС	+ стрДС[НаимКолонки];
				КонецЦикла;	
				стр[НаимКолонки]= СумммаДС;
				
				ОстНаНачало = ОстНаНачало+СумммаДС;
			КонецЕсли;	
			
			Если стр.Статья = СтатьяОстаткиНаКонец Тогда //Денежные средства и их эквиваленты на конец отчетного периода    
				СумммаДС 		= 0;
				НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",стр.Статья));
				для каждого стрДС из НайденныеСтрокиДС Цикл
					СумммаДС 	= СумммаДС	+ стрДС[НаимКолонки];
				КонецЦикла;	
				стр[НаимКолонки]= СумммаДС;
				
				ОстНаКонец		= ОстНаКонец+СумммаДС;
			КонецЕсли;
			
			Если стр.Статья = СтатьяУвеличУменьш Тогда //(CFD6.) Увеличение +/- уменьшение денежных средств    
				СумммаДС = 0;
				НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",стр.Статья));
				для каждого стрДС из НайденныеСтрокиДС Цикл
					СумммаДС = СумммаДС+стрДС[НаимКолонки];
				КонецЦикла;	 
				стр[НаимКолонки]= СумммаДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	//Заполним данные по Ост по План/Факт на начало и конец по году. запишем в последний месяц т.к. это сальдовые суммы
	ОстНаНачалоFact = 0;
	ОстНаКонецFact 	= 0;
	ОстНаНачалоPlan = 0;
	ОстНаКонецPlan 	= 0;
	
	СтрокаПериод	= ПолучитьПериод(ПериодПервыйМесяц);
	
	НайденныеСтрокиДС = ТЗ_Общий.НайтиСтроки(Новый Структура("Статья",СтатьяОстаткиНаНачало));
	для каждого стрДС из НайденныеСтрокиДС Цикл
		
		НовСтр 					= ТЗ_Общий.Добавить();
		
		НовСтр.Статья 				= стрДС.Статья;   
		НовСтр.ParentCode			= стрДС.ParentCode;
		НовСтр.КодСправочника		= стрДС.КодСправочника;     
		НовСтр.Код	 				= стрДС.Код;
		
		НовСтр["Зн_Факт_ЗаПериод"]	= стрДС["Зн_Факт_"+СтрокаПериод];
		ОстНаНачалоFact 			= ОстНаНачалоFact+стрДС["Зн_Факт_"+СтрокаПериод];
		
		НовСтр["Зн_План_ЗаПериод"]	= стрДС["Зн_План_"+СтрокаПериод];
		ОстНаНачалоPlan 			= ОстНаНачалоPlan+стрДС["Зн_План_"+СтрокаПериод];
		
	КонецЦикла;	
	
	СтрокаПериод	= ПолучитьПериод(ПериодКрайнийМесяц);
	НайденныеСтрокиДС = ТЗ_Общий.НайтиСтроки(Новый Структура("Статья",СтатьяОстаткиНаКонец));
	для каждого стрДС из НайденныеСтрокиДС Цикл
		
		НовСтр 						= ТЗ_Общий.Добавить();
		
		НовСтр.Статья 				= стрДС.Статья;   
		НовСтр.ParentCode			= стрДС.ParentCode;
		НовСтр.КодСправочника		= стрДС.КодСправочника;     
		НовСтр.Код	 				= стрДС.Код;
		
		НовСтр["Зн_Факт_ЗаПериод"]	= стрДС["Зн_Факт_"+СтрокаПериод];
		ОстНаКонецFact 				= ОстНаКонецFact+стрДС["Зн_Факт_"+СтрокаПериод];
		
		НовСтр["Зн_План_ЗаПериод"]	= стрДС["Зн_План_"+СтрокаПериод];
		ОстНаКонецPlan 				= ОстНаКонецPlan+стрДС["Зн_План_"+СтрокаПериод]; 
		
	КонецЦикла;	   
	
	ТЗ_Общий.свернуть("Статья,КодСправочника,ParentCode,Код",СтрокаМассиваСумм);  
	
	СтрокаПериод	= ПолучитьПериод(ПериодКрайнийМесяц);
	НайденныеСтрокиДС = ТЗ_Общий.НайтиСтроки(Новый Структура("Статья",СтатьяУвеличУменьш));
	для каждого стрДС из НайденныеСтрокиДС Цикл
		НовСтр 					= ТЗ_Общий.Добавить();
		
		НовСтр.Статья 			= стрДС.Статья;   
		НовСтр.ParentCode		= стрДС.ParentCode;
		НовСтр.КодСправочника	= стрДС.КодСправочника;     
		НовСтр.Код	 			= стрДС.Код;
		
		НаимКолонки 			= "Зн_Факт_ЗаПериод";  
		НовСтр[НаимКолонки]  	= ОстНаКонецFact-ОстНаНачалоFact;
		
		НаимКолонки 			= "Зн_План_ЗаПериод";  
		НовСтр[НаимКолонки]  	= ОстНаКонецPlan-ОстНаНачалоPlan;
	КонецЦикла;	
КонецПроцедуры	

Процедура РассчитатьСтрокиPL(СтрокаПериод,ТЗ_Общий)
	
	СуммаPL31 		= 0;
	СуммаPL32 		= 0;
	СуммаPL33 		= 0;
	СуммаPL6 		= 0;
	СуммаPL12 		= 0;
	СуммаPL13 		= 0;
	
	СуммаPL31Plan	= 0;
	СуммаPL32Plan 	= 0;
	СуммаPL33Plan 	= 0;
	СуммаPL6Plan 	= 0;
	СуммаPL12Plan 	= 0;
	СуммаPL13Plan 	= 0;
	
	СуммаPL31Year	= 0;
	СуммаPL32Year 	= 0;
	СуммаPL33Year 	= 0;
	СуммаPL6Year 	= 0;
	СуммаPL12Year 	= 0;
	СуммаPL13Year 	= 0;
	
	СуммаPL31PlanYear	= 0;
	СуммаPL32PlanYear 	= 0;
	СуммаPL33PlanYear 	= 0;
	СуммаPL6PlanYear 	= 0;
	СуммаPL12PlanYear 	= 0;
	СуммаPL13PlanYear 	= 0;
	
	//PL
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL1.1."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL1.1.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL31			= СуммаPL31		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL31Plan		= СуммаPL31Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	//СуммаPL31			= СуммаPL31			+ стр.FactAmount;
	//
	//СуммаPL31Plan		= СуммаPL31Plan		+ стр.PlanAmount;
	//
	//
	//СуммаPL31Year		= СуммаPL31Year		+ стр.FactAmountYear;
	//
	//СуммаPL31PlanYear	= СуммаPL31PlanYear	+ стр.PlanAmountYear;
	//КонецЦикла;	
	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL2.1."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL2.1.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL31			= СуммаPL31		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL31Plan		= СуммаPL31Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL31			= СуммаPL31			+ стр.FactAmount;
	//
	//СуммаPL31Plan		= СуммаPL31Plan		+ стр.PlanAmount;
	//
	//
	//СуммаPL31Year		= СуммаPL31Year		+ стр.FactAmountYear;
	//
	//СуммаPL31PlanYear	= СуммаPL31PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL1.2."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL1.2.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL32			= СуммаPL32		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL32Plan		= СуммаPL32Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	
	//СуммаPL32			= СуммаPL32			+ стр.FactAmount;
	//
	//СуммаPL32Plan		= СуммаPL32Plan		+ стр.PlanAmount;
	//
	//
	//СуммаPL32Year		= СуммаPL32Year		+ стр.FactAmountYear;
	//
	//СуммаPL32PlanYear	= СуммаPL32PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL2.2."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL2.2.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL32			= СуммаPL32		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL32Plan		= СуммаPL32Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL32			= СуммаPL32			+ стр.FactAmount;
	//
	//СуммаPL32Plan		= СуммаPL32Plan		+ стр.PlanAmount;
	//
	//
	//СуммаPL32Year		= СуммаPL32Year		+ стр.FactAmountYear;
	//
	//СуммаPL32PlanYear	= СуммаPL32PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL1.3."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL1.3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL33			= СуммаPL33		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL33Plan		= СуммаPL33Plan	+ НайденнаяСтрока[НаимКолонки];
		
	КонецЕсли;		
	//СуммаPL33			= СуммаPL33			+ стр.FactAmount;
	//
	//СуммаPL33Plan		= СуммаPL33Plan		+ стр.PlanAmount;
	//
	//
	//СуммаPL33Year		= СуммаPL33Year		+ стр.FactAmountYear;
	//
	//СуммаPL33PlanYear	= СуммаPL33PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL2.3."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL2.3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL33			= СуммаPL33		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL33Plan		= СуммаPL33Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL33			= СуммаPL33			+ стр.FactAmount;
	//
	//СуммаPL33Plan		= СуммаPL33Plan		+ стр.PlanAmount;
	//
	//
	//СуммаPL33Year		= СуммаPL33Year		+ стр.FactAmountYear;
	//
	//СуммаPL33PlanYear	= СуммаPL33PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3.1."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.1.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL31;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL31Plan;
	КонецЕсли;		
	
	//НовСтр.FactAmount 		= СуммаPL31;
	//
	//НовСтр.PlanAmount 		= СуммаPL31Plan;
	//
	//
	//НовСтр.FactAmountYear 	= СуммаPL31Year;
	//
	//НовСтр.PlanAmountYear 	= СуммаPL31PlanYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3.2."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.2.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL32;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL32Plan;
	КонецЕсли;		
	
	//ЗаполнитьЗначенияСвойств(НовСтр,стр);
	//НовСтр.FactAmount 		= СуммаPL32;
	//НовСтр.PlanAmount 		= СуммаPL32Plan;
	//НовСтр.FactAmountYear 	= СуммаPL32Year;
	//НовСтр.PlanAmountYear 	= СуммаPL32PlanYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3.3."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL33;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL33Plan;
	КонецЕсли;		
	
	
	//ЗаполнитьЗначенияСвойств(НовСтр,стр);
	//НовСтр.FactAmount 		= СуммаPL33;
	//НовСтр.PlanAmount 		= СуммаPL33Plan;
	//НовСтр.FactAmountYear 	= СуммаPL33Year;
	//НовСтр.PlanAmountYear 	= СуммаPL33PlanYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL31			+ СуммаPL32			+ СуммаPL33;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL31Plan		+ СуммаPL32Plan		+ СуммаPL33Plan; 
	КонецЕсли;		
	
	//ЗаполнитьЗначенияСвойств(НовСтр,стр);
	//НовСтр.FactAmount 		= СуммаPL31			+ СуммаPL32			+ СуммаPL33;
	//НовСтр.PlanAmount 		= СуммаPL31Plan		+ СуммаPL32Plan		+ СуммаPL33Plan;
	//НовСтр.FactAmountYear 	= СуммаPL31Year		+ СуммаPL32Year		+ СуммаPL33Year;
	//НовСтр.PlanAmountYear 	= СуммаPL31PlanYear	+ СуммаPL32PlanYear	+ СуммаPL33PlanYear; 
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL6			= СуммаPL6		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL6Plan		= СуммаPL6Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL6			= СуммаPL6			+ стр.FactAmount;
	//СуммаPL6Plan		= СуммаPL6Plan		+ стр.PlanAmount;
	//СуммаPL6Year		= СуммаPL6Year		+ стр.FactAmountYear;
	//СуммаPL6PlanYear	= СуммаPL6PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL4."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL4.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL6			= СуммаPL6		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL6Plan		= СуммаPL6Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL6			= СуммаPL6			+ стр.FactAmount;
	//СуммаPL6Plan		= СуммаPL6Plan		+ стр.PlanAmount;
	//СуммаPL6Year		= СуммаPL6Year		+ стр.FactAmountYear;
	//СуммаPL6PlanYear	= СуммаPL6PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL5."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL5.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL6			= СуммаPL6		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL6Plan		= СуммаPL6Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL6 		= СуммаPL6			+ стр.FactAmount;
	//СуммаPL6Plan	= СуммаPL6Plan		+ стр.PlanAmount;
	//СуммаPL6Year 	= СуммаPL6Year		+ стр.FactAmountYear;
	//СуммаPL6PlanYear= СуммаPL6PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL6."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL6.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL6;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL6Plan;
	КонецЕсли;		
	
	//ЗаполнитьЗначенияСвойств(НовСтр,стр);
	//НовСтр.FactAmount 		= СуммаPL6;
	//НовСтр.PlanAmount 		= СуммаPL6Plan;
	//НовСтр.FactAmountYear 	= СуммаPL6Year;
	//НовСтр.PlanAmountYear 	= СуммаPL6PlanYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL6."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL6.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL12 	 					= СуммаPL12			+ стр.FactAmount;
	//СуммаPL12Plan 					= СуммаPL12Plan		+ стр.PlanAmount;
	//СуммаPL12Year 	 				= СуммаPL12Year		+ стр.FactAmountYear;
	//СуммаPL12PlanYear 				= СуммаPL12PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL7."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL7.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL12 	 		= СуммаPL12			+ стр.FactAmount;
	//СуммаPL12Plan 		= СуммаPL12Plan		+ стр.PlanAmount;
	//СуммаPL12Year 	 	= СуммаPL12Year		+ стр.FactAmountYear;
	//СуммаPL12PlanYear 	= СуммаPL12PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL8."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL8.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL12 	  		= СуммаPL12			+ стр.FactAmount;
	//СуммаPL12Plan 		= СуммаPL12Plan		+ стр.PlanAmount;
	//СуммаPL12Year 	 	= СуммаPL12Year		+ стр.FactAmountYear;
	//СуммаPL12PlanYear 	= СуммаPL12PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL9."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL9.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL12 	 		= СуммаPL12			+ стр.FactAmount; 
	//СуммаPL12Plan		= СуммаPL12Plan		+ стр.PlanAmount;
	//СуммаPL12Year 	 	= СуммаPL12Year		+ стр.FactAmountYear; 
	//СуммаPL12PlanYear	= СуммаPL12PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL10."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL10.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL12 	 		= СуммаPL12			+ стр.FactAmount;
	//СуммаPL12Plan 		= СуммаPL12Plan		+ стр.PlanAmount;
	//СуммаPL12Year 	 	= СуммаPL12Year 	+ стр.FactAmountYear;
	//СуммаPL12PlanYear 	= СуммаPL12PlanYear + стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL11."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL11.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	//СуммаPL12 	  		= СуммаPL12			+ стр.FactAmount;
	//СуммаPL12Plan 		= СуммаPL12Plan		+ стр.PlanAmount;
	//СуммаPL12Year 	  	= СуммаPL12Year		+ стр.FactAmountYear;
	//СуммаPL12PlanYear 	= СуммаPL12PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//СтрокаДерева = ТЗ_Общий.Найти("PL12.","КодСправочника");
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL12."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL12.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL12;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL12Plan;
	КонецЕсли;		
	
	
	//ЗаполнитьЗначенияСвойств(НовСтр,стр);
	//НовСтр.FactAmount		= СуммаPL12;
	//НовСтр.PlanAmount		= СуммаPL12Plan;
	//НовСтр.FactAmountYear	= СуммаPL12Year;
	//НовСтр.PlanAmountYear	= СуммаPL12PlanYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL13.1.1."));
	//для каждого стр из НайденныеСтроки Цикл
	//НайденнаяСтрока = ТЗ_Общий.Найти("PL13.1.1.","КодСправочника"); 
	//Если НайденнаяСтрока<>Неопределено Тогда
	//	
	//	НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
	//	СуммаPL13			= СуммаPL13		+ НайденнаяСтрока[НаимКолонки];
	//	
	//	НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
	//	СуммаPL13Plan		= СуммаPL13Plan	+ НайденнаяСтрока[НаимКолонки];
	//КонецЕсли;		
	//	
	//	
	//	//СуммаPL13 			= СуммаPL13			+ стр.FactAmount;
	//	//СуммаPL13Plan 		= СуммаPL13Plan		+ стр.PlanAmount;
	//	//СуммаPL13Year 		= СуммаPL13Year		+ стр.FactAmountYear;
	//	//СуммаPL13PlanYear 	= СуммаPL13PlanYear	+ стр.PlanAmountYear;
	//	
	////КонецЦикла;	
	//
	////НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL13.1.2."));
	////для каждого стр из НайденныеСтроки Цикл
	//	
	//НайденнаяСтрока = ТЗ_Общий.Найти("PL13.1.2.","КодСправочника"); 
	//Если НайденнаяСтрока<>Неопределено Тогда
	//	НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
	//	СуммаPL13			= СуммаPL13		+ НайденнаяСтрока[НаимКолонки];
	//	
	//	НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
	//	СуммаPL13Plan		= СуммаPL13Plan	+ НайденнаяСтрока[НаимКолонки];
	//КонецЕсли;		
	
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL13.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL13			= СуммаPL13		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL13Plan		= СуммаPL13Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	
	//СуммаPL13 			= СуммаPL13			+ стр.FactAmount;
	//СуммаPL13Plan 		= СуммаPL13Plan		+ стр.PlanAmount;
	//СуммаPL13Year 		= СуммаPL13Year		+ стр.FactAmountYear;
	//СуммаPL13PlanYear 	= СуммаPL13PlanYear	+ стр.PlanAmountYear;
	//
	//КонецЦикла;	
	
	//СтрокаДерева = ТЗ_Общий.Найти("PL16.","КодСправочника");
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL16."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL16.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL12			+ СуммаPL13;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL12Plan		+ СуммаPL13Plan;
	КонецЕсли;		
	
	
	//ЗаполнитьЗначенияСвойств(НовСтр,стр);
	//НовСтр.FactAmount 		= СуммаPL12			+ СуммаPL13;
	//НовСтр.PlanAmount 		= СуммаPL12Plan		+ СуммаPL13Plan;
	//НовСтр.FactAmountYear 	= СуммаPL12Year		+ СуммаPL13Year;
	//НовСтр.PlanAmountYear 	= СуммаPL12PlanYear	+ СуммаPL13PlanYear;
	
	//КонецЦикла;
	
	
КонецПроцедуры	

Процедура ПересчитатьВсеДерево(Дата1,Дата2,дз_стр,КолМесяцев) экспорт
	
	Для Каждого СтрокаДерева Из дз_стр Цикл
		
		// Если мы в строке, у неё нет итогов, пропустим
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПересчитатьВсеДерево(Дата1,Дата2,СтрокаДерева.Строки,КолМесяцев);
		
		// Для текущей записи вычислим сумму строк колонки
		Попытка       
			для а=1 по КолМесяцев Цикл  
				Период 	= Дата(Год(Дата1),а,1);  
				
				СтрокаПериод = Формат(Период,"ДФ=""ММММ"""); 
				
				НаимКолонкиПлан 					= "Зн_План_"+СтрокаПериод; 
				СтрокаДерева[НаимКолонкиПлан]  		= СтрокаДерева.Строки.Итог(НаимКолонкиПлан);
				
				НаимКолонкиФакт 					= "Зн_Факт_"+СтрокаПериод; 
				СтрокаДерева[НаимКолонкиФакт]  		= СтрокаДерева.Строки.Итог(НаимКолонкиФакт);
			КонецЦикла;
			
			СтрокаПериод = "ЗаПериод"; 
			
			НаимКолонкиПлан 					= "Зн_План_"+СтрокаПериод; 
			СтрокаДерева[НаимКолонкиПлан]  		= СтрокаДерева.Строки.Итог(НаимКолонкиПлан);
			
			НаимКолонкиФакт 					= "Зн_Факт_"+СтрокаПериод; 
			СтрокаДерева[НаимКолонкиФакт]  		= СтрокаДерева.Строки.Итог(НаимКолонкиФакт);
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
Конецпроцедуры

//********************************************************************************************************
//********************************************************************************************************

Функция ПолучитьСтатьиОтчетаИзSQL(ID)
	
	Запрос = "
//	|USE BW
	|
	|SELECT 
	|	RptLine.GUID
	|   ,RptLine.Name
	|   ,RptLine.Code
	|   ,RptLine.id
	|FROM map_rpt_ReportLines RptLine
	|left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	|where Rpt.id = _КодОтчета
	|";     
	
	Запрос = СтрЗаменить(Запрос,"_КодОтчета",ID);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

//BS
Функция ПолучитьНачальныеДанныеПоBS(Парам)
	
	Запрос = "
//	|USE BW_COPY
	|
	|	SELECT 
	|		 Rpt.id as Report,			 
	|		 RptLineStr.ReportLine as GUID,			 
	|		 RptLine.Code as Code,
	|		 RptLine.Name as RptLineName,
	|		 RptLine.id as ID, 
	|		 Sc.Code Account,
	|		 SuM(Bal.RegulatedAmount) as BalAmount, 
	|		 SuM(0) as Amount 
	|		  FROM (
	|					SELECT 
	|					  Trn.Account as Account,
	|					  SuM(CASE WHEN Trn.TypeOfTurnovers = 'Кт' then -Trn.RegulatedAmount else Trn.RegulatedAmount END) as RegulatedAmount 	
	|					FROM Map_Turnovers Trn
	|					  left join map_Organizations Org ON Trn.HeadCompany = Org.id
	|					where Trn.TurnoverPeriod between '2017.01.01'  and 'Data2'
	|                       and Trn.Base = 'baseName'
	|					    and Org.IIN  = 'BIN'
	|					group by
	|					 Trn.Account
	|
	|					UNION 
	|
	|					SELECT  
	|					   Bal.Account as Account
	|				      ,Sum(Bal.RegulatedAmount) as RegulatedAmount
	|					 FROM map_Balances Bal
	|					  left join map_Organizations Org ON Bal.HeadCompany = Org.id
	|					 where Bal.Base = 'baseName'
	|					   and Org.IIN  = 'BIN'
	|					 group by 
	|					   Bal.Account) Bal
	|		  left join map_ChartOfAccounts Sc ON Bal.Account = Sc.id
	|		  left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = Bal.Account
	|		  left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	|		  left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	|		 WHERE RptLine.GUID is not null
	|		 and Rpt.id = 1
	|		  group by
	|		 Rpt.id,
	|		 RptLine.Report,
	|		 RptLineStr.ReportLine,
	|		 RptLine.Code,
	|		 RptLine.id,
	|		 RptLine.Name,
	|		 Sc.GUID,
	|		 Sc.Code
	|";
	
	Запрос = СтрЗаменить(Запрос,"Data2",Формат(Парам.Data1-1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"BIN",Парам.BIN);
	Запрос = СтрЗаменить(Запрос,"baseName",Парам.Base);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьОборотДанныеПоBS(Data1,Data2,BIN,Base)
	
	Запрос = "
	//|USE BW_COPY
	|
	|SELECT 
	|  Rpt.id as Report			 
	| ,RptLineStr.ReportLine as GUID			 
	| ,RptLine.Code as Code
	| ,RptLine.ID as ID
	| ,RptLine.Name as RptLineName
	| ,RptLine.id as RptLineId 
	| ,SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmount else TrnOver.RegulatedAmount END) as Amount 
	|FROM Map_Turnovers TrnOver
	| left join map_ChartOfAccounts Sc ON TrnOver.Account = Sc.id
	| left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = TrnOver.Account
	| left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	| left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	| left join map_Organizations Org ON TrnOver.HeadCompany = Org.id
	|where TurnoverPeriod between 'Data1' and 'Data2'
	| and TrnOver.Base 	= 'baseName'
	| and Org.IIN 		= 'BIN'
	| and Rpt.id 		= 1
	| and RptLine.GUID is not null
	|group by
	|  Rpt.id
	| ,RptLine.Report
	| ,RptLineStr.ReportLine
	| ,RptLine.Code
	| ,RptLine.id
	| ,RptLine.Name
	|";     
	
	Запрос = СтрЗаменить(Запрос,"Data1",Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2",Формат(Data2,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"BIN"  ,BIN);
	Запрос = СтрЗаменить(Запрос,"baseName" ,Base);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьОборотДанныеПоBS_New(Data1,Data2,BIN,Base)
	
	Запрос = "
	//|USE BW_COPY
	|
	|SELECT 
	| DATEADD(day,-DAY(TrnOver.Period)+1,TrnOver.Period)
	| ,DATEPART(MM, TrnOver.Period) as Month
	| ,Rpt.id as Report			 
	| ,RptLineStr.ReportLine as GUID			 
	| ,RptLine.Code as Code
	| ,RptLine.ID as ID
	| ,RptLine.Name as RptLineName
	| ,RptLine.id as RptLineId 
	| ,SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmount else TrnOver.RegulatedAmount END) as Amount 
	|FROM Map_Turnovers TrnOver
	| left join map_ChartOfAccounts Sc ON TrnOver.Account = Sc.id
	| left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = TrnOver.Account
	| left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	| left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	| left join map_Organizations Org ON TrnOver.HeadCompany = Org.id
	|where TurnoverPeriod between 'Data1' and 'Data2'
	| and TrnOver.Base 	= 'baseName'
	| and Org.IIN 		= 'BIN'
	| and Rpt.id 		= 1
	| and RptLine.GUID is not null
	|group by
	|  DATEPART(MM, TrnOver.Period)
	| ,DATEADD(day,-DAY(TrnOver.Period)+1,TrnOver.Period)
	| ,Rpt.id
	| ,RptLine.Report
	| ,RptLineStr.ReportLine
	| ,RptLine.Code
	| ,RptLine.id
	| ,RptLine.Name
	|";     
	
	Запрос = СтрЗаменить(Запрос,"Data1",Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2",Формат(Data2,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"BIN"  ,BIN);
	Запрос = СтрЗаменить(Запрос,"baseName" ,Base);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьОборотДанныеПоPlanDataBS(Data1,Data2,BIN,Base)
	
	Запрос = "
	//|USE BW
	|
	|SELECT 
	|  DATEPART(MM, mPlan.Period) as Month
	| ,DATEPART(YY, mPlan.Period) as Year
	| ,Rpt.id as Report			 
	| ,RptLine.id as ID
	| ,RptLine.Code as Code
	| ,RptLine.GUID as GUID			 
	| ,RptLine.Name as RptLineName
	| ,SuM(mPlan.Amount) as Amount
	|FROM [map_PlanData] mPlan
	| left join [map_rpt_ReportLines] RptLine ON mPlan.ReportLine = RptLine.id
	| left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	| left join [map_Organizations] Org ON mPlan.Company = Org.id
	| left join map_TypesOfMovements TypeOfM ON mPlan.TypesOfMovement = TypeOfM.id
	|where Period between 'Data1' and 'Data2'
	|   and Org.IIN  = 'BIN'
	|   and RptLine.GUID is not NULL
	|   and Rpt.id = 1
	|   and (mPlan.TypesOfMovement = 0 Or TypeOfM.id = 119)
	|group by
	|  Rpt.id
	| ,RptLine.Report
	| ,RptLine.id
	| ,RptLine.GUID
	| ,RptLine.Parent
	| ,RptLine.Code
	| ,RptLine.Name
	| ,mPlan.Period
	| ,TypeOfM.id
	|";     
	
	Запрос = СтрЗаменить(Запрос,"Data1",Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2",Формат(Data2,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"BIN"  ,BIN);
	Запрос = СтрЗаменить(Запрос,"baseName" ,Base);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

//PL
Функция ПолучитьОборотДанныеПоPL(Data1,Data2,BIN,Base)
	
	Запрос = "
//	|USE BW
	|
	|SELECT 
	|  DATEPART(MM, TrnOver.TurnoverPeriod) as Month
	| ,DATEPART(YY, TrnOver.TurnoverPeriod) as Year
	| ,Rpt.id as Report			 
	| ,RptLine.id as ID
	| ,RptLine.Code as Code
	| ,RptLine.GUID as GUID			 
	| ,RptLine.Name as RptLineName
	| ,SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then TrnOver.RegulatedAmountNew else -TrnOver.RegulatedAmountNew END) as Amount 
	|FROM [Map_Turnovers] TrnOver
	| left join [map_rpt_ReportLineStructures] RptLineStr ON RptLineStr.Account = TrnOver.Account
	| left join [map_rpt_ReportLines] RptLine ON RptLineStr.ReportLine = RptLine.GUID
	| left join [map_ChartOfAccounts] Sc ON TrnOver.Account = Sc.id
	| left join [map_ChartOfAccounts] CorSc ON TrnOver.CorAccount = CorSc.id
	| left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	| left join [map_Organizations] Org ON TrnOver.HeadCompany = Org.id
	|where TurnoverPeriod between 'Data1' and 'Data2'
	| and TrnOver.Base = 'baseName'
	| and Org.IIN      = 'BIN'
	| and Rpt.id       = 2
	| and (CorSc.Code <> '5710' or CorSc.Code is null)
	|group by
	|  Rpt.id
	| ,RptLine.Report
	| ,RptLine.GUID
	| ,RptLine.Parent
	| ,RptLine.Code
	| ,RptLine.id
	| ,RptLine.Name
	| ,TrnOver.TurnoverPeriod
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = СтрЗаменить(Запрос,"Data1",Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2",Формат(Data2,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"BIN"  ,BIN);
	Запрос = СтрЗаменить(Запрос,"baseName" ,Base);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьОборотДанныеПоPlanDataPL(Data1,Data2,BIN,Base)
	
	Запрос = "
//	|USE BW
	|
	|SELECT 
	|  DATEPART(MM, mPlan.Period) as Month
	| ,DATEPART(YY, mPlan.Period) as Year
	| ,Rpt.id as Report			 
	| ,RptLine.id as ID
	| ,RptLine.Code as Code
	| ,RptLine.GUID as GUID			 
	| ,RptLine.Name as RptLineName
	| ,SuM(mPlan.Amount) as Amount
	|FROM [map_PlanData] mPlan
	| left join [map_rpt_ReportLines] RptLine ON mPlan.ReportLine = RptLine.id
	| left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	| left join [map_Organizations] Org ON mPlan.Company = Org.id
	|where Period between 'Data1' and 'Data2'
	| and Org.IIN = 'BIN'
	| and RptLine.GUID is not NULL
	| and Rpt.id = 2
	|group by
	|  Rpt.id
	| ,RptLine.Report
	| ,RptLine.id
	| ,RptLine.GUID
	| ,RptLine.Parent
	| ,RptLine.Code
	| ,RptLine.Name
	| ,mPlan.Period
	|";     
	
	Запрос = СтрЗаменить(Запрос,"Data1",Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2",Формат(Data2,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"BIN"  ,BIN);
	Запрос = СтрЗаменить(Запрос,"baseName" ,Base);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

//CFD
Функция ПолучитьОборотДанныеПоCFD(Data1,Data2,BIN,Base)
	
	Запрос = "
//	|USE BW
	|
	|SELECT 
	|  DATEPART(MM, TrnOver.TurnoverPeriod) as Month
	| ,DATEPART(YY, TrnOver.TurnoverPeriod) as Year
	| ,Rpt.id as Report			 
	| ,RptLine.id as ID
	| ,RptLine.Code as Code
	| ,RptLine.GUID as GUID			 
	| ,RptLine.Name as RptLineName
	| ,SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmountNew else TrnOver.RegulatedAmountNew END) as Amount 
	|FROM [map_Turnovers] TrnOver
	|  left join [map_CashFlowItems] CashFlow ON TrnOver.CashFlowItem = CashFlow.id 
	|  left join [map_rpt_ReportLines] RptLine ON RptLine.Code = CashFlow.Code
	|  left join [map_Organizations] Org ON TrnOver.HeadCompany = Org.id
	|  left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	|  left join [map_ChartOfAccounts] Sc ON Account = Sc.id
	|where TurnoverPeriod between 'Data1' and 'Data2'
	|  and TrnOver.CashFlowItem is not NULL
	|  and TrnOver.Base = 'baseName'
	|  and Org.IIN      = 'BIN'
	|  and Rpt.id       = 3
	|  and (Sc.Code = '1010' or Sc.Code = '1030' or Sc.Code = '1040' or Sc.Code = '1050' or Sc.Code = '1060' or Sc.Code = '1070'  or Sc.Code = '1090')
	|group by
	|  Rpt.id
	| ,RptLine.Report
	| ,RptLine.GUID
	| ,RptLine.Parent
	| ,RptLine.Code
	| ,RptLine.id
	| ,RptLine.Name
	| ,TrnOver.TurnoverPeriod
	|";     
	
	
	Запрос = СтрЗаменить(Запрос,"Data1",Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2",Формат(Data2,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"BIN"  ,BIN);
	Запрос = СтрЗаменить(Запрос,"baseName" ,Base);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьОборотДанныеПоPlanDataCFD(Data1,Data2,BIN,Base)
	
	Запрос = "
	|USE BW
	|
	|SELECT 
	|  DATEPART(MM, mPlan.Period) as Month
	| ,DATEPART(YY, mPlan.Period) as Year
	| ,Rpt.id as Report			 
	| ,RptLine.id as ID
	| ,RptLine.Code as Code
	| ,RptLine.GUID as GUID			 
	| ,RptLine.Name as RptLineName
	| ,SuM(mPlan.Amount) as Amount
	|FROM [map_PlanData] mPlan
	| left join [map_rpt_ReportLines] RptLine ON mPlan.ReportLine = RptLine.id
	| left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	| left join [map_Organizations] Org ON mPlan.Company = Org.id
	|where Period between 'Data1' and 'Data2'
	| and Org.IIN = 'BIN'
	| and RptLine.GUID is not NULL
	| and Rpt.id = 3
	|group by
	|  Rpt.id
	| ,RptLine.Report
	| ,RptLine.id
	| ,RptLine.GUID
	| ,RptLine.Parent
	| ,RptLine.Code
	| ,RptLine.Name
	| ,mPlan.Period
	|";     
	
	Запрос = СтрЗаменить(Запрос,"Data1",Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2",Формат(Data2,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"BIN"  ,BIN);
	Запрос = СтрЗаменить(Запрос,"baseName" ,Base);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьНачальныеДанныеПоBSПоДенежнымСредствам(Data1,Data2,BIN,Base)
	
	Запрос = "
//	|USE BW
	|
	|SELECT 
	|  Rpt.id as Report			 
	| ,SuM(Bal.RegulatedAmount) as BalAmount
	| ,SuM(0) as Amount 
	|FROM (
	|		SELECT 
	|		   Trn.Account as Account
	|		  ,SuM(CASE WHEN Trn.TypeOfTurnovers = 'Кт' then -Trn.RegulatedAmount else Trn.RegulatedAmount END) as RegulatedAmount 	
	|		FROM Map_Turnovers Trn
	|		  left join map_Organizations Org ON Trn.HeadCompany = Org.id
	|		where Trn.TurnoverPeriod between '2017.01.01' and 'Data2'
	|         and Trn.Base = 'baseName'
	|		  and Org.IIN  = 'BIN'
	|		group by
	|		  Trn.Account
	|
	|		UNION 
	|
	|		SELECT  
	|		   Bal.Account as Account
	|		  ,Sum(Bal.RegulatedAmount) as RegulatedAmount
	|		FROM map_Balances Bal
	|		  left join map_Organizations Org ON Bal.HeadCompany = Org.id
	|		where Bal.Base = 'baseName'
	|		  and Org.IIN  = 'BIN'
	|		group by 
	|		  Bal.Account) Bal
	| left join map_ChartOfAccounts Sc ON Bal.Account = Sc.id
	| left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = Bal.Account
	| left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	| left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	|WHERE RptLine.GUID is not null
	| and Rpt.id = 1
	| and Sc.Code in ('1010','1021','1022','1030','1040','1050','1060','1070','1080','1090')
	|group by
	| Rpt.id
	|";     
	
	Запрос = СтрЗаменить(Запрос,"Data2",Формат(Data1-1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"BIN"  ,BIN);
	Запрос = СтрЗаменить(Запрос,"baseName" ,Base);
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьОборотДанныеПоBSПоДенежнымСредствам(НачПериода,НачМесяца,КонМесяца,BIN,Base)
	
	Запрос = "
//	|USE BW
	|	
	|SELECT 
	|  Rpt.id as Report			 
	| ,RptLine.Code as Code
	| ,RptLine.ID as ID
	| ,RptLine.Name as RptLineName
	| ,SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmount else TrnOver.RegulatedAmount END) as BalAmount 
	| ,SuM(0) as Amount 
	|FROM Map_Turnovers TrnOver
	| left join map_ChartOfAccounts Sc ON TrnOver.Account = Sc.id
	| left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = TrnOver.Account
	| left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	| left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	| left join map_Organizations Org ON TrnOver.HeadCompany = Org.id
	|where TurnoverPeriod between 'Data1' and 'Data2'
	| and TrnOver.Base = 'baseName'
	| and Org.IIN      = 'BIN'
	| and Rpt.id       = 1
	| and Sc.Code in ('1010','1021','1022','1030','1040','1050','1060','1070','1080','1090')
	| and RptLine.GUID is not null
	|group by
	|  Rpt.id
	| ,RptLine.Code
	| ,RptLine.id
	| ,RptLine.Name
	|
	|UNION
	|
	|SELECT 
	|  Rpt.id as Report			 
	| ,RptLine.Code as Code
	| ,RptLine.ID as ID
	| ,RptLine.Name as RptLineName
	| ,SuM(0) as BalAmount 
	| ,SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmount else TrnOver.RegulatedAmount END) as Amount 
	|FROM Map_Turnovers TrnOver
	| left join map_ChartOfAccounts Sc ON TrnOver.Account = Sc.id
	| left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = TrnOver.Account
	| left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	| left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	| left join map_Organizations Org ON TrnOver.HeadCompany = Org.id
	|where TurnoverPeriod between 'Data3' and 'Data4'
	| and TrnOver.Base = 'baseName'
	| and Org.IIN      = 'BIN'
	| and Rpt.id       = 1
	| and Sc.Code in ('1010','1021','1022','1030','1040','1050','1060','1070','1080','1090')
	| and RptLine.GUID is not null
	|group by
	|  Rpt.id
	| ,RptLine.Code
	| ,RptLine.id
	| ,RptLine.Name
	|";     
	
	Запрос = СтрЗаменить(Запрос,"BIN"      	,BIN);
	Запрос = СтрЗаменить(Запрос,"baseName" 	,Base);
	Запрос = СтрЗаменить(Запрос,"Data1"		,Формат(НачПериода,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2"		,Формат(НачМесяца-1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data3"		,Формат(НачМесяца,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data4"		,Формат(КонМесяца,"ДФ=гггг.ММ.дд"));
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

//Инвест
Функция ПолучитьДанныеПоФактуИнвест(Data1,Data2,BIN)
	
	Запрос = "
//	|USE BW
	|
	|SELECT DATEPART(MM, Period) as Month
	|  ,DATEPART(YY, Period) as Year
	|  ,mCu.Name as Currency
	|  ,[ProjectDescription]
	|  ,mTypeI.Code as TypeInvestmentCode
	|  ,mTypeI.Name as TypeInvestmentName
	|  ,mTypeI.GUID as TypeInvestmentGUID
	|  ,mAssetOfC.Code as AssetCategoryCode
	|  ,mAssetOfC.Name as AssetCategoryName
	|  ,mAssetOfC.GUID as AssetCategoryGUID
	|  ,[ProjectCustomer]
	|  ,mFCR.Code as ProjectCustomerCode
	|  ,mFCR.Name as ProjectCustomerName
	|  ,mFCR.GUID as ProjectCustomerGUID
	|  ,[UnitPrice]
	|  ,[Volume]
	|  ,[AmountExpenses]
	|  ,[Version]
	|FROM map_FactDataCAPEX
	|  left join [map_Organizations] Org ON Company = Org.id
	|  left join map_Currencies mCu ON Currency = mCu.id
	|  left join map_ProjectTypesAndInvestments mTypeI ON TypeInvestment = mTypeI.id
	|  left join map_AssetCategories mAssetOfC ON AssetCategory = mAssetOfC.id
	|  left join map_FCR mFCR ON ProjectCustomer = mFCR.id
	|where Period between 'Data1' and 'Data2'
	|  and Org.IIN = 'BIN'
	|";     
	
	Запрос = СтрЗаменить(Запрос,"BIN"      	,BIN);
	//Запрос = СтрЗаменить(Запрос,"baseName" 	,Base);
	Запрос = СтрЗаменить(Запрос,"Data1"		,Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2"		,Формат(Data2,"ДФ=гггг.ММ.дд"));
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьДанныеПоПлануИнвест(Data1,Data2,BIN)
	
	Запрос = "
//	|USE BW
	|
	|SELECT DATEPART(MM, Period) as Month
	|  ,DATEPART(YY, Period) as Year
	|  ,mCu.Name as Currency
	|  ,[ProjectDescription]
	|  ,mTypeI.Code as TypeInvestmentCode
	|  ,mTypeI.Name as TypeInvestmentName
	|  ,mTypeI.GUID as TypeInvestmentGUID
	|  ,mAssetOfC.Code as AssetCategoryCode
	|  ,mAssetOfC.Name as AssetCategoryName
	|  ,mAssetOfC.GUID as AssetCategoryGUID
	|  ,[ProjectCustomer]
	|  ,mFCR.Code as ProjectCustomerCode
	|  ,mFCR.Name as ProjectCustomerName
	|  ,mFCR.GUID as ProjectCustomerGUID
	|  ,[UnitPrice]
	|  ,[Volume]
	|  ,[AmountExpenses]
	|  ,[Version]
	|FROM map_PlanDataCAPEX
	|  left join [map_Organizations] Org ON Company = Org.id
	|  left join map_Currencies mCu ON Currency = mCu.id
	|  left join map_ProjectTypesAndInvestments mTypeI ON TypeInvestment = mTypeI.id
	|  left join map_AssetCategories mAssetOfC ON AssetCategory = mAssetOfC.id
	|  left join map_FCR mFCR ON ProjectCustomer = mFCR.id
	|where Period between 'Data1' and 'Data2'
	|  and Org.IIN = 'BIN'
	|";     
	
	Запрос = СтрЗаменить(Запрос,"BIN"      	,BIN);
	//Запрос = СтрЗаменить(Запрос,"baseName" 	,Base);
	Запрос = СтрЗаменить(Запрос,"Data1"		,Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2"		,Формат(Data2,"ДФ=гггг.ММ.дд"));
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

//Кредит
Функция ПолучитьДанныеПоФактуКредит(Data1,Data2,BIN)
	
	Запрос = "
//	| USE BW
	|
	|SELECT 
	|  DATEPART(MM, Period) as Month
	| ,DATEPART(YY, Period) as Year
	| ,Company
	| ,CounterpartyINN
	| ,mPOfF.Code as PurposeOfFundCode
	| ,mPOfF.Name as PurposeOfFund
	| ,mDT.Code as DebtToolCode
	| ,mDT.Name as DebtTool
	| ,mLT.Code as LoanLenderTypeCode
	| ,mLT.Name as LoanLenderType
	| ,SuM(PrincipalAmountBalance) as PrincipalAmountBalance
	| ,SuM(AccruedInterestBalance) as AccruedInterestBalance
	| ,SuM(PrincipalAmountByPeriod)as PrincipalAmountByPeriod
	| ,SuM(AccruedInterestByPeriod)as AccruedInterestByPeriod
	| ,SuM(RevaluationByPeriod)    as RevaluationByPeriod
	| ,SuM(OtherOperationByPeriod) as OtherOperationByPeriod
	| ,SuM(PrincipalAmountEndBalance) as PrincipalAmountEndBalance
	| ,SuM(AccruedInterestEndBalance) as AccruedInterestEndBalance
	|FROM [map_FactDataCreditors]
	| left join map_PurposeOfFunds mPOfF ON PurposeOfFunds = mPOfF.id
	| left join map_DebtInstruments mDT ON DebtTool = mDT.id
	| left join map_LenderTypes mLT ON LoanLenderType = mLT.id
	| left join [map_Organizations] Org ON Company = Org.id
	|where Period between 'Data1' and 'Data2'
	|  and Org.IIN = 'BIN'
	| group by 
	|  DATEPART(MM, Period)
	| ,DATEPART(YY, Period)
	| ,Company
	| ,CounterpartyINN
	| ,mPOfF.Name
	| ,mDT.Name
	| ,mLT.Name
	| ,mPOfF.Code
	| ,mDT.Code
	| ,mLT.Code";     
	
	Запрос = СтрЗаменить(Запрос,"BIN"      	,BIN);
	//Запрос = СтрЗаменить(Запрос,"baseName" 	,Base);
	Запрос = СтрЗаменить(Запрос,"Data1"		,Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2"		,Формат(Data2,"ДФ=гггг.ММ.дд"));
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьДанныеПоПлануКредит(Data1,Data2,BIN)
	
	Запрос = "
//	| USE BW
	|
	|SELECT 
	|   DATEPART(MM, Period) as Month
	|  ,DATEPART(YY, Period) as Year
	|  ,Company
	|  ,CounterpartyINN
	|  ,mPOfF.Code as PurposeOfFundCode
	|  ,mPOfF.Name as PurposeOfFund
	|  ,mDT.Code as DebtToolCode
	|  ,mDT.Name as DebtTool
	|  ,mLT.Code as LoanLenderTypeCode
	|  ,mLT.Name as LoanLenderType
	|  ,SuM(PrincipalAmountBalance) as PrincipalAmountBalance
	|  ,SuM(AccruedInterestBalance) as AccruedInterestBalance
	|  ,SuM(PrincipalAmountByPeriod)as PrincipalAmountByPeriod
	|  ,SuM(AccruedInterestByPeriod)as AccruedInterestByPeriod
	|FROM [map_PlanDataCreditors]
	|  left join map_PurposeOfFunds mPOfF ON PurposeOfFunds = mPOfF.id
	|  left join map_DebtInstruments mDT ON DebtTool = mDT.id
	|  left join map_LenderTypes mLT ON LoanLenderType = mLT.id
	|  left join [map_Organizations] Org ON Company = Org.id
	|where Period between 'Data1' and 'Data2'
	|  and Org.IIN = 'BIN'
	|group by 
	|   DATEPART(MM, Period)
	|  ,DATEPART(YY, Period)
	|  ,Company
	|  ,CounterpartyINN
	|  ,mPOfF.Name
	|  ,mDT.Name
	|  ,mLT.Name
	|  ,mPOfF.Code
	|  ,mDT.Code
	|  ,mLT.Code";     
	
	Запрос = СтрЗаменить(Запрос,"BIN"      	,BIN);
	//Запрос = СтрЗаменить(Запрос,"baseName" 	,Base);
	Запрос = СтрЗаменить(Запрос,"Data1"		,Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2"		,Формат(Data2,"ДФ=гггг.ММ.дд"));
	
	Возврат ВыполнитьЗапросSQL(Запрос);
КонецФункции

//Debt
Функция ПолучитьДанныеПоФактуDebt(Data1,Data2,BIN)
	
	Запрос = "
//	| USE BW
	|
	|SELECT 
	|   DATEPART(MM, Period) as Month
	|  ,DATEPART(YY, Period) as Year
	|  ,Company
	|  ,CounterpartyINN
	|  ,mPOfF.Code as PurposeOfFundCode
	|  ,mPOfF.Name as PurposeOfFund
	|  ,mDT.Code as DebtToolCode
	|  ,mDT.Name as DebtTool
	|  ,mLT.Code as LoanLenderTypeCode
	|  ,mLT.Name as LoanLenderType
	|  ,SuM(PrincipalAmountBalance) as PrincipalAmountBalance
	|  ,SuM(AccruedInterestBalance) as AccruedInterestBalance
	|  ,SuM(PrincipalAmountByPeriod)as PrincipalAmountByPeriod
	|  ,SuM(AccruedInterestByPeriod)as AccruedInterestByPeriod
	|  ,SuM(RevaluationByPeriod) as RevaluationByPeriod
	|  ,SuM(OtherOperationByPeriod) as OtherOperationByPeriod
	|  ,SuM(PrincipalAmountEndBalance) as PrincipalAmountEndBalance
	|  ,SuM(AccruedInterestEndBalance) as AccruedInterestEndBalance
	|FROM [map_FactDataDebtors]
	|  left join map_PurposeOfFunds mPOfF ON PurposeOfFunds = mPOfF.id
	|  left join map_DebtInstruments mDT ON DebtTool = mDT.id
	|  left join map_LenderTypes mLT ON LoanLenderType = mLT.id
	|  left join [map_Organizations] Org ON Company = Org.id
	|where Period between 'Data1' and 'Data2'
	|  and Org.IIN = 'BIN'
	|group by 
	|   DATEPART(MM, Period)
	|  ,DATEPART(YY, Period)
	|  ,Company
	|  ,CounterpartyINN
	|  ,mPOfF.Name
	|  ,mDT.Name
	|  ,mLT.Name
	|  ,mPOfF.Code
	|  ,mDT.Code
	|  ,mLT.Code";     
	
	Запрос = СтрЗаменить(Запрос,"BIN"      	,BIN);
	//Запрос = СтрЗаменить(Запрос,"baseName" 	,Base);
	Запрос = СтрЗаменить(Запрос,"Data1"		,Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2"		,Формат(Data2,"ДФ=гггг.ММ.дд"));
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ПолучитьДанныеПоПлануDebt(Data1,Data2,BIN)
	
	Запрос = "
//	| USE BW
	|
	|SELECT 
	|   DATEPART(MM, Period) as Month
	|  ,DATEPART(YY, Period) as Year
	|  ,Company
	|  ,CounterpartyINN
	|  ,mPOfF.Code as PurposeOfFundCode
	|  ,mPOfF.Name as PurposeOfFund
	|  ,mDT.Code as DebtToolCode
	|  ,mDT.Name as DebtTool
	|  ,mLT.Code as LoanLenderTypeCode
	|  ,mLT.Name as LoanLenderType
	|  ,SuM(PrincipalAmountBalance) as PrincipalAmountBalance
	|  ,SuM(AccruedInterestBalance) as AccruedInterestBalance
	|  ,SuM(PrincipalAmountByPeriod)as PrincipalAmountByPeriod
	|  ,SuM(AccruedInterestByPeriod)as AccruedInterestByPeriod
	|FROM [map_PlanDataDebtors]
	|  left join map_PurposeOfFunds mPOfF ON PurposeOfFunds = mPOfF.id
	|  left join map_DebtInstruments mDT ON DebtTool = mDT.id
	|  left join map_LenderTypes mLT ON LoanLenderType = mLT.id
	|  left join [map_Organizations] Org ON Company = Org.id
	|where Period between 'Data1' and 'Data2'
	|  and Org.IIN = 'BIN'
	|group by 
	|   DATEPART(MM, Period)
	|  ,DATEPART(YY, Period)
	|  ,Company
	|  ,CounterpartyINN
	|  ,mPOfF.Name
	|  ,mDT.Name
	|  ,mLT.Name
	|  ,mPOfF.Code
	|  ,mDT.Code
	|  ,mLT.Code";     
	
	Запрос = СтрЗаменить(Запрос,"BIN"      	,BIN);
	//Запрос = СтрЗаменить(Запрос,"baseName" 	,Base);
	Запрос = СтрЗаменить(Запрос,"Data1"		,Формат(Data1,"ДФ=гггг.ММ.дд"));
	Запрос = СтрЗаменить(Запрос,"Data2"		,Формат(Data2,"ДФ=гггг.ММ.дд"));
	
	Возврат ВыполнитьЗапросSQL(Запрос);
	
КонецФункции

Функция ВыполнитьЗапросSQL(Запрос) 
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	Возврат Таблица;	
КонецФункции

Процедура ЗаполнитьЗначенияКолонок(тДерево,тКолонки,ТЗ_Общий,МассивСумм)
	Для Каждого тСтр Из тДерево.Строки Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Статья",тСтр.Статья);
		
		НайденныеСтроки = ТЗ_Общий.НайтиСтроки(СтруктураПоиска);
		для каждого стрМ из НайденныеСтроки Цикл   
			
			Для Индекс = 0 По МассивСумм.Количество() - 1 Цикл
				НаимКолонки = МассивСумм[Индекс]; 
				тСтр[НаимКолонки] = тСтр[НаимКолонки]+стрМ[НаимКолонки];
			КонецЦикла;	
			
		КонецЦикла; 
		Если тСтр.Строки.Количество()>0 Тогда
			ЗаполнитьЗначенияКолонок(тСтр,тКолонки,ТЗ_Общий,МассивСумм);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	 

Процедура ПреобразоватьВТЗРекурсия(тДерево, тТаблица,КодСправочника)
	Для Каждого тСтр Из тДерево.Строки Цикл
		
		нСтр = тТаблица.Добавить();  
		
		ЗаполнитьЗначенияСвойств(нСтр,тСтр);
		нСтр.ParentCode 		= КодСправочника;
		
		Если тСтр.Строки.Количество()>0 Тогда
			ПреобразоватьВТЗРекурсия(тСтр, тТаблица,нСтр.КодСправочника);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПреобразоватьВДЗРекурсия(тДерево, тТаблица, КодСправочника, ИмяРеквизита = "КодСправочника") экспорт
	тПоиск = Новый Структура("ParentCode", КодСправочника);
	тМассив = тТаблица.НайтиСтроки(тПоиск);
	Для Каждого тСтр Из тМассив Цикл
		нСтр = тДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр,тСтр);
		ПреобразоватьВДЗРекурсия(нСтр, тТаблица, тСтр[ИмяРеквизита], ИмяРеквизита);
	КонецЦикла;
КонецПроцедуры 

Функция ПолучитьРодителя(СправочникСсылка)
	
	Пока НЕ СправочникСсылка.Родитель.Пустая() Цикл
		СправочникСсылка = СправочникСсылка.Родитель;    
	КонецЦикла;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция ПолучитьПериод(Период)
	Возврат Формат(Период,"ДФ=""ММММ""");	
КонецФункции	

Функция Соединение() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Попытка
		
		Команда     = Новый COMОбъект("ADODB.Command");
		Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");
		
		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 1800;
		Соединение.ConnectionTimeout = 1800;
		
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
		
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Команда;
	
КонецФункции
