#Область ПрограммныйИнтерфейс

Функция ПолучитьБазуПоНаименованию(Наименование) Экспорт
	
	База = Справочники.Базы.НайтиПоНаименованию(СокрЛП(Наименование), Истина);
	Если База.Отключена Тогда
		Возврат Справочники.Базы.ПустаяСсылка();
	Иначе
		Возврат База;
	КонецЕсли;
	
КонецФункции 

	
#КонецОбласти 

//********************************************************************************************************
Процедура ПрочитатьМанифест(ПутьКФайлу, Параметры)

	Текст = Новый ТекстовыйДокумент;

	Текст.Прочитать(ПутьКФайлу);

	Параметры = ЗначениеИзСтрокиВнутр(Текст.ПолучитьТекст()); 

КонецПроцедуры
//********************************************************************************************************
Процедура ОбновитьДанныеМанифеста(Параметры, ТЗСтатистикаЗагрузки) Экспорт

	Если Параметры.Свойство("ИмяБазы") Тогда 
		
		СсылкаБазы = Справочники.Базы.НайтиПоНаименованию(Параметры.ИмяБазы);
		Если СсылкаБазы = Справочники.Базы.ПустаяСсылка() Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство("НомерСообщения") ИЛИ Параметры.Свойство("ХешКонфигурации") Тогда							
			ОбъектБазы = СсылкаБазы.ПолучитьОбъект();			
			Если Параметры.Свойство("НомерСообщения") Тогда
			
				ОбъектБазы.НомерПринятогоСообщения = Параметры.НомерСообщения;
				ОбъектБазы.ДатаПринятияСообщения = ТекущаяДата();
			КонецЕсли;
			
			Если Параметры.Свойство("ХешКонфигурации") Тогда 
				Если Параметры.Свойство("КонфигурацияЗагружена") И Параметры.КонфигурацияЗагружена Тогда
				
					ОбъектБазы.ХешКонфигурации = Параметры.ХешКонфигурации;	
				
				КонецЕсли;
			КонецЕсли;
			ОбъектБазы.Записать();			
		КонецЕсли;
				
		Если Параметры.Свойство("ОбъектыПовторнойВыгрузки") Тогда
			Если ТипЗнч(Параметры.ОбъектыПовторнойВыгрузки) = Тип("ТаблицаЗначений") Тогда
				Для Каждого Строка Из Параметры.ОбъектыПовторнойВыгрузки Цикл
					Запрос = Новый Запрос; 
					//++ 13.07.2025 Кибернетика Корыткин Изменен параметр в связи с добавлением справочника ОбъектыБазКВыгрузке
					Запрос.Текст = "ВЫБРАТЬ
					               |	ЗаданияНаПовторнуюВыгрузку.БазаДанных КАК БазаДанных,
					               |	ЗаданияНаПовторнуюВыгрузку.Счет КАК Счет,
					               |	ЗаданияНаПовторнуюВыгрузку.Значение КАК Значение,
					               |	ЗаданияНаПовторнуюВыгрузку.ОбъектКВыгрузке КАК ОбъектКВыгрузке
					               |ИЗ
					               |	РегистрСведений.ЗаданияНаПовторнуюВыгрузку КАК ЗаданияНаПовторнуюВыгрузку
					               |ГДЕ
					               |	ЗаданияНаПовторнуюВыгрузку.БазаДанных = &БазаДанных
					               |	И ЗаданияНаПовторнуюВыгрузку.Счет = &Счет
					               |	И ЗаданияНаПовторнуюВыгрузку.Значение = &Значение
					               |	И ЗаданияНаПовторнуюВыгрузку.ОбъектКВыгрузке.Наименование = &ОбъектКВыгрузке
					               |	И НЕ ЗаданияНаПовторнуюВыгрузку.НеОчищать";
					Запрос.УстановитьПараметр("БазаДанных", СсылкаБазы);
					Запрос.УстановитьПараметр("Счет", Строка.Счет);
					Запрос.УстановитьПараметр("Значение", Строка.Значение);
					Запрос.УстановитьПараметр("ОбъектКВыгрузке", Строка.ОбъектКВыгрузке);
					//-- 13.07.2025
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						НаборЗаписей = РегистрыСведений.ЗаданияНаПовторнуюВыгрузку.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.БазаДанных.Установить(Выборка.БазаДанных);
						НаборЗаписей.Отбор.Счет.Установить(Выборка.Счет);
						НаборЗаписей.Отбор.Значение.Установить(Выборка.Значение);
						НаборЗаписей.Отбор.ОбъектКВыгрузке.Установить(Выборка.ОбъектКВыгрузке);
						НаборЗаписей.Записать();
					КонецЦикла;
					
					Если Лев(Строка.ОбъектКВыгрузке, 18) = "РегистрБухгалтерии" И  Прав(Строка.ОбъектКВыгрузке, 8) <> ".Остатки" Тогда
						
					//++ 25.06.2025 Кибернтика Корыткин определение даты закрытия периода
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ЗакрытыйПериодВыгрузкиСрезПоследних.База КАК База,
						|	ЗакрытыйПериодВыгрузкиСрезПоследних.ДатаЗакрытогоПериода КАК ДатаЗакрытогоПериода
						|ИЗ
						|	РегистрСведений.ЗакрытыйПериодВыгрузки.СрезПоследних(, База = &База) КАК ЗакрытыйПериодВыгрузкиСрезПоследних";
						
						Запрос.УстановитьПараметр("База", СсылкаБазы);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Если ВыборкаДетальныеЗаписи.Следующий() Тогда
							ДатаЗакрытогоПериода = ВыборкаДетальныеЗаписи.ДатаЗакрытогоПериода;
						Иначе
							ДатаЗакрытогоПериода  = Дата(1, 1, 1);
						КонецЕсли;
					//-- 25.06.2025	
						
						
						
						Обработка = Обработки.ОбменSQL.Создать();
						Команда = Обработка.Соединение();
						Команда.CommandType = 1;
						Команда.CommandTimeout = 14400;	
						Если НЕ (ЗначениеЗаполнено(Строка.Счет) ИЛИ ЗначениеЗаполнено(Строка.ДатаНачала) ИЛИ ЗначениеЗаполнено(Строка.ДатаОкончания)) Тогда 
							Команда.CommandText = "DELETE T FROM Turnovers T
								|WHERE T.Base = '" + Параметры.ИмяБазы + "'";
						ИначеЕсли ЗначениеЗаполнено(Строка.Счет) И НЕ (ЗначениеЗаполнено(Строка.ДатаНачала) ИЛИ ЗначениеЗаполнено(Строка.ДатаОкончания)) Тогда
							Команда.CommandText = "DELETE T FROM Turnovers T
								|LEFT JOIN  ChartOfAccounts C
								|ON T.Account = C.GUID AND T.Base = C.Base
								|WHERE T.Base = '" + Параметры.ИмяБазы + "' AND C.Code = '" + Строка.Счет + "'";
						ИначеЕсли (ЗначениеЗаполнено(Строка.ДатаНачала) ИЛИ ЗначениеЗаполнено(Строка.ДатаОкончания)) И НЕ ЗначениеЗаполнено(Строка.Счет) Тогда
							Команда.CommandText = "DELETE T FROM Turnovers T
								|WHERE T.Base = '" + Параметры.ИмяБазы + "' AND T.Period BETWEEN '" + Формат(Строка.ДатаНачала, "ДФ = гггг-ММ-дд") 
								+ "' AND '" + Формат(Строка.ДатаОкончания, "ДФ = гггг-ММ-дд") + "'";	
						Иначе
							Команда.CommandText = "DELETE T FROM Turnovers T
								|LEFT JOIN  ChartOfAccounts C
								|ON T.Account = C.GUID AND T.Base = C.Base
								|WHERE T.Base = '" + Параметры.ИмяБазы + "' AND C.Code = '" + Строка.Счет + "' AND T.Period BETWEEN '" + Формат(Строка.ДатаНачала, "ДФ = гггг-ММ-дд") 
								+ "' AND '" + Формат(Строка.ДатаОкончания, "ДФ = гггг-ММ-дд") + "'";	
						КонецЕсли;  
						//++ 25.06.2025 Кибернетика Корыткин Условия на проверку закрытого периода
						Если ЗначениеЗаполнено(ДатаЗакрытогоПериода) Тогда
							Команда.CommandText = Команда.CommandText + " AND T.Period > '" + Формат(ДатаЗакрытогоПериода, "ДФ = гггг-ММ-дд") + "'";	
						КонецЕсли;
						//-- 25.06.2025	
						Команда.Execute();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
		
		Если Параметры.Свойство("Отчеты") Тогда
			Если ТипЗнч(Параметры.Отчеты) = Тип("ТаблицаЗначений") Тогда
				Для Каждого Строка Из Параметры.Отчеты Цикл
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	ЗаданияНаВыгрузкуОтчетов.БазаДанных КАК БазаДанных,
					               |	ЗаданияНаВыгрузкуОтчетов.ТипОтчета КАК ТипОтчета,
					               |	ЗаданияНаВыгрузкуОтчетов.Счет КАК Счет,
					               |	ЗаданияНаВыгрузкуОтчетов.ДатаНачала КАК ДатаНачала,
					               |	ЗаданияНаВыгрузкуОтчетов.ДатаОкончания КАК ДатаОкончания
					               |ИЗ
					               |	РегистрСведений.ЗаданияНаВыгрузкуОтчетов КАК ЗаданияНаВыгрузкуОтчетов
					               |ГДЕ
					               |	ЗаданияНаВыгрузкуОтчетов.БазаДанных = &БазаДанных
					               |	И ЗаданияНаВыгрузкуОтчетов.Счет = &Счет
					               |	И НЕ ЗаданияНаВыгрузкуОтчетов.НеОчищать
					               |	И ЗаданияНаВыгрузкуОтчетов.ТипОтчета = &ТипОтчета
					               |	И ЗаданияНаВыгрузкуОтчетов.ДатаНачала = &ДатаНачала
					               |	И ЗаданияНаВыгрузкуОтчетов.ДатаОкончания = &ДатаОкончания";
					
					Запрос.УстановитьПараметр("БазаДанных", СсылкаБазы);
					Запрос.УстановитьПараметр("Счет", Строка.Счет);
					Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчета[Строка.ТипОтчета]);
					Запрос.УстановитьПараметр("ДатаНачала", Строка.ДатаНачала);
					Запрос.УстановитьПараметр("ДатаОкончания", Строка.ДатаОкончания);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						НаборЗаписей = РегистрыСведений.ЗаданияНаВыгрузкуОтчетов.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.БазаДанных.Установить(Выборка.БазаДанных);
						НаборЗаписей.Отбор.ТипОтчета.Установить(Выборка.ТипОтчета);
						НаборЗаписей.Отбор.Счет.Установить(Выборка.Счет);
						НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
						НаборЗаписей.Отбор.ДатаОкончания.Установить(Выборка.ДатаОкончания);
						НаборЗаписей.Записать();
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("GUIDЗапроса") Тогда
			GUIDЗапроса = Параметры.GUIDЗапроса; 		
		Иначе
			GUIDЗапроса = XMLСТрока(Новый УникальныйИдентификатор());	
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.СтатистикаЗагрузки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.База = СсылкаБазы;
		МенеджерЗаписи.GUID = GUIDЗапроса;
		МенеджерЗаписи.ДатаЗапроса = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		
		НовСтрока = ТЗСтатистикаЗагрузки.Добавить();
		НовСтрока.База = СсылкаБазы;
		НовСтрока.GUID = GUIDЗапроса;
		
	КонецЕсли; 	
	
КонецПроцедуры
//********************************************************************************************************
Процедура ОбойтиКаталог(ОбменSQL, СтрокаКоманды, НастройкиОбмена, ПутьКаталога, ИмяКаталога, ИмяАрхива) Экспорт
	
	НайденныеФайлыАрхива = НайтиФайлы(ПутьКаталога, "*.*");
	
	Если НайденныеФайлыАрхива.Количество() > 0 Тогда 		
		Параметры = Новый Структура;		
		Для Каждого ФайлАрхива Из НайденныеФайлыАрхива Цикл
			Если ФайлАрхива.ЭтоКаталог() Тогда	
				ОбойтиКаталог(ОбменSQL, СтрокаКоманды, НастройкиОбмена, ФайлАрхива.ПолноеИмя, ФайлАрхива.Имя, ИмяАрхива);	
			КонецЕсли;	
			СтрокаКоманды = СтрокаКоманды + ?(СтрДлина(СтрокаКоманды) > 0, Символы.ПС, "") + ОбменSQL.ПолучитьСтрокуКомманды(НастройкиОбмена, ФайлАрхива, ИмяКаталога, ИмяАрхива);			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры
//********************************************************************************************************
Функция ПропуститьКаталог(ИмяКаталога)
	
	МассивИсключаемыхКаталогов = Новый Массив;
	
	МассивИсключаемыхКаталогов.Добавить("");
	
	Возврат ?(МассивИсключаемыхКаталогов.Найти(ИмяКаталога) <> Неопределено, Истина, Ложь);

КонецФункции
//********************************************************************************************************
Процедура ЗапускОбмена() Экспорт
	//++
	ЕстьОшибки = Ложь;
	
	МассивЛогов = Новый Массив(); 
	
	СписокОбработанныхБаз = Новый Массив; 
	//--
	
	ТЗСтатистикаЗагрузки = Новый ТаблицаЗначений;
	ТЗСтатистикаЗагрузки.Колонки.Добавить("База");	
	ТЗСтатистикаЗагрузки.Колонки.Добавить("GUID");
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	//++
	Начало = ТекущаяДатаСеанса();
    //--

	
	//++ 13.07.2025 Кибернетика Корыткин Очистка временных таблиц через скрипт из справочника
	//Если НЕ ОбменSQL.ОчисткаВременныхТаблиц() Тогда 
	////++
	//	Конец = ТекущаяДатаСеанса();
	//	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Очистка временных таблиц", "Ошибка при выполнении очистки таблиц"));
	////--
	//	Возврат;
	//КонецЕсли;
	
	ТекстКоманды = Справочники.ПроцедурыSQL.ОчисткаВременныхТаблиц.ТекстКоманды;
	Если Не ЗначениеЗаполнено(ТекстКоманды) Тогда  
		Справочники.ПроцедурыSQL.ЗаполнитьСкриптОчисткиВременныхТаблиц(ТекстКоманды);
		Конец = ТекущаяДатаСеанса();
		МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Заполнение скрипта очистки временных таблиц"));
		Начало = ТекущаяДатаСеанса();
		
	КонецЕсли;	
		
		
	Если НЕ ОбменSQL.ВыполнитьКоманду("truncate_temp_tables", ТекстКоманды) Тогда
		Конец = ТекущаяДатаСеанса();
		МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Очистка временных таблиц", , "Ошибка при выполнении очистки таблиц"));
		//++ Добавление записи статистики обмена с ошибкой
		//--
		Возврат;
	КонецЕсли; 
			
	Конец = ТекущаяДатаСеанса();
	ЗаписьВЖурналОбмена(Начало, Конец, "Очистка временных таблиц");
	//++ Добавление записи статистики обмена
	//--

	//-- 13.07.2025
	
	
	//++ 26.05.2025 Кибернетика Корыткин Процедуры для работы с таблицами, созданными в конструкторе
	Начало = ТекущаяДатаСеанса();
	
	КоличествоУдаленныхТаблиц = Обработки.ОбменSQL.УдалитьВременныеТаблицыСравнения();
	
	Конец = ТекущаяДатаСеанса();
	ЗаписьВЖурналОбмена(Начало, Конец, "Удаление временных таблиц сверки (" + Строка(КоличествоУдаленныхТаблиц) + ")");
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Удаление временных таблиц сверки (" + Строка(КоличествоУдаленныхТаблиц) + ")"));
	
	
	Начало = ТекущаяДатаСеанса();
	Справочники.ЕдиныйФорматДанных.УдалитьТаблицы(МассивЛогов);
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Удаление таблиц"));
	
	
	Начало = ТекущаяДатаСеанса();
   
	Справочники.ЕдиныйФорматДанных.ИнициализироватьТаблицы();
	
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Инициализация таблиц"));
	
	Начало = ТекущаяДатаСеанса();
    Справочники.ЕдиныйФорматДанных.ЗаполнитьТехническиеТаблицы();  
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Заполнение технических таблиц"));
	//-- 26.05.2025
	
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Если НастройкиОбмена.ЗагрузкаИзFTP Тогда
		//++	
		Начало = ТекущаяДатаСеанса();
        //--
		ОбменFTP = Обработки.ОбменFTP.Создать();
		ОбменFTP.Скачать(НастройкиОбмена); 
		//++
		Конец = ТекущаяДатаСеанса();   
		МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Скачивание файлов с FTP"));
        //--
	КонецЕсли;
	
	ЕстьБазыДляОбработки = Ложь;
	СписокБаз = ПолучитьСписокБаз();
	
	Для Каждого СтрокаБазы Из СписокБаз Цикл	
		//++   
		ОбменSQL.База = СтрокаБазы.Значение;
	 
        //--
		НайденныеФайлы = НайтиФайлы(НастройкиОбмена.ПутьККаталогуЗагрузкиФайлов, СтрокаБазы.Представление + " *.zip");
		ПоискПоПапке = Ложь;

		Если НайденныеФайлы.Количество() > 1 Тогда
			
			МаксДата = Дата(1,1,1);

			Для Каждого СтрокаФайл Из НайденныеФайлы Цикл		
				Если СтрокаФайл.ЭтоКаталог() Тогда		
					УдалитьФайлы(СтрокаФайл.ПолноеИмя);
				Иначе
					ТекДатаСтрока = Прав(СтрЗаменить(СтрокаФайл.Имя, ".zip", ""), 14);
					ТекДата = Дата(Сред(ТекДатаСтрока, 1, 4), Сред(ТекДатаСтрока, 5, 2), Сред(ТекДатаСтрока, 7, 2), Сред(ТекДатаСтрока, 9, 2),
						Сред(ТекДатаСтрока, 11, 2), Сред(ТекДатаСтрока, 13, 2));
					Если ТекДата > МаксДата Тогда
						МаксДата = ТекДата;
						Файл = СтрокаФайл;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
						
			Если МаксДата = Дата(1,1,1) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныеФайлы = НайтиФайлы(НастройкиОбмена.ПутьККаталогуЗагрузкиФайлов, СтрокаБазы.Представление + " *.zip");
			Для Каждого СтрокаФайл Из НайденныеФайлы Цикл
				Если СтрокаФайл.ПолноеИмя <> Файл.ПолноеИмя Тогда
					УдалитьФайлы(СтрокаФайл.ПолноеИмя);
				КонецЕсли;
			КонецЦикла;		
			
		ИначеЕсли НайденныеФайлы.Количество() = 1 Тогда				
			Файл = НайденныеФайлы[0];	
		Иначе		
			ПоискПоПапке = Истина;		
		КонецЕсли;
						
		ВременныйКаталог = ?(ЗначениеЗаполнено(НастройкиОбмена.ПутьККаталогуХраненияФайловОбмена), НастройкиОбмена.ПутьККаталогуХраненияФайловОбмена, КаталогВременныхФайлов());
		ВременныйКаталог = ВременныйКаталог + ?(Прав(ВременныйКаталог, 1) = "\", "", "\" );
		
		Если ПоискПоПапке Тогда
			ИмяПапки = СтрокаБазы.Представление;	
		Иначе
			Попытка
				Архив = Новый ЧтениеZipФайла(Файл.ПолноеИмя, "");
				ИмяПапки = Файл.ИмяБезРасширения;
				Архив.ИзвлечьВсе(ВременныйКаталог + ИмяПапки, РежимВосстановленияПутейФайловZIP.Восстанавливать); 
			Исключение
				УдалитьФайлы(Файл.ПолноеИмя);
			КонецПопытки;
		КонецЕсли;
		
		НайденныеФайлыАрхива = НайтиФайлы(ВременныйКаталог + ИмяПапки, "*.*");
	
	
		Если НайденныеФайлыАрхива.Количество() > 0 Тогда 
			
			СтрокаКоманды = "@echo off";
			
			Параметры = Новый Структура;
			
			Для Каждого ФайлАрхива Из НайденныеФайлыАрхива Цикл
				
				Если ФайлАрхива.ЭтоКаталог() Тогда
					Если ВРег(ФайлАрхива.Имя) = ВРег("Отчеты") Тогда
						ФайлыОтчетов = НайтиФайлы(ФайлАрхива.ПолноеИмя, "*.*");	
						Для Каждого ФайлОтчета Из ФайлыОтчетов Цикл 
							КопироватьФайл(ФайлОтчета.ПолноеИмя, НастройкиОбмена.ПутьККаталогуОтчётов + ?(Прав(НастройкиОбмена.ПутьККаталогуОтчётов, 1) = "\", "", "\" ) + СтрокаБазы.Представление + " " + ФайлОтчета.Имя);	//Вынести в параметр	
						КонецЦикла;
					Иначе
						ОбойтиКаталог(ОбменSQL, СтрокаКоманды, НастройкиОбмена, ФайлАрхива.ПолноеИмя, ФайлАрхива.Имя, ИмяПапки);		
					КонецЕсли;
				КонецЕсли;
				
				Если ВРег(ФайлАрхива.ИмяБезРасширения) = ВРег("Manifest") Тогда 				
					//++
					НачалоЧтенияМанифеста = ТекущаяДатаСеанса();
					//--
					ПрочитатьМанифест(ФайлАрхива.ПолноеИмя, Параметры);	
					//++
					КонецЧтенияМанифеста = ТекущаяДатаСеанса();   
					Если Параметры.Свойство("НомерСообщения") Тогда
						МассивЛогов.Добавить(ЗаписьВЖурналОбмена(НачалоЧтенияМанифеста, КонецЧтенияМанифеста, "Чтение манифеста", ОбменSQL.База, ,"Номер принятого сообщения: " + Строка(Параметры.НомерСообщения)));
					Иначе 
						МассивЛогов.Добавить(ЗаписьВЖурналОбмена(НачалоЧтенияМанифеста, КонецЧтенияМанифеста, "Чтение манифеста", ОбменSQL.База, ,));

					КонецЕсли;
					СписокОбработанныхБаз.Добавить(ОбменSQL.База); 
                    //--
				КонецЕсли; 
				
				//++ 04.06.2025 Загрузка структуры конфигурации
				Если ВРег(ФайлАрхива.ИмяБезРасширения) = ВРег("MDStructure") Тогда 				
				
					НачалоЗагрузкиКонфигурации = ТекущаяДатаСеанса();
				       
					ОбработкаЗагрузкиКонфигурации = Обработки.ЗагрузкаСтруктурыКонфигурации.Создать();
					ОбработкаЗагрузкиКонфигурации.Конфигурация = ОбменSQL.База;
					ОбработкаЗагрузкиКонфигурации.ИмяФайлаЗагрузки = ФайлАрхива.ПолноеИмя;
					ОбработкаЗагрузкиКонфигурации.ДобавлятьТолькоНовыеОбъектыСвойстваЗначения = Истина;
					Попытка
						ОбработкаЗагрузкиКонфигурации.ВыполнитьЗагрузку();	
						
						КонецЗагрузкиКонфигурации = ТекущаяДатаСеанса();   
						МассивЛогов.Добавить(ЗаписьВЖурналОбмена(НачалоЗагрузкиКонфигурации, КонецЗагрузкиКонфигурации, "Загрузка структуры конфигурации", ОбменSQL.База));
				    Исключение
						Конец = ТекущаяДатаСеанса();   
						МассивЛогов.Добавить(ЗаписьВЖурналОбмена(НачалоЗагрузкиКонфигурации, КонецЗагрузкиКонфигурации, "Загрузка структуры конфигурации", ОбменSQL.База, ОписаниеОшибки()));
		                Параметры.Вставить("КонфигурацияЗагружена", Ложь);

					КонецПопытки;
					Параметры.Вставить("КонфигурацияЗагружена", Истина);
				КонецЕсли;  
				//-- 04.06.2025

				
			КонецЦикла;
			//++
			Конец = ТекущаяДатаСеанса();   
			МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Подготовка скрипта загрузки", ОбменSQL.База, , СтрокаКоманды)); 
			//--


			 	
			
			Если Параметры.Свойство("ИмяБазы") Тогда 
					//Обработка = Обработки.ОбменSQL.Создать();
					//Команда = Обработка.Соединение();
					//Команда.CommandType = 1;
					//Команда.CommandTimeout = 14400;	
					//Команда.CommandText = "INSERT INTO [dbo].[map_MappingMarker_tmp]
					//					  |([Base])
					//				  	  |VALUES
					//					  |('"+Параметры.ИмяБазы+"')";
					//Команда.Execute();
					
					Коннектор = ОбменSQLСервер.ПолучитьКоннектор(); 
					Коннектор.ДобавитьЗаписьВТаблицу("map_MappingMarker_tmp", Новый Структура("Base", Параметры.ИмяБазы));
						
			КонецЕсли; 	
			
			//++
			Начало = ТекущаяДатаСеанса();		    	
			//++ 28.02.2025
			УдалитьФайлы(НастройкиОбмена.КаталогОшибокSQL, "*" + ОбменSQL.База  + "*.txt");
			Конец = ТекущаяДатаСеанса();   
			ЗаписьВЖурналОбмена(Начало, Конец, "Удаление старых логов", ОбменSQL.База );   
			//-- 28.02.2025
			Начало = ТекущаяДатаСеанса();
			//--

			
			ОбменSQL.ВыполнитьОбмен(СтрокаКоманды); 
			//++
			Конец = ТекущаяДатаСеанса();   
			МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Выполнение загрузки",ОбменSQL.База,, СтрокаКоманды));
			
			Начало = ТекущаяДатаСеанса();
			//--
			ОбновитьДанныеМанифеста(Параметры, ТЗСтатистикаЗагрузки);
			//++
			Конец = ТекущаяДатаСеанса();   
			МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Обновление данных манифеста", ОбменSQL.База));	
			//--					
			ЕстьБазыДляОбработки = Истина;
						
		КонецЕсли;		
		
		Попытка 
			//++
			Начало = ТекущаяДатаСеанса();  
			//--
			УдалитьФайлы(ВременныйКаталог + ИмяПапки);
		Исключение 
			//++
			Конец = ТекущаяДатаСеанса();   
			МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Удаление временных файлов", ОбменSQL.База, ОписаниеОшибки()));
			//--
		КонецПопытки;
		
		Попытка
			Если НЕ ПоискПоПапке Тогда
				//++
				Начало = ТекущаяДатаСеанса(); 
				//--
				ПереместитьФайл(Файл.ПолноеИмя, НастройкиОбмена.ПутьККаталогуАрхива + ?(Прав(НастройкиОбмена.ПутьККаталогуАрхива, 1) = "\", "", "\" ) + Файл.Имя);
				//++	
				Конец = ТекущаяДатаСеанса();   
				МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Перемещение в архив", ОбменSQL.База));
            	//--
	
			КонецЕсли;
		Исключение
		КонецПопытки;
									
	КонецЦикла;
	
	//++
	Начало = ТекущаяДатаСеанса();

	ФайлыОшибок = НайтиФайлы(НастройкиОбмена.КаталогОшибокSQL, "*.txt");
	ФайлыНаУдаление = Новый Массив;
	Для Каждого ФайлОшибок Из ФайлыОшибок Цикл 	
		Если ФайлОшибок.ЭтоФайл() Тогда
			Если ФайлОшибок.Размер() = 0 Тогда
				УдалитьФайлы(ФайлОшибок.ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	Конец = ТекущаяДатаСеанса();   
	ЗаписьВЖурналОбмена(Начало, Конец, "Удаление пустых логов");
	//--
	
	Если НЕ ЕстьБазыДляОбработки Тогда
		Возврат;
	КонецЕсли;
	
	//НайденныеФайлы = НайтиФайлы(НастройкиОбмена.ПутьККаталогуЗагрузкиФайлов, " *.*");
	//Для Каждого Файл Из  НайденныеФайлы Цикл
	//	ПереместитьФайл(Файл.ПолноеИмя, СтрЗаменить(Файл.ПолноеИмя, НастройкиОбмена.ПутьККаталогуЗагрузкиФайлов, "NotFound"));		
	//КонецЦикла;
	
	//++
	Начало = ТекущаяДатаСеанса();
	//--
	ОбновлениеДанныхКонтрагентов.ОбновитьОчередь();
	//++
	Конец = ТекущаяДатаСеанса();   
	ЗаписьВЖурналОбмена(Начало, Конец, "Обновление данных контрагентов");
	//--

	//++
	Начало = ТекущаяДатаСеанса();	
	//--
	ВыгрузкаЭталонныхСправочников = Обработки.ВыгрузкаЭталонныхСправочников.Создать();
	ВыгрузкаЭталонныхСправочников.Выгрузить();
	//++
	Конец = ТекущаяДатаСеанса();   
	ЗаписьВЖурналОбмена(Начало, Конец, "Выгрузка эталоннных справочников");
	//--

    //++
	Начало = ТекущаяДатаСеанса();	
	//--
	ВыгрузкаЭталонныхСправочников.ВыгрузитьНастройкиОтчетов();
	//++
	Конец = ТекущаяДатаСеанса();   
	ЗаписьВЖурналОбмена(Начало, Конец, "Выгрузка настроек отчетов");
	//--

  	
	//++ 26.05.2025 Кибернетика Корыткин Обновление данных в таблицах, созданных через конструктор
	Начало = ТекущаяДатаСеанса();   
	Событие = "Заполнение справочников из временных таблиц";
	Справочники.ЕдиныйФорматДанных.ЗаполнитьСправочникиИзВременныхТаблиц(); 
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, Событие));
	//-- 26.05.2025
	
	//++
	Начало = ТекущаяДатаСеанса();	
	//--          

	ЕстьОшибки = НЕ ОбменSQL.ВыполнитьСценарий(Справочники.СценарииВыполненияПроцедурSQL.Основной);

	//++
	Конец = ТекущаяДатаСеанса();   
	ЗаписьВЖурналОбмена(Начало, Конец, "Выполнение процедур SQL");
	//--
	
	//++
	Начало = ТекущаяДатаСеанса();	
	//--
	ОчисткаАрхива();
	//++
	Конец = ТекущаяДатаСеанса();   
	ЗаписьВЖурналОбмена(Начало, Конец, "Очистка архива");
	//--
	
	
	Если НЕ ЕстьОшибки Тогда
		Запрос = Новый Запрос;
		
		////////////////////////////////START Кибернетика//////////////////////////////////////// 
		// Автор:Корыткин А.А.
		// Дата: 14.02.2024
		//
		// Описание: Добавлен отбор по базам
		//
		//  
		Запрос.Текст = "ВЫБРАТЬ
		               |	Базы.Ссылка КАК Ссылка,
		               |	Базы.Наименование КАК Наименование
		               |ИЗ
		               |	Справочник.Базы КАК Базы
		               |ГДЕ
		               |	Базы.НомерПринятогоСообщения <> Базы.НомерОбработанногоСообщения
		               |	И Базы.Ссылка В(&СписокБаз)";             
		
		Запрос.УстановитьПараметр("СписокБаз", СписокОбработанныхБаз);
		////////////////////////////////FINISH Кибернетика/////////////////////////////////////// 
		
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл    
			
			ИменаФайлов = "";
			ФайлыОшибокНеПустые = НайтиФайлы(НастройкиОбмена.КаталогОшибокSQL, "*" + Выборка.Наименование  + "*.txt");
			Начало = ТекущаяДатаСеанса();
			Если ФайлыОшибокНеПустые.Количество() = 0 Тогда
                
		        ОбъектБаза = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектБаза.НомерОбработанногоСообщения = ОбъектБаза.НомерПринятогоСообщения;
				ОбъектБаза.Записать();
				Конец = ТекущаяДатаСеанса();   
				МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Установка номера обработанного сообщения", Выборка.Ссылка,, "Номер обработанного сообщения: " + Строка(ОбъектБаза.НомерОбработанногоСообщения)));
				
				СтрокаВСтатистике = ТЗСтатистикаЗагрузки.Найти(Выборка.Ссылка, "База");  
				 
				Если СтрокаВСтатистике <> Неопределено Тогда
					МенеджерЗаписи = РегистрыСведений.СтатистикаЗагрузки.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.База = СтрокаВСтатистике.База;
					МенеджерЗаписи.GUID = СтрокаВСтатистике.GUID;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.ДатаОбработки = ТекущаяДатаСеанса();
					МенеджерЗаписи.Обработан = Истина;
					МенеджерЗаписи.ЕстьОшибки = Ложь;
					МенеджерЗаписи.Записать();	
				КонецЕсли;
				
			Иначе	
				Для Каждого Файл Из ФайлыОшибокНеПустые Цикл		
					ИменаФайлов = ИменаФайлов + Файл.ИмяБезРасширения + Символы.ПС;
				КонецЦикла;
				Конец = ТекущаяДатаСеанса();   
				Если ЗначениеЗаполнено(ИменаФайлов) Тогда
					МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Получение списка файлов ошибок загрузки", Выборка.Ссылка, ИменаФайлов));
					ЕстьОшибки = Истина;	
				КонецЕсли;
				
				СтрокаВСтатистике = ТЗСтатистикаЗагрузки.Найти(Выборка.Ссылка, "База");  
				 
				Если СтрокаВСтатистике <> Неопределено Тогда
					МенеджерЗаписи = РегистрыСведений.СтатистикаЗагрузки.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.База = СтрокаВСтатистике.База;
					МенеджерЗаписи.GUID = СтрокаВСтатистике.GUID;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.ДатаОбработки = ТекущаяДатаСеанса();
					МенеджерЗаписи.Обработан = Истина;
					МенеджерЗаписи.ЕстьОшибки = Истина;
					МенеджерЗаписи.Записать();	
				КонецЕсли;

				
            КонецЕсли;
					
			
		КонецЦикла;
	Иначе
		//Если есть общие ошибки записываем сразу всю статистику
		Для Каждого Строка Из ТЗСтатистикаЗагрузки Цикл
			МенеджерЗаписи = РегистрыСведений.СтатистикаЗагрузки.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.База = Строка.База;
			МенеджерЗаписи.GUID = Строка.GUID;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.ДатаОбработки = ТекущаяДатаСеанса();
			МенеджерЗаписи.Обработан = Истина;
			МенеджерЗаписи.ЕстьОшибки = ЕстьОшибки;
			МенеджерЗаписи.Записать();	
		КонецЦикла;
		
	КонецЕсли; 
	
			
	//Если НЕ ЕстьОшибки Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	Базы.Ссылка КАК Ссылка
	//	               |ИЗ
	//	               |	Справочник.Базы КАК Базы
	//	               |ГДЕ
	//	               |	Базы.НомерПринятогоСообщения <> Базы.НомерОбработанногоСообщения";
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		ОбъектБаза = Выборка.Ссылка.ПолучитьОбъект();
	//		ОбъектБаза.НомерОбработанногоСообщения = ОбъектБаза.НомерПринятогоСообщения;
	//		ОбъектБаза.Записать();
	//	КонецЦикла;
	//	
	//КонецЕсли;   
	
	Попытка   
		Начало = ТекущаяДатаСеанса();
        //07.09.2023 Корыткин Кибернетика
		ОтправитьЛоги(МассивЛогов, ЕстьОшибки);  
		Конец = ТекущаяДатаСеанса();   
		ЗаписьВЖурналОбмена(Начало, Конец, "Отправка логов",,,); 
	Исключение	      
        Конец = ТекущаяДатаСеанса(); 
		ЗаписьВЖурналОбмена(Начало, Конец, "Отправка логов",,"Ошибка: " + ОписаниеОшибки(),); 

	КонецПопытки;

	
	
КонецПроцедуры
//********************************************************************************************************
Функция ПолучитьСписокБаз()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Базы.Ссылка КАК Ссылка,
	               |	Базы.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Базы КАК Базы";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокБаз = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокБаз.Добавить(Выборка.Ссылка, Выборка.Наименование); 	
	КонецЦикла;
	
	Возврат СписокБаз;
	
КонецФункции
//********************************************************************************************************
Процедура  ОчисткаАрхива() Экспорт
	
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	СрокХранения = НастройкиОбмена.СрокХраненияАрхива;
	КаталогАрхива = НастройкиОбмена.ПутьККаталогуАрхива;
	
	Если СрокХранения >0 Тогда
						
		НайденныеФайлы = НайтиФайлы(КаталогАрхива,"*.zip",Истина);
		
			Для Каждого Файл Из НайденныеФайлы Цикл
			
				ТекДатаСтрока = Прав(СтрЗаменить(Файл.Имя, ".zip", ""), 14);
				ТекДата = Дата(Сред(ТекДатаСтрока, 1, 4), Сред(ТекДатаСтрока, 5, 2), Сред(ТекДатаСтрока, 7, 2), Сред(ТекДатаСтрока, 9, 2),
				Сред(ТекДатаСтрока, 11, 2), Сред(ТекДатаСтрока, 13, 2));
				
					Если НачалоДня(ТекущаяДата())>=НачалоДня(ТекДата)+СрокХранения*3600*24 Тогда
					
						УдалитьФайлы(Файл.ПолноеИмя);
				
					КонецЕсли;
			        
			КонецЦикла;
			
	КонецЕсли;			

КонецПроцедуры

    
//***********Обмен эталонами**************
Процедура ЗапускОбменаЭталонами() Экспорт
	
	ДатаНачала = ТекущаяДатаСеанса();	   
	КлючСтатистики = XMLСтрока(Новый УникальныйИдентификатор);
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, ТекущаяДатаСеанса(), "Начало обмена");	
	
	МассивЛогов = Новый Массив();

	Начало = ТекущаяДатаСеанса(); 
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	
	ПутьВыгрузки = Константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Если Не ЗначениеЗаполнено(ПутьВыгрузки) Тогда
		Конец = ТекущаяДатаСеанса();      	
		Сообщить("Заполните константу с каталогом выгрузки в прочие системы");
		МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Начало обмена", "Не заполнена константа выгрузки в прочие системы"));
		//++ Добавление записи статистики обмена с ошибкой
		ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Начало обмена", Истина, "Не заполнена константа выгрузки в прочие системы");
		//--
        Возврат;
	Иначе
		ФайлИнфо = Новый Файл(ПутьВыгрузки);
		
		Если Не ФайлИнфо.Существует() Тогда 
            Конец = ТекущаяДатаСеанса();      	
			Сообщить("Проверьте корректность каталога выгрузки в прочие системы");
			МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Начало обмена", "Некорректный путь в константе выгрузки в прочие системы"));
			//++ Добавление записи статистики обмена с ошибкой
			ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Начало обмена", Истина, "Некорректный путь в константе выгрузки в прочие системы");
			//--
	        Возврат;
        КонецЕсли
	КонецЕсли;

	
	ТекстКоманды = Справочники.ПроцедурыSQL.ОчисткаВременныхТаблицЭталонов.ТекстКоманды;
	Если Не ЗначениеЗаполнено(ТекстКоманды) Тогда  
		Справочники.ПроцедурыSQL.ЗаполнитьСкриптОчисткиВременныхТаблицЭталонов(ТекстКоманды);
		Конец = ТекущаяДатаСеанса();
		МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Заполнение скрипта очистки временных таблиц эталонов"));
		//++ Добавление записи статистики обмена с ошибкой
		ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Заполнение скрипта очистки временных таблиц эталонов");
		//--
		Начало = ТекущаяДатаСеанса();
		
	КонецЕсли;	
		
		
	Если НЕ ОбменSQL.ВыполнитьКоманду("truncate_etalons_temp_tables", ТекстКоманды) Тогда
		Конец = ТекущаяДатаСеанса();
		МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Очистка временных таблиц эталонов", , "Ошибка при выполнении очистки таблиц"));
		//++ Добавление записи статистики обмена с ошибкой
		ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Очистка временных таблиц эталонов", Истина, "Ошибка при выполнении очистки таблиц");
		//--
		Возврат;
	КонецЕсли; 
			
	Конец = ТекущаяДатаСеанса();
	ЗаписьВЖурналОбмена(Начало, Конец, "Очистка временных таблиц эталонов");
	//++ Добавление записи статистики обмена
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Очистка временных таблиц эталонов");
	//--
	
	Начало = ТекущаяДатаСеанса();
	ПланыВидовХарактеристик.ТипыЭталонов.УдалитьТаблицы();
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Удаление измененных таблиц эталонов"));
	//++ Добавление записи статистики обмена
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Удаление измененных таблиц эталонов");
	//--
	
	Начало = ТекущаяДатаСеанса();
	ПланыВидовХарактеристик.ТипыЭталонов.ИнициализироватьТаблицыДляЭталонов(); 
	ПланыВидовХарактеристик.ТипыЭталонов.ИнициализироватьТаблицуСоответствий();
	
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Инициализация таблиц эталонов"));
	//++ Добавление записи статистики обмена
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Инициализация таблиц эталонов");
	//--
	
	//Начало = ТекущаяДатаСеанса();
   
	//ПланыВидовХарактеристик.ТипыЭталонов.ЗаполнитьЭталоныПоУмолчанию();
	
	//Конец = ТекущаяДатаСеанса();   
	//МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Заполнение эталонов по умолчанию"));
		
	
	УзелОбмена = Обмен.ПолучитьУзелОменаЭталонами();
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда 
		Конец = ТекущаяДатаСеанса();  
		МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, "Определение узла обмена", "Не определен узел обмена эталонами"));
		//++ Добавление записи статистики обмена с ошибкой
		ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Определение узла обмена", Истина, "Не определен узел обмена эталонами");
		//--
		Возврат;
	КонецЕсли;
	
	НомерВыгрузки = УзелОбмена.НомерОтправленного + 1;
	
	ПланыОбмена.ВыбратьИзменения(УзелОбмена, НомерВыгрузки);
	
	ЗапросТиповЭталонов = Новый Запрос;
	ЗапросТиповЭталонов.Текст = "ВЫБРАТЬ
	                            |	ТипыЭталонов.Ссылка КАК Эталон
	                            |ИЗ
	                            |	ПланВидовХарактеристик.ТипыЭталонов КАК ТипыЭталонов
	                            |ГДЕ
	                            |	ТипыЭталонов.Выгружать
	                            |	И НЕ ТипыЭталонов.ПометкаУдаления";
	
	ВыборкаЭталонов = ЗапросТиповЭталонов.Выполнить().Выбрать();  
	
	Пока ВыборкаЭталонов.Следующий() Цикл
		
		Начало = ТекущаяДатаСеанса();
		
		ВыгрузитьЗначенияЭталона(ВыборкаЭталонов.Эталон, НомерВыгрузки, УзелОбмена);
		
		Событие = "Выгрузка эталонного справочника: " + Строка(ВыборкаЭталонов.Эталон);
		Конец = ТекущаяДатаСеанса();   
		МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, Событие));
		//++ Добавление записи статистики обмена
		ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, Событие);
		//--
		
	КонецЦикла;
	
	Начало = ТекущаяДатаСеанса();
	
	ВыгрузитьСоответствияЭталонов(НомерВыгрузки, УзелОбмена);
		
	Событие = "Выгрузка соответствий эталонных справочников";
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, Событие));
	//++ Добавление записи статистики обмена
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, Событие);
	//--
    
	Начало = ТекущаяДатаСеанса();   
	Событие = "Выгрузка соответствий счетов";
	ВыгрузитьСоответствияСчетов(НомерВыгрузки, УзелОбмена);
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, Событие));
	//++ Добавление записи статистики обмена
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, Событие);
	//--

	Начало = ТекущаяДатаСеанса();   
	Событие = "Заполнение эталонных справочников из временных таблиц";
	ПланыВидовХарактеристик.ТипыЭталонов.ЗаполнитьСправочникиИзВременныхТаблиц(); 
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, Событие));
	//++ Добавление записи статистики обмена
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, Событие);
	//--
	
	Начало = ТекущаяДатаСеанса();   
	Событие = "Заполнение соответствий эталонным справочникам из временных таблиц";
	ПланыВидовХарактеристик.ТипыЭталонов.ЗаполнитьСоответствияИзВременнойТаблицы(); 
	Конец = ТекущаяДатаСеанса();   
	МассивЛогов.Добавить(ЗаписьВЖурналОбмена(Начало, Конец, Событие));
	//++ Добавление записи статистики обмена
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, Событие);
	//--

	Начало = ТекущаяДатаСеанса();
	ЕстьОшибки = НЕ ОбменSQL.ВыполнитьСценарий(Справочники.СценарииВыполненияПроцедурSQL.ОбменЭталонов);
	Конец = ТекущаяДатаСеанса();   
	ЗаписьВЖурналОбмена(Начало, Конец, "Выполнение процедур SQL при обмене");
	//++ Добавление записи статистики обмена
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Выполнение процедур SQL при обмене", ЕстьОшибки, ?(ЕстьОшибки, "Ошибка при выполнении сценария SQL", ""));
	//--

	Начало = ТекущаяДатаСеанса();
	//++ 05.12.2024 Корыткин Удаление логов и удаление регистрации в случае отсутствия ошибок
	ФайлыОшибок = НайтиФайлы(НастройкиОбмена.КаталогОшибокSQL, "mapping_upload*.txt");
	
	ФайлыНаУдаление = Новый Массив;
	Для Каждого ФайлОшибок Из ФайлыОшибок Цикл 	
		Если ФайлОшибок.ЭтоФайл() Тогда
			Если ФайлОшибок.Размер() = 0 Тогда
				УдалитьФайлы(ФайлОшибок.ПолноеИмя);
			Иначе
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	Конец = ТекущаяДатаСеанса();   
	ЗаписьВЖурналОбмена(Начало, Конец, "Удаление пустых логов"); 
	//++ Добавление записи статистики обмена
	ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, Конец, "Удаление пустых логов", ЕстьОшибки, ?(ЕстьОшибки, "Обнаружены ошибки в файлах логов", ""));
	//--
	
  	
	Если Не ЕстьОшибки Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НомерВыгрузки);
		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбъект.НомерОтправленного = НомерВыгрузки;  
		УзелОбъект.Записать();
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УдаленныеЭталоны.ГУИД КАК ГУИД
			|ИЗ
			|	РегистрСведений.УдаленныеЭталоны КАК УдаленныеЭталоны
			|ГДЕ
			|	УдаленныеЭталоны.НомерСообщения = &НомерСообщения";
		
		Запрос.УстановитьПараметр("НомерСообщения", НомерВыгрузки);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИнфоОбУдалении = РегистрыСведений.УдаленныеЭталоны.СоздатьНаборЗаписей();
			ИнфоОбУдалении.Отбор.ГУИД.Установить(ВыборкаДетальныеЗаписи.ГУИД);
			ИнфоОбУдалении.Записать();
		КонецЦикла;
		
		//++ Добавление записи статистики обмена
		ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, ТекущаяДатаСеанса(), "Выполнены все этапы");
		//--	
	Иначе    
		ЗаписатьСтатистикуОбмена(КлючСтатистики, ДатаНачала, ТекущаяДатаСеанса(), "Обмен выполнен с ошибками", Истина, );

	КонецЕсли;	
	
	//-- 05.12.2024
	
КонецПроцедуры

Процедура ВыгрузитьЗначенияЭталона(ТипЭталона, НомерСообщения, Узел)
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	ПутьВыгрузки = Константы.КаталогВыгрузкиДляПрочихСистем.Получить();

	Обработка = Обработки.ОбменSQL.Создать();
	
	Запрос = Новый Запрос;
	
	//++ 05.12.2024 Корыткин А.А. Изменен запрос для выгрузки удаления
	//работает с версии 8.3.22
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗначенияЭталоновИзменения.Ссылка КАК Ссылка,
	//               |	ЗначенияЭталоновИзменения.Ссылка.Родитель КАК Родитель,
	//               |	0 КАК ПризнакУдаления
	//               |ИЗ
	//               |	Справочник.ЗначенияЭталонов.Изменения КАК ЗначенияЭталоновИзменения
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
	//               |		ПО ЗначенияЭталоновИзменения.Ссылка = ЗначенияЭталонов.Ссылка
	//               |ГДЕ
	//               |	ЗначенияЭталоновИзменения.Ссылка.Владелец = &ТипЭталона
	//               |	И ЕСТЬNULL(ЗначенияЭталоновИзменения.НомерСообщения, 0) <= &НомерСообщения
	//               |	И ЗначенияЭталоновИзменения.Узел = &Узел
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗначенияЭталоновИзменения.Ссылка,
	//               |	ЗначенияЭталоновИзменения.Ссылка.Родитель,
	//               |	1
	//               |ИЗ
	//               |	Справочник.ЗначенияЭталонов.Изменения КАК ЗначенияЭталоновИзменения
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
	//               |		ПО ЗначенияЭталоновИзменения.Ссылка = ЗначенияЭталонов.Ссылка
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдаленныеЭталоны КАК УдаленныеЭталоны
	//               |		ПО  (УдаленныеЭталоны.ТипЭталона = &ТипЭталона)
	//               |ГДЕ
	//               |	ЗначенияЭталоновИзменения.Ссылка.Владелец ЕСТЬ NULL
	//               |	И ЕСТЬNULL(ЗначенияЭталоновИзменения.НомерСообщения, 0) <= &НомерСообщения
	//               |	И ЗначенияЭталоновИзменения.Узел = &Узел";  
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияЭталоновИзменения.Ссылка КАК Ссылка,
	               |	ЗначенияЭталоновИзменения.Ссылка.Родитель КАК Родитель,
	               |	0 КАК ПризнакУдаления,
	               |	ЗначенияЭталонов.ПометкаУдаления КАК ПометкаУдаления
	               |ПОМЕСТИТЬ ВТИзмененныеСсылки
	               |ИЗ
	               |	Справочник.ЗначенияЭталонов.Изменения КАК ЗначенияЭталоновИзменения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
	               |		ПО ЗначенияЭталоновИзменения.Ссылка = ЗначенияЭталонов.Ссылка
	               |ГДЕ
	               |	ЗначенияЭталоновИзменения.Ссылка.Владелец = &ТипЭталона
	               |	И ЕСТЬNULL(ЗначенияЭталоновИзменения.НомерСообщения, 0) <= &НомерСообщения
	               |	И ЗначенияЭталоновИзменения.Узел = &Узел
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	0 КАК ПризнакУдаления,
	               |	NULL КАК ГУИД,
	               |	ВТИзмененныеСсылки.Ссылка КАК Ссылка,
	               |	ВТИзмененныеСсылки.Родитель КАК Родитель,
	               |	ВТИзмененныеСсылки.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	ВТИзмененныеСсылки КАК ВТИзмененныеСсылки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	1,
	               |	УдаленныеЭталоны.ГУИД,
	               |	NULL,
	               |	NULL,
	               |	0
	               |ИЗ
	               |	РегистрСведений.УдаленныеЭталоны КАК УдаленныеЭталоны
	               |ГДЕ
	               |	УдаленныеЭталоны.ТипЭталона = &ТипЭталона
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗначенияЭталоновРеквизиты.Ссылка КАК Ссылка,
	               |	ЗначенияЭталоновРеквизиты.Реквизит КАК Реквизит,
	               |	ЗначенияЭталоновРеквизиты.Значение КАК Значение
	               |ИЗ
	               |	ВТИзмененныеСсылки КАК ВТИзмененныеСсылки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗначенияЭталонов.Реквизиты КАК ЗначенияЭталоновРеквизиты
	               |		ПО ВТИзмененныеСсылки.Ссылка = ЗначенияЭталоновРеквизиты.Ссылка";  

	//--05.12.2024
	Запрос.УстановитьПараметр("ТипЭталона", ТипЭталона);
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	ВыборкаПакета = Запрос.ВыполнитьПакет();
	
	Выборка = ВыборкаПакета[1].Выбрать();
	
	УдалитьФайл = Истина;
	
	
	Если Прав(ПутьВыгрузки,1) <> "\" Тогда
		ПутьВыгрузки = ПутьВыгрузки + "\";
	КонецЕсли;
	
	
	ИмяФайла = ПутьВыгрузки + "mapping_upload_" + ТипЭталона.ИмяТаблицыSQL + ".csv";
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
	
	
	ИмяВТ = ТипЭталона.ИмяТаблицыSQL + "_temp"; 
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ЗначенияЭталонов"));
	ОписаниеТипаСсылки = Новый ОписаниеТипов(МассивТипов);   
	
	Пока Выборка.Следующий() Цикл
		
		МассивРеквизитов = Новый Массив;
		
		Если Не Выборка.ПризнакУдаления Тогда
			ГУИД = Выборка.Ссылка.УникальныйИдентификатор();
			МассивРеквизитов.Добавить(XMLСтрока(ГУИД));
		Иначе
		    МассивРеквизитов.Добавить(XMLСтрока(Выборка.ГУИД));
		КонецЕсли;
		//++ 05.12.2024 Корыткин А.А. Выгрузка удаления
		МассивРеквизитов.Добавить(Выборка.ПризнакУдаления); 
		
		//-- 05.12.2024
		//++ 27.12.2024 Корыткин А.А. Выгрузка пометки удаления
		МассивРеквизитов.Добавить(?(Выборка.ПометкаУдаления, 1, 0));
		//-- 27.12.2024

		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			МассивРеквизитов.Добавить(Выборка.Родитель.Владелец.ИмяТаблицыSQL);
			ГУИДРодителя = Выборка.Родитель.УникальныйИдентификатор();
			МассивРеквизитов.Добавить(XMLСтрока(ГУИДРодителя));	
		Иначе
			МассивРеквизитов.Добавить(NULL);
			МассивРеквизитов.Добавить(NULL);
		КонецЕсли;
		
	
		
		Для каждого ПолеВыгрузки из ТипЭталона.Реквизиты Цикл
			
			Если НЕ Выборка.ПризнакУдаления Тогда
				ПоискРеквизитаВТЧ = Выборка.Ссылка.Реквизиты.Найти(ПолеВыгрузки.Реквизит, "Реквизит");   
				Если ПоискРеквизитаВТЧ <> Неопределено Тогда					
					Если ПолеВыгрузки.Реквизит.ТипЗначения = ОписаниеТипаСсылки Тогда
						МассивРеквизитов.Добавить(ПреобразоватьОбъектВЗначение(ПоискРеквизитаВТЧ.Значение.Владелец.ИмяТаблицыSQL));	
					КонецЕсли;
					МассивРеквизитов.Добавить(ПреобразоватьОбъектВЗначение(ПоискРеквизитаВТЧ.Значение, ПолеВыгрузки.Реквизит.ТипПоля.GUID));	
				Иначе
					Если ПолеВыгрузки.Реквизит.ТипЗначения = ОписаниеТипаСсылки Тогда
						МассивРеквизитов.Добавить(NULL);
					КонецЕсли;
					МассивРеквизитов.Добавить(NULL);					
				КонецЕсли;    		
			Иначе
				Если ПолеВыгрузки.Реквизит.ТипЗначения = ОписаниеТипаСсылки Тогда
					МассивРеквизитов.Добавить(NULL);
				КонецЕсли;
				МассивРеквизитов.Добавить(NULL);	
			КонецЕсли;
		КонецЦикла;	
		
		СтрокаЗаписиВТ = СтрСоединить(МассивРеквизитов, Символы.Таб);
		ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);  
		
		//++ 05.12.2024 Корыткин Обновление информации об удаленном значении
		Если Выборка.ПризнакУдаления Тогда
			
			ИнфоОбУдалении = РегистрыСведений.УдаленныеЭталоны.СоздатьМенеджерЗаписи();
			ИнфоОбУдалении.ГУИД = Выборка.ГУИД; 
			ИнфоОбУдалении.ТипЭталона = ТипЭталона;
			ИнфоОбУдалении.НомерСообщения = НомерСообщения;
			ИнфоОбУдалении.Записать();  	
			
		КонецЕсли;
		//-- 05.12.2024 Корыткин Обновление информации об удаленном значении

	КонецЦикла;
	
	ФайлНаДиске = Новый Файл(ИмяФайла);
	
	ЗаписьТекста.Закрыть(); 
	
	КомандаЗапускаBCP = Обработка.ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ);
	
	Обработка.ВыполнитьОбмен(КомандаЗапускаBCP);
	
КонецПроцедуры

Процедура ВыгрузитьСоответствияЭталонов(НомерСообщения, Узел)
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	Обработка = Обработки.ОбменSQL.Создать();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствияЭталоновИзменения.ТаблицаИсточник КАК ТаблицаИсточник,
	               |	СоответствияЭталоновИзменения.ГУИДСправочника КАК ГУИДСправочника,
	               |	СоответствияЭталоновИзменения.База.Наименование КАК База,
	               |	СоответствияЭталонов.ТипЭталона КАК ТипЭталона,
	               |	СоответствияЭталонов.ЗначениеЭталона КАК ЗначениеЭталона,
	               |	СоответствияЭталонов.ТипЭталона.ИмяТаблицыSQL КАК ИмяТаблицыSQL
	               |ИЗ
	               |	РегистрСведений.СоответствияЭталонов.Изменения КАК СоответствияЭталоновИзменения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияЭталонов КАК СоответствияЭталонов
	               |		ПО (СоответствияЭталонов.ТаблицаИсточник = СоответствияЭталоновИзменения.ТаблицаИсточник)
	               |			И (СоответствияЭталонов.ГУИДСправочника = СоответствияЭталоновИзменения.ГУИДСправочника)
	               |			И (СоответствияЭталонов.База = СоответствияЭталоновИзменения.База)
	               |			И (СоответствияЭталонов.ТипЭталона = СоответствияЭталоновИзменения.ТипЭталона)
	               |ГДЕ
	               |	ЕСТЬNULL(СоответствияЭталоновИзменения.НомерСообщения, 0) <= &НомерСообщения
	               |	И СоответствияЭталоновИзменения.Узел = &Узел";  
	
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	УдалитьФайл = Истина;
	
	ПутьВыгрузки = Константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	
	Если Прав(ПутьВыгрузки,1) <> "\" Тогда
		ПутьВыгрузки = ПутьВыгрузки + "\";
	КонецЕсли;

	
	ИмяФайла = ПутьВыгрузки + "mapping_upload.csv";
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
				
	
	ИмяВТ = "et_mapping_temp"; 
	
	Пока Выборка.Следующий() Цикл
		
		МассивРеквизитов = Новый Массив;
		
				
		МассивРеквизитов.Добавить(Выборка.База);
		МассивРеквизитов.Добавить(?(Выборка.ЗначениеЭталона = NULL, 1, 0));
		МассивРеквизитов.Добавить(РаботаСЭталонамиСервер.ПолучитьТаблицуSQL(Выборка.ТаблицаИсточник));
		МассивРеквизитов.Добавить(СокрЛП(Выборка.ГУИДСправочника)); 
		МассивРеквизитов.Добавить(?(Выборка.ТипЭталона = NULL, "", Выборка.ИмяТаблицыSQL));
		МассивРеквизитов.Добавить(?(Выборка.ЗначениеЭталона = NULL, "", XMLСтрока(Выборка.ЗначениеЭталона)));
												
				
		СтрокаЗаписиВТ = СтрСоединить(МассивРеквизитов, Символы.Таб);
		ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);
		
	КонецЦикла;
	
	ФайлНаДиске = Новый Файл(ИмяФайла);
				
	ЗаписьТекста.Закрыть(); 
				
	КомандаЗапускаBCP = Обработка.ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ);

	Обработка.ВыполнитьОбмен(КомандаЗапускаBCP);
	
КонецПроцедуры

Процедура ВыгрузитьВсеСоответствияСчетов() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
   	Обработка = Обработки.ОбменSQL.Создать();

   	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствияСчетов.НастройкаСчета КАК НастройкаСчета,
		|	СоответствияСчетов.НастройкаСчета.УсловиеВЗапрос КАК УсловиеВЗапрос,
		|	СоответствияСчетов.ГУИДСправочника КАК ГУИДСчета,
		|	СоответствияСчетов.База.Наименование КАК База,
		|	СоответствияСчетов.ЗначениеЭталона КАК ЗначениеЭталона,
		|	СоответствияСчетов.НастройкаСчета.ПоляВЗапрос КАК ПоляВЗапрос
		|ИЗ
		|	РегистрСведений.СоответствияСчетов КАК СоответствияСчетов
		|ГДЕ
		|	(СоответствияСчетов.База.Локальная
		|			ИЛИ СоответствияСчетов.База.МаппингВЦентре)";
	
	РезультатЗапроса = Запрос.Выполнить();    
	
	ПутьВыгрузки = Константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	
	Если Прав(ПутьВыгрузки,1) <> "\" Тогда
		ПутьВыгрузки = ПутьВыгрузки + "\";
	КонецЕсли;
	
	ИмяФайла = ПутьВыгрузки + "ChartOfAccountsMapping_upload.csv";
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);

	МассивСубконтоДляВыгрузки = РаботаСЭталонамиСервер.ПолучитьМассивСубконто();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи  
				
		Если Выборка.НастройкаСчета = Справочники.НастройкиОтбораСчетов.ПустаяСсылка() Тогда
			//Простой мэппинг   
			
			МассивРеквизитов = Новый Массив;

			МассивРеквизитов.Добавить(Выборка.База);                   
			МассивРеквизитов.Добавить(Выборка.ГУИДСчета);                   
			МассивРеквизитов.Добавить(XMLСтрока(Выборка.ЗначениеЭталона));
			МассивРеквизитов.Добавить(1);    //Простой маппинг
			МассивРеквизитов.Добавить("");   //Организация
			МассивРеквизитов.Добавить("");   //Валюта
			Для каждого Субконто из МассивСубконтоДляВыгрузки Цикл
				МассивРеквизитов.Добавить("");
			КонецЦикла;	
			МассивРеквизитов.Добавить("");  
			СтрокаЗаписиВТ = СтрСоединить(МассивРеквизитов, Символы.Таб);
			ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);

		Иначе
			//Сложный мэппинг 
			ТекстЗапроса = ПолучитьЗапросДляСложногоМаппинга(Выборка.ПоляВЗапрос, Выборка.УсловиеВЗапрос, Выборка.База, Выборка.ГуидСчета);
			Если ТекстЗапроса = "" Тогда
			
			Иначе
				Коннектор = ОбменSQLСервер.ПолучитьКоннектор();
				Коннектор.ЗаписьОшибокВЖурналРегистраций = Истина;
				Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(ТекстЗапроса);
				Если Не Результат.ЕстьОшибки Тогда
					Для каждого СтрокаМаппинга из Результат.Данные Цикл
						МассивРеквизитов = Новый Массив;

						МассивРеквизитов.Добавить(Выборка.База);                   
						МассивРеквизитов.Добавить(Выборка.ГУИДСчета);                   
						МассивРеквизитов.Добавить(XMLСтрока(Выборка.ЗначениеЭталона));
						МассивРеквизитов.Добавить(0);    //Сложный маппинг
						МассивРеквизитов.Добавить("");   //Организация
						МассивРеквизитов.Добавить("");   //Валюта
                        Для каждого Субконто из МассивСубконтоДляВыгрузки Цикл
							МассивРеквизитов.Добавить(?(СтрокаМаппинга.Свойство(Субконто), СтрокаМаппинга[Субконто],""));
						КонецЦикла;						
						МассивРеквизитов.Добавить("");  
		
						СтрокаЗаписиВТ = СтрСоединить(МассивРеквизитов, Символы.Таб);
						ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
				
	
		
	КонецЦикла;
	
	
	ФайлНаДиске = Новый Файл(ИмяФайла);
				
	ЗаписьТекста.Закрыть(); 
	
	Команда = Обработка.Соединение(); 
	Команда.CommandText = "TRUNCATE TABLE map_ChartOfAccountsMapping_temp";
	Команда.Execute();
	
	
	ИмяВТ = "map_ChartOfAccountsMapping_temp";
	КомандаЗапускаBCP = Обработка.ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ);

	Обработка.ВыполнитьОбмен(КомандаЗапускаBCP);
	//

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецПроцедуры

Процедура ВыгрузитьСоответствияСчетов(НомерСообщения, Узел) Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
   	Обработка = Обработки.ОбменSQL.Создать();

   	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствияСчетов.НастройкаСчета КАК НастройкаСчета,
		|	СоответствияСчетов.НастройкаСчета.УсловиеВЗапрос КАК НастройкаСчетаУсловиеВЗапрос,
		|	СоответствияСчетов.ГУИДСправочника КАК ГУИДСправочника,
		|	СоответствияСчетов.База.Наименование КАК База,
		|	СоответствияСчетов.ЗначениеЭталона КАК ЗначениеЭталона
		|ИЗ
		|	РегистрСведений.СоответствияЭталонов.Изменения КАК СоответствияЭталоновИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияСчетов КАК СоответствияСчетов
		|		ПО СоответствияЭталоновИзменения.База = СоответствияСчетов.База
		|ГДЕ
		|	ЕСТЬNULL(СоответствияЭталоновИзменения.НомерСообщения, 0) <= &НомерСообщения
		|	И СоответствияЭталоновИзменения.Узел = &Узел
		|	И (СоответствияСчетов.База.Локальная
		|			ИЛИ СоответствияСчетов.База.МаппингВЦентре)"; 
		
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();    
	
	ПутьВыгрузки = Константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	
	Если Прав(ПутьВыгрузки,1) <> "\" Тогда
		ПутьВыгрузки = ПутьВыгрузки + "\";
	КонецЕсли;
	
	ИмяФайла = ПутьВыгрузки + "ChartOfAccountsMapping_upload.csv";
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);

	МассивСубконтоДляВыгрузки = РаботаСЭталонамиСервер.ПолучитьМассивСубконто();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи  
		МассивРеквизитов = Новый Массив;
		
		Если Выборка.НастройкаСчета = Справочники.НастройкиОтбораСчетов.ПустаяСсылка() Тогда
			//Простой мэппинг   
			
			МассивРеквизитов.Добавить(Выборка.База);                   
			МассивРеквизитов.Добавить(Выборка.ГУИДСправочника);                   
			МассивРеквизитов.Добавить(XMLСтрока(Выборка.ЗначениеЭталона));
			МассивРеквизитов.Добавить(1);    //Простой маппинг
			МассивРеквизитов.Добавить("");   //Организация
			МассивРеквизитов.Добавить("");   //Валюта
			Для каждого Субконто из МассивСубконтоДляВыгрузки Цикл
				МассивРеквизитов.Добавить("");
	        КонецЦикла;			
		Иначе
			//Сложный мэппинг
			
		КонецЕсли;
		
		СтрокаЗаписиВТ = СтрСоединить(МассивРеквизитов, Символы.Таб);
		ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);
				
	КонецЦикла;
	
	
	ФайлНаДиске = Новый Файл(ИмяФайла);
				
	ЗаписьТекста.Закрыть(); 
	
	ИмяВТ = "map_ChartOfAccountsMapping_temp";
	КомандаЗапускаBCP = Обработка.ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ);

	Обработка.ВыполнитьОбмен(КомандаЗапускаBCP);
	//

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецПроцедуры

Функция ПолучитьУзелОменаЭталонами() Экспорт
	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Эталоны.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.Эталоны КАК Эталоны
	               |ГДЕ
	               |	Эталоны.Ссылка <> &ЭтотУзел
	               |	И Эталоны.ТипУзла = &ТипУзла";
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Эталоны.ЭтотУзел()); 
	Запрос.УстановитьПараметр("ТипУзла", Перечисления.ТипыУзлов.DWH);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		возврат Выборка.Ссылка;
	Иначе
		возврат ПланыОбмена.Эталоны.ПустаяСсылка();
	КонецЕсли;
	
	
КонецФункции

Функция ПреобразоватьОбъектВЗначение(ОбъектПреобразования, ЭтоGUID = Ложь, РазрядностьДробнойЧастиЧисла = 2)
	
	ТипЗначения = ТипЗнч(ОбъектПреобразования);
	Если ТипЗначения = Тип("Дата") Тогда
		Значение = Формат(ОбъектПреобразования, "ДФ = гггг-ММ-дд");
		Попытка
			Значение = Значение + " " + Формат(ОбъектПреобразования, "ДФ = ЧЧ:мм:сс");
		Исключение
			Значение = Значение + " 00:00:00";	
		КонецПопытки;
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Значение = Формат(ОбъектПреобразования, "ЧГ=0;ЧН=0;ЧРД=.;ЧДЦ=" + Строка(РазрядностьДробнойЧастиЧисла));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Если ОбъектПреобразования = Истина Тогда
			Значение = "1";
		Иначе
			Значение = "0";
		КонецЕсли;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Значение = УбратьЛишниеСимволы(ОбъектПреобразования);	
	ИначеЕсли ЭтоGUID Тогда
		Значение = XMLСтрока(ОбъектПреобразования);
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

Функция УбратьЛишниеСимволы(Строка)
	
	Рез = СтрЗаменить(Строка, Символы.Таб, " ");
	Рез = СтрЗаменить(Рез, Символы.ПС, " ");
	Рез = СокрЛП(Рез);
	Пока ОбщегоНазначенияКлиентСервер.ПоискПоСтроке(Рез, "  ") > 0 Цикл
		Рез = СтрЗаменить(Рез, "  ", " ");
	КонецЦикла;
	Возврат Рез;

КонецФункции

Процедура ЗапускСозданияУстановкиСоответствий() Экспорт
	
	МассивЛогов = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СпособыПодбораЭталонов.ТипЭталона КАК ТипЭталона,
	|	СпособыПодбораЭталонов.Ссылка КАК СпособЗаполнения,
	|	МАКСИМУМ(УстановкаСоответствий.КонецПериода) КАК КонецПериода
	|ИЗ
	|	Справочник.СпособыПодбораЭталонов КАК СпособыПодбораЭталонов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаСоответствий КАК УстановкаСоответствий
	|		ПО (УстановкаСоответствий.СпособЗаполнения = СпособыПодбораЭталонов.Ссылка)
	|ГДЕ
	|	СпособыПодбораЭталонов.ПоРегламенту
	|
	|СГРУППИРОВАТЬ ПО
	|	СпособыПодбораЭталонов.Ссылка,
	|	СпособыПодбораЭталонов.ТипЭталона
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(УстановкаСоответствий.КонецПериода) < &КонецПрошлогоМесяца
	|ИЛИ МАКСИМУМ(УстановкаСоответствий.КонецПериода) IS NULL ";
	Запрос.УстановитьПараметр("КонецПрошлогоМесяца", НачалоДня(КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1))));
	Запрос.Выполнить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		
			Отказ = Ложь; 
			Ошибка = "";
			НоваяУстановка = Документы.УстановкаСоответствий.СоздатьДокумент();
			НоваяУстановка.Дата = ТекущаяДата();  
			НоваяУстановка.СпособЗаполнения = Выборка.СпособЗаполнения;
			НоваяУстановка.ТипЭталона = Выборка.ТипЭталона;                                                                                     
			// Начало периода  - начало дня следующего за концом периода предыдущей выборки, либо пустая дата
			НоваяУстановка.НачалоПериода = ?(ЗначениеЗаполнено(Выборка.КонецПериода), КонецДня(Выборка.КонецПериода) + 1, Дата(1,1,1,0,0,0));   
			//конец периода - конец предыдущего месяца.
			НоваяУстановка.КонецПериода = КонецМесяца(КонецМесяца(ДобавитьМесяц(ТекущаяДата(), - 1))); 		
			НоваяУстановка.Комментарий = "Создан автоматически по регламенту";
			 
			
			
			НоваяУстановка.ЗаполнитьПараметры(Отказ);	
			
			НоваяУстановка.Записать(РежимЗаписиДокумента.Запись);
			
			Начало = ТекущаяДатаСеанса();
			
			НоваяУстановка.ЗаполнитьИзБазы(Отказ, Ошибка = "");  
			
			Конец = ТекущаяДатаСеанса();
			
			
			Если Отказ Тогда
						
				МассивЛогов.Добавить(ЗаписьВЖурналУстановкиСоответствий(Начало, Конец, НоваяУстановка.Ссылка, "Заполнение данных из БД", Ошибка, Выборка.СпособЗаполнения));	
			Иначе
						
				МассивЛогов.Добавить(ЗаписьВЖурналУстановкиСоответствий(Начало, Конец, НоваяУстановка.Ссылка, "Заполнение данных из БД",, Выборка.СпособЗаполнения));
						
			КонецЕсли; 
			
			НоваяУстановка.Записать(РежимЗаписиДокумента.Запись); 	
			
			Если Не Отказ Тогда
			
				Для каждого СтрокаДействий из Выборка.СпособЗаполнения.РегламентныеДействия Цикл
					Начало = ТекущаяДатаСеанса();
					Отказ = Ложь; //на каждом этапе проверяем был ли отказ, если был, то записываем ошибку.
					Ошибка = "";
					Если СтрокаДействий.Действие = Перечисления.СпособыПодбораЭталонов.ПоКлючам Тогда
						 НоваяУстановка.ПодобратьЭталоныПоЧастиСтроки(Отказ, Ошибка);
					ИначеЕсли СтрокаДействий.Действие = Перечисления.СпособыПодбораЭталонов.ПоПравилам Тогда
						НоваяУстановка.ПодобратьЭталоныПоПравилам(Отказ, Ошибка);					          
					ИначеЕсли СтрокаДействий.Действие = Перечисления.СпособыПодбораЭталонов.ПоРеквизитам Тогда
						НоваяУстановка.ПодобратьЭталоныПоРеквизитам(Отказ, Ошибка);	
					ИначеЕсли СтрокаДействий.Действие = Перечисления.СпособыПодбораЭталонов.ПоУмолчанию Тогда
						НоваяУстановка.ПодобратьЭталоныПоУмолчанию(Отказ, Ошибка);		
					КонецЕсли;	
					
					Конец = ТекущаяДатаСеанса();
					
					Если Отказ Тогда
						
						МассивЛогов.Добавить(ЗаписьВЖурналУстановкиСоответствий(Начало, Конец, НоваяУстановка.Ссылка, "Заполнение эталонов", Ошибка, Строка(СтрокаДействий.Действие)));	
					Иначе
						
						МассивЛогов.Добавить(ЗаписьВЖурналУстановкиСоответствий(Начало, Конец, НоваяУстановка.Ссылка, "Заполнение эталонов",, Строка(СтрокаДействий.Действие)));
						
					КонецЕсли;						
					
				КонецЦикла;                                      
				
			НоваяУстановка.Записать(РежимЗаписиДокумента.Запись);	
							
			КонецЕсли; 		
				
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗаписьВЖурналУстановкиСоответствий(ДатаНачала, ДатаОкончания, Документ, Событие, ОписаниеОшибки = "", Информация = "") 
	
	МенеджерЗаписи = РегистрыСведений.ЖурналУстановкиСоответствий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.GUID = XmlСтрока(Новый УникальныйИдентификатор);
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Событие = Событие;
	МенеджерЗаписи.ДатаНачала = ДатаНачала;
	МенеджерЗаписи.ДатаОкончания = ДатаОкончания;
	МенеджерЗаписи.Длительность = ДатаОкончания - ДатаНачала;
	МенеджерЗаписи.ДлительностьСтрока = Формат(Дата(1,1,1,0,0,0) + МенеджерЗаписи.Длительность,"ДФ=ЧЧ:мм:сс"); 
	МенеджерЗаписи.Информация = Информация;                                           
	МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки;	
	МенеджерЗаписи.Записать();

	
	Возврат МенеджерЗаписи.GUID;
КонецФункции



Функция ПроверитьСтатистикуЗагрузки(База, GUID) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СтатистикаЗагрузки.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.База = База;
	МенеджерЗаписи.GUID = GUID;
	МенеджерЗаписи.Прочитать();
	
	Результат = Новый Структура;
	Если ЗначениеЗаполнено(МенеджерЗаписи.База) Тогда
		Результат.Вставить("Обработан", ?(МенеджерЗаписи.Обработан, "1", "0"));	
		Результат.Вставить("ЕстьОшибки", ?(МенеджерЗаписи.ЕстьОшибки, "1", "0"));
		Результат.Вставить("ЗапросНеНайден", "0");
	Иначе
		Результат.Вставить("Обработан", "0");	
		Результат.Вставить("ЕстьОшибки", "0");
		Результат.Вставить("ЗапросНеНайден", "1");	
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(Результат);
	
КонецФункции

Процедура РассылкаУведомленийКонтроляДанныхОСВ() Экспорт
	
    Обработка = Обработки.КонтрольДанныхОСВ.Создать(); 
	Обработка.ВыполнитьРегламентноеЗадание();
	
КонецПроцедуры

Процедура РассылкаУведомленийОСобытияхБаз() Экспорт
	
    Обработка = Обработки.РассылкаУведомленийОСобытияхБаз.Создать(); 
	Обработка.ВыполнитьРегламентноеЗадание();
	
КонецПроцедуры

#Область Логирование
//++
Процедура ОтправитьЛоги(МассивЛогов, ЕстьОшибки = Ложь) Экспорт;
	
	возврат;
	Если МассивЛогов.Количество() = 0 Тогда
		возврат;
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЖурналОбменаДанных.Событие КАК Событие,
		               |	ЖурналОбменаДанных.ДатаНачала КАК ДатаНачала,
		               |	ЖурналОбменаДанных.ДатаОкончания КАК ДатаОкончания,
		               |	ЖурналОбменаДанных.База КАК БазаНаименование,
		               |	ЖурналОбменаДанных.ОписаниеОшибки КАК ОписаниеОшибки,
		               |	Базы.АдресаДляОповещения КАК АдресаДляОповещения,
		               |	Базы.Наименование КАК Наименование,
		               |	Базы.Ссылка КАК База
		               |ИЗ
		               |	РегистрСведений.ЖурналОбменаДанных КАК ЖурналОбменаДанных
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Базы КАК Базы
		               |		ПО (ЖурналОбменаДанных.База = Базы.Ссылка
		               |				ИЛИ ЖурналОбменаДанных.База = ЗНАЧЕНИЕ(Справочник.Базы.ПустаяСсылка))
		               |ГДЕ
		               |	ЖурналОбменаДанных.GUID В(&СписокЗаписей)
		               |	И Базы.АдресаДляОповещения <> """"
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаНачала
		               |ИТОГИ ПО
		               |	База";
		
		Запрос.УстановитьПараметр("СписокЗаписей", МассивЛогов);
		
		РезультатЗапроса = Запрос.Выполнить(); 
		ВыборкаБазы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "База");
		
		
		Пока ВыборкаБазы.Следующий() Цикл
			
			ВыборкаДетали = ВыборкаБазы.Выбрать();
			
			СтрокиПисьма = Новый Массив(); 
			СтрокиПисьма.Добавить("<html><body><h1>Лог загрузки данных в SQL данных базы "+  ВыборкаБазы.Наименование +"</h1>");

			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаСобытия = "<p>" + ВыборкаДетали.Событие + "<br> 
						| Начало: " + ВыборкаДетали.ДатаНачала + "<br>
						| Окончание: "  + ВыборкаДетали.ДатаНачала;
				СтрокаСобытия = СтрокаСобытия + ?(ЗначениеЗаполнено(ВыборкаДетали.ОписаниеОшибки), "Ошибка: " + ВыборкаДетали.ОписаниеОшибки, "");
			    СТрокиПисьма.Добавить(СтрокаСобытия);
				
			КонецЦикла;
			СтрокиПисьма.Добавить("</body></html>"); 
			
			Попытка
				УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
				ПараметрыОтправки = Новый Структура;
				ПараметрыОтправки.Вставить("Кому", ВыборкаБазы.База.АдресаДляОповещения);
				//07.09.2023 Корыткин Кибернетика
				ПараметрыОтправки.Вставить("Тема", ?(ЕстьОшибки,"Загрузка данных в SQL (С ОШИБКАМИ) " + ВыборкаБазы.Наименование ,"Загрузка данных в SQL (УСПЕШНО) " + ВыборкаБазы.Наименование));
				ПараметрыОтправки.Вставить("Тело", СтрСоединить(СтрокиПисьма, Символы.ПС)); 
				ПараметрыОтправки.Вставить("ТипТекста", "HTML"); //Корыткин А.А. 30.06.2023	
				РаботаСПочтовымиСообщениямиСлужебный.ОтправитьСообщение(УчетнаяЗапись, ПараметрыОтправки);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ЗаписьВЖурналОбмена(ДатаНачала, ДатаОкончания, Событие, База = "", ОписаниеОшибки = "", Информация = "")  Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОбменаДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.GUID = XmlСтрока(Новый УникальныйИдентификатор);
	МенеджерЗаписи.Событие = Событие;
	МенеджерЗаписи.ДатаНачала = ДатаНачала;
	МенеджерЗаписи.ДатаОкончания = ДатаОкончания;
	МенеджерЗаписи.Длительность = ДатаОкончания - ДатаНачала;
	МенеджерЗаписи.ДлительностьСтрока = Формат(Дата(1,1,1,0,0,0) + МенеджерЗаписи.Длительность,"ДФ=ЧЧ:мм:сс"); 
	МенеджерЗаписи.Информация = Информация;                                           
	МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки; 
	МенеджерЗаписи.База = ?(База = "", Справочники.Базы.ПустаяСсылка(), База);
	МенеджерЗаписи.Записать();
	
	Возврат МенеджерЗаписи.GUID; 
	
КонецФункции

Процедура ЗаписатьСтатистикуОбмена(GUID, ДатаНачала, ДатаОкончания, Статус, ЕстьОшибки = Ложь, ОписаниеОшибки = "")  Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СтатистикаВыгрузкиЭталонов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.GUID = GUID;
	МенеджерЗаписи.Статус = Статус;
	МенеджерЗаписи.ДатаНачала = ДатаНачала;
	МенеджерЗаписи.ДатаОкончания = ДатаОкончания;
	МенеджерЗаписи.ЕстьОшибки = ЕстьОшибки;                                           
	МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки; 
	МенеджерЗаписи.Записать(); 
	
КонецПроцедуры

//-- 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗапросДляСложногоМаппинга(Поля, Условия, База, Счет)
	
	Если Поля = "" Тогда
		Возврат "";
	Иначе
		Текст = "SELECT DISTINCT " + Поля + "
		|FROM turnovers Where Base = '" + База + "' AND Account = '" + Счет + "'
		|AND " + СтрЗаменить(Условия, "WHERE", "");
		
		Возврат Текст;
	КонецЕсли;	
КонецФункции	
#КонецОбласти
