

#Область ПрограммныйИнтерфейс
// Код процедур и функций 
 Функция ПолучитьТаблицуSQL(ОбъектИсточник) Экспорт
	
	Если ТипЗнч(ОбъектИсточник) = Тип("СправочникСсылка.ОбъектыКВыгрузке") Тогда
		возврат Стрзаменить(ОбъектИсточник.НаименованиеТаблицыSQL, "_tmp", ""); 
	//ИначеЕсли ТипЗнч(ОбъектИсточник) = Тип("СправочникСсылка.ОбъектыБазКВыгрузке") Тогда
	//	возврат ОбъектИсточник.СтруктураТаблицы.Наименование; 
	
	ИначеЕсли ТипЗнч(ОбъектИсточник) = Тип("СправочникСсылка.СтруктураТаблицSQL") Тогда
        возврат Стрзаменить(ОбъектИсточник.Наименование, "_tmp", "");
	Иначе
		возврат "";
	КонецЕсли;    
	
КонецФункции

Функция ПолучитьТипЭталонаПоИдентификатору(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыЭталонов.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ТипыЭталонов КАК ТипыЭталонов
		|ГДЕ
		|	ТипыЭталонов.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат ПланыВидовХарактеристик.ТипыЭталонов.ПустаяСсылка();
	
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьТипИсточника(НаименованиеОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураТаблицSQL.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыКВыгрузке КАК ОбъектыКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураТаблицSQL КАК СтруктураТаблицSQL
		|		ПО ОбъектыКВыгрузке.НаименованиеТаблицыSQL = СтруктураТаблицSQL.Наименование
		|ГДЕ
		|	ОбъектыКВыгрузке.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Неопределено;
	
	КонецЕсли;
	
	
КонецФункции

Функция ОпределитьЗначениеЭталона(ГУИДЭталона, ТипЭталона) Экспорт 
	
	Если ТипЭталона = "СтатьиЗатрат" Тогда 
		возврат Справочники.СтатьиЗатрат.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДЭталона));
	ИначеЕсли ТипЭталона = "СтатьиДоходы" Тогда
		возврат Справочники.Доходы.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДЭталона));
	ИначеЕсли ТипЭталона = "СтатьиДДС" Тогда
		возврат Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДЭталона));
	ИначеЕсли ТипЭталона = "ТоварыУслуги" Тогда
		возврат Справочники.ТоварыИУслуги.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДЭталона));
	ИначеЕсли ТипЭталона = "ТипыЗатрат" Тогда
		возврат Справочники.ТипыЗатрат.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДЭталона));
	ИначеЕсли ТипЭталона = "ПрочиеПоказатели" Тогда 
		возврат	Справочники.INDПрочиеПоказатели.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДЭталона)); 
	ИначеЕсли ТипЭталона = "КаналыПродаж" Тогда
		возврат Справочники.КаналыПродаж.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДЭталона));
	ИначеЕсли ТипЭталона = "ТипыКредиторов" Тогда 
		возврат	Справочники.ТипыКредиторов.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДЭталона));
	
	Иначе		
		Возврат Неопределено;
	КонецЕсли;	
	

КонецФункции

Функция ВыгрузкаДанныеДляПриемника(ИмяБазы, НомерПринятого) Экспорт
	
	УзелОбмена = ПолучитьУзелОбмена(ИмяБазы);
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат "";
	КонецЕсли;
	
	НомерСообщения = СтрЗаменить(СтрЗаменить(НомерПринятого, " ", ""), Символы.НПП, "");
	Если ЗначениеЗаполнено(НомерСообщения) Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Число(НомерСообщения));
	КонецЕсли;
	
	УдалятьРегистрациюИзмененийПослеВыгрузки = Ложь;
	
	ПравилаОбмена = ПолучитьОбщийМакет("ПравилаОбменаЭталоны");
	ПутьКФайлуПравил = КаталогВременныхФайлов()+"\ПравилаОбменаЭталоны.xml";
	ПравилаОбмена.Записать(ПутьКФайлуПравил);
	
	ВыгрузкаЗагрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ВыгрузкаЗагрузкаДанных.ИмяФайлаПравилОбмена = ПутьКФайлуПравил;
	ВыгрузкаЗагрузкаДанных.ЗагрузитьПравилаОбмена();
	ВыгрузкаЗагрузкаДанных.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки=?(УдалятьРегистрациюИзмененийПослеВыгрузки,1,0); 
		
	МассивПравил = Неопределено;
	ОтметитьПравилаВыгрузки(ВыгрузкаЗагрузкаДанных.ТаблицаПравилВыгрузки, МассивПравил, УзелОбмена);
	
	ПутьКФайлуДанных = ПолучитьИмяВременногоФайла("xml");
	ВыгрузкаЗагрузкаДанных.ИмяФайлаОбмена		= ПутьКФайлуДанных;
	ВыгрузкаЗагрузкаДанных.НепосредственноеЧтениеВИБПриемнике = Ложь;
	ВыгрузкаЗагрузкаДанных.ВыполнитьВыгрузку();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлуДанных);
	ДанныеВыгрузки = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Неопределено;
	
	Выгружено = Истина;
	
	УдалитьФайлы(ПутьКФайлуДанных);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДанныеВыгрузки", ДанныеВыгрузки);
	СтруктураДанных.Вставить("НомерСообщения", УзелОбмена.НомерОтправленного);
	
	ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();  
    ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);            
    Результат = ЗаписьJSON.Закрыть();

	Возврат Результат;
		
КонецФункции

Процедура ЗагрузитьДанныеСИсточника() Экспорт

	Если Константы.ЭтоБазаИсточникМДМ.Получить() Тогда
		Возврат;
	КонецЕсли;	
	
	ДатаНачала = ТекущаяДатаСеанса();
	НомерОбработаногоСообщения = Константы.НомерПринятогоСообщенияОтМДМ.Получить();
	ИмяБазы = Константы.ИмяБазыВМДМ.Получить();
	
	Попытка
		
		Прокси = ПолучитьПрокси();
		Ответ = Прокси.GetEtalonsChanges(ИмяБазы, НомерОбработаногоСообщения);
		
		Если Ответ = "" Тогда 
			Возврат; 
		КонецЕсли;
		
		Чтение = Новый ЧтениеJSON;
        Чтение.УстановитьСтроку(Ответ);
        Результат = ПрочитатьJSON(Чтение, Истина);
			
		ПутьКФайлуДанныхXML = ПолучитьИмяВременногоФайла("xml");
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(Результат["ДанныеВыгрузки"]);
		ТекстовыйДокумент.Записать(ПутьКФайлуДанныхXML, КодировкаТекста.UTF8);
		
		ОбработкаЗагрузки = Обработки.УниверсальныйОбменДаннымиXML.Создать ();
		ОбработкаЗагрузки.ИмяФайлаОбмена = ПутьКФайлуДанныхXML;
		ОбработкаЗагрузки.ОптимизированнаяЗаписьОбъектов = Истина;
		ОбработкаЗагрузки.ЗагружатьДанныеВРежимеОбмена = Истина;
		ОбработкаЗагрузки.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
		ОбработкаЗагрузки.РежимОбмена = "Загрузка";
		
		ОбработкаЗагрузки.ВыполнитьЗагрузку();
		
		Константы.НомерПринятогоСообщенияОтМДМ.Установить(Результат["НомерСообщения"]);
		
		Событие = "Обновление эталонов из МДМ";
		Обмен.ЗаписьВЖурналОбмена(ДатаНачала,ТекущаяДатаСеанса(),Событие,,,);
	
	Исключение
		
		Событие = "Обновление эталонов из МДМ";
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОписаниеОшибки = ОписаниеОшибки();
		Обмен.ЗаписьВЖурналОбмена(ДатаНачала,ТекущаяДатаСеанса(),Событие,,ОписаниеОшибки,ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций  

Функция ЗапросКДаннымИсточника(Источник, ПоляЗапроса = Неопределено) Экспорт
	
	ИмяТаблицыSQL = РаботаСЭталонамиСервер.ПолучитьТаблицуSQL(Источник);
	

	Если ИмяТаблицыSQL = "" Тогда
		возврат "Не удалось определить таблицу SQL";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураТаблицSQLСтруктураТаблицыSQL.ИмяПоляSQL КАК ИмяПоляSQL,
	               |	СтруктураТаблицSQLСтруктураТаблицыSQL.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Справочник.СтруктураТаблицSQL.СтруктураТаблицыSQL КАК СтруктураТаблицSQLСтруктураТаблицыSQL
	               |ГДЕ
	               |	СтруктураТаблицSQLСтруктураТаблицыSQL.Ссылка = &СтруктураТаблицы
	               |	И СтруктураТаблицSQLСтруктураТаблицыSQL.ИмяПоляSQL <> """"
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";


	Запрос.УстановитьПараметр("СтруктураТаблицы", Источник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Сообщить("Необходимо проверить имена полей SQL в структуре таблиц");
		возврат "";
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	
	ЗапросБД = "SELECT " + Символы.ПС; 
		
	МассивПолей = Новый Массив;      
	ПоляЗапроса = Новый Массив;

		
	//МассивПолей.Добавить("S.GUID AS GUID");
	//МассивПолей.Добавить("S.Name AS Name");

	
	Пока Выборка.Следующий() Цикл
		
		МассивПолей.Добавить("Data." + Выборка.ИмяПоляSQL + " AS " + Выборка.ИмяПоляSQL);
		ПоляЗапроса.Добавить(Выборка.ИмяПоляSQL);
	КонецЦикла;    
	
	//МассивПолей.Добавить("D.DestGUID AS DestGUID");
	
	ЗапросБД = ЗапросБД + СтрСоединить(МассивПолей, "," + Символы.ПС) +  Символы.ПС+ "FROM [dbo].[" + ИмяТаблицыSQL + "] AS Data";
	
	Возврат ЗапросБД;
	
КонецФункции

Функция ПолучитьТекстЗапросаОчисткиВременныхТаблицЭталонов() Экспорт 
	
	ТекстЗапроса = "DECLARE @name VARCHAR(100) 
	|DECLARE db_cursor CURSOR FOR 
	|SELECT name 
	|FROM sys.objects 
	|WHERE type in (N'U') AND name like '%_temp'
	|OPEN db_cursor  
	|FETCH NEXT FROM db_cursor INTO @name  
	|WHILE @@FETCH_STATUS = 0  
	|BEGIN  
	|      execute ('TRUNCATE TABLE ' + @name)
	|      FETCH NEXT FROM db_cursor INTO @name 
	|END 
	|CLOSE db_cursor  
	|DEALLOCATE db_cursor";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьМассивСубконто() Экспорт
	
	Массив = Новый Массив;
	
	
	Массив.Добавить("Unit");
	Массив.Добавить("BankAccount");
	Массив.Добавить("Cashboxe");
	Массив.Добавить("Revenue");  
	Массив.Добавить("RevenuesFuturePeriod");  
	Массив.Добавить("IntangibleAsset"); 
	Массив.Добавить("FixedAsset"); 
	Массив.Добавить("ConstructionObject");
	Массив.Добавить("Security");
	Массив.Добавить("Nomenclature"); 
	Массив.Добавить("NomenclatureGroup");
	Массив.Добавить("Warehouse");  
	Массив.Добавить("Counterparty");  
	Массив.Добавить("Contract");
	Массив.Добавить("CashFlowItem"); 
	Массив.Добавить("Expenditure"); 
	Массив.Добавить("SpendingFuturePeriod");
	Массив.Добавить("TypeOfPayments"); 
	Массив.Добавить("TypeOfTaxes");  
	Массив.Добавить("Reserve");
	Массив.Добавить("TypeOfAssetsAndLiabilities");   
	Массив.Добавить("Individual");
	
	Возврат Массив;  
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриЗаписиСправочниковЭталоны(Источник, Отказ) Экспорт
	
	Если Не Константы.ЭтоБазаИсточникМДМ.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Узлы = ПолучитьУзлыОбмена();
	
	ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Источник);
	
КонецПроцедуры

Процедура ОтметитьПравилаВыгрузки(ДеревоПравилВыгрузки, МассивПравил = Неопределено, УзелОбмена = Неопределено) Экспорт
	
	фЕстьДопПравила = (МассивПравил <> Неопределено);
	фЕстьУзелОбмена = (УзелОбмена <> Неопределено);
	
	Для Каждого Стр Из ДеревоПравилВыгрузки.Строки Цикл
		
		Если фЕстьДопПравила Тогда
			
			Стр.Включить = ?(МассивПравил.Найти(Стр.Имя) = Неопределено, 0, 1);
			
			Если Стр.ЭтоГруппа Тогда
				
				//если группа помечена, тогда все подчиненные тоже выгружаем (независимо от присутсивя в доп.массиве)
				ОтметитьПравилаВыгрузки(Стр, ?(Стр.Включить=1,Неопределено,МассивПравил), УзелОбмена);
				
			Иначе
				
				Если фЕстьУзелОбмена Тогда
					Стр.СсылкаНаУзелОбмена=УзелОбмена;
				КонецЕсли;
				
				Родитель = Стр.Родитель;//пометим всех родителей по цепочке вверх
				Пока ЗначениеЗаполнено(Родитель) И Родитель.Включить<>МАКС(Стр.Включить,Родитель.Включить) Цикл
					Родитель.Включить = МАКС(Стр.Включить,Родитель.Включить);
					Родитель = Родитель.Родитель;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе // включаем все правила
			
			Стр.Включить = 1;
			Если Стр.ЭтоГруппа Тогда
				
				ОтметитьПравилаВыгрузки(Стр, МассивПравил, УзелОбмена);
				
			ИначеЕсли фЕстьУзелОбмена Тогда
				
				Стр.СсылкаНаУзелОбмена=УзелОбмена;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПрокси()
	
	//ОпределениеТ=Новый WSОпределения("http://192.168.0.101/serv/ws/ОбменДанными.1cws";;);

	//WSСервис=ОпределениеТ.Сервисы[0];

	//прокси=Новый WSПрокси(ОпределениеТ, WSСервис.URIПространстваИмен, WSСервис.Имя, WSСервис.ТочкиПодключения[0].Имя);
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбмена.WebСервис КАК WebСервис,
		|	НастройкиОбмена.Логин КАК Логин,
		|	НастройкиОбмена.Пароль КАК Пароль
		|ИЗ
		|	Константа.НастройкаОбменаМДМ КАК НастройкаОбменаМДМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбмена КАК НастройкиОбмена
		|		ПО НастройкаОбменаМДМ.Значение = НастройкиОбмена.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Пользователь = ВыборкаДетальныеЗаписи.Логин;
		Пароль = ВыборкаДетальныеЗаписи.Пароль;
		ВебСервис = ВыборкаДетальныеЗаписи.WebСервис;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
   	
    ПространствоИмен = "http://ConsEx";
	ИмяСервиса = "ConsEx";
	ИмяТочкиПодключения = "ConsExSoap12";
		
	Попытка
		Определение = Новый WSОпределения(ВебСервис, Пользователь, Пароль);
		Прокси = Новый WSПрокси(Определение, ПространствоИмен, ИмяСервиса, ИмяТочкиПодключения);
		Прокси.Пользователь = Пользователь;
		Прокси.Пароль = Пароль;
	Исключение
		Ошибка = ОписаниеОшибки(); 
		ВызватьИсключение Ошибка;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Прокси;
	
КонецФункции

Функция ПолучитьУзелОбмена(ИмяБазы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Эталоны.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.Эталоны КАК Эталоны
		|ГДЕ
		|	Эталоны.Наименование = &Наименование
		|	И Эталоны.ТипУзла = &ТипУзла
		|	И Эталоны.Ссылка <> &ЭтотУзел";
	
	Запрос.УстановитьПараметр("Наименование", ИмяБазы);
	Запрос.УстановитьПараметр("ТипУзла", Перечисления.ТипыУзлов.ETL);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Эталоны.ЭтотУзел());

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат ПланыОбмена.Эталоны.ПустаяСсылка();
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьУзлыОбмена()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Эталоны.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.Эталоны КАК Эталоны
		|ГДЕ
		|	Эталоны.ТипУзла = &ТипУзла
		|	И Эталоны.Ссылка <> &ЭтотУзел";
	
	Запрос.УстановитьПараметр("ТипУзла", Перечисления.ТипыУзлов.ETL);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Эталоны.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивУзлов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивУзлов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла; 	
	
	Возврат МассивУзлов;
КонецФункции


#КонецОбласти