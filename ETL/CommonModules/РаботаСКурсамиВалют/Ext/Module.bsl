////////////////////////////////////////////////////////////////////////////////
// Подсистема "Валюты"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Загружает курсы валют из Интернета и записывает их в регистр сведений КурсыВалют
//
// Параметры:
//  МассивВалютДляЗагрузкиКуров - Массив - Содержит ссылки на валюты, для которых будут загружены курсы
//  НачалоПериодаЗагрузки - Дата - Дата, начиная с которой будут загружены курсы
//  КонецПериодаЗагрузки - Дата - Дата, по которую будут загружены курсы
//
// Возвращаемое значение:
//  Структура
//     |- ВсеКурсыУспешноЗагружены - Булево - Истина - если все курсы были успешно загружены
//     |                                      Ложь - если хотя бы один курс не удалось загрузить
//     |- Ошибки - Массив - Содержит описание всех ошибок.
//
Функция ЗагрузитьКурсыИзИнтернета(Знач МассивВалютДляЗагрузкиКуров, Знач НачалоПериодаЗагрузки, Знач КонецПериодаЗагрузки) Экспорт
	
	НачатьТранзакцию();
	
	// Массив содержит даты на которые не удалось загрузить файлы курсов
	ОшибкиЗагрузкиФайловКурсов = Новый Массив();
	
	// Массив содержит даты на которые не удалось разобрать загруженные файлы курсов
	ОшибкиРазбораФайловКурсов = Новый Массив();
	
	// Таблица содержит валюты, курсы которых отсутствовали в загруженных файлах курсов
	ТабЗначВалютыБезКурсов = Новый ТаблицаЗначений();
	ТабЗначВалютыБезКурсов.Колонки.Добавить("Дата");
	ТабЗначВалютыБезКурсов.Колонки.Добавить("Валюта");
	МассивВалютыБезКурса = Новый Массив();
	
	ДатаЗагрузки = НачалоДня(НачалоПериодаЗагрузки);
	КонецПериодаЗагрузки = НачалоДня(КонецПериодаЗагрузки);
	
	Пока ДатаЗагрузки <= КонецПериодаЗагрузки Цикл
		
		URLФайлаКурсовВалют = СформироватьURLФайлаКурсовВалют(ДатаЗагрузки);
		
		ФайлУспешноЗагружен = Неопределено; 
		ПолноеИмяФайла = Неопределено; 
		
		ЗагрузитьФайлКурсовВалют(
			URLФайлаКурсовВалют,
			ДатаЗагрузки, 
			ФайлУспешноЗагружен, 
			ПолноеИмяФайла);
		
		Если ФайлУспешноЗагружен Тогда		
				
			ТабЗначКурсыВалют = СоздатьТаблицуЗначенийИзФайлаКурсовВалют(ПолноеИмяФайла);
			
			Если ЗначениеЗаполнено(ТабЗначКурсыВалют) Тогда
				
				МассивВалютыБезКурса.Очистить();				
				
				ЗаписатьКурсыВРегистрКурсыВалют(
					МассивВалютДляЗагрузкиКуров, 
					ДатаЗагрузки, 
					ТабЗначКурсыВалют,
					МассивВалютыБезКурса);
					
				Для Каждого ВалютаБезКурса Из МассивВалютыБезКурса Цикл
					СтрокаТабЗначВалютыБезКурса = ТабЗначВалютыБезКурсов.Добавить();
					СтрокаТабЗначВалютыБезКурса.Дата = ДатаЗагрузки;
					СтрокаТабЗначВалютыБезКурса.Валюта = ВалютаБезКурса;
				КонецЦикла;
					
			Иначе	
				ОшибкиРазбораФайловКурсов.Добавить(ДатаЗагрузки);
			КонецЕсли;	
			
		Иначе
			ОшибкиЗагрузкиФайловКурсов.Добавить(ДатаЗагрузки);	
		КонецЕсли;
		
		ДатаЗагрузки = ДатаЗагрузки + 86400;	
		
	КонецЦикла;
		
	Если ОшибкиЗагрузкиФайловКурсов.Количество() = 0
	   И ОшибкиРазбораФайловКурсов.Количество() = 0 Тогда
		ВсеКурсыУспешноЗагружены = Истина;
	Иначе
		ВсеКурсыУспешноЗагружены = Ложь;	
	КонецЕсли;
	
	Ошибки = СформироватьСообщенияОбОшибкахЗагрузкиКурсовИзИнтернета(
		ОшибкиЗагрузкиФайловКурсов, 
		ОшибкиРазбораФайловКурсов, 
		ТабЗначВалютыБезКурсов);
	
	Результат = Новый Структура();	
	Результат.Вставить("ВсеКурсыУспешноЗагружены", ВсеКурсыУспешноЗагружены);
	Результат.Вставить("Ошибки", Ошибки);
	
	Если ВсеКурсыУспешноЗагружены Тогда 
		
		ЗафиксироватьТранзакцию(); 	
		ВыгрузитьКурсыВалютВSQL();
		
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;  
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив валют, у которох установлен флаг ЗагружатьКурсИзИнтернета
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Массив, каждый элемент массива имеет тип СправочникСсылка.Валюты
//
Функция ПолучитьМассивЗагружаемыхВалют() Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.ЗагружатьКурсИзИнтернета = ИСТИНА
	|	И Валюты.ПометкаУдаления = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Загружает курсы валют на текущую дату.
// Используется в регламентном задании ЗагрузкаКурсовВалют.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗагрузитьАктуальныеКурсыПоРасписанию() Экспорт
	
	ЗаписьЖурналаРегистрации(
		"Валюты. Загрузка курсов валют.",
		УровеньЖурналаРегистрации.Информация,
		Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют,
		Неопределено,
		"Начата регламентная загрузка курсов валют.");
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	
	Результат = ЗагрузитьКурсыИзИнтернета(
		ПолучитьМассивЗагружаемыхВалют(),
		ТекущаяДата,
		ТекущаяДата);
		
	ЗаписатьВЖурналРегистрацииРезультатыЗакрузкиКурсовВалютПоРасписанию(Результат);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Создает массив сообщений об ошибках..
//
// Параметры:
//  ОшибкиЗагрузкиФайловКурсов - Массив - Содержит даты на которые не удалось загрузить файлы курсов
//  ОшибкиРазбораФайловКурсов - Массив - Содержит даты на которые не удалось разобрать загруженные файлы курсов
//  ВалютыБезКурсов - ТаблицаЗначений - Содержит валюты, курсы которых отсутствовали в загруженных файлах курсов
//
// Возвращаемое значение:
//  Массив, содержащий тексты сообщений об ошибках
//
Функция СформироватьСообщенияОбОшибкахЗагрузкиКурсовИзИнтернета(
	Знач ОшибкиЗагрузкиФайловКурсов, 
	Знач ОшибкиРазбораФайловКурсов, 
	Знач ВалютыБезКурсов)
	
	СообщенияОбОшибках = Новый Массив();
	
	// Шаг 1. Формирование сообщений о неудачных загрузках файлов курсов
	
	Если ОшибкиЗагрузкиФайловКурсов.Количество() <> 0 Тогда
		
		СтрокаПериодов = СформироватьСтрокуПериодов(ОшибкиЗагрузкиФайловКурсов);
		
		ТекстСообщения = 
		"Не удалось получить курсы валют на: %СтрокаПериодов%.
		|Возможные причины:
		|  Отсутствует соединение с Интернетом;
		|  Некорректные настройки параметров прокси-сервера;
		|  Недоступен сайт НБ РК.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаПериодов%", СтрокаПериодов);	
		
		СообщенияОбОшибках.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	// Шаг 2. Формирование сообщений о неудачных разборах файлов курсов
	
	Если ОшибкиРазбораФайловКурсов.Количество() <> 0 Тогда
		
		СтрокаПериодов = СформироватьСтрокуПериодов(ОшибкиРазбораФайловКурсов);
		
		ТекстСообщения = 
		"Не удалось получить курсы валют на: %СтрокаПериодов%.
		|Возможные причины:
		|  На сайте НБ РК не опубликованы курсы на эту дату;
		|  Изменился формат файла курсов валют.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаПериодов%", СтрокаПериодов);	
		
		СообщенияОбОшибках.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	// Шаг 3. Формирование сообщений для валют, курсы которых отсутствовали в загруженных файлах курсов
	
	Если ВалютыБезКурсов.Количество() <> 0 Тогда
		
		СгруппированныеВалюты = ВалютыБезКурсов.Скопировать();
		СгруппированныеВалюты.Свернуть("Валюта");
		СгруппированныеВалюты = СгруппированныеВалюты.ВыгрузитьКолонку("Валюта"); 
		
		Для Каждого Валюта Из СгруппированныеВалюты Цикл
			
			Отбор = Новый Структура("Валюта", Валюта);
			ВалютаБезКурсов = ВалютыБезКурсов.Скопировать(Отбор);		
			МассивДат = ВалютаБезКурсов.ВыгрузитьКолонку("Дата");
			
			СтрокаПериодов = СформироватьСтрокуПериодов(МассивДат);
			
			ТекстСообщения = 
			"Не удалось загрузить курс валюты: ""%КодБуквенный%"" на: %СтрокаПериодов%.
			|Возможные причины:
			|  На сайте НБ РК не публикуется курс данной валюты;
			|  На сайте НБ РК данная валюта имеет другой символьный код.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодБуквенный%", Валюта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаПериодов%", СтрокаПериодов);
			
			СообщенияОбОшибках.Добавить(ТекстСообщения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СообщенияОбОшибках;
	
КонецФункции

// Создает массив сообщений об ошибках
//
// Параметры:
//  ОшибкиРазбораФайловКурсов - Массив - Содержит даты на которые не удалось разобрать загруженные файлы курсов
//  ТабЗначВалютыБезКурса - ТаблицаЗначений - Содержит валюты, курсы которых отсутствовали в загруженных файлах курсов
//
// Возвращаемое значение:
//  Соответствие, содержащее тексты всех ошибок. Ключ - это файл, Значение - это текст сообщения об ошибке.
//
Функция СформироватьСообщенияОбОшибкахЗагрузкиКурсовИзФайлов(
	Знач ОшибкиРазбораФайловКурсов, 
	Знач ТабЗначВалютыБезКурса)
	
	СообщенияОбОшибках = Новый Соответствие();

	// Шаг 1. Формирование сообщений о неудачных разборах файлов курсов
	
	Для Каждого Файл Из ОшибкиРазбораФайловКурсов Цикл
		ТекстСообщения = 
		"Не удалось загрузить курсы валют из файла:
		|%ИмяФайла%
		|Файл имеет некорректную структуру.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Файл.Имя);	
		СообщенияОбОшибках.Вставить(Файл, ТекстСообщения);	
	КонецЦикла;
	
	// Шаг 2. Формирование сообщений для валют, курсы которых отсутствовали в файлах	
	
	Если ТабЗначВалютыБезКурса.Количество() <> 0 Тогда
		
		СгруппированныеФайлы = ТабЗначВалютыБезКурса.Скопировать();
		СгруппированныеФайлы.Свернуть("Файл");
		СгруппированныеФайлы = СгруппированныеФайлы.ВыгрузитьКолонку("Файл"); 
		
		Для Каждого Файл Из СгруппированныеФайлы Цикл
			
			Отбор = Новый Структура("Файл", Файл);
			ТабЗначВалютыФайлаБезКурса = ТабЗначВалютыБезКурса.Скопировать(Отбор);
			МассивВалют = ТабЗначВалютыФайлаБезКурса.ВыгрузитьКолонку("Валюта");
			СписокВалют = "";
			Для Каждого Валюта Из МассивВалют Цикл
				СписокВалют = СписокВалют + """" + Валюта + """" + ", ";	
			КонецЦикла;
			СписокВалют = Лев(СписокВалют, СтрДлина(СписокВалют) - 2); 
			
			ТекстСообщения = 
			"Курс %СписокВалют% отсутствует в файле:
			|%ИмяФайла%";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокВалют%", СписокВалют);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Файл.Имя);
			
			СообщенияОбОшибках.Вставить(Файл, ТекстСообщения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СообщенияОбОшибках;
	
КонецФункции

// Формирует строку вида: "01.01.2012 - 05.01.2012, 07.01.2012".
//
// Параметры:
//  МассивДат - Массив - Массив, на основе которого формируется строка.
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьСтрокуПериодов(Знач МассивДат)
	
	СтрокаПериодов = "";
	
	ТабЗначДаты = Новый ТаблицаЗначений();
	ТабЗначДаты.Колонки.Добавить("Дата");
	
	Для Каждого Дата Из МассивДат Цикл
		СтрокаТабЗначДаты = ТабЗначДаты.Добавить();
		СтрокаТабЗначДаты.Дата = Дата;
	КонецЦикла;
	
	ТабЗначДаты.Свернуть("Дата");
	ТабЗначДаты.Сортировать("Дата Возр");	
		
	ТекущаяДата       = Неопределено;
	ДатаНачалаПериода = Неопределено;
	ДатаКонцаПериода  = Неопределено;
	
	Для Каждого СтрокаТабЗначДаты Из ТабЗначДаты Цикл
		
		ДатаСтроки = СтрокаТабЗначДаты.Дата;
		
		Если ДатаНачалаПериода = Неопределено Тогда
			
			ТекущаяДата       = ДатаСтроки;
			ДатаНачалаПериода = ДатаСтроки;
			ДатаКонцаПериода  = ДатаСтроки;
			
		ИначеЕсли ТекущаяДата + 86400 = ДатаСтроки Тогда
			
			ТекущаяДата      = ДатаСтроки;
			ДатаКонцаПериода = ДатаСтроки;
			
		Иначе
			
			Если ДатаНачалаПериода = ДатаКонцаПериода Тогда
				СтрокаПериодов = СтрокаПериодов + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + ", ";	
			Иначе
				СтрокаПериодов = СтрокаПериодов + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") +  
				                 " - " + Формат(ДатаКонцаПериода, "ДФ=dd.MM.yyyy") + ", ";		
			КонецЕсли;
			
			ТекущаяДата       = ДатаСтроки;
			ДатаНачалаПериода = ДатаСтроки;
			ДатаКонцаПериода  = ДатаСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДатаНачалаПериода = ДатаКонцаПериода Тогда
		СтрокаПериодов = СтрокаПериодов + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + ", ";	
	Иначе
		СтрокаПериодов = СтрокаПериодов + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + 
		                 " - " + Формат(ДатаКонцаПериода, "ДФ=dd.MM.yyyy") + ", ";		
	КонецЕсли;
	
	СтрокаПериодов = Сред(СтрокаПериодов, 1, СтрДлина(СтрокаПериодов) - 2); 	
	             
	Возврат СтрокаПериодов;
	
КонецФункции

// Создает URL, который указывает на файл хранящий курсы валют на указанную дату.
//
// Параметры:
//  Дата - Дата - Дата, на которую необходимо сформировать URL файла курсов валют.
//
// Возвращаемое значение:
//  Строка, URL файла хранящего курсы валют на указанную дату 
//
Функция СформироватьURLФайлаКурсовВалют(Знач Дата)
		
	Перем АдресФайлаКурсовВалют;
	
	АдресФайлаКурсовВалют = "http://www.nationalbank.kz/rss/get_rates.cfm?fdate=%Дата%";
	
	СтрокаДатаЗагрузкиКурса = Формат(Дата, "ДФ=dd.MM.yyyy"); // Дата должна быть в формате 01.11.2012
	
	АдресФайлаКурсовВалют = СтрЗаменить(АдресФайлаКурсовВалют, "%Дата%", СтрокаДатаЗагрузкиКурса);
	
	Возврат АдресФайлаКурсовВалют;
	
КонецФункции

// Загружает файл курсов валют из Интернета.
//
// Параметры:
//  URL - Строка - Входящий параметр. Адрес загружаемого файла на веб-сервере;
//  ДатаДляСообщенияОбОшибке - Дата - Входящий параметр. Дата на которую загружается курс.
//                             Используется для формирования сообщения об ошибке.
//  ФайлУспешноЗагружен - Булево - Возвращаемый параметр;
//                        Истина - если файл успешно загружен и помещен во временное хранилище;
//                        Ложь   - если не удалось загрузить файл.
//  АдресФайлаВоВременномХранилище - Строка - Возвращаемый параметр.
//                                   Если ФайлУспешноЗагружен, то содержит адрес файла во временном хранилище.
//
Процедура ЗагрузитьФайлКурсовВалют(
	Знач URL, 
	Знач ДатаДляСообщенияОбОшибке = Неопределено, 
	ФайлУспешноЗагружен, 
	ПолноеИмяФайла)
		
	Результат = СкачатьФайлНаСервере(URL);	
	
	ФайлУспешноЗагружен = Результат.Статус;	
	
	Если ФайлУспешноЗагружен Тогда
		ПолноеИмяФайла = Результат.Путь;
	Иначе
		ПолноеИмяФайла = Неопределено;	
	КонецЕсли;
			
КонецПроцедуры

// Создает таблицу значений из файла курсов валют.
//
// Параметры:
//  ПолноеИмяФайлаКурсовВалют - Текст - Полное имя файла, который содержит курсы валют.
//
// Возвращаемое значение:
//  ТаблицаЗначений, которая имеет колонки СимвольныйКод, Курс, Кратность.
//  Если файл курсов валют не удалось разобрать, то будет возвращена пустая таблица значений.
//
Функция СоздатьТаблицуЗначенийИзФайлаКурсовВалют(Знач ПолноеИмяФайлаИлиАдресВоВременномХранилище)
	
	Перем ТабЗначКурсыВалют;
	
	ПолноеИмяФайлаКурсовВалют = ПолучитьПолноеИмяФайла(ПолноеИмяФайлаИлиАдресВоВременномХранилище);
	
	ТабЗначКурсыВалют = Новый ТаблицаЗначений();
	ТабЗначКурсыВалют.Колонки.Добавить("СимвольныйКод");
	ТабЗначКурсыВалют.Колонки.Добавить("Курс");
	ТабЗначКурсыВалют.Колонки.Добавить("Кратность");
	
	ДокументDOM = ПолучитьDOM(ПолноеИмяФайлаКурсовВалют);
	
	Если ДокументDOM = Неопределено Тогда
		Возврат ТабЗначКурсыВалют; // Возвращается пустая таблица значений	
	КонецЕсли;
	
	Разыменователь = Новый РазыменовательПространствИменDOM("", "");	
	ВсеКурсыВалют = ДокументDOM.ВычислитьВыражениеXPath("/rates/item", ДокументDOM, Разыменователь);		
	
	Пока Истина Цикл
		
		ЭлементКурсВалюты = ВсеКурсыВалют.ПолучитьСледующий();
		
		Если ЭлементКурсВалюты = Неопределено Тогда
			Прервать;	
		КонецЕсли;
		
		Попытка
			СимвольныйКод = ЭлементКурсВалюты.ПолучитьЭлементыПоИмени("title").Элемент(0).ТекстовоеСодержимое;
			Курс          = ЭлементКурсВалюты.ПолучитьЭлементыПоИмени("description").Элемент(0).ТекстовоеСодержимое;
			Кратность     = ЭлементКурсВалюты.ПолучитьЭлементыПоИмени("quant").Элемент(0).ТекстовоеСодержимое;
		Исключение
			Продолжить;	
		КонецПопытки;
			
		СтрокаКурсВалюты = ТабЗначКурсыВалют.Добавить();
		СтрокаКурсВалюты.СимвольныйКод = СимвольныйКод;
		СтрокаКурсВалюты.Курс          = Число(Курс);
		СтрокаКурсВалюты.Кратность     = Число(Кратность);
		
	КонецЦикла;
	
	Возврат ТабЗначКурсыВалют;
	
КонецФункции

Функция ПолучитьПолноеИмяФайла(Знач ПолноеИмяФайлаИлиАдресВоВременномХранилище)
	
	Перем ПолноеИмяФайла;
	
	Если ЭтоАдресВременногоХранилища(ПолноеИмяФайлаИлиАдресВоВременномХранилище) Тогда
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПолноеИмяФайлаИлиАдресВоВременномХранилище);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		ПолноеИмяФайла = ИмяВременногоФайла;
	Иначе
		ПолноеИмяФайла = ПолноеИмяФайлаИлиАдресВоВременномХранилище; 
	КонецЕсли;

	Возврат ПолноеИмяФайла;
	
КонецФункции

// Записывает курсы валют в регистр сведений КурсыВалют
//
// Параметры:
//  МассивВалют - Массив - Каждый элемент массива имеет тип: СправочникСсылка.Валюты.
//                Содержит валюты для которых необходимо сохранить курс в регистре сведений КурсыВалют;
//  Дата - Дата - Дата, на которую необходимо загрузить курс;
//  ТабЗначКурсыВалют - ТаблицаЗначений - Таблица значений, которая является разобранным файлом курсов валют,  
//                      файл курсов валют скачивается с сайта Национального Банка РК
//  МассивВалютБезКурса - Массив - В массив записываются валюты, курсы которых отсутствуют в ТабЗначКурсыВалют
//
Функция ЗаписатьКурсыВРегистрКурсыВалют(
	Знач МассивВалют, 
	Знач Дата, 
	Знач ТабЗначКурсыВалют, 
	МассивВалютБезКурса)
	
	Для Каждого Валюта Из МассивВалют Цикл
		
		СтрокаКурсВалюты = ТабЗначКурсыВалют.Найти(Валюта.БуквенныйКод, "СимвольныйКод");
		
		Если СтрокаКурсВалюты = Неопределено Тогда
			МассивВалютБезКурса.Добавить(Валюта);
		Иначе
			КурсыВалютЗапись = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
			КурсыВалютЗапись.Период    = Дата;
			КурсыВалютЗапись.Валюта    = Валюта;
			КурсыВалютЗапись.Курс      = СтрокаКурсВалюты.Курс;
			КурсыВалютЗапись.Кратность = СтрокаКурсВалюты.Кратность;
			КурсыВалютЗапись.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Создает ДокументDOM для переданного XML файла.
//
// Параметры:
//  ПолноеИмяXMLФайла - Текст - Имя XML Файла на основе которого будет создан ДокументDOM.
//
// Возвращаемое значение:
//  ДокументDOM - если XML файл корректно сформирован; 
//  Неопределено - если XML файл сформирован некорректно.
//
Функция ПолучитьDOM(Знач ПолноеИмяФайла)
	
	Перем ДокументDOM;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	ПостроительDOM = Новый ПостроительDOM();
	
	Попытка
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		ДокументDOM = Неопределено;
	КонецПопытки;
	
	Возврат ДокументDOM;
	
КонецФункции

// Записывает в журнал регистрации сведения о результатах выполнения  регламентного задания "ЗагрузкаКурсовВалют".
//
// Параметры:
//  Результат - Структура - Структура возвращается методом РаботаСКурсамиВалют.ЗагрузитьАктуальныеКурсыПоРасписанию().
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаписатьВЖурналРегистрацииРезультатыЗакрузкиКурсовВалютПоРасписанию(Знач Результат)
	                        
	ВсеКурсыУспешноЗагружены = Результат.ВсеКурсыУспешноЗагружены;
	
	ТекстыВсехОшибок = "При регламентной загрузке курсов валют возникли ошибки:" + Символы.ПС + Символы.ПС;
	
	Если НЕ ВсеКурсыУспешноЗагружены Тогда
		Для Каждого ТекстОшибки Из Результат.Ошибки Цикл
			ТекстыВсехОшибок = ТекстыВсехОшибок + ТекстОшибки + Символы.ПС + Символы.ПС;
		КонецЦикла;			
	КонецЕсли;
	
	ТекстыВсехОшибок = СокрЛП(ТекстыВсехОшибок);
	
	Если ВсеКурсыУспешноЗагружены Тогда
		
		ЗаписьЖурналаРегистрации(
			"Валюты. Загрузка курсов валют.",
			УровеньЖурналаРегистрации.Информация,
			Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют,
			Неопределено,
			"Регламентная загрузка курсов валют успешно завершена.");	
			
	Иначе
				
		ЗаписьЖурналаРегистрации(
			"Валюты. Загрузка курсов валют.",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют,
			Неопределено,
			ТекстыВсехОшибок);
			
	КонецЕсли;
		
КонецПроцедуры

Функция СкачатьФайлНаСервере(URL, Знач ЗаписыватьОшибку = Истина, Перенаправления = Неопределено)

	Если Перенаправления = Неопределено Тогда 
		Перенаправления = Новый Массив; 
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	Сервер        = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;
	Протокол      = СтруктураURI.Схема; 
	
	Если ПустаяСтрока(Протокол) Тогда 
		Протокол = "http";
	КонецЕсли; 
	
	НастройкаСоединения = ПараметрыПолученияФайла(); 
	
	ЗащищенноеСоединение = НастройкаСоединения.ЗащищенноеСоединение;
	ИмяПользователя      = НастройкаСоединения.Пользователь;
	ПарольПользователя   = НастройкаСоединения.Пароль;
	Порт                 = НастройкаСоединения.Порт;
	Таймаут              = НастройкаСоединения.Таймаут;
	
	Если (Протокол = "https" Или Протокол = "ftps") И ЗащищенноеСоединение = Неопределено Тогда
		ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	Если ЗащищенноеСоединение = Истина Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	ИначеЕсли ЗащищенноеСоединение = Ложь Тогда
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Порт = Неопределено Тогда
		Порт = СтруктураURI.Порт;
	КонецЕсли;
	
	Прокси = Неопределено;	
	ПутьДляСохранения = ПолучитьИмяВременногоФайла(); 
			
	Заголовки                    = НастройкаСоединения.Заголовки;
	ИспользоватьАутентификациюОС = НастройкаСоединения.ИспользоватьАутентификациюОС;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			Сервер, 
			Порт, 
			ИмяПользователя, 
			ПарольПользователя,
			Прокси, 
			Таймаут, 
			ЗащищенноеСоединение, 
			ИспользоватьАутентификациюОС);
		
		Сервер = Соединение.Сервер;
		Порт   = Соединение.Порт;
		
		ЗапросHTTP = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
		ЗапросHTTP.Заголовки.Вставить("Accept-Charset", "UTF-8");
		ЗапросHTTP.Заголовки.Вставить("X-1C-Request-UID", Строка(Новый УникальныйИдентификатор));
		ОтветHTTP = Соединение.Получить(ЗапросHTTP, ПутьДляСохранения);
		
	Исключение
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить HTTP-соединение с сервером %1:%2
				|по причине:
				|%3'"),
			Сервер, Формат(Порт, "ЧГ="),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Если ЗаписыватьОшибку Тогда
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		КонецЕсли;
		
		Возврат РезультатПолученияФайла(Ложь, ТекстОшибки);
		
	КонецПопытки;
	
	Попытка
		
		Если ОтветHTTP.КодСостояния = 301 // 301 Moved Permanently
			Или ОтветHTTP.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			Или ОтветHTTP.КодСостояния = 303 // 303 See Other by GET
			Или ОтветHTTP.КодСостояния = 307 // 307 Temporary Redirect
			Или ОтветHTTP.КодСостояния = 308 Тогда // 308 Permanent Redirect
			
			Если Перенаправления.Количество() > 7 Тогда
				ВызватьИсключение 
					НСтр("ru = 'Превышено количество перенаправлений.'");
			Иначе 
				
				НовыйURL = ОтветHTTP.Заголовки["Location"];
				
				Если НовыйURL = Неопределено Тогда 
					ВызватьИсключение 
						НСтр("ru = 'Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'");
				КонецЕсли;
				
				НовыйURL = СокрЛП(НовыйURL);
				
				Если ПустаяСтрока(НовыйURL) Тогда
					ВызватьИсключение 
						НСтр("ru = 'Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'");
				КонецЕсли;
				
				Если Перенаправления.Найти(НовыйURL) <> Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Циклическое перенаправление.
						|Попытка перейти на %1 уже выполнялась ранее.'"),
						НовыйURL);
				КонецЕсли;
				
				Перенаправления.Добавить(URL);
				
				Если Не СтрНачинаетсяС(НовыйURL, "http") Тогда
					// <схема>://<хост>:<порт>/<путь>
					НовыйURL = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1://%2:%3/%4", Протокол, Сервер, Формат(Порт, "ЧГ="), НовыйURL);
				КонецЕсли;
				
				Возврат СкачатьФайлНаСервере(НовыйURL, ЗаписыватьОшибку, Перенаправления);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтветHTTP.КодСостояния < 200 Или ОтветHTTP.КодСостояния >= 300 Тогда
			
			Если ОтветHTTP.КодСостояния = 304 Тогда
				
				Если (ЗапросHTTP.Заголовки["If-Modified-Since"] <> Неопределено
					Или ЗапросHTTP.Заголовки["If-None-Match"] <> Неопределено) Тогда
					ЗаписыватьОшибку = Ложь;
				КонецЕсли;
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сервер убежден, что с вашего последнего запроса его ответ не изменился:
					|%1'"),
					РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
				
				ДописатьТелоОтветаСервера(ПутьДляСохранения, ТекстОшибки);
				
				ВызватьИсключение ТекстОшибки;
				
			ИначеЕсли ОтветHTTP.КодСостояния < 200
				Или ОтветHTTP.КодСостояния >= 300 И ОтветHTTP.КодСостояния < 400 Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неподдерживаемый ответ сервера:
					|%1'"),
					РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
				
				ДописатьТелоОтветаСервера(ПутьДляСохранения, ТекстОшибки);
				
				ВызватьИсключение ТекстОшибки;
				
			ИначеЕсли ОтветHTTP.КодСостояния >= 400 И ОтветHTTP.КодСостояния < 500 Тогда 
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при выполнении запроса:
					|%1'"),
					РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
				
				ДописатьТелоОтветаСервера(ПутьДляСохранения, ТекстОшибки);
				
				ВызватьИсключение ТекстОшибки;
				
			Иначе 
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера при обработке запроса к ресурсу:
					|%1'"),
					РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));
				
				ДописатьТелоОтветаСервера(ПутьДляСохранения, ТекстОшибки);
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файл %1 с сервера %2:%3
			|по причине:
			|%4'"),
			URL, Сервер, Формат(Порт, "ЧГ="),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Если ЗаписыватьОшибку Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				|
				|Трассировка:
				|ЗащищенноеСоединение: %2
				|Таймаут: %3
				|ИспользоватьАутентификациюОС: %4'"),
				ТекстОшибки,
				Формат(Соединение.Защищенное, НСтр("ru = 'БЛ=Нет; БИ=Да'")),
				Формат(Соединение.Таймаут, "ЧГ=0"),
				Формат(Соединение.ИспользоватьАутентификациюОС, НСтр("ru = 'БЛ=Нет; БИ=Да'")));
			
			ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке); 
			
		КонецЕсли;
		
		Возврат РезультатПолученияФайла(Ложь, ТекстОшибки, ОтветHTTP);
		
	КонецПопытки;		
	
	Возврат РезультатПолученияФайла(Истина, ПутьДляСохранения, ОтветHTTP);
	
КонецФункции  

Функция ПараметрыПолученияФайла()
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПутьДляСохранения", Неопределено);
	ПараметрыПолучения.Вставить("Пользователь", Неопределено);
	ПараметрыПолучения.Вставить("Пароль", Неопределено);
	ПараметрыПолучения.Вставить("Порт", Неопределено);
	ПараметрыПолучения.Вставить("Таймаут", 10);
	ПараметрыПолучения.Вставить("ЗащищенноеСоединение", Неопределено);
	ПараметрыПолучения.Вставить("ПассивноеСоединение", Неопределено);
	ПараметрыПолучения.Вставить("Заголовки", Новый Соответствие);
	ПараметрыПолучения.Вставить("ИспользоватьАутентификациюОС", Ложь);
	ПараметрыПолучения.Вставить("УровеньИспользованияЗащищенногоСоединения", Неопределено);
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Функция РезультатПолученияФайла(Знач Статус, Знач СообщениеПуть, HTTPОтвет = Неопределено)
	
	Результат = Новый Структура("Статус", Статус);
	
	Если Статус Тогда
		Результат.Вставить("Путь", СообщениеПуть);
	Иначе
		Результат.Вставить("СообщениеОбОшибке", СообщениеПуть);
		Результат.Вставить("КодСостояния", 1);
	КонецЕсли;
	
	Если HTTPОтвет <> Неопределено Тогда
		ЗаголовкиОтвета = HTTPОтвет.Заголовки;
		Если ЗаголовкиОтвета <> Неопределено Тогда
			Результат.Вставить("Заголовки", ЗаголовкиОтвета);
		КонецЕсли;
		
		Результат.Вставить("КодСостояния", HTTPОтвет.КодСостояния);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РасшифровкаКодаСостоянияHTTP(КодСостояния)
	
	Если КодСостояния = 304 Тогда // Not Modified
		Расшифровка = НСтр("ru = 'Нет необходимости повторно передавать запрошенные ресурсы.'");
	ИначеЕсли КодСостояния = 400 Тогда // Bad Request
		Расшифровка = НСтр("ru = 'Запрос не может быть исполнен.'");
	ИначеЕсли КодСостояния = 401 Тогда // Unauthorized
		Расшифровка = НСтр("ru = 'Попытка авторизации на сервере была отклонена.'");
	ИначеЕсли КодСостояния = 402 Тогда // Payment Required
		Расшифровка = НСтр("ru = 'Требуется оплата.'");
	ИначеЕсли КодСостояния = 403 Тогда // Forbidden
		Расшифровка = НСтр("ru = 'К запрашиваемому ресурсу нет доступа.'");
	ИначеЕсли КодСостояния = 404 Тогда // Not Found
		Расшифровка = НСтр("ru = 'Запрашиваемый ресурс не найден на сервере.'");
	ИначеЕсли КодСостояния = 405 Тогда // Method Not Allowed
		Расшифровка = НСтр("ru = 'Метод запроса не поддерживается сервером.'");
	ИначеЕсли КодСостояния = 406 Тогда // Not Acceptable
		Расшифровка = НСтр("ru = 'Запрошенный формат данных не поддерживается сервером.'");
	ИначеЕсли КодСостояния = 407 Тогда // Proxy Authentication Required
		Расшифровка = НСтр("ru = 'Ошибка аутентификации на прокси-сервере'");
	ИначеЕсли КодСостояния = 408 Тогда // Request Timeout
		Расшифровка = НСтр("ru = 'Время ожидания сервером передачи от клиента истекло.'");
	ИначеЕсли КодСостояния = 409 Тогда // Conflict
		Расшифровка = НСтр("ru = 'Запрос не может быть выполнен из-за конфликтного обращения к ресурсу.'");
	ИначеЕсли КодСостояния = 410 Тогда // Gone
		Расшифровка = НСтр("ru = 'Ресурс на сервере был перемещен.'");
	ИначеЕсли КодСостояния = 411 Тогда // Length Required
		Расшифровка = НСтр("ru = 'Сервер требует указание ""Content-length."" в заголовке запроса.'");
	ИначеЕсли КодСостояния = 412 Тогда // Precondition Failed
		Расшифровка = НСтр("ru = 'Запрос не применим к ресурсу'");
	ИначеЕсли КодСостояния = 413 Тогда // Request Entity Too Large
		Расшифровка = НСтр("ru = 'Сервер отказывается обработать, слишком большой объем передаваемых данных.'");
	ИначеЕсли КодСостояния = 414 Тогда // Request-URL Too Long
		Расшифровка = НСтр("ru = 'Сервер отказывается обработать, слишком длинный URL.'");
	ИначеЕсли КодСостояния = 415 Тогда // Unsupported Media-Type
		Расшифровка = НСтр("ru = 'Сервер заметил, что часть запроса была сделана в неподдерживаемом формат'");
	ИначеЕсли КодСостояния = 416 Тогда // Requested Range Not Satisfiable
		Расшифровка = НСтр("ru = 'Часть запрашиваемого ресурса не может быть предоставлена'");
	ИначеЕсли КодСостояния = 417 Тогда // Expectation Failed
		Расшифровка = НСтр("ru = 'Сервер не может предоставить ответ на указанный запрос.'");
	ИначеЕсли КодСостояния = 429 Тогда // Too Many Requests
		Расшифровка = НСтр("ru = 'Слишком много запросов за короткое время.'");
	ИначеЕсли КодСостояния = 500 Тогда // Internal Server Error
		Расшифровка = НСтр("ru = 'Внутренняя ошибка сервера.'");
	ИначеЕсли КодСостояния = 501 Тогда // Not Implemented
		Расшифровка = НСтр("ru = 'Сервер не поддерживает метод запроса.'");
	ИначеЕсли КодСостояния = 502 Тогда // Bad Gateway
		Расшифровка = НСтр("ru = 'Сервер, выступая в роли шлюза или прокси-сервера, 
		                         |получил недействительное ответное сообщение от вышестоящего сервера.'");
	ИначеЕсли КодСостояния = 503 Тогда // Server Unavailable
		Расшифровка = НСтр("ru = 'Сервер временно не доступен.'");
	ИначеЕсли КодСостояния = 504 Тогда // Gateway Timeout
		Расшифровка = НСтр("ru = 'Сервер в роли шлюза или прокси-сервера 
		                         |не дождался ответа от вышестоящего сервера для завершения текущего запроса.'");
	ИначеЕсли КодСостояния = 505 Тогда // HTTP Version Not Supported
		Расшифровка = НСтр("ru = 'Сервер не поддерживает указанную в запросе версию протокола HTTP'");
	ИначеЕсли КодСостояния = 506 Тогда // Variant Also Negotiates
		Расшифровка = НСтр("ru = 'Сервер настроен некорректно, и не способен обработать запрос.'");
	ИначеЕсли КодСостояния = 507 Тогда // Insufficient Storage
		Расшифровка = НСтр("ru = 'На сервере недостаточно места для выполнения запроса.'");
	ИначеЕсли КодСостояния = 509 Тогда // Bandwidth Limit Exceeded
		Расшифровка = НСтр("ru = 'Сервер превысил отведенное ограничение на потребление трафика.'");
	ИначеЕсли КодСостояния = 510 Тогда // Not Extended
		Расшифровка = НСтр("ru = 'Сервер требует больше информации о совершаемом запросе.'");
	ИначеЕсли КодСостояния = 511 Тогда // Network Authentication Required
		Расшифровка = НСтр("ru = 'Требуется авторизация на сервере.'");
	Иначе 
		Расшифровка = НСтр("ru = '<Неизвестный код состояния>.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '[%1] %2'"), 
		КодСостояния, 
		Расшифровка);
	
КонецФункции

Процедура ДописатьТелоОтветаСервера(ПутьКФайлу, ТекстОшибки)
	
	ТелоОтветаСервера = ТекстИзHTMLИзФайла(ПутьКФайлу);
	
	Если Не ПустаяСтрока(ТелоОтветаСервера) Тогда 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Сообщение, полученное от сервера:
			           |%2'"),
			ТекстОшибки,
			ТелоОтветаСервера);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстИзHTMLИзФайла(ПутьКФайлу)
	
	ФайлОтвета = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
	ИсходныйТекст = ФайлОтвета.Прочитать(1024 * 15);
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ИсходныйТекст);
	ФайлОтвета.Закрыть();
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач СообщениеОбОшибке)
	
	ЗаписьЖурналаРегистрации(
		"Получение файлов из Интернета",
		УровеньЖурналаРегистрации.Ошибка, , ,
		СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ВыгрузитьКурсыВалютВSQL() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	ПутьВыгрузки = Константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	Если ПутьВыгрузки = "" Тогда
		Сообщить("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	Если Прав(ПутьВыгрузки,1) <> "\" Тогда
		ПутьВыгрузки = ПутьВыгрузки + "\";
	КонецЕсли;
	
	ПапкаДляВыгрузки = ПутьВыгрузки + "tmpExchangeRates\";
	СоздатьКаталог(ПапкаДляВыгрузки);
	
	ВыгрузитьДанныеКурсов(ПапкаДляВыгрузки);
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	
	СтрокаКоманды = "@echo off";
	Обмен.ОбойтиКаталог(ОбменSQL, СтрокаКоманды, НастройкиОбмена, ПапкаДляВыгрузки, "tmpExchangeRates", "tmpExchangeRates");
		
	ОбменSQL.ВыполнитьОбмен(СтрокаКоманды);
		
	Попытка
		УдалитьФайлы(ПапкаДляВыгрузки);
	Исключение
	КонецПопытки;
	
КонецПроцедуры 

Процедура ВыгрузитьДанныеКурсов(ПапкаДляВыгрузки)
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	Команда = ОбменSQL.Соединение();
	Команда.CommandText = 
		"TRUNCATE TABLE [dbo].[map_ExchangeRates]";	
	Команда.Execute();

	ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "map_ExchangeRates" + "\";
	СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КурсыВалют.Период КАК Период,
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	КурсыВалют.Курс КАК Курс,
	               |	КурсыВалют.Кратность КАК Кратность
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Файл = Новый ЗаписьТекста(ПапкаДляВыгрузкиОбъекта + "data.csv");	
	Пока Выборка.Следующий() Цикл	
		СтрокаВыгрузки = Формат(Выборка.Период, "ДФ='гггг-ММ-дд'") + Символы.Таб 
			+ XMLСтрока(Выборка.Валюта) + Символы.Таб 
			+ Формат(Выборка.Курс, "ЧГ=0;ЧН=0;ЧРД=.;ЧДЦ=2") +  Символы.Таб
			+ Формат(Выборка.Кратность, "ЧГ=0;ЧН=0;ЧРД=.;ЧДЦ=2") +  Символы.Таб;
		Файл.ЗаписатьСтроку(СтрокаВыгрузки);	
	КонецЦикла;
	Файл.Закрыть();
		
КонецПроцедуры
