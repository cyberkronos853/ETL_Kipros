
#Область СоединениеСSQL

Функция Соединение() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Попытка
		
		Команда     = Новый COMОбъект("ADODB.Command");
		Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");
		
		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 1800;
		Соединение.ConnectionTimeout = 1800;
		
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
		
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Команда;
	
КонецФункции

Функция СоединениеРепликатор(НастройкиПодключения) Экспорт
	
	НастройкиОбмена = НастройкиПодключения;
	
	Попытка
		
		Команда     = Новый COMОбъект("ADODB.Command");
		Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");
		
		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 3600;
		Соединение.ConnectionTimeout = 3600;
		
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
		
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL (Репликация)", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Команда;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСтруктурыБазы

Функция ПолучитьСписокТаблиц() Экспорт
    //SELECT * FROM INFORMATION_SCHEMA.TABLES
	
	Таблица = Новый ТаблицаЗначений;
	
	//Соединение с рабочей базой
	Команда = ПолучениеОтчетов.Соединение();
	
	Попытка
		
		Запрос = "
			|SELECT * 
			|FROM INFORMATION_SCHEMA.TABLES
			|";
		Команда.CommandText = Запрос;
		Выборка = Команда.Execute();
		Если НЕ Выборка.BOF Тогда
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				ИмяСтолбца = Выборка.Fields.Item(А).Name;  
				Таблица.Колонки.Добавить(ИмяСтолбца);
			КонецЦикла;
			//Выборка.MoveFirst();
			Пока НЕ Выборка.EOF Цикл
				НоваяСтрока = Таблица.Добавить();
				Для А = 0 По Выборка.Fields.Count - 1 Цикл
					НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				КонецЦикла;
				Выборка.MoveNext();
			КонецЦикла;
		КонецЕсли;
		Возврат Таблица;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции

Функция ПолучитьСписокКолонокТаблицы(ИмяТаблицы) Экспорт
    //SELECT * FROM INFORMATION_SCHEMA.TABLES
	
	Таблица = Новый ТаблицаЗначений;
	
	//Соединение с рабочей базой
	Команда = ПолучениеОтчетов.Соединение();
	
	Попытка
		
		Запрос = "
			|SELECT
			|COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '"+ИмяТаблицы+"';
			|";
		Команда.CommandText = Запрос;
		Выборка = Команда.Execute();
		Если НЕ Выборка.BOF Тогда
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				ИмяСтолбца = Выборка.Fields.Item(А).Name;  
				Таблица.Колонки.Добавить(ИмяСтолбца);
			КонецЦикла;
			//Выборка.MoveFirst();
			Пока НЕ Выборка.EOF Цикл
				НоваяСтрока = Таблица.Добавить();
				Для А = 0 По Выборка.Fields.Count - 1 Цикл
					НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				КонецЦикла;
				Выборка.MoveNext();
			КонецЦикла;
		КонецЕсли;
		Возврат Таблица;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции

Функция ПолучитьПараметрыБаз(списокБаз) Экспорт
	СписокБазВОтбор = Новый Массив;
	Для Каждого База Из СписокБаз Цикл
		Для Каждого СтрокаБаза Из База.База.Организации Цикл
			СписокБазВОтбор.Добавить("'"+СтрокаБаза.Организация.КодСправочника+"'");
		КонецЦикла;
	КонецЦикла;
	
	Таблица = Новый ТаблицаЗначений;
	
	//Соединение с рабочей базой
	Команда = ПолучениеОтчетов.Соединение();
	СписокОрганизаций = ПеревестиМассивВСтроку(СписокБазВОтбор,", ",Ложь);
	УсловиеОрганизации = "WHERE [Code] IN (" + СписокОрганизаций + ")";
	Попытка	
		Запрос = "
			|SELECT [GUID]
			|,[Name]
			|,[IIN]
			|,[TerritorialLocation]
			|,[BusinessDirection]
			|,[Subholding]
			|,[ReportingCurrency]
			|,[Code]
			|,[id]
			|FROM [BW].[dbo].[map_Organizations]
			|" + УсловиеОрганизации + "
			|";
		Команда.CommandText = Запрос;
		Выборка = Команда.Execute();
		Если НЕ Выборка.BOF Тогда
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				ИмяСтолбца = Выборка.Fields.Item(А).Name;  
				Таблица.Колонки.Добавить(ИмяСтолбца);
			КонецЦикла;
			//Выборка.MoveFirst();
			Пока НЕ Выборка.EOF Цикл
				НоваяСтрока = Таблица.Добавить();
				Для А = 0 По Выборка.Fields.Count - 1 Цикл
					НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				КонецЦикла;
				Выборка.MoveNext();
			КонецЦикла;
		КонецЕсли;
		Возврат Таблица;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область Репликация

Процедура Репликация() Экспорт
	РепликацияЗапуск();
КонецПроцедуры

Процедура РепликацияЗапуск(Период = неопределено) Экспорт
	
	СписокБаз = ПолучитьСписокОрганизацийДляРепликации();
	НастройкиПодключенияИсходник = Константы.ОсновныеНастройкиОбмена.Получить();
	Пакет = Новый Структура("НомерПакета,НомерСообщенияВПакете,Действие",ТекущаяДата(),0,1);
	
	//Направления = Новый Массив;
	//Для Каждого СтрокаБаза Из СписокБаз Цикл
	//	Если Направления.Найти(СтрокаБаза.НаправлениеРепликации) = Неопределено Тогда
	//		Направления.Добавить(СтрокаБаза.НаправлениеРепликации);
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого Направление Из Направления Цикл
	//	ВыполнитьРепликациюОбщихТаблиц(НастройкиПодключенияИсходник,Направление,СтрокаТаблица,ПараметрыОрганизации,Пакет);
	//КонецЦикла;
	списокнаправлений = Новый массив;	
	Для Каждого СтрокаБаза Из СписокБаз Цикл
		ПараметрыОрганизации = ПараметрыОрганизации(СтрокаБаза);
		СписокТаблиц = СтрокаБаза.НаправлениеРепликации.ТаблицыДляРепликации.Выгрузить();
		СписокТаблиц.Свернуть("НаименованиеТаблицы,АналитикаПоОрганизациям,КолонкаОрганизация,Выгружать");
		Списоктаблиц.Колонки.добавить("Выгружено");

		НастройкаПодключенияКПриемнику = СтрокаБаза.НаправлениеРепликации;
		Для Каждого СтрокаТаблица Из СписокТаблиц Цикл
			Если СтрокаТаблица.Выгружать = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			ВыполнитьРепликациюНаСервереSQL(НастройкиПодключенияИсходник,НастройкаПодключенияКПриемнику,СтрокаТаблица,ПараметрыОрганизации,Пакет,Период);
		КонецЦикла;
		Если списокнаправлений.Найти(НастройкаПодключенияКПриемнику) = неопределено Тогда
			 списокнаправлений.Добавить(НастройкаПодключенияКПриемнику);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого направление из списокнаправлений цикл
		Репликация.ПрочекатьРазницу(направление);
	КонецЦикла;
	
	//ПрочекатьРазницу(НастройкаПодключенияПриемник)
	
КонецПроцедуры

Функция ВыполнитьРепликациюОбщихТаблиц(НастройкиПодключенияИсходник,НастройкаПодключенияПриемник,СтрокаТаблица,ПараметрыОрганизации,Пакет)
	АналитикаОрганизации = СтрокаТаблица.АналитикаПоОрганизациям;
	Если АналитикаОрганизации Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Инициализация телеметрии
	Телеметрия = ТелеметрияИнициализировать(Пакет);
	//
    ИмяТаблицы = СтрокаТаблица.НаименованиеТаблицы;
	
	КолонкаОрганизация = СтрокаТаблица.КолонкаОрганизация;
	СписокКолонок = ПолучитьКолонкиТаблицы(ИмяТаблицы,НастройкаПодключенияПриемник);
	Организация = ПараметрыОрганизации[0].ИмяБазы;
	//Подготовка запроса
	ПриемникИмяБазы = НастройкаПодключенияПриемник.БазаДанныхSQL;
	ПриемникСервер = НастройкаПодключенияПриемник.ИнстансSQL; 
	ИсточникИмяБазы = НастройкиПодключенияИсходник.БазаДанныхSQL;
	ИсточникСервер = НастройкиПодключенияИсходник.ИнстансSQL; 
	СписокКолонокСтрокой = ПеревестиМассивВСтроку(СписокКолонок,", ");
	//очистка таблицы перед копированием
	ОписаниеПроцедуры = "Репликация. Очистка таблицы: '" + ИмяТаблицы + "'; ";
	ЗапросSQL = "DELETE FROM " + ИмяТаблицы + " 
		|";
	Команда = СоединениеРепликатор(НастройкаПодключенияПриемник);
	Попытка
		Запрос =ЗапросSQL;
		Команда.CommandText = Запрос;
		Выборка = Команда.Execute();
		ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,1,ОписаниеПроцедуры);
	Исключение
		Сообщить(ОписаниеПроцедуры + ОписаниеОшибки());
		ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,0,ОписаниеПроцедуры);
	КонецПопытки;
	ТелеметрияЗаписать(Телеметрия);
	//выполнение копирования таблицы
	//Инициализация телеметрии
	Телеметрия = ТелеметрияИнициализировать(Пакет);
	ОписаниеПроцедуры = "Репликация: '" + ИмяТаблицы + "'; ";
	ЗапросSQL = "
			|IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [object_id] = OBJECT_ID(N'"+ИмяТаблицы+"'))
	    	|	SET IDENTITY_INSERT ["+ИмяТаблицы+"] ON;
			|INSERT INTO "+ПриемникИмяБазы+".dbo."+ ИмяТаблицы+ " ("+СписокКолонокСтрокой + ")
			|SELECT * FROM
			|	OPENQUERY (["+ИсточникСервер+"], 'SELECT " + СписокКолонокСтрокой + " FROM ["+ИсточникИмяБазы+"].[dbo].["+ИмяТаблицы+"]
			|	)
			|GO
			|";
	
	Команда = СоединениеРепликатор(НастройкаПодключенияПриемник);
	Попытка
		Запрос =ЗапросSQL;
		Команда.CommandText = Запрос;
		Выборка = Команда.Execute();
		ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,1,ОписаниеПроцедуры);
	Исключение
		текстОшибки = ОписаниеОшибки();
		ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,0,ОписаниеПроцедуры,текстОшибки);
	КонецПопытки;
	ТелеметрияЗаписать(Телеметрия);
КонецФункции

Функция ВыполнитьРепликациюНаСервереSQL(НастройкиПодключенияИсходник,НастройкаПодключенияПриемник,СтрокаТаблица,ПараметрыОрганизации,Пакет,Период)
	Если СтрокаТаблица.Выгружено = Истина тогда
		Возврат неопределено;
	КонецЕсли;
	
	Если Не период = Неопределено Тогда
		Год1 = Период.Год1;
		Год2 = Период.Год2;
	Иначе
		Год2 = Год(ТекущаяДата());
		Год1 = Год2 - 1;
	КонецЕсли;
	
	
	//Инициализация телеметрии
	Телеметрия = ТелеметрияИнициализировать(Пакет);
	//

	ИмяТаблицы = СтрокаТаблица.НаименованиеТаблицы;
	АналитикаОрганизации = СтрокаТаблица.АналитикаПоОрганизациям;
	КолонкаОрганизация = СтрокаТаблица.КолонкаОрганизация;
	СписокКолонок = ПолучитьКолонкиТаблицы(ИмяТаблицы,НастройкаПодключенияПриемник);
	Организация = ПараметрыОрганизации[0].ИмяБазы;
	
	
	//Подготовка запроса
	
	ПриемникИмяБазы = НастройкаПодключенияПриемник.БазаДанныхSQL;
	ПриемникСервер = НастройкаПодключенияПриемник.ИнстансSQL; 
		
	ИсточникИмяБазы = НастройкиПодключенияИсходник.БазаДанныхSQL;
	ИсточникСервер = НастройкиПодключенияИсходник.ИнстансSQL; 
	
	СписокКолонокСтрокой = ПеревестиМассивВСтроку(СписокКолонок,", ");
	
	//очистка таблицы перед копированием
	Если АналитикаОрганизации Тогда
		Если ВРЕГ(КолонкаОрганизация) = ВРЕГ("company") Тогда
			//ОрганизацияВОтбор = ПараметрыОрганизации[0].КодСправочника;
			ОрганизацияВОтбор = ПараметрыОрганизации[0].IDОрганизации;
		Иначе
			ОрганизацияВОтбор = Организация;
		КонецЕсли;
				
		УсловиеОрганизации = "WHERE ["+КолонкаОрганизация+"] = '" + ОрганизацияВОтбор + "'";
	Иначе
		УсловиеОрганизации = "WHERE 1=1";
	КонецЕсли;
	
	ОписаниеПроцедуры = "Репликация. Очистка таблицы: '" + ИмяТаблицы + "'; ";
	
	МассивСелектов = Новый Массив;
	//Если Не СписокКолонок.Найти(ВРЕГ("Period")) = Неопределено Тогда
	//	Для Год = Год1 по Год2 Цикл
	//		ГодСтрокой = Формат(ГОД,"ЧГ=0");
	//		УсловиеПериода = " AND [Period] Between '" + ГодСтрокой + "-01-01' and '" + ГодСтрокой + "-12-31'";
	//		ЗапросSQL = "DELETE FROM " + ПриемникИмяБазы+".dbo."+ИмяТаблицы + " 
	//			|"+УсловиеОрганизации+УсловиеПериода+"
	//			|";
	//		МассивСелектов.Добавить(ЗапросSQL);
	//	КонецЦикла;
	//Иначе
	//	ЗапросSQL = "DELETE FROM " +ПриемникИмяБазы+".dbo."+ ИмяТаблицы + " 
	//	|"+УсловиеОрганизации+"
	//	|";
	//	МассивСелектов.Добавить(ЗапросSQL);
	//КонецЕсли;		
	Если Не СписокКолонок.Найти(ВРЕГ("Period")) = Неопределено Тогда
		Для Год = Год1 по Год2 Цикл
			Для МесяцГода = 1 По 12 Цикл
				ГодСтрокой = Формат(ГОД,"ЧГ=0");
				МесяцСтрокой = Формат(МесяцГода,"ЧЦ=2; ЧВН=");
				ДнейВПериоде = День(КонецМесяца(Дата(год,МесяцГода,1)));
				//КонецМесяца(Дата(год,месяц,1));
				УсловиеПериода = " AND [Period] Between '" + ГодСтрокой + "-"+ МесяцСтрокой + "-01' and '" + ГодСтрокой + "-" + МесяцСтрокой + "-" + ДнейВПериоде + "'";
				ЗапросSQL = "DELETE FROM " + ПриемникИмяБазы+".dbo."+ИмяТаблицы + " 
					|"+УсловиеОрганизации+УсловиеПериода+"
					|";
				МассивСелектов.Добавить(ЗапросSQL);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ЗапросSQL = "DELETE FROM " +ПриемникИмяБазы+".dbo."+ ИмяТаблицы + " 
		|"+УсловиеОрганизации+"
		|";
		МассивСелектов.Добавить(ЗапросSQL);
	КонецЕсли;
	
	Для Каждого Селект Из МассивСелектов Цикл	
		//ЗапросSQL = "DELETE FROM " + ИмяТаблицы + " 
		//	|"+УсловиеОрганизации+"
		//	|";
		Команда = СоединениеРепликатор(НастройкаПодключенияПриемник);
		Попытка
			Запрос =Селект;
			Команда.CommandText = Запрос;
			Выборка = Команда.Execute();
			ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,1,ОписаниеПроцедуры);
		Исключение
			//Сообщить(ОписаниеПроцедуры + ОписаниеОшибки());
			//ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,0,ОписаниеПроцедуры);
			
			текстОшибки = ОписаниеОшибки();
			Сообщить(ОписаниеПроцедуры + текстОшибки);
			
			//ЗаписатьСтатус(Организация,НастройкаПодключенияПриемник,"Ошибка",ОписаниеПроцедуры + ОписаниеОшибки(),ДатаНачала,НомерСообщения);
			ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,0,ОписаниеПроцедуры,текстОшибки);	
		КонецПопытки;
	КонецЦикла;
	ТелеметрияЗаписать(Телеметрия);
	//выполнение копирования таблицы
	//Инициализация телеметрии
	Телеметрия = ТелеметрияИнициализировать(Пакет);
	
	Если АналитикаОрганизации Тогда //необходмимо переопределить условие т.к. выполнение идет в openquery
		Если ВРЕГ(КолонкаОрганизация) = ВРЕГ("company") Тогда
			ОрганизацияВОтбор = ПараметрыОрганизации[0].IDОрганизации;
		Иначе
			ОрганизацияВОтбор = Организация;
		КонецЕсли;
		
		УсловиеОрганизации = "WHERE ["+КолонкаОрганизация+"] = ''" + ОрганизацияВОтбор + "''";
	Иначе
		УсловиеОрганизации = "WHERE 1=1";
	КонецЕсли;
	ОписаниеПроцедуры = "Репликация: '" + ИмяТаблицы + "'; ";
	
	МассивСелектов = Новый Массив;
	Если Не СписокКолонок.Найти(ВРЕГ("Period")) = Неопределено Тогда
		Для Год = Год1 по Год2 Цикл
			Для МесяцГода = 1 По 12 Цикл
				ГодСтрокой = Формат(ГОД,"ЧГ=0");
				МесяцСтрокой = Формат(МесяцГода,"ЧЦ=2; ЧВН=");
				ДнейВПериоде = День(КонецМесяца(Дата(год,МесяцГода,1)));
				//КонецМесяца(Дата(год,месяц,1));
				УсловиеПериода = " AND [Period] Between ''" + ГодСтрокой + "-"+ МесяцСтрокой + "-01'' and ''" + ГодСтрокой + "-" + МесяцСтрокой + "-" + ДнейВПериоде + "''";
				ЗапросSQL = "
					|IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [object_id] = OBJECT_ID(N'"+ИмяТаблицы+"'))
			    	|	SET IDENTITY_INSERT [dbo].["+ИмяТаблицы+"] ON;
					|INSERT INTO "+ПриемникИмяБазы+".dbo."+ ИмяТаблицы+ " ("+СписокКолонокСтрокой + ")
					|SELECT * FROM
					|	OPENQUERY (["+ИсточникСервер+"], 'SELECT " + СписокКолонокСтрокой + " FROM ["+ИсточникИмяБазы+"].[dbo].["+ИмяТаблицы+"]
					|"+УсловиеОрганизации+УсловиеПериода+"'
					|	)
					//|;
					//|IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [object_id] = OBJECT_ID(N'"+ИмяТаблицы+"'))
					//|	SET IDENTITY_INSERT [dbo].["+ИмяТаблицы+"] OFF
					|GO
					|";
				МассивСелектов.Добавить(ЗапросSQL);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ЗапросSQL = "
			|IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [object_id] = OBJECT_ID(N'"+ИмяТаблицы+"'))
	    	|	SET IDENTITY_INSERT ["+ИмяТаблицы+"] ON;
			|INSERT INTO "+ПриемникИмяБазы+".dbo."+ ИмяТаблицы+ " ("+СписокКолонокСтрокой + ")
			|SELECT * FROM
			|	OPENQUERY (["+ИсточникСервер+"], 'SELECT " + СписокКолонокСтрокой + " FROM ["+ИсточникИмяБазы+"].[dbo].["+ИмяТаблицы+"]
			|"+УсловиеОрганизации+"'
			|	)
			|GO
			|";
		МассивСелектов.Добавить(ЗапросSQL);
	КонецЕсли;
	
	//ЗапросSQL = "
	//	|IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [object_id] = OBJECT_ID(N'"+ИмяТаблицы+"'))
	//	|	SET IDENTITY_INSERT ["+ИмяТаблицы+"] ON;
	//	|INSERT INTO "+ПриемникИмяБазы+".dbo."+ ИмяТаблицы+ " ("+СписокКолонокСтрокой + ")
	//	|SELECT * FROM
	//	|	OPENQUERY (["+ИсточникСервер+"], 'SELECT " + СписокКолонокСтрокой + " FROM ["+ИсточникИмяБазы+"].[dbo].["+ИмяТаблицы+"]
	//	|"+УсловиеОрганизации+"'
	//	|	)
	//	|GO
	//	|";
	Для Каждого Селект Из МассивСелектов Цикл	
		Команда = СоединениеРепликатор(НастройкаПодключенияПриемник);
		Попытка
			Запрос =Селект;
			//Запрос =ЗапросSQL;
			Команда.CommandText = Запрос;
			Выборка = Команда.Execute();
			//ЗаписатьСтатус(Организация,НастройкаПодключенияПриемник,"Выполнено","Репликация таблицы: " + ИмяТаблицы,ДатаНачала,НомерСообщения);
			ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,1,ОписаниеПроцедуры);
		Исключение
			текстОшибки = ОписаниеОшибки();
			Сообщить(ОписаниеПроцедуры + текстОшибки);
			
			//ЗаписатьСтатус(Организация,НастройкаПодключенияПриемник,"Ошибка",ОписаниеПроцедуры + ОписаниеОшибки(),ДатаНачала,НомерСообщения);
			ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,0,ОписаниеПроцедуры,текстОшибки);
		КонецПопытки;
	КонецЦикла;
	Если АналитикаОрганизации Тогда
		СтрокаТаблица.Выгружено = Истина;
	КонецЕсли;
	
	ТелеметрияЗаписать(Телеметрия);
	
КонецФункции

Процедура ПрочекатьРазницу(НастройкаПодключенияПриемник) экспорт
	ОписаниеПроцедуры = "Репликация. сравнение баз";
	ЗапросSQL = "
		|use bw_mp
		|;
		|truncate table differenc;
		|;
		|insert into differenc
		|select t1.base
		|	   , t1.per
		|	   , t1.summa_pri
		|	   , t2.summa_ist
		|	   , t2.summa_ist - t1.summa_pri diff
		|	   ,GETdate()
		|from
		|(
		|SELECT [base], 
		|	eomonth(period) per,
		|	sum([RegulatedAmountNew]) summa_pri
		|FROM [bw_mp].[dbo].[map_Turnovers]
		|where period between '2023-01-01' and '2024-12-31' 
		|group by [base],eomonth(period)) as t1
		|INNER JOIN 
		|(SELECT base
		|		,per
		|		,summa_istochnik summa_ist
		|	FROM
		|	OPENQUERY ([KIPROS-SQL-DB], 'SELECT [BASE],eomonth(period) per, SUM([REGULATEDAMOUNTNEW]) summa_istochnik FROM [BW].[dbo].[map_turnovers]
		|								WHERE [Period] Between ''2023-01-01'' and ''2024-12-31'' group by [base],eomonth(period)')
		|) as t2 
		|ON (t1.base = t2.base and t1.per = t2.per)
		|order by base,per
		|
		|";
	

	Команда = СоединениеРепликатор(НастройкаПодключенияПриемник);
	Попытка
		Запрос =ЗапросSQL;
		Команда.CommandText = Запрос;
		Выборка = Команда.Execute();
	Исключение
		текстОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеПроцедуры + текстОшибки);
		
	КонецПопытки;
КонецПроцедуры


#КонецОбласти

#Область ОчисткаБазы

Процедура ОчисткаБазы() Экспорт
	//НомерСообщения = 0;
	Пакет = Новый Структура("НомерПакета,НомерСообщенияВПакете,Действие",ТекущаяДата(),0,0);
	СписокБаз = ПолучитьСписокОрганизацийДляРепликации();
	НастройкиПодключенияИсходник = Константы.ОсновныеНастройкиОбмена.Получить();
	Для Каждого СтрокаБаза Из СписокБаз Цикл
		СписокТаблиц = СтрокаБаза.НаправлениеРепликации.ТаблицыДляРепликации.Выгрузить();
		СписокТаблиц.Свернуть("НаименованиеТаблицы,АналитикаПоОрганизациям,КолонкаОрганизация");
		
		НастройкаПодключенияКПриемнику = СтрокаБаза.НаправлениеРепликации;
		Для Каждого СтрокаТаблица Из СписокТаблиц Цикл
			ВыполнитьОчисткуНаСервереSQL(НастройкаПодключенияКПриемнику,СтрокаТаблица,СтрокаБаза.База,пакет);
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВыполнитьОчисткуНаСервереSQL(НастройкаПодключенияПриемник,СтрокаТаблица,Организация = "",Пакет)
	
	//Инициализация телеметрии
	Телеметрия = ТелеметрияИнициализировать(Пакет);
	
	ИмяТаблицы = СтрокаТаблица.НаименованиеТаблицы;	
	ОписаниеПроцедуры = "Полная очистка. Очистка таблицы: '" + ИмяТаблицы + "'; ";	
	
	//Подготовка запроса
	АналитикаОрганизации = СтрокаТаблица.АналитикаПоОрганизациям;
	КолонкаОрганизация = СтрокаТаблица.КолонкаОрганизация;
	
	ПриемникИмяБазы = НастройкаПодключенияПриемник.БазаДанныхSQL;
	ПриемникСервер = НастройкаПодключенияПриемник.ИнстансSQL; 
    Если АналитикаОрганизации Тогда
		УсловиеОрганизации = "where "+КолонкаОрганизация+" = '" + Организация + "'";
	Иначе
		УсловиеОрганизации = "";
	КонецЕсли;
	ДатаНачала = ТекущаяДата();	
	ЗапросSQL = "truncate table " + ИмяТаблицы + "; 
		|
		|";
	Команда = СоединениеРепликатор(НастройкаПодключенияПриемник);
	Попытка
		Запрос =ЗапросSQL;
		Команда.CommandText = Запрос;
		Выборка = Команда.Execute();
		ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,1,ОписаниеПроцедуры);
		
	Исключение
		текстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,0,ОписаниеПроцедуры,текстОшибки);
		
		//при ошибке попробуем сделать delete
		//
		ЗапросSQL = "delete from " + ИмяТаблицы + " 
			|";
		
		Команда = СоединениеРепликатор(НастройкаПодключенияПриемник);
		Попытка
			Запрос =ЗапросSQL;
			Команда.CommandText = Запрос;
			Выборка = Команда.Execute();
			ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,1,ОписаниеПроцедуры);
		Исключение
			текстОшибки = ОписаниеОшибки();
			Сообщить(ТекстОшибки);
			ТелеметрияУстановить(Телеметрия,Организация,НастройкаПодключенияПриемник,0,ОписаниеПроцедуры,текстОшибки);
		КонецПопытки
	КонецПопытки;
	
	ТелеметрияЗаписать(Телеметрия);
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

Функция ОсуществитьВыборкуДанных(ИмяБазы, ИмяТаблицы)
	
	Таблица = Новый ТаблицаЗначений;
	Команда = Соединение();

	Попытка
		
		Запрос = "
			|SELECT * 
			|FROM " + ИмяТаблицы + " 
			//|WHERE base = """ + ИмяБазы + """
			|";
		Команда.CommandText = Запрос;
		Выборка = Команда.Execute();
		Если НЕ Выборка.BOF Тогда
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				ИмяСтолбца = Выборка.Fields.Item(А).Name;  
				Таблица.Колонки.Добавить(ИмяСтолбца);
			КонецЦикла;
			//Выборка.MoveFirst();
			Пока НЕ Выборка.EOF Цикл
				НоваяСтрока = Таблица.Добавить();
				Для А = 0 По Выборка.Fields.Count - 1 Цикл
					НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				КонецЦикла;
				Выборка.MoveNext();
			КонецЦикла;
		КонецЕсли;
		Возврат Таблица;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

Функция ОсуществитьЗаписьДанных(ИмяТаблицы, Таблица)
	
	//Таблица1 = Новый ТаблицаЗначений;
	//Команда = СоединениеРепликатор();
	//СоставКолонок = "";
	//Для Каждого Колонка из Таблица.Колонки Цикл
	//	СоставКолонок = СоставКолонок + Колонка.Имя + "; ";
	//КонецЦикла;
	//
	//Попытка
	//	
	//	Запрос = "
	//		|INSERT INTO "+ ИмяТаблицы + " (" +  СоставКолонок + ")
	//		|Values (" +  + " 
	//		//|WHERE base = """ + ИмяБазы + """
	//		|";
	//	Команда.CommandText = Запрос;
	//	Выборка = Команда.Execute();
	//	//Если НЕ Выборка.BOF Тогда
	//	//	Для А = 0 По Выборка.Fields.Count - 1 Цикл
	//	//		ИмяСтолбца = Выборка.Fields.Item(А).Name;  
	//	//		Таблица.Колонки.Добавить(ИмяСтолбца);
	//	//	КонецЦикла;
	//	//	//Выборка.MoveFirst();
	//	//	Пока НЕ Выборка.EOF Цикл
	//	//		НоваяСтрока = Таблица.Добавить();
	//	//		Для А = 0 По Выборка.Fields.Count - 1 Цикл
	//	//			НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
	//	//		КонецЦикла;
	//	//		Выборка.MoveNext();
	//	//	КонецЦикла;
	//	//КонецЕсли;
	//	//Возврат Таблица;
	//	
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	
КонецФункции

Функция ПолучитьСписокОрганизацийДляРепликации()
	Запрос= Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаправленияРепликацииБазыДляРепликации.Ссылка КАК НаправлениеРепликации,
	               |	НаправленияРепликацииБазыДляРепликации.База КАК База
	               |ИЗ
	               |	Справочник.НаправленияРепликации.БазыДляРепликации КАК НаправленияРепликацииБазыДляРепликации
	               |ГДЕ
	               |	НаправленияРепликацииБазыДляРепликации.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Ответ = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Ответ.Добавить(Новый Структура("НаправлениеРепликации,База",Выборка.НаправлениеРепликации,Выборка.База));
	КонецЦикла;
	Возврат Ответ;
КонецФункции

 Функция ПолучитьКолонкиТаблицы(ИмяТаблицы,НаправлениеРепликации)
	ПараметрыПоиска = Новый Структура("НаименованиеТаблицы,Выгружать",ИмяТаблицы,Истина);
	НайденныеСтроки = НаправлениеРепликации.ТаблицыДляРепликации.НайтиСтроки(ПараметрыПоиска);
	СписокКолонок = Новый Массив;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СписокКолонок.Добавить(ВРЕГ(НайденнаяСтрока.НаименованиеКолонки));
	КонецЦикла;
	Возврат СписокКолонок;
	
КонецФункции

Функция ПеревестиМассивВСтроку(МассивСтрок,Разделитель,Обрамлять = Истина) Экспорт
	
	СтрокаОтвета = "";
	КоличествоСтрок = МассивСтрок.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат СтрокаОтвета;
	КонецЕсли;
	Если Обрамлять Тогда
		СтрокаОтвета = СтрокаОтвета + "[" + МассивСтрок[0] + "]";
	Иначе
		СтрокаОтвета = СтрокаОтвета + МассивСтрок[0];
	КонецЕсли;
	
	Для Номер = 1 По КоличествоСтрок - 1 Цикл
		Если Обрамлять Тогда
			СтрокаОтвета = СтрокаОтвета + Разделитель + "[" + МассивСтрок[Номер] + "]";
		Иначе
			СтрокаОтвета = СтрокаОтвета + Разделитель + МассивСтрок[Номер];
		КонецЕсли;
		
	КонецЦикла;
	Возврат СтрокаОтвета;
	
КонецФункции


Функция ТелеметрияИнициализировать(Пакет)
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("База","");
	СтруктураОтвета.Вставить("Пакет",Пакет);
	//СтруктураОтвета.Вставить("НомерСообщенияВПакете",Пакет.НомерСообщенияВПакете);
	СтруктураОтвета.Вставить("НаправлениеРепликации",Справочники.НаправленияРепликации.ПустаяСсылка());
	СтруктураОтвета.Вставить("Статус","");
	СтруктураОтвета.Вставить("Описание","");
	СтруктураОтвета.Вставить("ДатаНачала",ТекущаяДата());
	СтруктураОтвета.Вставить("ДатаОкончания",Дата(1,1,1));
	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ТелеметрияУстановить(Телеметрия,База,НаправлениеРепликации,Статус,Описание,текстОшибки = "")
	Если Телеметрия.Свойство("База") Тогда 
		Телеметрия.База = База;
	Иначе
		Телеметрия.Вставить("База",База);
	КонецЕсли;
	
	//Если Телеметрия.Свойство("Пакет") Тогда 
	//	Телеметрия.Пакет = Пакет.НомерПакета;
	//Иначе
	//	Телеметрия.Вставить("Пакет",Пакет.НомерПакета);
	//КонецЕсли;
	//Если Телеметрия.Свойство("НомерСообщенияВПакете") Тогда 
	//	Телеметрия.НомерСообщенияВПакете = Пакет.НомерСообщенияВПакете;
	//Иначе
	//	Телеметрия.Вставить("НомерСообщенияВПакете",Пакет.НомерСообщенияВПакете);
	//КонецЕсли;
	Если Телеметрия.Свойство("НаправлениеРепликации") Тогда 
		Телеметрия.НаправлениеРепликации = НаправлениеРепликации;
	Иначе
		Телеметрия.Вставить("НаправлениеРепликации",НаправлениеРепликации);
	КонецЕсли;
	Если Телеметрия.Свойство("Статус") Тогда 
		Телеметрия.Статус = Статус;
	Иначе
		Телеметрия.Вставить("Статус",Статус);
	КонецЕсли;
	Если Телеметрия.Свойство("Описание") Тогда 
		Телеметрия.Описание = Описание;
	Иначе
		Телеметрия.Вставить("Описание",Описание);
	КонецЕсли;
	Телеметрия.Вставить("ТекстОшибки",текстОшибки);
		
КонецПроцедуры

Процедура ТелеметрияЗаписать(Телеметрия) Экспорт
//Процедура ЗаписатьТелеметрию(База,НаправлениеРепликации,Статус,Сообщение,ДатаНачала,НомерСообщения) Экспорт

	Телеметрия.ДатаОкончания = ТекущаяДата();
	
	//Телеметрия.НомерСообщенияВПакете = Телеметрия.НомерСообщенияВПакете + 1;

	НоваяЗАпись = РегистрыСведений.РепликацияСтатус.СоздатьМенеджерЗаписи();
	НоваяЗапись.НаправлениеРепликации = Телеметрия.НаправлениеРепликации;
	НоваяЗАпись.Период = ТекущаяДата();
	НоваяЗАпись.База = Справочники.Базы.НайтиПоНаименованию(Телеметрия.База);
	НоваяЗапись.Пакет = Телеметрия.Пакет.НомерПакета;
	НоваяЗапись.НомерСообщенияВПакете = Телеметрия.Пакет.НомерСообщенияВПакете;
	НоваяЗАпись.Статус = Телеметрия.Статус;
	НоваяЗапись.Описание = Телеметрия.Описание + Символы.ПС + Телеметрия.ТекстОшибки;
	НоваяЗАпись.ДатаНачала = Телеметрия.ДатаНачала;
	НоваяЗапись.ДатаОкончания = Телеметрия.ДатаОкончания;
	//НоваяЗапись.ТекстОшибки = Телеметрия.ТекстОшибки;	
	НоваяЗапись.Действие = Телеметрия.Пакет.Действие;	
	//НоваяЗАпись = РегистрыСведений.РепликацияСтатус.СоздатьМенеджерЗаписи();
	//НоваяЗапись.НаправлениеРепликации = НаправлениеРепликации;
	//НоваяЗАпись.База = База;
	//НоваяЗАпись.Период = ТекущаяДата();
	//НоваяЗАпись.Статус = Статус;
	//НоваяЗапись.Описание = Сообщение;
	//НоваяЗАпись.ДатаНачала = ДатаНачала;
	//НоваяЗапись.ДатаОкончания = ТекущаяДата();
	//НоваяЗапись.НомерСообщенияВПакете = НомерСообщения;
	
	НоваяЗапись.Записать();
	
	Телеметрия.Пакет.НомерСообщенияВПакете = Телеметрия.Пакет.НомерСообщенияВПакете + 1;
КонецПроцедуры

Функция ПараметрыОрганизации(СтрокаБаза)
	База = СтрокаБаза.База;
	параметрыПоиска = Новый Структура("База",База);
	НайденныеСтроки =СтрокаБаза.НаправлениеРепликации.БазыДляРепликации.НайтиСтроки(параметрыПоиска);
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		ТекID = НайденныеСтроки[0].IDОрганизации;
	иначе
		ТекID = -1;
	КонецЕсли;
	
	СписокОрганизаций = Новый Массив;
	Если ТипЗнч(База) = Тип("Строка") Тогда
		БазаСтрокой = База;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Базы.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Базы КАК Базы
		               |ГДЕ
		               |	Базы.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", База);
		Результат = Запрос.Выполнить();
		выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			БазаСсылка = Выборка.Ссылка;
		КонецЕсли;
	ИначеЕсли ТипЗнч(База) = Тип("СправочникСсылка.Базы") Тогда
		БазаСсылка = База;
		БазаСтрокой = База.Наименование;
	Иначе
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ИмяБазы","");
		СтруктураОтвета.Вставить("БИН","");
		СтруктураОтвета.Вставить("Наименование","");
		СтруктураОтвета.Вставить("КодСправочника","");
		СтруктураОтвета.Вставить("IDОрганизации",0);
		СписокОрганизаций.Добавить(СтруктураОтвета);
		Возврат СписокОрганизаций;
	КонецЕсли;
	Если БазаСсылка.Организации.Количество() = 0 Тогда
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ИмяБазы",БазаСтрокой);
		СтруктураОтвета.Вставить("БИН","");
		СтруктураОтвета.Вставить("Наименование","");
		СтруктураОтвета.Вставить("КодСправочника","");
		СтруктураОтвета.Вставить("IDОрганизации",0);
		СписокОрганизаций.Добавить(СтруктураОтвета);
		Возврат СписокОрганизаций;
	КонецЕсли;
	
	Для Каждого СтрокаОрганизация Из БазаСсылка.Организации Цикл
		Организация = СтрокаОрганизация.Организация;
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ИмяБазы",БазаСтрокой);
		СтруктураОтвета.Вставить("БИН",Организация.БИН);
		СтруктураОтвета.Вставить("Наименование",Организация.ПолноеНаименование);
		СтруктураОтвета.Вставить("КодСправочника",Организация.КодСправочника);
		СтруктураОтвета.Вставить("IDОрганизации",ТекID);
		СписокОрганизаций.Добавить(СтруктураОтвета);
	КонецЦикла;
	
	Возврат СписокОрганизаций;
	
КонецФункции


#КонецОбласти