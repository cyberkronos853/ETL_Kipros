
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИмяСправочника = "";
	Иерархический = Ложь;
	СписокВладельцев = Неопределено;
	ВыбиратьГруппы = Ложь;
	СписокПомеченных = Неопределено;
	Параметры.Свойство("ИмяСправочника",ИмяСправочника);
	Параметры.Свойство("Иерархический",Иерархический);
	Параметры.Свойство("СписокВладельцев",СписокВладельцев);
	Параметры.Свойство("СписокПомеченных",СписокПомеченных);
	
	ЗаполнитьДерево(ИмяСправочника,Иерархический,СписокВладельцев,СписокПомеченных);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(ИмяСправочника,Иерархический,СписокВладельцев,СписокПомеченных)
	
	
	
	Запрос = Новый Запрос;
	
	Если СписокВладельцев <> Неопределено Тогда
		Владельцы = " И "+ИмяСправочника+".Владелец В (&СписокВладельцев)";
		Запрос.УстановитьПараметр("СписокВладельцев",СписокВладельцев);
	Иначе 
		Владельцы = "";
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ
	|	"+ИмяСправочника+".Ссылка КАК Элемент,
	|	"+?(СписокПомеченных=Неопределено,"ИСТИНА","ЛОЖЬ")+" КАК Пометка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК "+ИмяСправочника+"
	|ГДЕ
	|	НЕ "+ИмяСправочника+".ПометкаУдаления " + Владельцы;
	
	ПорядокПоИерархии = "	
	|
	|УПОРЯДОЧИТЬ ПО
	|	Элемент ИЕРАРХИЯ";
	
	Порядок = "
	|
	|УПОРЯДОЧИТЬ ПО
	| "+ИмяСправочника+".Наименование";
	
	Если Иерархический Тогда 
		Текст = Текст + ПорядокПоИерархии;
	Иначе
		Текст = Текст + Порядок;
	КонецЕсли;
	
	Запрос.Текст = Текст;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Если СписокПомеченных=Неопределено Тогда
		ЗначениеВРеквизитФормы(РезультатЗапроса,"ЭлементыСправочника");
	Иначе
		ПометитьВДереве(РезультатЗапроса.Строки,СписокПомеченных);
		ЗначениеВРеквизитФормы(РезультатЗапроса,"ЭлементыСправочника");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДерево()

&НаСервере
Процедура ПометитьВДереве(Строки,СписокПомеченных)
	Для Каждого Строка Из Строки Цикл
		 НоваяСтрока = Строка.Строки;
		 Если НоваяСтрока.Количество() = 0 Тогда
			 Если СписокПомеченных.НайтиПоЗначению(Строка.Элемент) <> Неопределено Тогда
				 Строка.Пометка = Истина;
			 КонецЕсли;
		 Иначе
			 ПометитьВДереве(Строка.Строки,СписокПомеченных);
		 КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПометитьВДереве()


&НаКлиенте
Процедура Выбрать(Команда)
	СписокВыбранныхЭлементов = Новый СписокЗначений;
	ЗаполнитьСписокВыбранныхЭлементов(СписокВыбранныхЭлементов,ЭлементыСправочника.ПолучитьЭлементы());
	Оповестить("ОбработатьЭлементыСправочника",,СписокВыбранныхЭлементов);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбранныхЭлементов(СписокВыбранныхЭлементов,Строки)
	Для Каждого Строка Из Строки Цикл
		НоваяСтрока = Строка.ПолучитьЭлементы();
		Если НоваяСтрока.Количество() = 0 Тогда
			Если Строка.Пометка Тогда
				СписокВыбранныхЭлементов.Добавить(Строка.Элемент);
			КонецЕсли;
		Иначе
			ЗаполнитьСписокВыбранныхЭлементов(СписокВыбранныхЭлементов,НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВыбранныхЭлементов()


&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьСнятьФлажкиДерева(ЭлементыСправочника.ПолучитьЭлементы(),Ложь);
КонецПроцедуры
&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьСнятьФлажкиДерева(ЭлементыСправочника.ПолучитьЭлементы(),Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажкиДерева(Строки,Пометка)
	Для Каждого Строка Из Строки Цикл
		Строка.Пометка = Пометка;
		НоваяСтрока = Строка.ПолучитьЭлементы();
		Если НоваяСтрока.Количество() = 0 Тогда
			Продолжить;
		Иначе 
			УстановитьСнятьФлажкиДерева(НоваяСтрока,Пометка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СнятьФлажкиДерева()

&НаКлиенте
Процедура ЭлементыСправочникаПометкаПриИзменении(Элемент)
	ТекДанные =  Элементы.ЭлементыСправочника.ТекущиеДанные;
	Пометка  = ТекДанные.Пометка;
	УстановитьСнятьФлажкиДерева(ТекДанные.ПолучитьЭлементы(),Пометка);
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры



