#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика

    ОбновитьНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаУведомлений

&НаКлиенте
Процедура ТаблицаУведомленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Выбор = ТаблицаУведомлений.Получить(ВыбраннаяСтрока);
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("GUID", Выбор.GUID); 
	ПараметрыОтбора.Вставить("Событие", "Сверка данных");
	ПараметрыОтбора.Вставить("База", Выбор.База);  
	ПараметрыОтбора.Вставить("Период", Выбор.ДатаСверки);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ПолучитьКлючЗаписиРегистра(ПараметрыОтбора));
	
	ОткрытьФорму("РегистрСведений.УведомленияОСобытияхБаз.Форма.ФормаЗаписи", ПараметрыОткрытия);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапросыНаСверку(Команда)
	СоздатьЗапросыНаСверкуНаСервере();
КонецПроцедуры

#КонецОбласти   
   
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьНаСервере()
	// Вставить содержимое обработчика.

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(УведомленияОСобытияхБаз.Период) КАК Период,
		|	УведомленияОСобытияхБаз.База КАК База,
		|	УведомленияОСобытияхБаз.Событие КАК Событие
		|ПОМЕСТИТЬ ВТМаксДатаСверки
		|ИЗ
		|	РегистрСведений.УведомленияОСобытияхБаз КАК УведомленияОСобытияхБаз
		|ГДЕ
		|	УведомленияОСобытияхБаз.Событие = &Событие
		|
		|СГРУППИРОВАТЬ ПО
		|	УведомленияОСобытияхБаз.База,
		|	УведомленияОСобытияхБаз.Событие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УведомленияОСобытияхБаз.База КАК База,
		|	УведомленияОСобытияхБаз.ЕстьОшибки КАК ЕстьРасхождения,
		|	УведомленияОСобытияхБаз.Период КАК ДатаСверки,
		|	УведомленияОСобытияхБаз.ТехИнформация КАК ТехИнфо,
		|	УведомленияОСобытияхБаз.GUID КАК GUID,
		|	УведомленияОСобытияхБаз.Событие КАК Событие
		|ИЗ
		|	ВТМаксДатаСверки КАК ВТМаксДатаСверки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УведомленияОСобытияхБаз КАК УведомленияОСобытияхБаз
		|		ПО ВТМаксДатаСверки.База = УведомленияОСобытияхБаз.База
		|			И ВТМаксДатаСверки.Период = УведомленияОСобытияхБаз.Период
		|			И ВТМаксДатаСверки.Событие = УведомленияОСобытияхБаз.Событие";
	
	Запрос.УстановитьПараметр("Событие", "Сверка данных");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 
	ТаблицаУведомлений.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока = ТаблицаУведомлений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗапросыНаСверкуНаСервере()
	
	Для каждого СтрокаТЗ Из ТаблицаУведомлений Цикл
	
		Если СтрокаТЗ.ЕстьРасхождения Тогда	 	// Вставить содержимое обработчика.
			
			Попытка
				Результат = ЗначениеИзСтрокиВнутр(СтрокаТЗ.ТехИнфо);
			Исключение
				продолжить;
			КонецПопытки;
			Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
						
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОбъектыБазКВыгрузке.Ссылка КАК Ссылка,
				|	ОбъектыБазКВыгрузке.Наименование КАК Наименование
				|ИЗ
				|	Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
				|ГДЕ
				|	ОбъектыБазКВыгрузке.Владелец = &База
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОбъектыКВыгрузкеТипыБазы.Ссылка,
				|	ОбъектыКВыгрузкеТипыБазы.Ссылка.Наименование
				|ИЗ
				|	Справочник.ОбъектыКВыгрузке.ТипыБазы КАК ОбъектыКВыгрузкеТипыБазы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Базы КАК Базы
				|		ПО ОбъектыКВыгрузкеТипыБазы.ТипБазы = Базы.ТипБазы
				|ГДЕ
				|	Базы.Ссылка = &База";
				
				Запрос.УстановитьПараметр("База", СтрокаТЗ.База);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Для каждого СтрокаСверки Из Результат Цикл
					
					Если СтрокаСверки.Разница <> 0 Тогда
						
						Выборка.Сбросить();
						
						Отбор = Новый Структура("Наименование", СтрокаСверки.ОбъектСверки);
						
						Пока Выборка.НайтиСледующий(Отбор) Цикл
							
							ЗапросНаСверку = РегистрыСведений.ЗапросыНаСверку.СоздатьМенеджерЗаписи();
							ЗапросНаСверку.Статус = Перечисления.СтатусыСверкиДанных.ОжидаетОбработки;
							ЗапросНаСверку.GUID = Строка(Новый УникальныйИдентификатор); 
							ЗапросНаСверку.Период = ТекущаяДатаСеанса();  
							ЗапросНаСверку.ДатаСтатуса = ТекущаяДатаСеанса();
							ЗапросНаСверку.ВыполнитьПодробнуюСверку = Истина;
							ЗапросНаСверку.РегистрироватьИзменения = Истина;
							ЗапросНаСверку.УдалитьИзSQL = Истина;
							ЗапросНаСверку.ОбъектСверки = Выборка.Ссылка;
							ЗапросНаСверку.База = СтрокаТЗ.База;
							ЗапросНаСверку.Записать();
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = Строка(СтрокаТЗ.База) + " - создан запрос на подробную сверку для объекта: " + Выборка.Наименование;
							Сообщение.Сообщить();						
							
						КонецЦикла;
						
					КонецЕсли;					
					
				КонецЦикла;			
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

 &НаСервере
Функция ПолучитьКлючЗаписиРегистра(ПараметрыОтбора) 
	 Возврат РегистрыСведений.УведомленияОСобытияхБаз.СоздатьКлючЗаписи(ПараметрыОтбора);
КонецФункции
#КонецОбласти   



