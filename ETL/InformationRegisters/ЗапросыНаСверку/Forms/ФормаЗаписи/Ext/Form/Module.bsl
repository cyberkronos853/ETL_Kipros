#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СтруктураЗаполнения = Новый Структура("НачальныйСтатус, GUID, ДатаСтатуса");
	ПередЗаписьюНаСервере(СтруктураЗаполнения);

	Если НЕ ЗначениеЗаполнено(Запись.GUID) Тогда
		Запись.GUID = СтруктураЗаполнения.GUID;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.Статус) Тогда
		Запись.Статус = СтруктураЗаполнения.НачальныйСтатус;	
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ.GUID) Тогда
		
		Запись.GUID = "";  
		Запись.Статус = Перечисления.СтатусыСверкиДанных.ПустаяСсылка();
		Запись.ДатаСтатуса = Дата(1,1,1);
		Запись.Результат1С = "";
		Запись.Результат1СПодробнаяСверка = "";
		Запись.РезультатSQL = "";
		Запись.РезультатSQLПодробнаяСверка = "";
		Запись.ЕстьРасхождения = Ложь;
		Запись.ВремяВыполненияЗадачи = Дата(1,1,1);
		Запись.Период = ТекущаяДатаСеанса();
		Запись.Примечание = ""; 
		Запись.Результат1С = "";
		Запись.Результат1СПодробнаяСверка = "";
		Запись.РезультатSQL = "";
		Запись.РезультатSQLПодробнаяСверка = "";
		Запись.РезультатПолнойСверки = "";
	КонецЕсли;
	
КонецПроцедуры

 &НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Запись.ВыполнитьПолнуюСверку Тогда
		ВывестиРезультатыПолнойСверки();
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолнаяСверкаПриИзменении(Элемент)
	ПолнаяСверкаПриИзмененииНаСервере();
	УстановитьВидимость();

КонецПроцедуры  

&НаКлиенте
Процедура ОбъектСверкиОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)

	//перечисления не сверяем
	Если СтрНайти(Строка(ВыбранноеЗначение), "Перечисление") = 1 Тогда
		Сообщить("Перечисления не подлежат сверке");
		СтандартнаяОбработка = Ложь; 
	ИначеЕсли  СтрНайти(Строка(ВыбранноеЗначение), "Остатки") <> 0  Тогда
		Сообщить("Остатки не подлежат сверке");
		СтандартнаяОбработка = Ложь;
		
	КОнецЕсли;

КонецПроцедуры

 &НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыгрузитьВMXL(Команда)
	
	ВыгрузитьВMXLНаСервере().Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаданияНаСверку(Команда)
	СформироватьЗаданияНаСверкуНаСервере();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ПередЗаписьюНаСервере(СтруктураЗаполнения)
	
	СтруктураЗаполнения["НачальныйСтатус"] = Перечисления.СтатусыСверкиДанных.ОжидаетОбработки;
	СтруктураЗаполнения["GUID"] = Строка(Новый УникальныйИдентификатор); 
	СтруктураЗаполнения["ДатаСтатуса"] = ТекущаяДатаСеанса(); 
		
КонецПроцедуры

&НаСервере
Функция ВыгрузитьВMXLНаСервере()

	ТабДок = Новый ТабличныйДокумент;
	Макет = РегистрыСведений.ЗапросыНаСверку.ПолучитьМакет("РезультатПодробнойСверки");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры["ОбъектСверки"] = Запись.ОбъектСверки;
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьСтрока.Параметры["РезультатСверки"] = Запись.Результат1СПодробнаяСверка;
	ТабДок.Вывести(ОбластьШапка);
	ТабДок.Вывести(ОбластьСтрока);
	Возврат ТабДок;	

КонецФункции

&НаСервере
Процедура ПолнаяСверкаПриИзмененииНаСервере()
	// Вставить содержимое обработчика. 
	Если Запись.ВыполнитьПолнуюСверку Тогда
		Запись.ОбъектСверки = Справочники.ОбъектыКВыгрузке.ПустаяСсылка(); 
		Запись.ВыполнитьПодробнуюСверку = Ложь;
		Запись.РегистрироватьИзменения = Ложь;
		Запись.УдалитьИзSQL = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ОбъектСверки.Видимость = НЕ Запись.ВыполнитьПолнуюСверку;
	Элементы.ГруппаДопПараметры.Видимость = Не Запись.ВыполнитьПолнуюСверку;
	Элементы.РезультатПолнойСверки.Видимость = Запись.ВыполнитьПолнуюСверку;
	Элементы.РезультатОбычнойСверки.Видимость = НЕ Запись.ВыполнитьПолнуюСверку;
	Элементы.РезультатПодробнойСверки.Видимость = Не Запись.ВыполнитьПолнуюСверку И Запись.ВыполнитьПодробнуюСверку;
    Элементы.ФормаСформироватьЗаданияНаСверку.Видимость = Запись.ВыполнитьПолнуюСверку;
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Запись.База = УправлениеБазамиСервер.ПолучитьБазуПоОрганизации(Запись.Организация);
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатыПолнойСверки()
	
	Попытка
		
		Результат = ЗначениеИзСтрокиВнутр(Запись.РезультатПолнойСверки);
		
		Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
			HTMLРезультатПолнойСверки = "<html><body>";
			
			
			
			HTMLРезультатПолнойСверки = HTMLРезультатПолнойСверки + "<table border=""1"">";
			HTMLРезультатПолнойСверки = HTMLРезультатПолнойСверки + "<tr> 
			|<th>Объект сверки</th>
			|<th>Всего в 1С</th>
			|<th>Всего в обмене 1С</th>
			|<th>Всего для сверки 1С</th>
			|<th>Всего в SQL</th>
			|<th>Разница</th>
			|</tr>";
			
			Для каждого СтрокаТЗ из Результат Цикл 
				
				//--
				HTMLРезультатПолнойСверки = HTMLРезультатПолнойСверки + "<tr><td>" + СтрокаТЗ.ОбъектСверки + "</td><td>" + СтрокаТЗ.Всего1с +
				"</td><td>" + СтрокаТЗ.ВОбмене1с + "</td><td>" + СтрокаТЗ.ДляСверки1С + "</td><td>" + СтрокаТЗ.ВсегоSQL
				+ "</td><td>" + СтрокаТЗ.Разница +"</td></tr>" + Символы.ПС + Символ(13);
				
				
				
			КонецЦикла;		
			HTMLРезультатПолнойСверки = HTMLРезультатПолнойСверки + "</table></body></html>";
			
		Иначе
			HTMLРезультатПолнойСверки = Запись.РезультатПолнойСверки;
		КонецЕсли
		
	Исключение
		
		HTMLРезультатПолнойСверки = Запись.РезультатПолнойСверки;
		
	КонецПопытки;
	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаданияНаСверкуНаСервере()
	// Вставить содержимое обработчика.
	Попытка
		
		Результат = ЗначениеИзСтрокиВнутр(Запись.РезультатПолнойСверки);
		
		Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
					
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбъектыБазКВыгрузке.Ссылка КАК Ссылка,
			|	ОбъектыБазКВыгрузке.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
			|ГДЕ
			|	ОбъектыБазКВыгрузке.Владелец = &База
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОбъектыКВыгрузкеТипыБазы.Ссылка,
			|	ОбъектыКВыгрузкеТипыБазы.Ссылка.Наименование
			|ИЗ
			|	Справочник.ОбъектыКВыгрузке.ТипыБазы КАК ОбъектыКВыгрузкеТипыБазы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Базы КАК Базы
			|		ПО ОбъектыКВыгрузкеТипыБазы.ТипБазы = Базы.ТипБазы
			|ГДЕ
			|	Базы.Ссылка = &База";
			
			Запрос.УстановитьПараметр("База", Запись.База);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Для каждого СтрокаТЗ Из Результат Цикл
				
				Если СтрокаТЗ.Разница <> 0 Тогда
					
					Выборка.Сбросить();
					
					Отбор = Новый Структура("Наименование", СтрокаТЗ.ОбъектСверки);
					
					Пока Выборка.НайтиСледующий(Отбор) Цикл
						
						ЗапросНаСверку = РегистрыСведений.ЗапросыНаСверку.СоздатьМенеджерЗаписи();
						ЗапросНаСверку.Статус = Перечисления.СтатусыСверкиДанных.ОжидаетОбработки;
						ЗапросНаСверку.GUID = Строка(Новый УникальныйИдентификатор); 
						ЗапросНаСверку.Период = ТекущаяДатаСеанса();  
						ЗапросНаСверку.ДатаСтатуса = ТекущаяДатаСеанса();
						ЗапросНаСверку.ВыполнитьПодробнуюСверку = Истина;
						ЗапросНаСверку.РегистрироватьИзменения = Истина;
						ЗапросНаСверку.УдалитьИзSQL = Истина;
						ЗапросНаСверку.ОбъектСверки = Выборка.Ссылка;
						ЗапросНаСверку.ДатаНачала = Запись.ДатаНачала;
						ЗапросНаСверку.ДатаОкончания = Запись.ДатаОкончания;                 
						ЗапросНаСверку.База = Запись.База;
						ЗапросНаСверку.Организация = Запись.Организация;
						ЗапросНаСверку.Записать();
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Создан запрос на подробную сверку для объекта: " + Выборка.Наименование;
						Сообщение.Сообщить();						
						
					КонецЦикла;
					
				КонецЕсли;					
				
			КонецЦикла;			
			
		КонецЕсли;
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Нет технических данных для анализа. Сделайте повторный запрос на полную сверку";
		Сообщение.Сообщить();
		ЗаписьЖурналаРегистрации("Ошибка веб-сервиса", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());

		Возврат;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

