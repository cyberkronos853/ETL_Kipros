
#Область ОбработчикиСобытийФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти


#Область ОбработчикиКомандФормы
// Код процедур и функций  

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	ЗаписатьДанныеНаСервере();
КонецПроцедуры

  &НаКлиенте
Процедура ПолучитьДанные(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ТаблицаИсточник) Тогда
		Сообщить("Не выбран объект-источник");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
	    
		ПолучитьДанныеНаСервере();   
		
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций   

&НаСервере
Процедура ПрограммныйВыводТаблицыЗначенийВТаблицуНаФорму(ТаблицаЗначенийДляВывода, ИмяРеквизитаФормы, ИспользованиеКолонкиОтметка = Ложь, ТолькоКнопкаОткрытия = Истина)

   // Функционал данного механизма служит для программного вывода "Таблицы значений"
   // в реквизит управляемой  формы с типом "ДанныеФормыКоллекция". Может быть полезен
   // в задачах, где состав колонок выгружаемой таблицы значений может меняться.
   // Механизм предусматривает работу как с реквизитом объекта, так и с реквизитом формы.

   // Также реализована возможность быстрого добавления колонки «Отметка» и настройки доступности кнопок полей.
   // Процедура должна быть размещена в модуле формы.

   Попытка

       Если ТипЗнч(ТаблицаЗначенийДляВывода) = Тип("ТаблицаЗначений") Тогда
           Если ТипЗнч(ИмяРеквизитаФормы) = Тип("Строка") Тогда
               // Опрелеляем является заполняемый реквизит, реквизитом объекта или реквизитом формы
			   //Если Объект.Свойство(ИмяРеквизитаФормы) И ТипЗнч(Объект[ИмяРеквизитаФормы]) = Тип("ДанныеФормыКоллекция") Тогда
			   //    ПутьКДаннымФормыКоллекция = "Объект." + ИмяРеквизитаФормы;
			   //    ОбъектДляОтображенияНаФорме = РеквизитФормыВЗначение("Объект." + ИмяРеквизитаФормы);
			   //    ЭтоРеквизитОбъекта = Истина;
			   //Иначе
				   
				  Если ТипЗнч(ЭтаФорма[ИмяРеквизитаФормы]) = Тип("ДанныеФормыКоллекция") Тогда
                   ПутьКДаннымФормыКоллекция = ИмяРеквизитаФормы;
                   ОбъектДляОтображенияНаФорме = РеквизитФормыВЗначение(ИмяРеквизитаФормы ,Тип("ТаблицаЗначений"));
                   ЭтоРеквизитОбъекта = Ложь;
               КонецЕсли;
           КонецЕсли;

           МассивУдаляемыхРеквизитов = Новый Массив;
           МассивДобавляемыхРеквизитов = Новый Массив;
           МассивИсключаемыхРеквизитов = Новый Массив;

           // Формируем массив колонок для удаления
           Для Каждого Колонка Из ОбъектДляОтображенияНаФорме.Колонки Цикл
               МассивУдаляемыхРеквизитов.Добавить(ПутьКДаннымФормыКоллекция + "." + Колонка.Имя);
           КонецЦикла;

           // Удаляем колонки с формы
           Для Каждого Колонка Из ОбъектДляОтображенияНаФорме.Колонки Цикл
               ЭлементКолонки = Элементы.Найти(ИмяРеквизитаФормы + Колонка.Имя);
               Если НЕ ЭлементКолонки = Неопределено Тогда
                   Элементы.Удалить(ЭлементКолонки);
               КонецЕсли;
           КонецЦикла;

           // Добавляем колонку "Отметка"
           Если ИспользованиеКолонкиОтметка Тогда
               НоваяКолонка = Новый РеквизитФормы("Отметка", Новый ОписаниеТипов("Булево"),  ПутьКДаннымФормыКоллекция);
               МассивДобавляемыхРеквизитов.Добавить(НоваяКолонка);
           КонецЕсли;

           // Формируем массив колонок из таблицы значений
           Для Каждого Колонка Из ТаблицаЗначенийДляВывода.Колонки Цикл
               Если Колонка.ТипЗначения.Типы().Найти(Тип("Тип")) = Неопределено Тогда
                   НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения.Типы()), ПутьКДаннымФормыКоллекция);   
				   МассивДобавляемыхРеквизитов.Добавить(НоваяКолонка);
               Иначе
                   Сообщить("Колонка " + Строка(Колонка.Имя) + " с типом:  не может быть выгружена");
                   МассивИсключаемыхРеквизитов.Добавить(Колонка);
               КонецЕсли;
           КонецЦикла;

           // Обновляем реквизиты формы
           ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);

           //Создаем элементы на форме для отображения колонок
           ЭлементТЗ = Элементы[ИмяРеквизитаФормы];

           // Добавляем колонку "Отметка"
           Если ИспользованиеКолонкиОтметка Тогда
               НовыйЭлементФормы = Элементы.Добавить(ИмяРеквизитаФормы + "Отметка", Тип("ПолеФормы"), ЭлементТЗ);
               НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
               НовыйЭлементФормы.ПутьКДанным = ПутьКДаннымФормыКоллекция + "." + "Отметка";
               НовыйЭлементФормы.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
			   
           КонецЕсли;

           // Добавляем колонки из таблицы
           Для Каждого Колонка Из ТаблицаЗначенийДляВывода.Колонки Цикл
               Если МассивИсключаемыхРеквизитов.Найти(Колонка) = Неопределено Тогда
                   НовыйЭлементФормы = Элементы.Добавить(ИмяРеквизитаФормы + Колонка.Имя, Тип("ПолеФормы"), ЭлементТЗ);
                   НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
                   // Устанавливаем доступность кнопок
                   Если ТолькоКнопкаОткрытия Тогда
                       НовыйЭлементФормы.РедактированиеТекста = Ложь;
                       НовыйЭлементФормы.ВыбиратьТип = Ложь;
                       НовыйЭлементФормы.КнопкаВыбора  = Ложь;
                       НовыйЭлементФормы.КнопкаВыпадающегоСписка = Ложь;
                       НовыйЭлементФормы.КнопкаОткрытия = Истина;
                       НовыйЭлементФормы.КнопкаОчистки = Ложь;
                   Иначе
                       НовыйЭлементФормы.РедактированиеТекста = Истина;
                       НовыйЭлементФормы.ВыбиратьТип = Истина;
                       НовыйЭлементФормы.КнопкаВыбора  = Истина;
                       НовыйЭлементФормы.КнопкаВыпадающегоСписка = Истина;
                       НовыйЭлементФормы.КнопкаОткрытия = Истина;
                       НовыйЭлементФормы.КнопкаОчистки = Истина;
                   КонецЕсли;
                   НовыйЭлементФормы.КнопкаРегулирования = Ложь;
                   НовыйЭлементФормы.КнопкаСоздания = Ложь;
                   НовыйЭлементФормы.КнопкаСпискаВыбора = Ложь;
                   НовыйЭлементФормы.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
                   НовыйЭлементФормы.БыстрыйВыбор = Ложь;
                   НовыйЭлементФормы.ПутьКДанным = ПутьКДаннымФормыКоллекция + "." + Колонка.Имя;
               КонецЕсли;
           КонецЦикла;

           // Загружаем таблицу значений в данные формы коллекцию
           Если ЭтоРеквизитОбъекта Тогда
               //Объект[ИмяРеквизитаФормы].Загрузить(ТаблицаЗначенийДляВывода);
           Иначе
               ЭтаФорма[ИмяРеквизитаФормы].Загрузить(ТаблицаЗначенийДляВывода);
		   КонецЕсли;         
		   
		   
		   Элементы.ТаблицаСоответствийЗначениеЭталона.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый массив);
    
		   НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "ТипЭталона");
     	   НовыйМассив = Новый Массив();
    	   НовыйМассив.Добавить(НоваяСвязь);

    
    	   Элементы.ТаблицаСоответствийЗначениеЭталона.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		   
       Иначе
           Сообщить("Выводить можно только таблицу значений");
       КонецЕсли;

   Исключение
       ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
   КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеНаСервере()  
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();

	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураТаблицSQLСтруктураТаблицыSQL.ИмяПоляSQL КАК ИмяПоляSQL,
	               |	СтруктураТаблицSQLСтруктураТаблицыSQL.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Справочник.СтруктураТаблицSQL.СтруктураТаблицыSQL КАК СтруктураТаблицSQLСтруктураТаблицыSQL
	               |ГДЕ
	               |	СтруктураТаблицSQLСтруктураТаблицыSQL.Ссылка.Наименование = &СтруктураТаблицы
	               |	И СтруктураТаблицSQLСтруктураТаблицыSQL.ИмяПоляSQL <> """"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	Запрос.УстановитьПараметр("СтруктураТаблицы", ТаблицаИсточник);
		
	
	База = Строка(База);  	
    ИмяТаблицыSQL= Строка(ТаблицаИсточник);
	
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Сообщить("Необходимо проверить имена полей SQL в структуре таблиц");
		возврат;	
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	
	ЗапросБД = "SELECT "; 
	
	Если ЗначениеЗаполнено(КоличествоЭлементов) Тогда
		
		ЗапросБД = ЗапросБД + "TOP (" + Формат(КоличествоЭлементов, "ЧГ=") + ") ";
		
	КонецЕсли;
	
	МассивПолей = Новый Массив;      
	
	ТЗСоответствий = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ЗначенияЭталонов"));
	
	ТЗСоответствий.Колонки.Добавить("ЗначениеЭталона", Новый ОписаниеТипов(МассивТипов), "Значение эталонного справочника"); 
	
	ТЗСоответствий.Колонки.Добавить("GUID");
	
	МассивПолей.Добавить("S.GUID AS GUID");
	
	Пока Выборка.Следующий() Цикл
		
		МассивПолей.Добавить("S." + Выборка.ИмяПоляSQL + " AS " + Выборка.ИмяПоляSQL);
		ТЗСоответствий.Колонки.Добавить(Выборка.ИмяПоляSQL);
	КонецЦикла;    
	
	//МассивПолей.Добавить("D.DestGUID AS DestGUID");
	
	ЗапросБД = ЗапросБД + СтрСоединить(МассивПолей, ",") + " FROM [dbo].[" + ИмяТаблицыSQL + "] AS S
	|";
	
	
	ЗапросБД = ЗапросБД + " LEFT join et_mapping as D on S.GUID = D.SourceGUID 
	|AND S.base = D.base 
	|AND D.SourceGUID_table = '"+ ИмяТаблицыSQL +"'
	|";

	
	ЗапросБД = ЗапросБД + "WHERE S.id > 0 AND D.DestGUID is NULL";
	Если База <> "" Тогда
		ЗапросБД = ЗапросБД + " AND S.base = '" + СокрЛП(База) + "'";    
	КонецЕсли;
		
	

	Попытка
		
		ОбменSQL = Обработки.ОбменSQL.Создать();
		КомандаSQL = ОбменSQL.Соединение();
		КомандаSQL.CommandText = ЗапросБД;
		Выборка = КомандаSQL.Execute(); 
				
		Если КомандаSQL.ActiveConnection.Errors.Count > 0 Тогда 
			ОписаниеОшибки = "";	
			Для Каждого Ошибка из КомандаSQL.ActiveConnection.Errors Цикл 
				ОписаниеОшибки = ОписаниеОшибки + "Код: " + Ошибка.Number + ". " + Ошибка.Description + Символы.ПС;     
			КонецЦикла;   
			
			Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
		КонецЕсли;  
		
		
		Результат = Новый Массив;
		  
		
		Пока НЕ Выборка.EOF Цикл  
			СчетчикПолейРезультата = 0;
			СтруктураРезультата = Новый Структура;  
			НоваяСтрокаТЗ = ТЗСоответствий.Добавить();
			Пока СчетчикПолейРезультата < Выборка.Fields.Count Цикл				
				СтруктураРезультата.Вставить(Выборка.Fields.Item(СчетчикПолейРезультата).Name, Выборка.Fields(Выборка.Fields.Item(СчетчикПолейРезультата).Name).Value);  
				 
				НоваяСтрокаТЗ[Выборка.Fields.Item(СчетчикПолейРезультата).Name] = Выборка.Fields(Выборка.Fields.Item(СчетчикПолейРезультата).Name).Value;
				СчетчикПолейРезультата = СчетчикПолейРезультата + 1; 	
			КонецЦикла;  
			
			Результат.Добавить(СтруктураРезультата);	
			Выборка.MoveNext();
		КонецЦикла;  
		
		
	Исключение
		ОписаниеОшибки =  ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка веб-сервиса", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		
	КонецПопытки;
	ПрограммныйВыводТаблицыЗначенийВТаблицуНаФорму(ТЗСоответствий, "ТаблицаСоответствий",,Ложь);  
	
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеНаСервере()

	Для каждого СтрокаТЗ Из ТаблицаСоответствий Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ЗначениеЭталона)	Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.GUID) Тогда
			Продолжить;
		КонецЕсли;
		
		
		ЗаписьСоответствия = РегистрыСведений.СоответствияЭталонов.СоздатьМенеджерЗаписи();
		ЗаписьСоответствия.База = ТаблицаИсточник.Владелец;
		ЗаписьСоответствия.ГУИДСправочника = СтрокаТЗ.GUID;
		ЗаписьСоответствия.ТаблицаИсточник = ТаблицаИсточник;
		ЗаписьСоответствия.ТипЭталона = СтрокаТЗ.ЗначениеЭталона.Владелец;
		ЗаписьСоответствия.ЗначениеЭталона = СтрокаТЗ.ЗначениеЭталона;
		ЗаписьСоответствия.Записать();		
		
	КонецЦикла;
	
	
КонецПроцедуры


#КонецОбласти