#Область СлужебныйПрограммныйИнтерфейс
	

Процедура ИнициализироватьТаблицыДляЭталонов() Экспорт
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	КомандаSQL = ОбменSQL.Соединение();
	КомандаSQL.CommandType = 1;

	Команда = "SET ANSI_NULLS ON
		|SET QUOTED_IDENTIFIER ON";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыЭталонов.Ссылка КАК Ссылка,
		|	ТипыЭталонов.Наименование КАК Наименование,
		|	ТипыЭталонов.ИмяТаблицыSQL КАК ИмяТаблицыSQL
		|ИЗ
		|	ПланВидовХарактеристик.ТипыЭталонов КАК ТипыЭталонов
		|ГДЕ
		|	НЕ ТипыЭталонов.ПометкаУдаления
		|	И ТипыЭталонов.Выгружать";   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
			
		тИмя = СокрЛП(Выборка.ИмяТаблицыSQL); 
		
		СкриптИндексов = "";  
				
		
		тСтруктура = Выборка.Ссылка.Реквизиты.Выгрузить(); 
			
		СкриптТаблицы = 
					"IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND type in (N'U'))
					|BEGIN
					|CREATE TABLE [dbo].[" + тИмя + "](
					|	[id] [decimal](18, 0) NOT NULL IDENTITY(1,1),"; 
		
		
		СкриптВременнойТаблицы = 
				"IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "_temp]') AND type in (N'U'))
				|BEGIN
				|CREATE TABLE [dbo].[" + тИмя + "_temp](";  
						
			
				СкриптТаблицы = СкриптТаблицы + "
					|	[GUID] [nvarchar](36) NULL,
					//++ 27.12.2024 Корыткин Добавлена пометка удаления
					|	[DeletionMark] [bit] NULL,
                    //-- 27.12.2024
    				|	[Parent_Table] [nvarchar](100) NULL,
					|	[Parent] [nvarchar](36) NULL,";
					
					СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
					|	[GUID] [nvarchar](36) NULL,
					//++ 05.12.2024 Корыткин Добавлено удаление объектов
					|	[DeletionFlag] [bit] NULL, 
					//-- 05.12.2024
					//++ 27.12.2024 Корыткин Добавлена пометка удаления
					|	[DeletionMark] [bit] NULL,
                    //-- 27.12.2024
					|	[Parent_Table] [nvarchar](100) NULL,
					|	[Parent] [nvarchar](36) NULL,";
				
				СкриптИндексов = 
					"IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND name = N'" + тИмя + "_IDX1')
					|CREATE UNIQUE CLUSTERED INDEX [" + тИмя + "_IDX1] ON [dbo].[" + тИмя + "]
					|(  
					|	[GUID]	
					|)ON [PRIMARY]";
											
			НомерИндекса = 2; 
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.ЗначенияЭталонов"));
			ОписаниеТипаСсылки = Новый ОписаниеТипов(МассивТипов);       
			
			
			Для Каждого Строка Из тСтруктура Цикл
				Если Строка.Реквизит.ТипЗначения = ОписаниеТипаСсылки Тогда
					СкриптТаблицы = СкриптТаблицы + "
						|	[" + СокрЛП(Строка.ИмяПоляSQL) + "_Table] [nvarchar](100) NULL,";	
				КонецЕсли;
				СкриптТаблицы = СкриптТаблицы + "
					|	[" + СокрЛП(Строка.ИмяПоляSQL) + "] " + Строка.Реквизит.ТипПоля.ИмяТипаSQL +  " NULL,";  
				
				Если Строка.Реквизит.ТипЗначения = ОписаниеТипаСсылки Тогда
						СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
							|	[" + СокрЛП(Строка.ИмяПоляSQL) + "_Table] [nvarchar](100) NULL,";	
				КонецЕсли;  
				
				Если Строка.Реквизит.ТипПоля.Дата Тогда
						СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
							|	[" + СокрЛП(Строка.ИмяПоляSQL) + "] [nvarchar](20) NULL,";	
					Иначе
						СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
							|	[" + СокрЛП(Строка.ИмяПоляSQL) + "] " + Строка.Реквизит.ТипПоля.ИмяТипаSQL +  " NULL,"; 
				КонецЕсли;
				
				//Если Строка.Индекс Тогда
				//	СкриптИндексов = СкриптИндексов + "
				//		|IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND name = N'" + тИмя + "_IDX" + Строка(НомерИндекса) + "')
				//		|CREATE NONCLUSTERED INDEX [" + тИмя + "_IDX" + Строка(НомерИндекса) + "] ON [dbo].[" + тИмя + "]
				//		|(
				//		|	[" + СокрЛП(Строка.ИмяПоляSQL) + "]
				//		|)ON [PRIMARY]";
				//	НомерИндекса = НомерИндекса + 1;	
				//КонецЕсли;  
			КонецЦикла;	 
			
			
				СкриптТаблицы = СкриптТаблицы + "
					|	CONSTRAINT PK_" + тИмя + " PRIMARY KEY NONCLUSTERED (id) ";
			
			СкриптТаблицы = Лев(СкриптТаблицы, СтрДлина(СкриптТаблицы) - 1); 
			СкриптТаблицы = СкриптТаблицы + "
				|) ON [PRIMARY]
				|END";   
			
						СкриптВременнойТаблицы = Лев(СкриптВременнойТаблицы, СтрДлина(СкриптВременнойТаблицы) - 1); 
				СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
					|) ON [PRIMARY]
					|END"; 
				 
			
			
				
		КомандаSQL.CommandText = Команда + Символы.ПС + СкриптТаблицы + Символы.ПС + СкриптИндексов + Символы.ПС + СкриптВременнойТаблицы + Символы.ПС + "SET ANSI_PADDING ON";	
		КомандаSQL.Execute();
				
	КонецЦикла;   	
	
КонецПроцедуры

Процедура ИнициализироватьТаблицуСоответствий() Экспорт
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	КомандаSQL = ОбменSQL.Соединение();
	КомандаSQL.CommandType = 1;

	Команда = "SET ANSI_NULLS ON
		|SET QUOTED_IDENTIFIER ON";
	
			
		тИмя = "et_Mapping";
		  
		
		СкриптИндексов = "";  
			
		
		СкриптТаблицы = 
		"IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND type in (N'U'))
		|BEGIN
		|CREATE TABLE [dbo].[" + тИмя + "](
		|	[id] [decimal](18, 0) NOT NULL IDENTITY(1,1),
		|	[Base] [nvarchar](50) NULL,
		|	[SourceGUID_table] [nvarchar] (100),
		|	[SourceGUID] [nvarchar] (36),
		|	[DestGUID_Table] [nvarchar] (100),
		|	[DestGUID] [nvarchar] (36),
		|	[sourceId] [decimal] (18, 0)"; 
		
		
		СкриптВременнойТаблицы = 
		"IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "_temp]') AND type in (N'U'))
		|BEGIN
		|CREATE TABLE [dbo].[" + тИмя + "_temp](
		|	[Base] [nvarchar](50) NULL,
		|	[DeletionFlag] [bit] NULL,
		|	[SourceGUID_table] [nvarchar] (100),
		|	[SourceGUID] [nvarchar] (100),
		|	[DestGUID_table] [nvarchar] (100),
		|	[DestGUID] [nvarchar] (36)";
		
 			
		СкриптИндексов = 
		"IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND name = N'" + тИмя + "_IDX1')
		|CREATE NONCLUSTERED INDEX [" + тИмя + "_IDX1] ON [dbo].[" + тИмя + "]
		|(
		|	[Base] 
		|)ON [PRIMARY]";
		                  	
		НомерИндекса = 2;  		
		
		СкриптИндексов = СкриптИндексов + "
						|IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND name = N'" + тИмя + "_IDX" + Строка(НомерИндекса) + "')
						|CREATE NONCLUSTERED INDEX [" + тИмя + "_IDX" + Строка(НомерИндекса) + "] ON [dbo].[" + тИмя + "]
						|(
						|	[SourceGUID]
						|)ON [PRIMARY]";
					НомерИндекса = НомерИндекса + 1;
		
		СкриптТаблицы = СкриптТаблицы + "
		|	CONSTRAINT PK_" + тИмя + " PRIMARY KEY NONCLUSTERED (id) ";
		
		//СкриптТаблицы = Лев(СкриптТаблицы, СтрДлина(СкриптТаблицы) - 1); 
		СкриптТаблицы = СкриптТаблицы + "
		|) ON [PRIMARY]
		|END";   
		
		//СкриптВременнойТаблицы = Лев(СкриптВременнойТаблицы, СтрДлина(СкриптВременнойТаблицы) - 1); 
		СкриптВременнойТаблицы = СкриптВременнойТаблицы + "
		|) ON [PRIMARY]
		|END"; 
				
		
		
		КомандаSQL.CommandText = Команда + Символы.ПС + СкриптТаблицы + Символы.ПС + СкриптИндексов + Символы.ПС + СкриптВременнойТаблицы + Символы.ПС + "SET ANSI_PADDING ON";	
		КомандаSQL.Execute();
	
	
КонецПроцедуры    

Процедура ИнициализироватьТаблицуЭталоновПоУмолчанию() Экспорт
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	КомандаSQL = ОбменSQL.Соединение();
	КомандаSQL.CommandType = 1;

	Команда = "SET ANSI_NULLS ON
		|SET QUOTED_IDENTIFIER ON";
	
			
		тИмя = "et_Defaults";
			
		
		СкриптТаблицы = 
		"IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND type in (N'U'))
		|DROP Table  [dbo].[" + тИмя + "]" + " 
		|CREATE TABLE [dbo].[" + тИмя + "](
		|	[id] [decimal](18, 0) NOT NULL IDENTITY(1,1),
		|	[M_table] [nvarchar] (100),
		|	[M_GUID] [nvarchar] (36),
		|	[M_name] [nvarchar] (150))
		|"; 
		
		
		Запрос = Новый Запрос;    
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗначенияЭталонов.Ссылка КАК Ссылка,
		               |	ЗначенияЭталонов.Владелец.ИмяТаблицыSQL КАК ИмяТаблицыSQL,
		               |	ЗначенияЭталонов.Наименование КАК Наименование
		               |ИЗ
		               |	Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
		               |ГДЕ
		               |	ЗначенияЭталонов.ЭталонПоУмолчанию";  
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			
			
			СкриптДобавленияЭлементов = "INSERT INTO [dbo].[et_defaults] (M_GUID, M_table, M_name) 
			| VALUES "+ Символы.ПС;
			
			Пока Выборка.Следующий() Цикл
				СкриптДобавленияЭлементов = СкриптДобавленияЭлементов + "( '" + XMLСтрока(Выборка.Ссылка.УникальныйИдентификатор()) + "', '" + Выборка.ИмяТаблицыSQL +
				"', '" + Выборка.Наименование + "')," + Символы.ПС; 
				
			КонецЦикла;
			
			СкриптДобавленияЭлементов = Лев(СкриптДобавленияЭлементов, СтрДлина(СкриптДобавленияЭлементов) - 2);

			
		КонецЕсли;	
			
		
		КомандаSQL.CommandText = Команда + Символы.ПС + СкриптТаблицы + Символы.ПС + СкриптДобавленияЭлементов + Символы.ПС + "SET ANSI_PADDING ON";	
		КомандаSQL.Execute();
				
	 	
	
	
	
КонецПроцедуры    

Процедура ЗаполнитьЭталоныПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыЭталонов.Ссылка КАК ТипЭталона,
	               |	ЗначенияЭталонов.Ссылка КАК ЗначениеЭталона,
	               |	ТипыЭталонов.ИмяТаблицыSQL КАК ИмяТаблицыSQL,
	               |	ТипыЭталоновРеквизиты.ИмяПоляSQL КАК ИмяПоляSQL
	               |ИЗ
	               |	ПланВидовХарактеристик.ТипыЭталонов КАК ТипыЭталонов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
	               |		ПО (ЗначенияЭталонов.Владелец = ТипыЭталонов.Ссылка)
	               |			И (ЗначенияЭталонов.ЭталонПоУмолчанию)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыЭталонов.Реквизиты КАК ТипыЭталоновРеквизиты
	               |		ПО ТипыЭталоновРеквизиты.Ссылка = ТипыЭталонов.Ссылка
	               |			И ТипыЭталоновРеквизиты.Реквизит = ТипыЭталонов.ОсновноеПредставление";

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	КомандаSQL = ОбменSQL.Соединение();
	КомандаSQL.CommandType = 1;

	Команда = "SET ANSI_NULLS ON
		|SET QUOTED_IDENTIFIER ON 
		| ";
	
	СкриптДобавленияЭлементов = "";
	Пока Выборка.Следующий() Цикл	
			
		тИмя = Выборка.ИмяТаблицыSQL;
		тРеквизит = Выборка.ИмяПоляSQL;	
		Запрос = Новый Запрос;    
		
				
		
		Если ЗначениеЗаполнено(Выборка.ЗначениеЭталона) Тогда
								
			СкриптДобавленияЭлементов = СкриптДобавленияЭлементов + "IF EXISTS (SELECT GUID FROM [dbo]." + тИмя + "
			| WHERE id = -1)
			| BEGIN
			| 	UPDATE " + тИмя + "
			| 	SET GUID = '00000000-0000-0000-0000-000000000000'" + ?(ЗначениеЗаполнено(тРеквизит),"," + тРеквизит + "= '" +Строка(Выборка.ЗначениеЭталона) + "'", "" ) + "
			//| 	SET GUID = '" + XMLСтрока(Выборка.ЗначениеЭталона.УникальныйИдентификатор()) + "'" + ?(ЗначениеЗаполнено(тРеквизит),"," + тРеквизит + "= '" +Строка(Выборка.ЗначениеЭталона) + "'", "" ) + "
			|
			| 	WHERE id = -1
			| END
			| ELSE
			| BEGIN
			|	SET IDENTITY_INSERT [dbo]." + тИмя + " ON
			| 	INSERT INTO [dbo]." + тИмя + " (id, GUID" + ?(ЗначениеЗаполнено(тРеквизит),", " + тРеквизит, "" ) + ")  
			| 	VALUES (-1, '00000000-0000-0000-0000-000000000000'" + ?(ЗначениеЗаполнено(тРеквизит),", '" +Строка(Выборка.ЗначениеЭталона) + "'", "") + ") 
			//| 	VALUES (-1, '" + XMLСтрока(Выборка.ЗначениеЭталона.УникальныйИдентификатор()) + "'" + ?(ЗначениеЗаполнено(тРеквизит),", '" +Строка(Выборка.ЗначениеЭталона) + "'", "") + ") 
			|	SET IDENTITY_INSERT [dbo]." + тИмя + " OFF
			| END
			|";
			
		Иначе	СкриптДобавленияЭлементов = СкриптДобавленияЭлементов + "IF EXISTS (SELECT GUID FROM [dbo]." + тИмя + "
			| WHERE id = -1)
			| BEGIN
			| 	UPDATE " + тИмя + "
			| 	SET GUID = '00000000-0000-0000-0000-000000000000'" + ?(ЗначениеЗаполнено(тРеквизит),"," + тРеквизит + "= 'Прочее'","" ) + "
			|
			| 	WHERE id = -1
			| END
			| ELSE
			| BEGIN 
			|	SET IDENTITY_INSERT [dbo]." + тИмя + " ON			
			| 	INSERT INTO [dbo]." + тИмя + " (id, GUID" + ?(ЗначениеЗаполнено(тРеквизит),", " + тРеквизит, "" ) + ")  
			| 	VALUES (-1, '00000000-0000-0000-0000-000000000000'" + ?(ЗначениеЗаполнено(тРеквизит),", 'Прочее'", "") + ") 
			|	SET IDENTITY_INSERT [dbo]." + тИмя + " OFF
			| END
			|";	
					
		КонецЕсли;	
			
	КонецЦикла;
	
	КомандаSQL.CommandText = Команда + Символы.ПС + СкриптДобавленияЭлементов + Символы.ПС + "SET ANSI_PADDING ON" + Символы.ПС;	
	КомандаSQL.Execute();
	
КонецПроцедуры    


Процедура УдалитьТаблицы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицыЭталоновДляРеструктуризации.ТипЭталона КАК ТипЭталона,
		|	ТаблицыЭталоновДляРеструктуризации.ТипЭталона.ИмяТаблицыSQL КАК ИмяТаблицыSQL
		|ИЗ
		|	РегистрСведений.ТаблицыЭталоновДляРеструктуризации КАК ТаблицыЭталоновДляРеструктуризации"; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	   		
		тИмя = Выборка.ИмяТаблицыSQL;
				
		Команда =
			"IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "]') AND type in (N'U'))
			|BEGIN
			|DROP TABLE [dbo].[" + тИмя + "]
			|END";
		Команда = Команда + "
				|IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "_temp]') AND type in (N'U'))
				|BEGIN
				|DROP TABLE [dbo].[" + тИмя + "_temp]
				|END"; 
		Команда = Команда + "
				|IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + тИмя + "_NewData]') AND type in (N'U'))
				|BEGIN
				|DROP TABLE [dbo].[" + тИмя + "_NewData]
				|END";
		
		ОбменSQL = Обработки.ОбменSQL.Создать();	
		КомандаSQL = ОбменSQL.Соединение();
		КомандаSQL.CommandText = Команда;
		КомандаSQL.Execute();	
		
		МенеджерЗаписи = РегистрыСведений.ТаблицыЭталоновДляРеструктуризации.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипЭталона = Выборка.ТипЭталона; 
		МенеджерЗаписи.Удалить();                     
		
		
		УзелОбмена = Обмен.ПолучитьУзелОменаЭталонами();		      
		
		Если ЗначениеЗаполнено(УзелОбмена) Тогда
			ЗапросЗначенийПоТипу = Новый Запрос;
			ЗапросЗначенийПоТипу.Текст = "ВЫБРАТЬ
			                             |	ЗначенияЭталонов.Ссылка КАК Ссылка
			                             |ИЗ
			                             |	Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
			                             |ГДЕ
			                             |	ЗначенияЭталонов.Владелец = &ТипЭталона";
			ЗапросЗначенийПоТипу.УстановитьПараметр("ТипЭталона", Выборка.ТипЭталона);

			Результат = ЗапросЗначенийПоТипу.Выполнить().Выгрузить(); 	
			
			//Не все версии платформы поддерживаются регистрацию массива.
		    Попытка
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Результат.ВыгрузитьКолонку("Ссылка"));
			Исключение  
				Для каждого СтрокаРезультата из Результат Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаРезультата.Ссылка);
				КонецЦикла;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникиИзВременныхТаблиц() Экспорт
	
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыЭталонов.Ссылка КАК Ссылка,
	|	ТипыЭталонов.Наименование КАК Наименование,
	|	ТипыЭталонов.ИмяТаблицыSQL КАК ИмяТаблицыSQL
	|ИЗ
	|	ПланВидовХарактеристик.ТипыЭталонов КАК ТипыЭталонов
	|ГДЕ
	|	НЕ ТипыЭталонов.ПометкаУдаления
	|	И ТипыЭталонов.Выгружать";   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		тИмя = СокрЛП(Выборка.ИмяТаблицыSQL);	
		
		
		тСтруктура = Выборка.Ссылка.Реквизиты.Выгрузить(); 
		
		ПоляАпдейт = ",";
		ПоляИнсерт = ","; 
		ПоляИнсертЗначения = ","; 
		ПоляИндекс = "";  
		ПоляДелет = "";   
		ПоляМержВложЗапрос = ""; 
		ПоляМержСвязь = "";
		ПоляМержИнсерт = "";
		
		
		Для Каждого Строка Из тСтруктура Цикл  
			Если Строка.Реквизит.ТипПоля.GUID Тогда
				ПоляАпдейт = ПоляАпдейт + "
				|		[" + Строка.ИмяПоляSQL + "_Table] = T.[" + Строка.ИмяПоляSQL + "_Table],"; 
				ПоляИнсерт = ПоляИнсерт + "
				|		[" + Строка.ИмяПоляSQL + "_Table],";
				ПоляИнсертЗначения = ПоляИнсертЗначения + "
				|		T.[" + Строка.ИмяПоляSQL + "_Table],";  
				
			КонецЕсли;  
			ПоляИнсерт = ПоляИнсерт + "
			|		[" + Строка.ИмяПоляSQL + "],";
			Если Строка.Реквизит.ТипПоля.Дата Тогда
				ПоляАпдейт = ПоляАпдейт + "
				|		[" + Строка.ИмяПоляSQL + "] = CAST(T.[" + Строка.ИмяПоляSQL + "] AS DATETIME2),"; 
				ПоляИнсертЗначения = ПоляИнсертЗначения + "
				|		CAST(T.[" + Строка.ИмяПоляSQL + "] AS DATETIME2),";	
			Иначе
				ПоляАпдейт = ПоляАпдейт + "
				|		[" + Строка.ИмяПоляSQL + "] = T.[" + Строка.ИмяПоляSQL + "],"; 
				ПоляИнсертЗначения = ПоляИнсертЗначения + "
				|		T.[" + Строка.ИмяПоляSQL + "],";    
			КонецЕсли;
			
		КонецЦикла; 
		
		ПоляАпдейт = Лев(ПоляАпдейт, СтрДлина(ПоляАпдейт) - 1);
		ПоляИнсерт = Лев(ПоляИнсерт, СтрДлина(ПоляИнсерт) - 1);
		ПоляИнсертЗначения = Лев(ПоляИнсертЗначения, СтрДлина(ПоляИнсертЗначения) - 1);	
		ПоляИндекс =  Лев(ПоляИндекс, СтрДлина(ПоляИндекс) - 2);  
		ПоляМержВложЗапрос =  Лев(ПоляМержВложЗапрос, СтрДлина(ПоляМержВложЗапрос) - 2);  
		ПоляМержИнсерт =  Лев(ПоляМержИнсерт, СтрДлина(ПоляМержИнсерт) - 2);
		
		//++ 05.12.2024 Корыткин Добавлено удаление объектов
		//++ 27.12.2024 Корыткин Добавлена пометка удаления
		СкриптТаблицы = 
		"DECLARE @i int
		|SELECT @i=Count(*) FROM [dbo].[" + тИмя + "_temp]
		|IF @i=0
		|RETURN 
		|
		|BEGIN TRY
		|	DROP INDEX " + тИмя + "_temp_IDX1 ON " + тИмя + "_temp
		|END TRY
		|BEGIN CATCH
		|  IF ERROR_NUMBER() <> 3701
		|  THROW
		|END CATCH 
		|
		|CREATE INDEX " + тИмя + "_temp_IDX1 ON " + тИмя + "_temp (GUID)
		|
		|MERGE [dbo].[" + тИмя + "] O
		|	USING [dbo].[" + тИмя + "_temp] T
		|	ON O.GUID = T.GUID
		|WHEN MATCHED AND COALESCE(T.DeletionFlag, 0) = 1 THEN
		|	DELETE
		|WHEN MATCHED THEN
		|	UPDATE SET [Parent_table] = T.[Parent_Table],[Parent] = T.[Parent],[DeletionMark] = T.[DeletionMark] " + ПоляАпдейт + "
		|WHEN NOT MATCHED THEN 
		|	INSERT
		|		(
		|		[GUID],[Parent_table],[Parent],[DeletionMark]" + ПоляИнсерт + ")
		|	VALUES 
		|		(
		|		T.[GUID],T.[Parent_table],T.[Parent],T.[DeletionMark]" + ПоляИнсертЗначения + ");
		|
		|DROP INDEX " + тИмя + "_temp_IDX1 ON " + тИмя + "_temp
		|
		|TRUNCATE TABLE " + тИмя + "_temp;";  
		
			
		Результат = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(СкриптТаблицы);
		
		Если Результат.ЕстьОшибки Тогда
				
			Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);;
			ЗаписьЖурналаРегистрации("Ошибка при заполнении таблиц", УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
			
		КонецЕсли; 		
	КонецЦикла;  	
	
КонецПроцедуры


Процедура ЗаполнитьСоответствияИзВременнойТаблицы() Экспорт
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();	ОбменSQL = Обработки.ОбменSQL.Создать();
		
	тИмя = "et_Mapping";	
	
	СкриптТаблицы = "
	|	DECLARE @i int
	|SELECT @i=Count(*) FROM [dbo].[et_Mapping_temp]
	|IF @i=0
	|RETURN 
	|         
	//|MERGE [dbo].[et_Mapping_NewData] ND
	//|	USING (SELECT DISTINCT [Base] AS Base, SourceGUID_Table AS SourceGUID_Table, SourceGUID AS SourceGUID FROM [dbo].[et_mapping_temp] WHERE DeletionFlag <> 1) T
	//|ON ND.Base = T.Base AND ISNULL(ND.SourceGUID_Table, '') = ISNULL(T.SourceGUID_Table, '') AND ISNULL(ND.SourceGUID, '') = ISNULL(T.SourceGUID, '') 
	//|	WHEN NOT MATCHED THEN 
	//|INSERT 
	//|	(Base, SourceGUID_Table, SourceGUID, [TimeInsert]) 
	//|VALUES 
	//|	(T.[Base], T.SourceGUID_Table, T.SourceGUID, CURRENT_TIMESTAMP);
	//|
	|BEGIN TRY
	|	DROP INDEX et_Mapping_temp_IDX1 ON et_Mapping_temp
	|END TRY
	|BEGIN CATCH
	|  IF ERROR_NUMBER() <> 3701
	|  THROW
	|END CATCH
	|
	|CREATE INDEX et_Mapping_temp_IDX1 ON et_Mapping_temp (Base, SourceGUID_Table, SourceGUID)  
	|
	|DELETE FROM et_Mapping WHERE EXISTS (SELECT 1 FROM et_Mapping_temp WHERE et_Mapping_temp.Base = et_Mapping.Base
	|		AND ISNULL(et_Mapping_temp.SourceGUID_Table, '') = ISNULL(et_Mapping.SourceGUID_Table, '') 
	|		AND ISNULL(et_Mapping_temp.SourceGUID, '') = ISNULL(et_Mapping.SourceGUID, '')
	|		AND ISNULL(et_Mapping_temp.DestGUID_Table, '') = ISNULL(et_Mapping.DestGUID_Table, '')
	|)
	| 
	|INSERT INTO et_Mapping
	|		([Base],
	|		[SourceGUID_Table],
	|		[SourceGUID],
	|		[DestGUID_Table],
	|		[DestGUID])
	|SELECT 
	|	[Base],
	|		[SourceGUID_Table],
	|		[SourceGUID],
	|		[DestGUID_Table],
	|		[DestGUID]
	|FROM [dbo].[et_Mapping_temp]
	|WHERE 
	|	COALESCE([DeletionFlag], 0) <> 1
	|     
	|INSERT INTO map_MappingMarker_tmp
	|		([Base])
	|SELECT DISTINCT
	|	[Base]
	|FROM [dbo].[et_Mapping_temp]
	|     
    |DROP INDEX et_Mapping_temp_IDX1 ON et_Mapping_temp  
	|
	|TRUNCATE TABLE et_Mapping_temp";   
	
	
	Результат = Коннектор.ВыполнитьПроизвольныйDMLЗапрос(СкриптТаблицы);
		
	Если Результат.ЕстьОшибки Тогда
			
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);;
		ЗаписьЖурналаРегистрации("Ошибка при заполнении таблиц", УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
		
	КонецЕсли; 	
	
КонецПроцедуры


 Функция ПолучитьТипЗначенияЭталона(ТипЭталона) Экспорт
    // Проверяем, что передана непустая ссылка и она относится к плану видов характеристик "ТипыЭталонов"
    Если НЕ ЗначениеЗаполнено(ТипЭталона) 
        ИЛИ ТипЗнч(ТипЭталона) <> Тип("ПланВидовХарактеристикСсылка.ТипыЭталонов") Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    // Получаем объект плана видов характеристик
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |    ТипыЭталонов.ТипЗначения
        |ИЗ
        |    ПланВидовХарактеристик.ТипыЭталонов КАК ТипыЭталонов
        |ГДЕ
        |    ТипыЭталонов.Ссылка = &Ссылка";
        
    Запрос.УстановитьПараметр("Ссылка", ТипЭталона);
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    Если Выборка.Следующий() Тогда
        // Получаем массив типов из ОписанияТипов и возвращаем первый тип
        Типы = Выборка.ТипЗначения.Типы();
        Если Типы.Количество() > 0 Тогда
            Возврат Типы[0];
        Иначе
            Возврат Неопределено;
        КонецЕсли;
    Иначе
        Возврат Неопределено;
    КонецЕсли;
    
КонецФункции  

#КонецОбласти
