 
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьВидимостьКоманд();
КонецПроцедуры
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	
	
	УстановитьЭлементыФормы();
	
	Если Объект.Ссылка.Пустая() Тогда
		ДобавитьИзменитьСтрокиПоказателейНаСервере();
	//	ЭталонныйДокументПолучен = Ложь;
	//Иначе
	//	ЭталонныйДокументПолучен = Истина;
	КонецЕсли;
	
	Бюджет = Справочники.авБюджеты.НайтиПоКоду(1);
	
	РедактироватьДерево(); 
	
	Элементы.ДеревоПрочиеПоказатели.ТолькоПросмотр = Не Объект.ВидПоказателя.РучнойВвод;
	Элементы.ПрочиеПоказатели.ТолькоПросмотр = Не Объект.ВидПоказателя.РучнойВвод;
	
	
КонецПроцедуры  

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	Если  Объект.ВидПоказателя.РучнойВвод Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
		ТЗ = Объект.ПрочиеПоказатели.Выгрузить();
		ДеревоВТЧ(Дерево.Строки,ТЗ);
		ТекущийОбъект.ПрочиеПоказатели.Загрузить(ТЗ);
		ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РедактироватьДерево()
	
	
	Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	Дерево.Строки.Очистить();
	ПересчитатьВсеДерево(Дерево);
	ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	ОпределитьВидимостьКолонокДерева();
	
КонецПроцедуры // РедактироватьДерево()


&НаСервере
Процедура ПересчитатьВсеДерево(дз_стр)
	
	Для каждого стр из дз_стр.Строки Цикл
		
		Если стр.строки.количество()>0 тогда
			ПересчитатьВсеДерево(стр);
		Иначе
			ПересчетСуммДерева(стр);
		КонецЕсли;
		
	КонецЦикла;
	
Конецпроцедуры

Процедура ПересчетСуммДерева(ТекСтрока)
	
	Родитель=ТекСтрока.Родитель;
	Если Родитель=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Родитель.Sum                   = Родитель.Строки.Итог("Sum");
	Родитель.AmountDebt            = Родитель.Строки.Итог("AmountDebt");
	Родитель.AmountDebtMore100     = Родитель.Строки.Итог("AmountDebtMore100");
	Родитель.AmountDebtMore500     = Родитель.Строки.Итог("AmountDebtMore500");
	Родитель.AmountBalance         = Родитель.Строки.Итог("AmountBalance");
	Родитель.AmountBalancePledge   = Родитель.Строки.Итог("AmountBalancePledge");
	ПересчетСуммДерева(Родитель);
	
КонецПроцедуры


&НаСервере
Процедура ОпределитьВидимостьКолонокДерева()
	
	МассивПоказателей = Объект.ПрочиеПоказатели.Выгрузить(,"Показатель");
	МассивПоказателей.Свернуть("Показатель");
	
	Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	ТЗ = Объект.ПрочиеПоказатели.Выгрузить();
	
	//ТЗ.ЗаполнитьЗначения(Справочники.авСтатьиБюджетов.ПустаяСсылка(),"BS");	
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	INDПрочиеПоказатели.Ссылка КАК Показатель,
	|	INDПрочиеПоказатели.Родитель КАК Родитель,
	|	INDПрочиеПоказатели.Код КАК КодПоказателя
	|ИЗ
	|	Справочник.авINDПрочиеПоказатели КАК INDПрочиеПоказатели
	|ГДЕ
	|	INDПрочиеПоказатели.Ссылка В(&МассивПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	INDПрочиеПоказатели.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель",Выборка.Родитель));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Выборка);
		Иначе
			Пока СтрокаДерева.Показатель<>Выборка.Родитель Цикл
				СтрокаДерева=СтрокаДерева.Родитель;
			КонецЦикла;
			СтрокаДерева				= СтрокаДерева.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Выборка);
		КонецЕсли;
		
		ЗаполнитьСтрокуВДерево(СтрокаДерева,Выборка.КодПоказателя,ТЗ);
		
	КонецЦикла;	 
	ЗаполнитьУровеньДерева(Дерево.Строки);
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	Для Каждого КолонкаДерева Из Дерево.Колонки Цикл
		Элементы["ДеревоПрочиеПоказатели"+КолонкаДерева.Имя].Видимость = Ложь;
	КонецЦикла;
	
	Для Каждого ВидПоказателя Из Объект.ВидПоказателя.КолонкиПоказателей Цикл
		Элементы["ДеревоПрочиеПоказатели"+ВидПоказателя.ИмяКолонки].Видимость = Не ВидПоказателя.НеОтображатьВДЗО;
	КонецЦикла;
	
КонецПроцедуры // ОпределитьВидимостьКолонокДерева()

&НаСервере
Процедура ЗаполнитьСтрокуВДерево(СтрокаДерева,КодПоказателя,ТЗ)
	
	ТЗКопия = ТЗ.Скопировать();
	ТЗКопия.Свернуть("Показатель,BSname,TypeMovementName","Sum");
	НайденныеСтроки  = ТЗКопия.НайтиСтроки(Новый Структура("Показатель",СтрокаДерева.Показатель));
	Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтрокаДерева,НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры // 

&НаСервере
Процедура ЗаполнитьУровеньДерева(СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.Уровень = СтрокаДерева.Уровень();
		Если СтрокаДерева.Строки.Количество() Тогда 
			ЗаполнитьУровеньДерева(СтрокаДерева.Строки);			
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьУровеньДерева()



&НаСервере
Процедура УстановитьЭлементыФормы()
	
	Если ЗначениеЗаполнено(Объект.ВидПоказателя) Тогда
		ОчиститьКолонкиПОказателей();
		КолонкиВида = Объект.ВидПоказателя.КолонкиПоказателей;
		
		Для Каждого  СтрокаКолонки Из КолонкиВида Цикл
			Если СтрокаКолонки.ИмяКолонки = "КодПоказателя" Или СтрокаКолонки.ИмяКолонки = "Показатель" Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = Элементы.Добавить(СтрокаКолонки.ИмяКолонки,Тип("ПолеФормы"),Элементы.ПрочиеПоказатели);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Заголовок = СтрокаКолонки.СинонимКолонки;  
			НовыйЭлемент.ПутьКДанным = "Объект.ПрочиеПоказатели."+СтрокаКолонки.ИмяКолонки;
			Если СтрокаКолонки.ИмяКолонки = "BS" Тогда
				
				НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ЭлементBSНачалоВыбора");
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзменитьСтрокиПоказателейНаСервере()
	
	Объект.ПрочиеПоказатели.Очистить();
	СтрокиВида = Объект.ВидПоказателя.СтрокиПоказателей;
	
	Для Каждого  СтрокаВида Из СтрокиВида Цикл 
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя КАК ВидПоказателя,
		|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель КАК Показатель,
		|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК Статья,
		|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Представление КАК СтатьиПредставление
		|ИЗ
		|	РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних(
		|			&НаДату,
		|			ВидПоказателя = &ВидПоказателя
		|				И Показатель = &Показатель) КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних";
		
		Запрос.УстановитьПараметр("ВидПоказателя", Объект.ВидПоказателя);
		Запрос.УстановитьПараметр("НаДату", Объект.КонецПериода);
		Запрос.УстановитьПараметр("Показатель", СтрокаВида.Показатель);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() Тогда 
			СтатьиБюджета = ""; 
			ВидыДвижений = "";
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авСтатьиБюджетов") Тогда
					СтатьиБюджета = СтатьиБюджета + ВыборкаДетальныеЗаписи.СтатьиПредставление + "; ";
				ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авВидыДвижения") Тогда
					ВидыДвижений = ВидыДвижений + ВыборкаДетальныеЗаписи.СтатьиПредставление + "; ";
				КонецЕсли;
			 КонецЦикла;
			 Если СокрЛП(СтатьиБюджета) = ";" Тогда
				 СтатьиБюджета = "";
			 КонецЕсли;
			 Если СокрЛП(ВидыДвижений) = ";" Тогда
				 ВидыДвижений = "";
			 КонецЕсли;
			 
			ВыборкаДетальныеЗаписи.Сбросить();	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
				
				ВидПрочегоПоказателя = Объект.ПрочиеПоказатели.Добавить();
				ВидПрочегоПоказателя.КодПоказателя = СтрокаВида.КодПоказателя;
				ВидПрочегоПоказателя.Показатель = СтрокаВида.Показатель;
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авСтатьиБюджетов") Тогда
					ВидПрочегоПоказателя.BS = ВыборкаДетальныеЗаписи.Статья;
					ВидПрочегоПоказателя.BSname = СтатьиБюджета;
					ВидПрочегоПоказателя.TypeMovementName = ВидыДвижений;  
				ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авВидыДвижения") Тогда 
					ВидПрочегоПоказателя.TypeMovement = ВыборкаДетальныеЗаписи.Статья;
					ВидПрочегоПоказателя.TypeMovementName = ВидыДвижений;
					ВидПрочегоПоказателя.BSname = СтатьиБюджета;  
				КонецЕсли;
				
			КонецЦикла; 
		Иначе
			ВидПрочегоПоказателя = Объект.ПрочиеПоказатели.Добавить();
			ВидПрочегоПоказателя.КодПоказателя = СтрокаВида.КодПоказателя;
			ВидПрочегоПоказателя.Показатель = СтрокаВида.Показатель; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьИзменитьСтрокиПоказателейНаСервере()


&НаКлиенте
Процедура ВидПоказателяПриИзменении(Элемент) 
	
	УстановитьЭлементыФормы();
	ДобавитьИзменитьСтрокиПоказателейНаСервере();
	РедактироватьДерево();
	РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы()); 
	ОбновитьВидимостьКоманд();
	
КонецПроцедуры


&НаСервере
Процедура ОчиститьКолонкиПОказателей()
	
	МассивКолонок = Новый Массив;
	КолонкиВида = Элементы.ПрочиеПоказатели.ПодчиненныеЭлементы;
	
	Для Каждого СтрокаКолонки Из КолонкиВида Цикл
		Если СтрокаКолонки.Имя = "КодПоказателя" Или СтрокаКолонки.Имя = "Показатель" Тогда
			Продолжить;
		КонецЕсли;
		МассивКолонок.Добавить(СтрокаКолонки.Имя);
	КонецЦикла;
	
	Для Каждого  ЭлементМассива Из МассивКолонок Цикл
		НайденныйЭлемент = Элементы.Найти(ЭлементМассива);
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	
	
КонецПроцедуры // ОчиститьКолонкиПОказателей()

&НаКлиенте
Процедура КодПоказателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЭлементBSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("Отбор",НОвый Структура("Владелец",Бюджет ));
	ОткрытьФорму("Справочник.авБюджеты.ФормаВыбора",Отбор,Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВSQLНаСервере()
	
	
	ТекстЗапросаУдаления = "DELETE  FROM map_DocumentOtherIndicators 
	|WHERE [organization] = '"+XMLСтрока(Объект.Организация)+"' AND 
	|DocNumber = '"+?(ЗначениеЗаполнено(Объект.НомерВходящего),СокрЛП(Объект.НомерВходящего),СокрЛП(Объект.Номер))+"'";
	Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюУдаления(ТекстЗапросаУдаления);
	Сообщить(Ответ);
	
	
	Для Каждого СтрокаТЧ Из Объект.ПрочиеПоказатели Цикл
		DateFormation = ?(ЗначениеЗаполнено(СтрокаТЧ.DateFormation),СтрокаТЧ.DateFormation,Дата(1753,1,1));
		MaturityDate = ?(ЗначениеЗаполнено(СтрокаТЧ.MaturityDate),СтрокаТЧ.MaturityDate,Дата(1753,1,1));;
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_DocumentOtherIndicators]
		|           ([indicator]
		|           ,[indicatorCode]
		|           ,[Sum]
		|           ,[account]
		|           ,[counterparty]
		|           ,[AmountDebt]
		|           ,[AmountDebtMore100Count]
		|           ,[AmountDebtMore500Count]
		|           ,[AmountDebtMore100]
		|           ,[AmountDebtMore500]
		|           ,[BS]
		|           ,[BSname]
		|           ,[AmountBalance]
		|           ,[AmountBalancePledge]
		|           ,[Stock]
		|           ,[BankName]
		|           ,[DepositName]
		|           ,[DateFormation]
		|           ,[MaturityDate]
		|           ,[DepositRate]
		|           ,[PRS]
		|           ,[RatioApplicable]
		|           ,[CUR]
		|           ,[ValuePercent]
		|           ,[ReportSign]
		|           ,[FairValue]
		|           ,[HierarchyLevel]
		|           ,[FairValueBoolean]
		|           ,[OnRequest]
		|           ,[less3months]
		|           ,[Between3and12months]
		|           ,[Between1and5years]
		|           ,[TotalLiquidity]
		|           ,[Quantity]
		|           ,[SharePercent]
		|           ,[TypeOtherIndicator]
		|           ,[organization]
		|           ,[DocNumber])
		|     VALUES
		|           ('"+XMLСтрока(СтрокаТЧ.Показатель)+"'
		|           ,N'"+СокрЛП(СтрокаТЧ.КодПоказателя)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Sum)+"'
		|           ,N'"+XMLСтрока(СтрокаТЧ.account)+"'
		|           ,N'"+?(ЗначениеЗаполнено(СтрокаТЧ.КонтрагентGUID),СтрокаТЧ.КонтрагентGUID,"00000000-0000-0000-0000-000000000000")+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebt)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore100)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore500Count)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore100)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountDebtMore500)+"'
		|           ,'"+XMLСтрока(СтрокаТЧ.BS)+"'
		|           ,N'"+СтрокаТЧ.BSname+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountBalance)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.AmountBalancePledge)+"'
		|           ,N'"+СтрокаТЧ.Stock+"'
		|           ,N'"+СтрокаТЧ.BankName+"'
		|           ,N'"+СтрокаТЧ.DepositName+"'
		|           ,'"+DateFormation+"'
		|           ,'"+MaturityDate+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.DepositRate)+"'
		|           ,N'"+XMLСтрока(СтрокаТЧ.PRS)+"'
		|           ,'"+?(СтрокаТЧ.RatioApplicable=Истина,1,0)+"'
		|           ,'"+XMLСтрока(СтрокаТЧ.CUR)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.ValuePercent)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.ReportSign)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.FairValue)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.HierarchyLevel)+"'
		|           ,'"+?(СтрокаТЧ.FairValueBoolean=Истина,1,0)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.OnRequest)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.less3months)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Between3and12months)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Between1and5years)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.TotalLiquidity)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Quantity)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.SharePercent)+"'
		|           ,'"+XMLСтрока(Объект.ВидПоказателя)+"'
		|           ,'"+XMLСтрока(Объект.Организация)+"'
		|           ,N'"+?(ЗначениеЗаполнено(Объект.НомерВходящего),СокрЛП(Объект.НомерВходящего),СокрЛП(Объект.Номер))+"')";
		
		
		Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция УдалитьПробелы(ТекЧисло)
	
	Если ЗначениеЗаполнено(ТекЧисло) Тогда
		Возврат Формат(ТекЧисло,"ЧГ=");
	Иначе
		Возврат "0";
	КонецЕсли;
	
КонецФункции // УдалитьПробелы¶()


&НаКлиенте
Процедура ЗагрузитьВSQL(Команда)
	ЗагрузитьВSQLНаСервере();
КонецПроцедуры




&НаКлиенте
Процедура Отправить(Команда)
	
	Если ЕстьНезаполненныеПоля() Тогда
		Возврат;
	КонецЕсли;
	
	
	
	Записать();
	ОтправитьНаСервере();
КонецПроцедуры 


&НаСервере
Процедура ОтправитьНаСервере()
	
	ТекущийОтбъект = РеквизитФормыВЗначение("Объект");
	ПрочиеПоказателиВызовСервера.ОтправитьНаСервере(ТекущийОтбъект);
	
КонецПроцедуры // ОтправитьНаСервере()



&НаКлиенте
Процедура ДеревоПрочиеПоказателиBSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("Отбор",НОвый Структура("Владелец",Бюджет ));
	ОткрытьФорму("Справочник.авСтатьиБюджетов.ФормаВыбора",Отбор,Элемент);
	
КонецПроцедуры



&НаКлиенте
Процедура РазвернутьДерево(КоллекцияЭлементовДерева)
	
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл 
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.ДеревоПрочиеПоказатели.Развернуть(ИдентификаторСтроки);
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы(); 
		Если ПодчиненныеСтроки.Количество() Тогда
			РазвернутьДерево(ПодчиненныеСтроки);
		КонецЕсли;
		
		
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейПриИзменении(Элемент)
	РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПрочиеПоказателиПриИзменении(Элемент)
	ДеревоПрочиеПоказателиПриИзмененииНаСервере();
	РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
КонецПроцедуры

&НаСервере
Процедура ДеревоПрочиеПоказателиПриИзмененииНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	ПересчитатьВсеДерево(Дерево);
	ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	
КонецПроцедуры



&НаСервере
Процедура ДеревоВТЧ(СтрокиДерева,ТЗ)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		НайденныеСтроки  = ТЗ.НайтиСтроки(Новый Структура("Показатель",СтрокаДерева.Показатель));
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока,СтрокаДерева,,"BS");
		КонецЦикла;
		Если СтрокаДерева.Строки.Количество() Тогда
			
			ДеревоВТЧ(СтрокаДерева.Строки,ТЗ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры // ДеревоВТЧ()


#Область ПроверочныеКоманды
&НаСервере
Процедура ЗаполнитьПоСтатьямБюджета()
	
	Прокси = авУправлениеЭталоннымиСправочникамиСервер.ПолучитьПроксиEtalonRefSyncEx();
	ArrayAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("ArrayAccountsQuery"); 
	ПрочиеПоказатели = Объект.ПрочиеПоказатели;
	Для Каждого Показатель Из ПрочиеПоказатели Цикл 
		Если ЗначениеЗаполнено(Показатель.BS) Тогда
			LineAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("LineAccountsQuery"); 
			LineAccountsQuery.ReferenceName = "СтатьиБюджетов";
			LineAccountsQuery.ReferenceGUID = Показатель.BS.GUID;
			ArrayAccountsQuery.LineAccountsQuery.Добавить(LineAccountsQuery);
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	Ответ = Прокси.BudgeIitemAccounts(ArrayAccountsQuery);
	
	
	////Вариант 1
	//Таблица = Новый ТаблицаЗначений;
	//Таблица.Колонки.Добавить("BS");
	//Таблица.Колонки.Добавить("Счет");
	//Таблица.Колонки.Добавить("Сумма");
	//
	//Для Каждого Строка Из Ответ.LineAccountsResponse Цикл 
	//	
	//	BS = Справочники.авСтатьиБюджетов.НайтиПоРеквизиту("GUID",Строка.ParentGUID);
	//	МассивСтрокСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка.Accounts,",",Истина,Истина); 
	//	Для Каждого СтрокаМассива Из МассивСтрокСчетов Цикл
	//		ЭталонныеСчет = Справочники.авПланСчетов.НайтиПоКоду(СтрокаМассива);
	//		ЗаполнитьТЗОстатки(ЭталонныеСчет,Таблица,BS);
	//	КонецЦикла;
	//КонецЦикла;
	//
	//Таблица.Свернуть("BS","Сумма"); 
	//Для Каждого СтрокаТЗ Из Таблица Цикл 
	//	
	//	НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("BS", СтрокаТЗ.BS));
	//	Для Каждого нСтрока Из НайденныеСтроки Цикл 
	//		нСтрока.Sum = СтрокаТЗ.Сумма;
	//	КонецЦикла;
	//	
	//	
	//КонецЦикла; 
	
	//////Вариант 2
	//
	//
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("СчетЭталон");
	Таблица.Колонки.Добавить("Счет");
	Таблица.Колонки.Добавить("ЕстьУсловияПоСчету");
	Таблица.Колонки.Добавить("КоличествоНастроек");
	Таблица.Колонки.Добавить("СтатьяБюджетаРасшифровка");
	Таблица.Колонки.Добавить("СтатьяБюджетаДляИтогов");
	Таблица.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число")); 
	
	Для Каждого Строка Из Ответ.LineAccountsResponse Цикл 
		СтатьяБюджетаДляИтогов   = Справочники.авСтатьиБюджетов.НайтиПоРеквизиту("GUID",Строка.ParentGUID);
		СтатьяБюджетаРасшифровка = Справочники.авСтатьиБюджетов.НайтиПоРеквизиту("GUID",Строка.ReferenceGUID);
		МассивСтрокСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка.Accounts,",",Истина,Истина);
		Для Каждого СтрокаМассива Из МассивСтрокСчетов Цикл
			СтрокаТЗ       = Таблица.Добавить();
			СтрокаТЗ.СчетЭталон           = Справочники.авПланСчетов.НайтиПоКоду(СтрокаМассива);
			НастройкиСчета                = Справочники.авНастройкаПланаСчетов.НайтиПоРеквизиту("ЭталонныйСчет",СтрокаТЗ.СчетЭталон);
			
			Если ЗначениеЗаполнено(НастройкиСчета) Тогда 
				СтрокаТЗ.Счет                          = НастройкиСчета.ИсточникДанных; 
				Компоновщик                            = НастройкиСчета.КомпоновщикНастроекОтбор.Получить();
				СтрокаТЗ.КоличествоНастроек           = Компоновщик.Отбор.Элементы.Количество();
				СтрокаТЗ.ЕстьУсловияПоСчету            = ЗначениеЗаполнено(НастройкиСчета.ПредставлениеОтбора);
			КонецЕсли;
			СтрокаТЗ.СтатьяБюджетаРасшифровка           = СтатьяБюджетаРасшифровка;
			СтрокаТЗ.СтатьяБюджетаДляИтогов            = СтатьяБюджетаДляИтогов;
		КонецЦикла;
		
		
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЕстьУсловияПоСчету  Тогда 
			 ПолучитьОcтаткиПоУсловию(СтрокаТаблицы.СчетЭталон,СтрокаТаблицы);
		Иначе  
			 ПолучитьОстаткиБезУсловия(СтрокаТаблицы.Счет,СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
		
		
	Таблица.Свернуть("СтатьяБюджетаДляИтогов","Сумма"); 
	Для Каждого СтрокаТЗ Из Таблица Цикл 
		
		НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("BS", СтрокаТЗ.СтатьяБюджетаДляИтогов));
		Для Каждого нСтрока Из НайденныеСтроки Цикл 
			нСтрока.Sum =нСтрока.Sum +СтрокаТЗ.Сумма;
		КонецЦикла;
		
	КонецЦикла; 
	
	
	//РедактироватьДерево();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВидамДвижения() 
	
	
	Прокси = авУправлениеЭталоннымиСправочникамиСервер.ПолучитьПроксиEtalonRefSyncEx();
	ArrayAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("ArrayAccountsQuery"); 
	ПрочиеПоказатели = Объект.ПрочиеПоказатели;
	Для Каждого Показатель Из ПрочиеПоказатели Цикл 
		Если ЗначениеЗаполнено(Показатель.TypeMovement) Тогда
			LineAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("LineAccountsQuery"); 
			LineAccountsQuery.ReferenceName = "ВидыДвижения";
			LineAccountsQuery.ReferenceGUID = Показатель.TypeMovement.GUID;
			ArrayAccountsQuery.LineAccountsQuery.Добавить(LineAccountsQuery);
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	Ответ = Прокси.BudgeIitemAccounts(ArrayAccountsQuery);
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("СчетЭталон");
	Таблица.Колонки.Добавить("Счет");
	Таблица.Колонки.Добавить("ЕстьУсловияПоСчету");
	Таблица.Колонки.Добавить("КомпоновщикНастроек");
	Таблица.Колонки.Добавить("КорСчетЭталон");
	Таблица.Колонки.Добавить("КорСчет");
	Таблица.Колонки.Добавить("ЕстьУсловияПоКорСчету");
	Таблица.Колонки.Добавить("ТипДвижения");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("ВидДвиженияРасшифровка");
	Таблица.Колонки.Добавить("ВидДвиженияДляИтогов"); 
	
	//Выгрузка = Объект.ПрочиеПоказатели.Выгрузить();
	//Выгрузка.Свернуть("Показатель,BSname");
	
	
	Для Каждого Строка Из Ответ.LineAccountsResponse Цикл
		
		
		СтрокаТЗ       = Таблица.Добавить();
		
		СтрокаТЗ.ВидДвиженияДляИтогов      = Справочники.авВидыДвижения.НайтиПоРеквизиту("GUID",Строка.ParentGUID);
		СтрокаТЗ.ВидДвиженияРасшифровка    = Справочники.авВидыДвижения.НайтиПоРеквизиту("GUID",Строка.ReferenceGUID);
		СтрокаТЗ.СчетЭталон                = Справочники.авПланСчетов.НайтиПоРеквизиту("GUID",Строка.Accounts);
		НастройкиСчета                     = Справочники.авНастройкаПланаСчетов.НайтиПоРеквизиту("ЭталонныйСчет",СтрокаТЗ.СчетЭталон);
		Если ЗначениеЗаполнено(НастройкиСчета) Тогда 
			ОтборПоСчету = НастройкиСчета.КомпоновщикНастроекОтбор.Получить();
			СтрокаТЗ.Счет                          = НастройкиСчета.ИсточникДанных;
			Если ОтборПоСчету <> Неопределено И ОтборПоСчету.Отбор.Элементы.Количество() Тогда
				СтрокаТЗ.ЕстьУсловияПоСчету            = Истина;
			Иначе
				СтрокаТЗ.ЕстьУсловияПоСчету            = Ложь;
			КонецЕсли;
			СтрокаТЗ.КомпоновщикНастроек           = НастройкиСчета.КомпоновщикНастроекОтбор;
		КонецЕсли;
		
		СтрокаТЗ.КорСчетЭталон        = Справочники.авПланСчетов.НайтиПоРеквизиту("GUID",Строка.CorrAccounts);
		НастройкиКорСчета             = Справочники.авНастройкаПланаСчетов.НайтиПоРеквизиту("ЭталонныйСчет",СтрокаТЗ.КорСчетЭталон);
		Если ЗначениеЗаполнено(НастройкиКорСчета) Тогда
			СтрокаТЗ.КорСчет                   = НастройкиКорСчета.ИсточникДанных;
			СтрокаТЗ.ЕстьУсловияПоКорСчету     = ЗначениеЗаполнено(НастройкиКорСчета.ПредставлениеОтбора);
		КонецЕсли;
		
		
		СтрокаТЗ.ТипДвижения          = Строка.MovementType;
		
		
	КонецЦикла;  
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл 
		Если ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			Если СтрокаТаблицы.ЕстьУсловияПоСчету ИЛИ СтрокаТаблицы.ЕстьУсловияПоКорСчету Тогда
				ПолучитьОборотыПоУсловию(СтрокаТаблицы);
			Иначе
				ПолучитьОборотыПоУсловию(СтрокаТаблицы);
				//ПолучитьОборотыБезУсловия(СтрокаТаблицы);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Таблица.Свернуть("ВидДвиженияДляИтогов","Сумма"); 
	Для Каждого СтрокаТЗ Из Таблица Цикл 
		
		НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("TypeMovement", СтрокаТЗ.ВидДвиженияДляИтогов));
		Для Каждого нСтрока Из НайденныеСтроки Цикл 
			нСтрока.Sum = СтрокаТЗ.Сумма;
		КонецЦикла;
		
	КонецЦикла; 
	

	

КонецПроцедуры // ЗаполнитьПоВидамДвижения() 



 &НаСервере
 Процедура ПолучитьОборотыБезУсловия(СтрокаТз)
 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОбороты.Счет КАК Счет,
		|	ТиповойОбороты.КорСчет КАК КорСчет,
		|	ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт,
		|	ТиповойОбороты.СуммаОборот КАК СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&Счет), , Организация = &Организация, КорСчет = &КорСчет, ) КАК ТиповойОбороты";
	
	Если Не ЗначениеЗаполнено(СтрокаТз.КорСчет) Тогда  
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КорСчет = &КорСчет","");
		
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	Запрос.УстановитьПараметр("КорСчет", СтрокаТз.КорСчет);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("Счет", СтрокаТз.Счет);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		Если СтрокаТз.ТипДвижения = "Оборот Кт" Тогда 
			СтрокаТз.Сумма =  ВыборкаДетальныеЗаписи.СуммаОборотКт;
		ИначеЕсли СтрокаТз.ТипДвижения = "Оборот Дт" Тогда   
			СтрокаТз.Сумма =  ВыборкаДетальныеЗаписи.СуммаОборотДт;
		Иначе    
			СтрокаТз.Сумма =  ВыборкаДетальныеЗаписи.СуммаОборот;
		КонецЕсли;
	КонецЦикла;
	

 
 КонецПроцедуры // ПолучитьОбороты()
 
 &НаСервере
 Процедура ПолучитьОборотыПоУсловию(СтрокаТз)
	 
	 СКД_Обороты = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Обороты");
	 НастройкиОСКД = СКД_Обороты.НастройкиПоУмолчанию;
	 ПараметрыДанныхОСКД = СКД_Обороты.Параметры; 
	 СохраненныйКомпоновщикНастроек = СтрокаТз.КомпоновщикНастроек.Получить();
	 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 ТЗ1 = Новый ТаблицаЗначений;
	 Если ОтборНастройки.Элементы.Количество() >0 Тогда
		 
		 Для каждого ЭлементОтбора Из ОтборНастройки.Элементы Цикл
			 Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение));
				 НовыйЭлементОтбора.Использование 	= Истина;
				 НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
				 НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
			 КонецЕсли;	
		 КонецЦикла;
		 
	 КонецЕсли;
	 
	 
	 //ЭлементНачалоПериода = ПараметрыДанныхОСКД.Найти("НачалоПериода");
	 //ЭлементНачалоПериода.Значение = КонецДня(Объект.НачалоПериода); 
	 
	 
	 НачалоПериода = ПараметрыДанныхОСКД.Найти("Начало");
	 Если  НачалоПериода = Неопределено Тогда 
		 НачалоПериода  = ПараметрыДанныхОСКД.Добавить();
		 НачалоПериода.Имя = "Начало";
		 НачалоПериода.ТипЗначения = Новый ОписаниеТипов("Дата");
		 НачалоПериода.ОграничениеИспользования = Ложь;
		 НачалоПериода.Значение = Объект.НачалоПериода;
		 НачалоПериода.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
	 Иначе
		 НачалоПериода.Значение = Объект.НачалоПериода;  
		 
	 КонецЕсли; 
	 
	 
	 
	 
	 
	 
	 ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("КонецПериода");
	 ЭлементКонецПериода.Значение = КонецДня(Объект.КонецПериода); 
	 
	 
	 КонецПериода = ПараметрыДанныхОСКД.Найти("Окончание");
	 Если  КонецПериода = Неопределено Тогда 
		 КонецПериода  = ПараметрыДанныхОСКД.Добавить();
		 КонецПериода.Имя = "Окончание";
		 КонецПериода.ТипЗначения = Новый ОписаниеТипов("Дата");
		 КонецПериода.ОграничениеИспользования = Ложь;
		 КонецПериода.Значение = Объект.НачалоПериода;
		 КонецПериода.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
	 Иначе
		 КонецПериода.Значение = Объект.КонецПериода;  
		 
	 КонецЕсли; 
	 
	 
	 
	 
	 ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет");
	 ЭлементСчет.Значение = СтрокаТз.Счет;
	 ЭлементСчет = ПараметрыДанныхОСКД.Найти("КорСчет");
	 ЭлементСчет.Значение = СтрокаТз.КорСчет;
	 
	 Организация = ПараметрыДанныхОСКД.Найти("Организация");
	 Если  Организация = Неопределено Тогда 
		 Организация  = ПараметрыДанныхОСКД.Добавить();
		 Организация.Имя = "Организация";
		 Организация.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
		 Организация.ОграничениеИспользования = Ложь;
		 Организация.Значение = Объект.Организация;
		 Организация.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
	 Иначе
		 Организация.Значение = Объект.Организация;  
		 
	 КонецЕсли; 
	 
	 КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	 Макет = КомпоновщикМакетаОСКД.Выполнить(СКД_Обороты, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	 
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 ПроцессорВывода.УстановитьОбъект(ТЗ1);
	 ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД); 
	 Если ТЗ1.Количество() Тогда 
		 ТЗ1.Свернуть(,"СуммаОборотКт,СуммаОборотДт,СуммаОборот");
		 
		 Если СтрокаТз.ТипДвижения = "Оборот Кт" Тогда 
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотКт;
		 ИначеЕсли СтрокаТз.ТипДвижения = "Оборот Дт" Тогда   
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотДт;
		 Иначе    
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборот;
		 КонецЕсли;
	 КонецЕсли;
	 
	 
	 
	 
 КонецПроцедуры // ПолучитьОборотыПоУсловию()
 
 
 
&НаСервере
Процедура ПолучитьОcтаткиПоУсловию(ЭталонныйСчет,СтрокаТаблицы) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкаЭталоногоПланаСчетов.Ссылка КАК Ссылка,
	|	НастройкаЭталоногоПланаСчетов.ЭталонныйСчет КАК ЭталонныйСчет,
	|	НастройкаЭталоногоПланаСчетов.КомпоновщикНастроекОтбор КАК КомпоновщикНастроек,
	|	НастройкаЭталоногоПланаСчетов.ИсточникДанных КАК Счет
	|ИЗ
	|	Справочник.авНастройкаПланаСчетов КАК НастройкаЭталоногоПланаСчетов
	|ГДЕ
	|	НЕ НастройкаЭталоногоПланаСчетов.ПометкаУдаления
	|	И НастройкаЭталоногоПланаСчетов.ЭталонныйСчет = &ЭталонныйСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭталонныйСчет";
	Запрос.УстановитьПараметр("ЭталонныйСчет",ЭталонныйСчет);  //1720
	
	Результат = Запрос.Выполнить();
	Выгрузка = Результат.Выгрузить();
	Выборка = Результат.Выбрать();
	
	
	СКД_Остатки = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Остатки");
	НастройкиОСКД = СКД_Остатки.НастройкиПоУмолчанию;
	ПараметрыДанныхОСКД = СКД_Остатки.Параметры;
	
	Рез = Запрос.Выполнить().Выбрать();
	
	
	Пока рез.Следующий() Цикл
		
		СохраненныйКомпоновщикНастроек = Рез.КомпоновщикНастроек.Получить();
		ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
		ОСКД = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Остатки");
		НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
		ТЗ1 = Новый ТаблицаЗначений;
		Если ОтборНастройки.Элементы.Количество() >0 Тогда
			
			Для каждого ЭлементОтбора Из ОтборНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение));
					НовыйЭлементОтбора.Использование 	= Истина;
					НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
					НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыДанныхОСКД = ОСКД.Параметры;
		
		
		ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("КонецПериода");
		ЭлементКонецПериода.Значение = КонецДня(Объект.КонецПериода);
		
		
		ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет");
		ЭлементСчет.Значение = рез.Счет;
		
		Организация = ПараметрыДанныхОСКД.Найти("Организация");
		Если  Организация = Неопределено Тогда 
			Организация  = ПараметрыДанныхОСКД.Добавить();
			Организация.Имя = "Организация";
			Организация.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Организация.ОграничениеИспользования = Ложь;
			Организация.Значение = Объект.Организация;
			Организация.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
		Иначе
			Организация.Значение = Объект.Организация;  
			
		КонецЕсли;
		
		
		
		
		
		КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
		Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТЗ1);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД);
		
		ТЗ1.Свернуть(,"СуммаОстаток");
		Если ТЗ1.Количество() Тогда
			
			 СтрокаТаблицы.Сумма = ТЗ1[0].СуммаОстаток;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьОстаткиБезУсловия(Счет,СтрокаТаблицы)

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОстатки.Субконто1 КАК Субконто1,
		|	ТиповойОстатки.Субконто2 КАК Субконто2,
		|	ТиповойОстатки.Субконто3 КАК Субконто3,
		|	ТиповойОстатки.Организация КАК Организация,
		|	ТиповойОстатки.Валюта КАК Валюта,
		|	СУММА(ТиповойОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(ТиповойОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
		|	СУММА(ТиповойОстатки.СуммаОстатокКт) КАК СуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&НаДату, Счет = &Счет, , Организация = &Организация) КАК ТиповойОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТиповойОстатки.Валюта,
		|	ТиповойОстатки.Субконто2,
		|	ТиповойОстатки.Субконто3,
		|	ТиповойОстатки.Организация,
		|	ТиповойОстатки.Субконто1";
	
	Запрос.УстановитьПараметр("НаДату", Объект.КонецПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет", Счет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//СтрокаТаблицы.Сумма = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицы.Сумма =СтрокаТаблицы.Сумма + ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	


КонецПроцедуры // ПолучитьОстаткиБезУсловия()



&НаСервере
Процедура ПолучитьОборотыПоСчетам(Таблица)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл 
		
		ТаблицаСчетов = СтрокаТаблицы.ТаблицаСчетов;
		Счета =  ТаблицаСчетов.ВыгрузитьКолонку("СчетПланаСчетов");
		СчетаДт = Новый СписокЗначений;
		СчетаКт = Новый СписокЗначений; 
		Для Каждого Счет Из Счета Цикл 
			Если Счет.Вид = ВидСчета.Активный Тогда 
				СчетаДт.Добавить(Счет);	
			Иначе     
				СчетаКт.Добавить(Счет);	
			КонецЕсли;
			
			
			
		КонецЦикла;
		
		Если Счета.Количество() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ТиповойОбороты.СуммаОборотДт) КАК СуммаОборотДт
			|ПОМЕСТИТЬ ВТ_Обороты
			|ИЗ
			|	РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаДт), , , , ) КАК ТиповойОбороты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СУММА(ТиповойОбороты.СуммаОборотКт)
			|ИЗ
			|	РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаКт), , , , ) КАК ТиповойОбороты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Обороты.СуммаОборотДт КАК СуммаОборот
			|ИЗ
			|	ВТ_Обороты КАК ВТ_Обороты";
			
			Запрос.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
			Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
			Запрос.УстановитьПараметр("СчетаДт", СчетаДт); 
			Запрос.УстановитьПараметр("СчетаКт", СчетаКт);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СуммаОборот) Тогда
					Сообщить(ВыборкаДетальныеЗаписи.СуммаОборот); 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	
КонецПроцедуры // ПолучитьОборотыПоСчетам()

&НаСервере
Процедура ЗаполнитьТЗОстатки(ЭталонныйСчет,Таблица,СтатьяБюджетаРодитель) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкаЭталоногоПланаСчетов.Ссылка КАК Ссылка,
	|	НастройкаЭталоногоПланаСчетов.ЭталонныйСчет КАК ЭталонныйСчет,
	|	НастройкаЭталоногоПланаСчетов.КомпоновщикНастроекОтбор КАК КомпоновщикНастроек,
	|	НастройкаЭталоногоПланаСчетов.ИсточникДанных КАК Счет
	|ИЗ
	|	Справочник.авНастройкаПланаСчетов КАК НастройкаЭталоногоПланаСчетов
	|ГДЕ
	|	НЕ НастройкаЭталоногоПланаСчетов.ПометкаУдаления
	|	И НастройкаЭталоногоПланаСчетов.ЭталонныйСчет = &ЭталонныйСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭталонныйСчет";
	Запрос.УстановитьПараметр("ЭталонныйСчет",ЭталонныйСчет);  //1720
	
	Результат = Запрос.Выполнить();
	Выгрузка = Результат.Выгрузить();
	Выборка = Результат.Выбрать();
	
	
	СКД_Остатки = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Остатки");
	НастройкиОСКД = СКД_Остатки.НастройкиПоУмолчанию;
	ПараметрыДанныхОСКД = СКД_Остатки.Параметры;
	
	Рез = Запрос.Выполнить().Выбрать();
	
	
	Пока рез.Следующий() Цикл
		
		СохраненныйКомпоновщикНастроек = Рез.КомпоновщикНастроек.Получить();
		ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
		ОСКД = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Остатки");
		НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
		ТЗ1 = Новый ТаблицаЗначений;
		Если ОтборНастройки.Элементы.Количество() >0 Тогда
			
			Для каждого ЭлементОтбора Из ОтборНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение));
					НовыйЭлементОтбора.Использование 	= Истина;
					НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
					НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыДанныхОСКД = ОСКД.Параметры;
		
		
		ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("КонецПериода");
		ЭлементКонецПериода.Значение = КонецДня(Объект.КонецПериода);
		
		
		ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет");
		ЭлементСчет.Значение = рез.Счет;
		
		Организация = ПараметрыДанныхОСКД.Найти("Организация");
		Если  Организация = Неопределено Тогда 
			Организация  = ПараметрыДанныхОСКД.Добавить();
			Организация.Имя = "Организация";
			Организация.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Организация.ОграничениеИспользования = Ложь;
			Организация.Значение = Объект.Организация;
			Организация.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
		Иначе
			Организация.Значение = Объект.Организация;  
			
		КонецЕсли;
		
		
		
		
		
		КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
		Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТЗ1);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД);
		
		ТЗ1.Свернуть(,"СуммаОстаток");
		Если ТЗ1.Количество() Тогда
			СтрокаТЗ = Таблица.Добавить();
			СтрокаТЗ.BS = СтатьяБюджетаРодитель; 
			СтрокаТЗ.Счет = рез.Счет;
			СтрокаТЗ.Сумма = ТЗ1[0].СуммаОстаток; 
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНаСервере()

	Выгрузка = Объект.ПрочиеПоказатели.Выгрузить();
	Выгрузка.ЗаполнитьЗначения(0,"sum");
	Объект.ПрочиеПоказатели.Загрузить(Выгрузка); 
	
	ЗаполнитьПоСтатьямБюджета();
	ЗаполнитьПоВидамДвижения();
	РедактироватьДерево();

КонецПроцедуры // ЗаполнитьНаСервере()


&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ЕстьНезаполненныеПоля() Тогда
		Возврат;
	КонецЕсли; 
	ЗаполнитьНаСервере();
	ДеревоПрочиеПоказателиПриИзменении(Неопределено);
	
КонецПроцедуры






#КонецОбласти  

&НаКлиенте
Функция ЕстьНезаполненныеПоля()
	
	ЕстьОшибки = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		СообщитьПользователю("На заполнена ""Организация""","Объект.Организация");
		ЕстьОшибки = Истина;
		Возврат ЕстьОшибки;
	КонецЕсли;       
	
	Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		СообщитьПользователю("На установлен ""Конец периода""","Объект.КонецПериода");	
		ЕстьОшибки = Истина;
		Возврат ЕстьОшибки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидПоказателя) Тогда
		СообщитьПользователю("На заполнен ""Вид показателя""","Объект.ВидПоказателя");	
		ЕстьОшибки = Истина;
		Возврат ЕстьОшибки;
	КонецЕсли; 
	
	
	Возврат ЕстьОшибки;
	

КонецФункции // ПроверитьЗаполнениеОбязательнызПолей()

&НаСервере
Процедура ОбновитьВидимостьКоманд()
	
	//ВидимостьКомандАвтозаполнения = Ложь;
	//МассивПоказателей = Новый Массив;
	//МассивПоказателей.Добавить(Справочники.авВидыПрочихПоказателейMDM.НайтиПоНаименованию("Вид 6")); 
	//Если МассивПоказателей.Найти(Объект.ВидПоказателя) <> Неопределено Тогда
	//	ВидимостьКомандАвтозаполнения = Истина;
	//КонецЕсли;
	
	Элементы.ДеревоПрочиеПоказатели.ТолькоПросмотр = Не Объект.ВидПоказателя.РучнойВвод;
	Элементы.ПрочиеПоказатели.ТолькоПросмотр = Не Объект.ВидПоказателя.РучнойВвод;
	Элементы.ДеревоПрочиеПоказателиЗаполнить.Видимость = НЕ Объект.ВидПоказателя.РучнойВвод; 
	//Элементы.ФормаПолучитьЭталонныйДокумент.Видимость = ВидимостьКомандАвтозаполнения;
	
	
КонецПроцедуры // ОбновитьВидимостьКоманд()


&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

