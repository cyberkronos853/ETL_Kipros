 
 &НаСервере
 Процедура ПриЧтенииНаСервере(ТекущийОбъект)
 КонецПроцедуры
 
 &НаСервере
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	 
	 ИспользоватьРасшифровкуПоАналитике = ИспользоватьРасшифровкуПоАналитике();
	 ОпределитьКолонкиПоказателя();
	 Бюджет = Справочники.Бюджеты.НайтиПоКоду(1);
	 ИнициализацияДереваНаСервере();
	 СписокВыбораПериодовПоПоказателю = ПрочиеПоказателиВызовСервера.СписокВыбораПоВидуПоказателя(Объект.ВидПоказателя,Объект.ОсобыйПериод); 
	 
	 Для Каждого ЭлементСписка Из СписокВыбораПериодовПоПоказателю Цикл  
		 Элементы.ПериодОтчета.СписокВыбора.Добавить(ЭлементСписка.Значение);
	 КонецЦикла;
	 
	 Если Не ЗначениеЗаполнено(Объект.ГодОтчета) Тогда
		  Объект.ГодОтчета = Объект.КонецПериода;
		  Модифицированность = Истина;
	 КонецЕсли;
	 
	 ПериодСтрокой 		= Формат(Объект.ГодОтчета, "ДФ='гггг'");
	 
	 ОбновитьВидимостьЭлементов(); 
	 
	 
 КонецПроцедуры  
 
 &НаКлиенте
 Процедура ПриОткрытии(Отказ)
	 
	 ВозможностьОтправки();
	 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
 КонецПроцедуры
 
 &НаСервере
 Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	 
	 Если Объект.ВидПоказателя.ОснованиеДляЗаполнения = "По ценным бумагам" Тогда
		 Возврат;
	 КонецЕсли; 
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид17(Объект.ВидПоказателя) Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид14(Объект.ВидПоказателя) Тогда 
		 ПрочиеПоказателиВызовСервера.ПередЗаписьюНаСервереВид14(РеквизитФормыВЗначение("ДеревоПрочиеПоказатели").Строки,ТекущийОбъект.ПрочиеПоказатели);
		 Возврат;
	 КонецЕсли; 
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид26(Объект.ВидПоказателя) Тогда
		 Возврат;
	 КонецЕсли; 
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид4(Объект.ВидПоказателя) Тогда
		 Возврат;
	 КонецЕсли;
	 
	 
		 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
		 //ТЗ = Объект.ПрочиеПоказатели.Выгрузить();
		 Объект.ПрочиеПоказатели.Очистить();
		 ДеревоВТЧ(Дерево.Строки,Объект.ПрочиеПоказатели);
		 //ТекущийОбъект.ПрочиеПоказатели.Загрузить(ТЗ);
		 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 
	 
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ИнициализацияДереваНаСервере()
 
		 Если ПрочиеПоказателиВызовСервера.ЭтоВид17(Объект.ВидПоказателя)  Тогда
			 ЗаполнитьДеревоПоВиду("IND2.3.4.4.");
		 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид26(Объект.ВидПоказателя) Тогда
			 ЗаполнитьДеревоПоВиду("IND2.3.4.2.");
		 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид14(Объект.ВидПоказателя) Тогда
			 ЗаполнитьДеревоПоВиду("IND2.1.21.");
		 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид4(Объект.ВидПоказателя) Тогда
			 ЗаполнитьДеревоПоВиду("IND2.3.4.5.");
		 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид13(Объект.ВидПоказателя) Тогда
			 Массив = Новый Массив;
			 Массив.Добавить("IND2.1.18.");
			 Массив.Добавить("IND2.1.19.");
			 ЗаполнитьДеревоПоВиду_13(Массив);
		 Иначе
			 СформироватьСтрокиДерева();
			 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
			 ТабличнаяЧастьВДерево(Дерево.Строки); 
			 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
		 КонецЕсли;
 
 КонецПроцедуры // ИнициализацияДереваНаСервере()
 
 &НаСервере
 Процедура РедактироватьДерево()
	 
	 СформироватьСтрокиДерева(); 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 //Дерево.Строки.Очистить();
	 ПересчитатьВсеДерево(Дерево);
	 ТабличнаяЧастьВДерево(Дерево.Строки);
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
 КонецПроцедуры // РедактироватьДерево()
 
 &НаСервере
 Процедура ТабличнаяЧастьВДерево(СтрокиДерева)
	 
	 
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид17(Объект.ВидПоказателя) Тогда
		 
		 ЗаполнитьДеревоПоВиду("IND2.3.4.4.");
		 Возврат; 
	 КонецЕсли;
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид26(Объект.ВидПоказателя) Тогда
		 
		 ЗаполнитьДеревоПоВиду("IND2.3.4.2.");
		 Возврат; 
	 КонецЕсли;
	 
	 Для Каждого СтрокаДерева Из СтрокиДерева Цикл   
		 
		 ОтборСтрок = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель,BS,account,TypeMovement,BankName,DepositName",СтрокаДерева.Показатель,СтрокаДерева.BS,СтрокаДерева.account,СтрокаДерева.TypeMovement,СтрокаДерева.BankName,СтрокаДерева.DepositName));
		 Если ОтборСтрок.Количество() Тогда
			 ЗаполнитьЗначенияСвойств(СтрокаДерева,ОтборСтрок[0],,"РучнойВвод,НеСобиратьИтоги");
		 КонецЕсли; 
		 Если СтрокаДерева.Строки.Количество() Тогда   
			 
			 ТабличнаяЧастьВДерево(СтрокаДерева.Строки);
			 
		 КонецЕсли;
	 КонецЦикла;
	 
	 
 КонецПроцедуры // ТабличнаяЧастьВДерево()
 
 &НаСервере
 Процедура СформироватьСтрокиДерева()
	 
	 
	 Если Объект.ПрочиеПоказатели.Количество() = 0 Тогда
		 Возврат;
	 КонецЕсли;
	 
	 МассивПоказателей = Объект.ПрочиеПоказатели.Выгрузить(,"Показатель");
	 МассивПоказателей.Свернуть("Показатель");
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 Дерево.Строки.Очистить();
	 ТЗ = Объект.ПрочиеПоказатели.Выгрузить();
	 
	 Запрос = Новый Запрос();
	 //Если ИспользоватьРасшифровкуПоАналитике Тогда
	 //    Запрос.Текст = "ВЫБРАТЬ
	 //                   |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель КАК Показатель,
	 //                   |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК Статьи
	 //                   |ПОМЕСТИТЬ ВТ_ДополнительныеСведения
	 //                   |ИЗ
	 //                   |	РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних(, Организация = &Организация) КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
	 //                   |ГДЕ
	 //                   |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя = &ВидПоказателя
	 //                   |	И ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель В(&МассивПоказателей)
	 //                   |;
	 //                   |
	 //                   |////////////////////////////////////////////////////////////////////////////////
	 //                   |ВЫБРАТЬ
	 //                   |	INDПрочиеПоказатели.Ссылка КАК Показатель,
	 //                   |	INDПрочиеПоказатели.Родитель КАК Родитель,
	 //                   |	INDПрочиеПоказатели.Код КАК КодПоказателя,
	 //                   |	ВТ_ДополнительныеСведения.Статьи КАК Статья
	 //                   |ИЗ
	 //                   |	Справочник.INDПрочиеПоказатели КАК INDПрочиеПоказатели
	 //                   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеСведения КАК ВТ_ДополнительныеСведения
	 //                   |		ПО (ВТ_ДополнительныеСведения.Показатель = INDПрочиеПоказатели.Ссылка)
	 //                   |ГДЕ
	 //                   |	INDПрочиеПоказатели.Ссылка В(&МассивПоказателей)
	 //                   |
	 //                   |УПОРЯДОЧИТЬ ПО
	 //                   |	INDПрочиеПоказатели.Код ИЕРАРХИЯ";
	 //Иначе           
	 //    Запрос.Текст = "ВЫБРАТЬ
	 //                   |	INDПрочиеПоказатели.Ссылка КАК Показатель,
	 //                   |	INDПрочиеПоказатели.Родитель КАК Родитель,
	 //                   |	INDПрочиеПоказатели.Код КАК КодПоказателя
	 //                   |ИЗ
	 //                   |	Справочник.INDПрочиеПоказатели КАК INDПрочиеПоказатели
	 //                   |ГДЕ
	 //                   |	INDПрочиеПоказатели.Ссылка В(&МассивПоказателей)
	 //                   |
	 //                   |УПОРЯДОЧИТЬ ПО
	 //                   |	INDПрочиеПоказатели.Ссылка";
	 //    
	 ////КонецЕсли;
	 //
	 //Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	 //Запрос.УстановитьПараметр("ВидПоказателя", Объект.ВидПоказателя);
	 //Запрос.УстановитьПараметр("Организация", Объект.Организация); 
	 //
	 //Выгрузка = Запрос.Выполнить().Выгрузить();
	 
	 Для Каждого Выборка Из  ТЗ Цикл  
		 
		 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель",Выборка.Показатель.Родитель));
		 
		 Если НайденныеСтроки.Количество() = 0 Тогда
			 СтрокаДерева = Дерево.Строки.Добавить();
			 ЗаполнитьЗначенияСвойств(СтрокаДерева,Выборка);
		 Иначе 
			 Если СтрокаДерева <> Неопределено Тогда
				 
				 Пока  СтрокаДерева.Показатель<>Выборка.Показатель.Родитель Цикл
					 СтрокаДерева=СтрокаДерева.Родитель;
				 КонецЦикла; 
				 //Если СтрокаДерева <> Неопределено Тогда
				 СтрокаДерева				= СтрокаДерева.Строки.Добавить();
				 ЗаполнитьЗначенияСвойств(СтрокаДерева,Выборка); 
				 //КонецЕсли;
			 КонецЕсли;
			 //Если СтрокаДерева <> Неопределено Тогда
			 ЗаполнитьСтрокуВДерево(СтрокаДерева,Выборка.КодПоказателя,ТЗ); 
			 //КонецЕсли;
		 КонецЕсли;
	 КонецЦикла;
	 
	 ЗаполнитьУровеньДерева(Дерево.Строки);
	 
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 
	 Для Каждого ВидПоказателя Из Объект.ВидПоказателя.КолонкиПоказателей Цикл
		 Если ВидПоказателя.ИмяКолонки = "BS" Или ВидПоказателя.ИмяКолонки = "TypeMovement" ИЛИ ВидПоказателя.ИмяКолонки = "account" Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Элементы["ДеревоПрочиеПоказатели"+ВидПоказателя.ИмяКолонки].Видимость = Не ВидПоказателя.НеОтображатьВДЗО;
	 КонецЦикла;
	 
 КонецПроцедуры 
 

 &НаСервере
 Процедура ЗаполнитьСтрокуВДерево(СтрокаДерева,КодПоказателя,ТЗ)
	 
	 ТЗКопия = ТЗ.Скопировать();
	 ТЗКопия.Свернуть("Показатель",ОсновноеСуммируемоеПоле);
	 НайденныеСтроки  = ТЗКопия.НайтиСтроки(Новый Структура("Показатель",СтрокаДерева.Показатель));
	 Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		 ЗаполнитьЗначенияСвойств(СтрокаДерева,НайденнаяСтрока);
		 
		 СтрокиВидаПоказателя = Объект.ВидПоказателя.СтрокиПоказателей.НайтиСтроки(Новый Структура("Показатель",НайденнаяСтрока.Показатель));
		 Если СтрокиВидаПоказателя.Количество() Тогда
			 СтрокаДерева.РучнойВвод =  СтрокиВидаПоказателя[0].РучнойВВод;
			 СтрокаДерева.НеСобиратьИтоги =  СтрокиВидаПоказателя[0].НеСобиратьИтоги;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
 КонецПроцедуры // 
 
 &НаСервере
 Процедура ЗаполнитьУровеньДерева(СтрокиДерева)
	 
	 Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		 СтрокаДерева.Уровень = СтрокаДерева.Уровень();
		 Если СтрокаДерева.Строки.Количество() Тогда 
			 ЗаполнитьУровеньДерева(СтрокаДерева.Строки);			
		 КонецЕсли;
	 КонецЦикла;
	 
	 
 КонецПроцедуры // ЗаполнитьУровеньДерева()
 
 &НаСервере
 Процедура ОпределитьКолонкиПоказателя()
	 
	 Если ЗначениеЗаполнено(Объект.ВидПоказателя) Тогда
		 ОчиститьКолонкиПОказателей();
		 КолонкиВида = Объект.ВидПоказателя.КолонкиПоказателей;
		 ОсновноеСуммируемоеПоле = "";
		 Для Каждого  СтрокаКолонки Из КолонкиВида Цикл
			 Если СтрокаКолонки.ИмяКолонки = "КодПоказателя" Или СтрокаКолонки.ИмяКолонки = "Показатель" Или СтрокаКолонки.ИмяКолонки = "РучнойВвод" Или СтрокаКолонки.ИмяКолонки = "НеСобиратьИтоги" Тогда
				 Продолжить;
			 КонецЕсли;
			 Если ЗначениеЗаполнено(СтрокаКолонки.ИмяКолонки) Тогда
				 НовыйЭлемент = Элементы.Добавить(СтрокаКолонки.ИмяКолонки,Тип("ПолеФормы"),Элементы.ПрочиеПоказатели);
				 НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				 НовыйЭлемент.Заголовок = СтрокаКолонки.СинонимКолонки;  
				 НовыйЭлемент.ПутьКДанным = "Объект.ПрочиеПоказатели."+СтрокаКолонки.ИмяКолонки;
				 Если СтрокаКолонки.ИмяКолонки = "BS" Тогда
					 ИспользуетСтатьиБюджета = Истина;
					 НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ЭлементBSНачалоВыбора");
					 
				 КонецЕсли;
				 
				 Если СтрокаКолонки.ИмяКолонки = "AmountBalance" Тогда
					 //ИспользуетСтатьиБюджета = Истина;
					 НовыйЭлемент.УстановитьДействие("ПриИзменении", "ЭлементAmountBalanceПриИзменени");
					 
				 КонецЕсли; 
				 
				 
				 НовыйЭлементДерево = Элементы.Добавить("ДеревоПрочиеПоказатели"+СтрокаКолонки.ИмяКолонки,Тип("ПолеФормы"),Элементы.ДеревоПрочиеПоказатели);
				 НовыйЭлементДерево.Вид = ВидПоляФормы.ПолеВвода;
				 НовыйЭлементДерево.Заголовок = СтрокаКолонки.СинонимКолонки;  
				 НовыйЭлементДерево.ПутьКДанным = "ДеревоПрочиеПоказатели."+СтрокаКолонки.ИмяКолонки; 
				 
				 Если СтрокаКолонки.ИмяКолонки = "AmountBalance" Тогда
					 
					 НовыйЭлементДерево.УстановитьДействие("ПриИзменении", "ДеревоПрочиеПоказателиAmountBalanceПриИзменении");
					 
				 КонецЕсли; 
				 
				 Если СтрокаКолонки.ИмяКолонки = "Sum" Тогда
					 
					 НовыйЭлементДерево.УстановитьДействие("ПриИзменении", "ДеревоПрочиеПоказателиSumПриИзменении");
					 
				 КонецЕсли; 
				 
				 
				 Если СтрокаКолонки.ИмяКолонки = "OnRequest" Тогда
					 
					 НовыйЭлементДерево.УстановитьДействие("ПриИзменении", "ПересчитатьВид27");
					 
				 КонецЕсли;
				 
				 
				 Если СтрокаКолонки.ИмяКолонки = "less3months" Тогда
					 
					 НовыйЭлементДерево.УстановитьДействие("ПриИзменении", "ПересчитатьВид27");
					 
				 КонецЕсли;
				 
				 
				 Если СтрокаКолонки.ИмяКолонки = "Between3and12months" Тогда
					 
					 НовыйЭлементДерево.УстановитьДействие("ПриИзменении", "ПересчитатьВид27");
					 
				 КонецЕсли;
				 
				 Если СтрокаКолонки.ИмяКолонки = "Between1and5years" Тогда
					 
					 НовыйЭлементДерево.УстановитьДействие("ПриИзменении", "ПересчитатьВид27");
					 
				 КонецЕсли;
				 
				 Если СтрокаКолонки.ИмяКолонки = "Контрагент" Тогда
					 
					 НовыйЭлементДерево.УстановитьДействие("ПриИзменении", "ДеревоПрочиеПоказателиКонтрагентПриИзменении");
					 
				 КонецЕсли;
				 
				 Если СтрокаКолонки.ИспользуетНастройкиСвязей Тогда
					 ОсновноеСуммируемоеПоле = СтрокаКолонки.ИмяКолонки;
				 КонецЕсли;  
			 КонецЕсли;
		 КонецЦикла;
	 КонецЕсли;
	 
	 Если Не ЗначениеЗаполнено(ОсновноеСуммируемоеПоле) Тогда
		 ОсновноеСуммируемоеПоле = "Sum";
	 КонецЕсли;
	 
	 
	 
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ДобавитьИзменитьСтрокиПоказателейНаСервере1() 
	 
	 Объект.ПрочиеПоказатели.Очистить();
	 СтрокиВида = Объект.ВидПоказателя.СтрокиПоказателей;
	 Запрос = Новый Запрос;
	 //Запрос.Текст = 
	 //"ВЫБРАТЬ
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя КАК ВидПоказателя,
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель КАК Показатель,
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК Статья,
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Представление КАК СтатьиПредставление,
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ТипСтатьи КАК ТипСтатьи
	 //|ИЗ
	 //|	РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних(&НаДату, ВидПоказателя = &ВидПоказателя) КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
	 //|
	 //|СГРУППИРОВАТЬ ПО
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель,
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя,
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ТипСтатьи,
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи,
	 //|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Представление"; 
	 
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя КАК ВидПоказателя,
	                |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК Статья,
	                |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Представление КАК СтатьиПредставление,
	                |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ТипСтатьи КАК ТипСтатьи,
	                |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель КАК Показатель
	                |ПОМЕСТИТЬ ВременнаяТаблица
	                |ИЗ
	                |	Справочник.ВидыПрочихПоказателейMDM.СтрокиПоказателей КАК ВидыПрочихПоказателейMDMСтрокиПоказателей
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних(&НаДату, ВидПоказателя = &ВидПоказателя) КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
	                |		ПО ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка = ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя
	                |			И ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель = ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя,
	                |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ТипСтатьи,
	                |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи,
	                |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Представление,
	                |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель КАК Показатель,
	                |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка КАК Ссылка
	                |ПОМЕСТИТЬ ВременнаяТаблица1
	                |ИЗ
	                |	Справочник.ВидыПрочихПоказателейMDM.СтрокиПоказателей КАК ВидыПрочихПоказателейMDMСтрокиПоказателей
	                |ГДЕ
	                |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка = &ВидПоказателя
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВременнаяТаблица1.Показатель КАК Показатель,
	                |	ВременнаяТаблица.Статья КАК Статья,
	                |	ВременнаяТаблица.СтатьиПредставление КАК СтатьиПредставление,
	                |	ВременнаяТаблица.ТипСтатьи КАК ТипСтатьи
	                |ИЗ
	                |	ВременнаяТаблица1 КАК ВременнаяТаблица1
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	                |		ПО (ВременнаяТаблица1.Показатель = ВременнаяТаблица.Показатель
	                |				ИЛИ ВременнаяТаблица1.Показатель.Родитель = ВременнаяТаблица.Показатель)
	                |ИТОГИ ПО
	                |	Статья";
	 
	 Запрос.УстановитьПараметр("ВидПоказателя", Объект.ВидПоказателя);
	 Запрос.УстановитьПараметр("НаДату", Объект.КонецПериода);
	 
	 РезультатЗапроса = Запрос.Выполнить();  
	 Выгрузка = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); 
	 Если НЕ ИспользоватьРасшифровкуПоАналитике Тогда 
		 Выгрузка.Свернуть("Показатель");
	 КонецЕсли;
	 
	 
	 Для Каждого  СтрокаВида Из СтрокиВида Цикл 
		 
		 
		 АналитикаПоПоказателю =    Выгрузка.НайтиСтроки(Новый Структура("Показатель",СтрокаВида.Показатель)); 
		 
		 //Если АналитикаПоПоказателю.Количество() И ИспользоватьРасшифровкуПоАналитике Тогда 
		 Если  ИспользоватьРасшифровкуПоАналитике Тогда 
			 Для Каждого СтрокаАналитики Из АналитикаПоПоказателю Цикл 
				 ВидПрочегоПоказателя = Объект.ПрочиеПоказатели.Добавить();
				 ВидПрочегоПоказателя.КодПоказателя = СтрокаВида.КодПоказателя;
				 ВидПрочегоПоказателя.Показатель = СтрокаВида.Показатель; 
				 Если ТипЗнч(СтрокаАналитики.Статья) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
					 ВидПрочегоПоказателя.BS = СтрокаАналитики.Статья;
				 ИначеЕсли ТипЗнч(СтрокаАналитики.Статья) = Тип("СправочникСсылка.ВидыДвижения") Тогда 
					 ВидПрочегоПоказателя.TypeMovement = СтрокаАналитики.Статья;
				 ИначеЕсли ТипЗнч(СтрокаАналитики.Статья) = Тип("СправочникСсылка.ПланСчетов") Тогда 
					 ВидПрочегоПоказателя.account = СтрокаАналитики.Статья;
				 КонецЕсли; 
				 Если ВидПрочегоПоказателя.КодПоказателя = "IND2.3.11." Тогда 
					 
					 ВидПрочегоПоказателя.FairValueBoolean = "";
					 
				 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид23(Объект.ВидПоказателя) И Объект.Ссылка.Пустая() Тогда
					 
					 ВидПрочегоПоказателя.FairValueBoolean = Ложь;
					 
				 КонецЕсли;
			 КонецЦикла; 
		 Иначе
			 ВидПрочегоПоказателя = Объект.ПрочиеПоказатели.Добавить();
			 ВидПрочегоПоказателя.КодПоказателя = СтрокаВида.КодПоказателя;
			 ВидПрочегоПоказателя.Показатель = СтрокаВида.Показатель;
			 Если ВидПрочегоПоказателя.КодПоказателя = "IND2.3.11." Тогда 
				 
				 ВидПрочегоПоказателя.FairValueBoolean = "";
				 
			 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид23(Объект.ВидПоказателя) И Объект.Ссылка.Пустая() Тогда
				 
				 ВидПрочегоПоказателя.FairValueBoolean = Ложь;
				 
			 КонецЕсли;
		 КонецЕсли; 
		 
		 
		 
	 КонецЦикла; 
	 
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ДобавитьИзменитьСтрокиПоказателейНаСервере() 
	 
	 Объект.ПрочиеПоказатели.Очистить();
	 СтрокиВида = Объект.ВидПоказателя.СтрокиПоказателей; 
	 
	 //Если ИспользоватьРасшифровкуПоАналитике()Тогда
	 //    Запрос = Новый Запрос;
	 //    Запрос.Текст = 
	 //    "ВЫБРАТЬ
	 //    |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя КАК ВидПоказателя,
	 //    |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК Статья,
	 //    |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Представление КАК СтатьиПредставление,
	 //    |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ТипСтатьи КАК ТипСтатьи,
	 //    |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель КАК Показатель
	 //    |ПОМЕСТИТЬ ВременнаяТаблица
	 //    |ИЗ
	 //    |	Справочник.ВидыПрочихПоказателейMDM.СтрокиПоказателей КАК ВидыПрочихПоказателейMDMСтрокиПоказателей
	 //    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних(&НаДату, ВидПоказателя = &ВидПоказателя) КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
	 //    |		ПО ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка = ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя
	 //    |			И ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель = ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель
	 //    |
	 //    |СГРУППИРОВАТЬ ПО
	 //    |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя,
	 //    |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ТипСтатьи,
	 //    |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи,
	 //    |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Представление,
	 //    |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель
	 //    |;
	 //    |
	 //    |////////////////////////////////////////////////////////////////////////////////
	 //    |ВЫБРАТЬ
	 //    |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Показатель КАК Показатель,
	 //    |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка КАК Ссылка
	 //    |ПОМЕСТИТЬ ВременнаяТаблица1
	 //    |ИЗ
	 //    |	Справочник.ВидыПрочихПоказателейMDM.СтрокиПоказателей КАК ВидыПрочихПоказателейMDMСтрокиПоказателей
	 //    |ГДЕ
	 //    |	ВидыПрочихПоказателейMDMСтрокиПоказателей.Ссылка = &ВидПоказателя
	 //    |;
	 //    |
	 //    |////////////////////////////////////////////////////////////////////////////////
	 //    |ВЫБРАТЬ
	 //    |	ВременнаяТаблица1.Показатель КАК Показатель,
	 //    |	ВременнаяТаблица.Статья КАК Статья,
	 //    |	ВременнаяТаблица.СтатьиПредставление КАК СтатьиПредставление,
	 //    |	ВременнаяТаблица.ТипСтатьи КАК ТипСтатьи
	 //    |ИЗ
	 //    |	ВременнаяТаблица1 КАК ВременнаяТаблица1
	 //    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	 //    |		ПО (ВременнаяТаблица1.Показатель = ВременнаяТаблица.Показатель
	 //    |				ИЛИ ВременнаяТаблица1.Показатель.Родитель = ВременнаяТаблица.Показатель)
	 //    |
	 //    |СГРУППИРОВАТЬ ПО
	 //    |	ВременнаяТаблица1.Показатель,
	 //    |	ВременнаяТаблица.Статья,
	 //    |	ВременнаяТаблица.СтатьиПредставление,
	 //    |	ВременнаяТаблица.ТипСтатьи
	 //    |ИТОГИ ПО
	 //    |	Статья";
	 //    
	 //    Запрос.УстановитьПараметр("ВидПоказателя", Объект.ВидПоказателя);
	 //    Запрос.УстановитьПараметр("НаДату", Объект.КонецПериода);
	 //    
	 //    РезультатЗапроса = Запрос.Выполнить();
	 //    Выгрузка =      РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	 //    
	 //    СформироватьСтроки(Выгрузка.Строки) 
	 //Иначе     
		 Для Каждого  СтрокаВида Из СтрокиВида Цикл 
			 ВидПрочегоПоказателя = Объект.ПрочиеПоказатели.Добавить();
			 ВидПрочегоПоказателя.КодПоказателя = СтрокаВида.КодПоказателя;
			 ВидПрочегоПоказателя.Показатель = СтрокаВида.Показатель;
			 Если ВидПрочегоПоказателя.КодПоказателя = "IND2.3.11." Тогда 
				 
				 ВидПрочегоПоказателя.FairValueBoolean = "";
				 
			 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид23(Объект.ВидПоказателя) И Объект.Ссылка.Пустая() Тогда
				 
				 ВидПрочегоПоказателя.FairValueBoolean = Ложь;
			 КонецЕсли;
			 
		 КонецЦикла;
	 //КонецЕсли;
	 
	 
 КонецПроцедуры  
 
 &НаСервере
 Процедура СформироватьСтроки(СтрокиДерева)
	 
	 Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		 
		 Если СтрокаДерева.Строки.Количество() Тогда 
			 
			 СформироватьСтроки(СтрокаДерева.Строки);
			 
		 Иначе 
			 Если  ИспользоватьРасшифровкуПоАналитике Тогда 
					 ВидПрочегоПоказателя = Объект.ПрочиеПоказатели.Добавить();
					 ВидПрочегоПоказателя.Показатель = СтрокаДерева.Показатель; 
					 ВидПрочегоПоказателя.КодПоказателя = ВидПрочегоПоказателя.Показатель.КодСправочника;
					 Если ТипЗнч(СтрокаДерева.Статья) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
						 ВидПрочегоПоказателя.BS = СтрокаДерева.Статья;
					 ИначеЕсли ТипЗнч(СтрокаДерева.Статья) = Тип("СправочникСсылка.ВидыДвижения") Тогда 
						 ВидПрочегоПоказателя.TypeMovement = СтрокаДерева.Статья;
					 ИначеЕсли ТипЗнч(СтрокаДерева.Статья) = Тип("СправочникСсылка.ПланСчетов") Тогда 
						 ВидПрочегоПоказателя.account = СтрокаДерева.Статья;
					 КонецЕсли; 
					 Если ВидПрочегоПоказателя.КодПоказателя = "IND2.3.11." Тогда 
						 
						 ВидПрочегоПоказателя.FairValueBoolean = "";
						 
					 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид23(Объект.ВидПоказателя) И Объект.Ссылка.Пустая() Тогда
						 
						 ВидПрочегоПоказателя.FairValueBoolean = Ложь;
						 
					 КонецЕсли;
			 Иначе
				 ВидПрочегоПоказателя = Объект.ПрочиеПоказатели.Добавить();
				 ВидПрочегоПоказателя.Показатель = СтрокаДерева.Показатель;
				 ВидПрочегоПоказателя.КодПоказателя = ВидПрочегоПоказателя.Показатель.КодСправочника;
				 Если ВидПрочегоПоказателя.КодПоказателя = "IND2.3.11." Тогда 
					 
					 ВидПрочегоПоказателя.FairValueBoolean = "";
					 
				 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид23(Объект.ВидПоказателя) И Объект.Ссылка.Пустая() Тогда
					 
					 ВидПрочегоПоказателя.FairValueBoolean = Ложь;
					 
				 КонецЕсли;
			 КонецЕсли; 
			 
			 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 
	 
	 
 КонецПроцедуры // СформироватьСтроки()


 &НаКлиенте
 Процедура ВидПоказателяПриИзменении(Элемент)
	 
	 
	 
	 Объект.ПроверкаПолученныхДанных = ""; 
	 Объект.ПрочиеПоказатели.Очистить();
	 ОчиститьДерево();
	 ОчиститьДанныеДереваИТабличнойЧасти();
	 ОпределитьКолонкиПоказателя();
	 УстановитьЗначенияПериодовПоВидуПоказателяНаСервере();
	 ОбновитьВидимостьЭлементов(); 
	 
	 
	 
 КонецПроцедуры  
 
 
 &НаСервере
 Процедура ВидПоказателяПриИзмененииНаСервере()
	 
	 ИспользоватьРасшифровкуПоАналитике = ИспользоватьРасшифровкуПоАналитике();
	 //Объект.ПрочиеПоказатели.Очистить();
	 //ОпределитьКолонкиПоказателя();
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид9(Объект.ВидПоказателя) Тогда
		 ИнформацияПоДепозитам();
	 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид17(Объект.ВидПоказателя) Тогда
		 ИнформацияПоВиду_17();
	 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид26(Объект.ВидПоказателя) Тогда
		 ИнформацияПоВиду_26();
	 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид14(Объект.ВидПоказателя) Тогда
		 ИнформацияПоВиду_14();
	 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид4(Объект.ВидПоказателя) Тогда
		 ИнформацияПоВиду_4();
	 Иначе
		 ДобавитьИзменитьСтрокиПоказателейНаСервере();
		 РедактироватьДерево();
	 КонецЕсли; 
	 
 КонецПроцедуры // ВидПоказателяПриИзмененииНаСервере()
 
 &НаСервере
 Процедура ОчиститьКолонкиПОказателей()
	 
	 МассивКолонок = Новый Массив;
	 КолонкиВида = Элементы.ПрочиеПоказатели.ПодчиненныеЭлементы;
	 
	 
	 Для Каждого СтрокаКолонки Из КолонкиВида Цикл
		 Если СтрокаКолонки.Имя = "КодПоказателя" Или СтрокаКолонки.Имя = "Показатель" Тогда
			 Продолжить;
		 КонецЕсли;
		 МассивКолонок.Добавить(СтрокаКолонки.Имя);
	 КонецЦикла;
	 
	 Для Каждого  ЭлементМассива Из МассивКолонок Цикл
		 НайденныйЭлемент = Элементы.Найти(ЭлементМассива);
		 Если НайденныйЭлемент <> Неопределено Тогда
			 Элементы.Удалить(НайденныйЭлемент);
		 КонецЕсли;
	 КонецЦикла;
	 
	 МассивКолонокДерева = Новый Массив;
	 КолонкиВидаДерева = Элементы.ДеревоПрочиеПоказатели.ПодчиненныеЭлементы;
	 
	 Для Каждого СтрокаКолонки Из КолонкиВидаДерева Цикл
		 Если СтрокаКолонки.Имя = "ДеревоПрочиеПоказателиПоказатель" Или СтрокаКолонки.Имя = "ДеревоПрочиеПоказателиКодПоказателя" Или СтрокаКолонки.Имя = "ДеревоПрочиеПоказателиРучнойВвод" Или СтрокаКолонки.Имя = "ДеревоПрочиеПоказателиНеСобиратьИтоги" Тогда
			 Продолжить;
		 КонецЕсли;
		 МассивКолонокДерева.Добавить(СтрокаКолонки.Имя);
	 КонецЦикла;  
	 
	 Для Каждого  ЭлементМассива Из МассивКолонокДерева Цикл
		 НайденныйЭлемент = Элементы.Найти(ЭлементМассива);
		 Если НайденныйЭлемент <> Неопределено Тогда
			 Элементы.Удалить(НайденныйЭлемент);
		 КонецЕсли;
	 КонецЦикла;
	 
	 
 КонецПроцедуры // ОчиститьКолонкиПОказателей()
 
 &НаКлиенте
 Процедура КодПоказателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 // Вставить содержимое обработчика.
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ЭлементBSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 Отбор = Новый Структура("Отбор",НОвый Структура("Владелец",Бюджет ));
	 ОткрытьФорму("Справочник.авБюджеты.ФормаВыбора",Отбор,Элемент);
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура ЭлементAmountBalanceПриИзменени(Элемент)
	 
	 
	 
 КонецПроцедуры // ЭлементAmountBalanceПриИзменени()
 
 
 &НаКлиенте
 Процедура ПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 // Вставить содержимое обработчика.
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Отправить(Команда)
	 
	 Если ЕстьНезаполненныеПоля() Тогда
		 Возврат;
	 КонецЕсли;
	 Записать();
	 ОтправитьНаСервере();  
	 
 КонецПроцедуры 
 
 &НаСервере
 Процедура ОтправитьНаСервере()
	 
	 ТекущийОтбъект = РеквизитФормыВЗначение("Объект");
	 ПрочиеПоказателиВызовСервера.ОтправитьНаСервере(ТекущийОтбъект);
	 
 КонецПроцедуры // ОтправитьНаСервере()
 
   &НаСервере
 Процедура ПолучитьОборотыПоУсловию2(СтрокаТз)  
	 
	 
	 
	 СохраненныйКомпоновщикНастроек = СтрокаТз.КомпоновщикНастроекОтбор.Получить();
	 Если ТипЗнч(СохраненныйКомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда 
		 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 Иначе
		 ОтборНастройки = Неопределено;
	 КонецЕсли;
	 
	 
	 
	 
	 Если ИспользоватьРасшифровкуПоАналитике Тогда
		 СКД_Обороты = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_ОборотыКорСчет"); 
	 Иначе 
		 СКД_Обороты = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_ОборотыБезКорСчета"); 
	 КонецЕсли;
	 ПараметрыДанныхОСКД = СКД_Обороты.Параметры;
	 НастройкиОСКД = СКД_Обороты.НастройкиПоУмолчанию;
	 
	 ТЗ1 = Новый ТаблицаЗначений;
	 Если ОтборНастройки <> Неопределено И ОтборНастройки.Элементы.Количество() >0 Тогда
		 
		 ДобавитьЭлементыОтбора(ОтборНастройки.Элементы, НастройкиОСКД.Отбор);
	 КонецЕсли;
	 
	 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("Организация");
	 НовыйЭлементОтбора.Использование 	= Истина;
	 НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	 НовыйЭлементОтбора.ПравоеЗначение 	= Объект.Организация;
	 
	 
	 
	 Если  ПрочиеПоказателиВызовСервера.ЭтоВид2(Объект.ВидПоказателя) Тогда
		 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("КорСчет");
		 НовыйЭлементОтбора.Использование 	= Истина;
		 НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеРавно;
		 НовыйЭлементОтбора.ПравоеЗначение 	= ПланыСчетов.Типовой.НайтиПоКоду("5710");;
	 КонецЕсли; 
	 
	 
	 
	 
	 ПараметрыДанныхОСКД = СКД_Обороты.Параметры;
	 
	 ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("Окончание");
	 ЭлементКонецПериода.Значение = Новый Граница(КонецДня(Объект.КонецПериода),ВидГраницы.Включая);
	 
	 ЭлементНачалоПериода = ПараметрыДанныхОСКД.Найти("Начало");
	 ЭлементНачалоПериода.Значение = Объект.НачалоПериода;
	 
	 
	 ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет");
	 ЭлементСчет.Значение = СтрокаТз.Счет; 
	 
	 
	 Если ИспользоватьРасшифровкуПоАналитике Тогда
		 ЭлементКорСчет = ПараметрыДанныхОСКД.Найти("КорСчет");
		 ЭлементКорСчет.Значение = СтрокаТз.КорСчет;
	 КонецЕсли;
	 
	 
	 
	 КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	 Макет = КомпоновщикМакетаОСКД.Выполнить(СКД_Обороты, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	 
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 ПроцессорВывода.УстановитьОбъект(ТЗ1);
	 ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД); 
	 
	 //Если ТЗ1.Количество() Тогда 
	 //    ТЗ1.Свернуть(,"СуммаОборотКт,СуммаОборотДт,СуммаОборот");
	 //    Если СтрокаТз.ТипДвижения = "Оборот Кт" Тогда
	 //   	 //Если  ПрочиеПоказателиВызовСервера.ЭтоВид2(Объект.ВидПоказателя) Тогда
	 //   	 //    Если ЗначениеЗаполнено(ТЗ1[0].СуммаОборотКт) Тогда
	 //   	 //    СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотКт-ТЗ1[0].СуммаОборотДт ;
	 //   	 //    КонецЕсли;
	 //   	 //Иначе
	 //   		 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотКт;
	 //   	 //КонецЕсли;
	 //    	Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("СчетЭталон: "+СтрокаТз.СчетЭталон+" Счет: "+СтрокаТз.Счет+" КорСчет: "+СтрокаТз.КорСчет+"  Сумма: "+ТЗ1[0].СуммаОборотКт + "       Показатель: "+СтрокаТз.ПрочийПоказатель+"               Условия отбора: "+СтрокаТз.ПредставлениеОтбора+ Символы.ПС);
	 //   ИначеЕсли СтрокаТз.ТипДвижения = "Оборот Дт" Тогда  
	 //   	//
	 //   	// Если  ПрочиеПоказателиВызовСервера.ЭтоВид2(Объект.ВидПоказателя) Тогда
	 //   	//	 Если ЗначениеЗаполнено(ТЗ1[0].СуммаОборотДт) Тогда
	 //   	//	 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотДт-ТЗ1[0].СуммаОборотКт ;
	 //   	//	 КонецЕсли;
	 //   	// Иначе
	 //   		 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотДт;
	 //   	 //КонецЕсли;
	 //   	
	 //    	Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("СчетЭталон: "+СтрокаТз.СчетЭталон+" Счет: "+СтрокаТз.Счет+" КорСчет: "+СтрокаТз.КорСчет+"  Сумма: "+ТЗ1[0].СуммаОборотДт +"       Показатель: "+СтрокаТз.ПрочийПоказатель+"               Условия отбора: "+СтрокаТз.ПредставлениеОтбора+ Символы.ПС);
	 //    Иначе    
	 //   	 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборот; 
	 //    	Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("СчетЭталон: "+СтрокаТз.СчетЭталон+" Счет: "+СтрокаТз.Счет+" КорСчет: "+СтрокаТз.КорСчет+"  Сумма: "+ТЗ1[0].СуммаОборот +"         Показатель: "+СтрокаТз.ПрочийПоказатель+"                Условия отбора: "+СтрокаТз.ПредставлениеОтбора+ Символы.ПС);
	 //    КонецЕсли;
	 //Иначе
	 //    //Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("Счет: "+СтрокаТз.Счет+" КорСчет: "+СтрокаТз.КорСчет+"  Сумма: "+0 + Символы.ПС);
	 //КонецЕсли;
	 
	 
	 Если ТЗ1.Количество() Тогда 
		 ТЗ1.Свернуть(,"СуммаОборотКт,СуммаОборотДт,СуммаОборот");
		 Если СтрокаТз.ТипДвижения = "Оборот Кт" Тогда
			 Если  ПрочиеПоказателиВызовСервера.ЭтоВид2(Объект.ВидПоказателя) Тогда
					 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотКт-ТЗ1[0].СуммаОборотДт ; 
			 Иначе
				 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотКт;
			 КонецЕсли;
			 Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("СчетЭталон: "+СтрокаТз.СчетЭталон+" Счет: "+СтрокаТз.Счет+" КорСчет: "+СтрокаТз.КорСчет+"  Сумма: "+ТЗ1[0].СуммаОборотКт + "       Показатель: "+СтрокаТз.ПрочийПоказатель+"               Условия отбора: "+СтрокаТз.ПредставлениеОтбора+ Символы.ПС);
		 ИначеЕсли СтрокаТз.ТипДвижения = "Оборот Дт" Тогда  
			 
			 Если  ПрочиеПоказателиВызовСервера.ЭтоВид2(Объект.ВидПоказателя) Тогда
					 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотДт-ТЗ1[0].СуммаОборотКт ; 
			 Иначе
				 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотДт;
			 КонецЕсли;
			 
			 Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("СчетЭталон: "+СтрокаТз.СчетЭталон+" Счет: "+СтрокаТз.Счет+" КорСчет: "+СтрокаТз.КорСчет+"  Сумма: "+ТЗ1[0].СуммаОборотДт +"       Показатель: "+СтрокаТз.ПрочийПоказатель+"               Условия отбора: "+СтрокаТз.ПредставлениеОтбора+ Символы.ПС);
		 Иначе    
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборот; 
			 Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("СчетЭталон: "+СтрокаТз.СчетЭталон+" Счет: "+СтрокаТз.Счет+" КорСчет: "+СтрокаТз.КорСчет+"  Сумма: "+ТЗ1[0].СуммаОборот +"         Показатель: "+СтрокаТз.ПрочийПоказатель+"                Условия отбора: "+СтрокаТз.ПредставлениеОтбора+ Символы.ПС);
		 КонецЕсли;
	 Иначе
		 //Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("Счет: "+СтрокаТз.Счет+" КорСчет: "+СтрокаТз.КорСчет+"  Сумма: "+0 + Символы.ПС);
	 КонецЕсли;
	 
	 
	 
 КонецПроцедуры // ПолучитьОборотыПоУсловию()
 
 Процедура ДобавитьЭлементыОтбора(Элементы, Отбор)
	
	Для каждого ЭлементОтбора Из Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ГруппаОтбора 			= Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы 	= ЭлементОтбора.ТипГруппы;
						
			ДобавитьЭлементыОтбора(ЭлементОтбора.Элементы, ГруппаОтбора);
			
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение 	= ЭлементОтбора.ЛевоеЗначение;
			НовыйЭлементОтбора.Использование 	= Истина;
			НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
			НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры
 
  &НаСервере
 Процедура ПолучитьОcтаткиПоУсловию(СтрокаТаблицы,ВыгрузкаПрочихПоказателей = Неопределено) Экспорт
	 
	 
	 СохраненныйКомпоновщикНастроек = СтрокаТаблицы.КомпоновщикНастроекОтбор.Получить();
	 Если ТипЗнч(СохраненныйКомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда 
		 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 Иначе
		 ОтборНастройки = Неопределено;
	 КонецЕсли;
	 
	 ОСКД = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Остатки");
	 ПараметрыДанныхОСКД = ОСКД.Параметры;
	 
	 НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
	 ТЗ1 = Новый ТаблицаЗначений;
	 
	 
	 Если ОтборНастройки <> Неопределено И ОтборНастройки.Элементы.Количество() >0 Тогда
		  ДобавитьЭлементыОтбора(ОтборНастройки.Элементы, НастройкиОСКД.Отбор);

	 КонецЕсли; 
	 
	 
	 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("Организация");
	 НовыйЭлементОтбора.Использование 	= Истина;
	 НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	 НовыйЭлементОтбора.ПравоеЗначение 	= Объект.Организация; 
	 
	 
	 Если СтрокаТаблицы.СписокАктивов.Количество() Тогда
		 
		 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("Субконто1");
		 НовыйЭлементОтбора.Использование 	= Истина;
		 НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		 НовыйЭлементОтбора.ПравоеЗначение 	= СтрокаТаблицы.СписокАктивов;
		 //СтрокаСписка = "";
		 //Для Каждого ЭлСписка Из  СтрокаТаблицы.СписокАктивов Цикл
		 //    СтрокаСписка = СтрокаСписка + Строка(ЭлСписка.Значение);
		 //КонецЦикла;
		 //
		 //Сообщить(СтрокаСписка);
		 
	 КонецЕсли; 
	 
	 Если СтрокаТаблицы.НоменклатурныеГруппы.Количество() Тогда 
		 
		 
		 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("Субконто1");
		 НовыйЭлементОтбора.Использование 	= Истина;
		 НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		 НовыйЭлементОтбора.ПравоеЗначение 	= СтрокаТаблицы.НоменклатурныеГруппы; 
		 
		 
	 КонецЕсли;
	 
	 ПараметрыДанныхОСКД = ОСКД.Параметры;
	 
	 
	 ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("КонецПериода");
	 ЭлементКонецПериода.Значение = Новый Граница(КонецДня(Объект.КонецПериода),ВидГраницы.Включая);
	 
	 
	 ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет");
	 ЭлементСчет.Значение = СтрокаТаблицы.Счет;
	 
	 
	 КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	 Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 
	 ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	 
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 ПроцессорВывода.УстановитьОбъект(ТЗ1);
	 ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД);
	 
	 Если СтрокаТаблицы.ПрочийПоказатель = Справочники.авINDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.1.6.1.") Тогда
		 
		 Для Каждого  ВыборкаДетальныеЗаписи Из ТЗ1 Цикл		 
			 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить(); 
			 СтрокаТЧ.Показатель    = Справочники.авINDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.1.6.");	
			 СтрокаТЧ.КодПоказателя =  СтрокаТЧ.Показатель.Код;	
			 СтрокаТЧ.BankName      = Строка(ВыборкаДетальныеЗаписи.Субконто1.Банк); 
			 СтрокаТЧ.DepositName   = Строка(ВыборкаДетальныеЗаписи.Субконто1); 
			 СтрокаТЧ.Значение      = 0; 
			 
			 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить(); 
			 СтрокаТЧ.Показатель  = Справочники.авINDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.1.7.");	
			 СтрокаТЧ.КодПоказателя =  СтрокаТЧ.Показатель.Код;	
			 СтрокаТЧ.BankName = Строка(ВыборкаДетальныеЗаписи.Субконто1.Банк);
			 СтрокаТЧ.DepositName   = Строка(ВыборкаДетальныеЗаписи.Субконто1); 
			 СтрокаТЧ.Значение = Дата(1,1,1);
			 
			 
			 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить(); 
			 СтрокаТЧ.Показатель  = Справочники.авINDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.1.8.");	
			 СтрокаТЧ.КодПоказателя =  СтрокаТЧ.Показатель.Код;	
			 СтрокаТЧ.BankName = Строка(ВыборкаДетальныеЗаписи.Субконто1.Банк); 
			 СтрокаТЧ.DepositName   = Строка(ВыборкаДетальныеЗаписи.Субконто1); 
			 СтрокаТЧ.Значение = Дата(1,1,1); 
			 
			 
			 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить(); 
			 СтрокаТЧ.Показатель    = Справочники.авINDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.1.6.1.");	
			 СтрокаТЧ.КодПоказателя =  СтрокаТЧ.Показатель.Код;	
			 СтрокаТЧ.BankName      = Строка(ВыборкаДетальныеЗаписи.Субконто1.Банк); 
			 СтрокаТЧ.DepositName   = Строка(ВыборкаДетальныеЗаписи.Субконто1); 
			 СтрокаТЧ.Значение      = ВыборкаДетальныеЗаписи.СуммаОстаток; 
			 
			 
		 КонецЦикла;
		 
		 Возврат ;	 
		 
		 
	 КонецЕсли; 
	 
	 
	 Если СтрокаТаблицы.ПрочийПоказатель = Справочники.авINDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.4.2.") Тогда 
		 ТЗ1.Свернуть("Организация,Валюта,Субконто1","СуммаОстаток,СуммаОстатокДт,СуммаОстатокКт");
		 Для Каждого СтрокаТЗ Из ТЗ1 Цикл 
			 Если СтрокаТЗ.Валюта = Справочники.Валюты.НайтиПоКоду("KZT") Тогда
				 Продолжить;
			 КонецЕсли;
			 
			 МассивНайденных = ВыгрузкаПрочихПоказателей.НайтиСтроки(Новый Структура("Показатель,BS,CUR",СтрокаТаблицы.ПрочийПоказатель,СтрокаТаблицы.СтатьяДляИтогов,СтрокаТЗ.Валюта));
			 Для Каждого СтрокаМассива Из МассивНайденных Цикл  
				 СтрокаМассива.AmountBalance = СтрокаМассива.AmountBalance + СтрокаТЗ.СуммаОстаток; 
				 
				 Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("Статья: "+СтрокаМассива.BS+" Субконто1: "+СтрокаТЗ.Субконто1+"  Валюта: "+СтрокаМассива.CUR+"  Счет: "+ СтрокаТаблицы.Счет+"  Сумма: "+СтрокаМассива.AmountBalance + Символы.ПС);
				 
				 //Sum = СтрокаМассива.AmountBalance  * СтрокаМассива.ValuePercent   /100;
				 //Если СтрокаМассива.CourseDirection = Перечисления.ВозможныеИзмененияКурса.Уменьшение Тогда 
				 //    СтрокаМассива.Sum  = Мин(Sum,-Sum);
				 //Иначе   
				 //    СтрокаМассива.Sum  = Макс(Sum,-Sum);;
				 //КонецЕсли;
				 
				Sum = СтрокаМассива.AmountBalance  * СтрокаМассива.ValuePercent   /100;
				Если СтрокаМассива.CourseDirection = Перечисления.ВозможныеИзмененияКурса.Увеличение Тогда 
					СтрокаМассива.Sum  = Sum;
				Иначе   
					СтрокаМассива.Sum  = -Sum;
				КонецЕсли;				 
				 
			 КонецЦикла;
			 
			 
		 КонецЦикла;
		 
		 
		 Возврат;
	 КонецЕсли;
	 
	 Если СтрокаТаблицы.ПрочийПоказатель = Справочники.авINDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.2.2.") Тогда 
		 ТЗ1.Свернуть("Организация,Субконто1","СуммаОстаток,СуммаОстатокДт,СуммаОстатокКт");
		 Для Каждого СтрокаТЗ Из ТЗ1 Цикл 
			 //
			 МассивНайденных = ВыгрузкаПрочихПоказателей.НайтиСтроки(Новый Структура("Показатель,BS",СтрокаТаблицы.ПрочийПоказатель,СтрокаТаблицы.СтатьяДляИтогов));
			 Для Каждого СтрокаМассива Из МассивНайденных Цикл  
				 СтрокаМассива.AmountBalance = СтрокаМассива.AmountBalance + СтрокаТЗ.СуммаОстаток; 
				 
				 Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("Статья: "+СтрокаМассива.BS+" Субконто1: "+СтрокаТЗ.Субконто1+"  Счет: "+ СтрокаТаблицы.Счет+"  Сумма: "+СтрокаМассива.AmountBalance + Символы.ПС);
				 СтрокаМассива.Sum  = СтрокаМассива.AmountBalance  * СтрокаМассива.ValuePercent   /100;
				 
			 КонецЦикла;
			 
			 
		 КонецЦикла;
		 
		 
		 Возврат;
	 КонецЕсли;
	 
	 
	 Если СтрокаТаблицы.СписокАктивов.Количество() Тогда 
		  ТЗ1.Свернуть("Организация,Субконто1","СуммаОстаток,СуммаОстатокДт,СуммаОстатокКт");
	     Для Каждого СтрокаАтива Из СтрокаТаблицы.СписокАктивов Цикл
	    	 НайденныеАктивы = ТЗ1.НайтиСтроки(Новый Структура("Субконто1",СтрокаАтива.Значение));
	    	 Если НайденныеАктивы.Количество() Тогда 
	    		 Для Каждого НайденныйАктив Из НайденныеАктивы Цикл 
	    			 Если НайденныйАктив.СуммаОстаток = 0 Тогда
	    				 Продолжить;
	    			 КонецЕсли;
	    			 
	    			 СтрокаКатекогииАктивов = Объект.КатегорииАктива.Добавить(); 
	    			 СтрокаКатекогииАктивов.Показатель = СтрокаТаблицы.ПрочийПоказатель; 
	    			 СтрокаКатекогииАктивов.СчетЭталон = СтрокаТаблицы.СчетЭталон;
	    			 СтрокаКатекогииАктивов.Счет                 = СтрокаТаблицы.Счет;
	    			 СтрокаКатекогииАктивов.Классификатор        = Справочники.КлассификаторОсновныхФондов.НайтиПоНаименованию(СтрокаАтива.Представление);
	    			 СтрокаКатекогииАктивов.КодКОФ               = СтрокаКатекогииАктивов.Классификатор.КодКОФ;
	    			 СтрокаКатекогииАктивов.Актив                =  НайденныйАктив.Субконто1;
	    			 СтрокаКатекогииАктивов.КодАктива            =  НайденныйАктив.Субконто1.Код;
					 //СтрокаКатекогииАктивов.ПолученныйКодКОФ     =  СтрокаТаблицы.КодКОФ;
	    			 СтрокаКатекогииАктивов.Сумма                =   НайденныйАктив.СуммаОстаток; 
	    			 СтрокаКатекогииАктивов.СтатьяБюджета        =   СтрокаТаблицы.СтатьяДляИтогов;
	    		 КонецЦикла
	    	 КонецЕсли;
	     КонецЦикла;
	 КонецЕсли;
	 
	 
	 ТЗ1.Свернуть("Организация","СуммаОстаток,СуммаОстатокДт,СуммаОстатокКт");
	 Для Каждого СтрокаТЗ Из ТЗ1 Цикл 
		 
		 Объект.ПроверкаПолученныхДанных = Объект.ПроверкаПолученныхДанных + ("Статья: "+СтрокаТаблицы.СтатьяДляИтогов+"; СчетЭталон: "+СтрокаТаблицы.СчетЭталон+";  Счет: "+ СтрокаТаблицы.Счет+";  Сумма: "+СтрокаТЗ.СуммаОстаток + Символы.ПС);
		 
	 КонецЦикла; 
	 
	 
	 

	 
	 ТЗ1.Свернуть(,"СуммаОстаток,СуммаОстатокДт,СуммаОстатокКт");
	 Если ТЗ1.Количество() Тогда 
		 
		 
		 Если СтрокаТаблицы.ТипДвижения = "Остаток Кт" Тогда 
			 СтрокаТаблицы.Сумма =  ТЗ1[0].СуммаОстатокКт;
		 ИначеЕсли СтрокаТаблицы.ТипДвижения = "Остаток Дт" Тогда   
			 СтрокаТаблицы.Сумма =  ТЗ1[0].СуммаОстатокДт;
		 Иначе    
			 СтрокаТаблицы.Сумма =  ТЗ1[0].СуммаОстаток;
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 //КонецЦикла;
	 
	 
 КонецПроцедуры

 &НаКлиенте
 Процедура Заполнить(Команда)
	 
	 Если ЕстьНезаполненныеПоля() Тогда
		 Возврат;
	 КонецЕсли;
	 Объект.ПроверкаПолученныхДанных = "";
	 ЗаполнитьНаСервере();
	 ОбновитьВидимостьЭлементов();
	 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
	 
 КонецПроцедуры 
 
 &НаСервере
 Процедура ЗаполнитьНаСервере() 
	 
	 ОпределитьКолонкиПоказателя();
	 ВидПоказателяПриИзмененииНаСервере();
	 //Если ПрочиеПоказателиВызовСервера.ЭтоВид17(Объект.ВидПоказателя) Тогда  
	 //    Объект.ПрочиеПоказатели.Очистить();
	 //    ИнформацияПоВиду_17(); 
	 //   ЗаполнитьДеревоПоВиду("IND2.3.4.4.");
	 //    Возврат;
	 //КонецЕсли;
	 //
	 //Если ПрочиеПоказателиВызовСервера.ЭтоВид26(Объект.ВидПоказателя) Тогда  
	 //    Объект.ПрочиеПоказатели.Очистить();
	 //    ИнформацияПоВиду_26(); 
	 //   ЗаполнитьДеревоПоВиду("IND2.3.4.2.");
	 //    Возврат;
	 //КонецЕсли;  
	 //
	 //Если ПрочиеПоказателиВызовСервера.ЭтоВид14(Объект.ВидПоказателя) Тогда  
	 //    Объект.ПрочиеПоказатели.Очистить();
	 //    ИнформацияПоВиду_14();
	 //   ЗаполнитьДеревоПоВиду("IND2.1.21.");		 
	 //    Возврат;
	 //КонецЕсли;
	 //
	 //Если ПрочиеПоказателиВызовСервера.ЭтоВид4(Объект.ВидПоказателя) Тогда  
	 //    Объект.ПрочиеПоказатели.Очистить();
	 //    ИнформацияПоВиду_4(); 
	 //    Возврат;
	 //КонецЕсли;
	 //
	 //Если ПрочиеПоказателиВызовСервера.ЭтоВид13(Объект.ВидПоказателя) Тогда  
	 //    Объект.ПрочиеПоказатели.Очистить();
	 //    ИнформацияПоВиду_13(); 
	 //    Возврат;
	 //КонецЕсли;  
	 //
	 //Если ПрочиеПоказателиВызовСервера.ЭтоВид9(Объект.ВидПоказателя) Тогда  
	 //    
	 //    Объект.ПрочиеПоказатели.Очистить();
	 //    ЗаполнитьПоДепозитамНаСервере();
	 //    РедактироватьДерево();
	 //    Возврат;
	 //    
	 //КонецЕсли;
	 //
	 //Выгрузка = Объект.ПрочиеПоказатели.Выгрузить();
	 //Выгрузка.ЗаполнитьЗначения(0,ОсновноеСуммируемоеПоле);
	 //Объект.ПрочиеПоказатели.Загрузить(Выгрузка);
	 //ОчиститьДерево();
	 //Если ПрочиеПоказателиВызовСервера.ПроверитьНаличиеНастроек(Объект.ВидПоказателя,Объект.Организация,Объект.ПрочиеПоказатели.Выгрузить(,"Показатель"),"СтатьиБюджетов") Тогда
	 //    ЗаполнитьПоСтатьямБюджета();
	 //КонецЕсли;
	 //Если ПрочиеПоказателиВызовСервера.ПроверитьНаличиеНастроек(Объект.ВидПоказателя,Объект.Организация,Объект.ПрочиеПоказатели.Выгрузить(,"Показатель"),"ВидыДвижения") Тогда
	 //    ЗаполнитьПоВидамДвижения();
	 //КонецЕсли;
	 //Если ПрочиеПоказателиВызовСервера.ПроверитьНаличиеНастроек(Объект.ВидПоказателя,Объект.Организация,Объект.ПрочиеПоказатели.Выгрузить(,"Показатель"),"ПланСчетов") Тогда
	 //    ЗаполнитьПоСчетам();
	 //КонецЕсли;
	 РедактироватьДерево();
	 
 КонецПроцедуры // ЗаполнитьНаСервере()
  
 &НаСервере
 Процедура ИнформацияПоДепозитам()
	 
	 ЗаполнитьПоДепозитамНаСервере();
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 Дерево.строки.Очистить();
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 
 КонецПроцедуры // ИнформацияПоДепозитам()
 
 &НаСервере
 Процедура ИнформацияПоВиду_17() 
	 
	 Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.4.2."); 
	 
	 Объект.ПроверкаПолученныхДанных = "";
	 
	 
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК Статьи
	 |ПОМЕСТИТЬ ВТ_Статьи
	 |ИЗ
	 |	РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних(&НаДату, ) КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
	 |ГДЕ
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя = &ВидПоказателя
	 |	И ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель = &Показатель
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ЧувствительностьКВозможнымИзменениямКурсаСрезПоследних.Валюта КАК Валюта,
	 |	ЧувствительностьКВозможнымИзменениямКурсаСрезПоследних.НаправлениеИзмененияКурса КАК НаправлениеИзмененияКурса,
	 |	ЧувствительностьКВозможнымИзменениямКурсаСрезПоследних.СтавкаИзмененияКурса КАК СтавкаИзмененияКурса
	 |ПОМЕСТИТЬ ВТ_Чувствительность
	 |ИЗ
	 |	РегистрСведений.ЧувствительностьКВозможнымИзменениямКурса.СрезПоследних(&НаДату, ) КАК ЧувствительностьКВозможнымИзменениямКурсаСрезПоследних
	 |ГДЕ
	 |	ЧувствительностьКВозможнымИзменениямКурсаСрезПоследних.ПрочийПоказатель = &Показатель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Статьи.Статьи КАК Статья,
	 |	ВТ_Чувствительность.Валюта КАК Валюта,
	 |	ВТ_Чувствительность.НаправлениеИзмененияКурса КАК НаправлениеИзмененияКурса,
	 |	ВТ_Чувствительность.СтавкаИзмененияКурса КАК СтавкаИзмененияКурса
	 |ИЗ
	 |	ВТ_Статьи КАК ВТ_Статьи,
	 |	ВТ_Чувствительность КАК ВТ_Чувствительность
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Статья"; 
	 
	 
	 Запрос.УстановитьПараметр("ВидПоказателя", Объект.ВидПоказателя);
	 Запрос.УстановитьПараметр("Показатель", Показатель);
	 Запрос.УстановитьПараметр("НаДату", Объект.КонецПериода);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		 
		 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить();
		 СтрокаТЧ.Показатель       = Показатель;
		 СтрокаТЧ.КодПоказателя    = Показатель.Код; 
		 СтрокаТЧ.BS              = ВыборкаДетальныеЗаписи.Статья;
		 СтрокаТЧ.CUR              = ВыборкаДетальныеЗаписи.Валюта;
		 СтрокаТЧ.CourseDirection  = ВыборкаДетальныеЗаписи.НаправлениеИзмененияКурса;
		 СтрокаТЧ.ValuePercent     = ВыборкаДетальныеЗаписи.СтавкаИзмененияКурса;
		 
		 
	 КонецЦикла;  
	 
	 Ответ = СведенияИзУправляющейБазы("СтатьиБюджетов"); 
	 
	 Если Ответ = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ОтветТЗ = Новый ТаблицаЗначений;
	 ОтветТЗ.Колонки.Добавить("OtherIndicators");
	 ОтветТЗ.Колонки.Добавить("ParentGUID");
	 ОтветТЗ.Колонки.Добавить("Accounts");
	 ОтветТЗ.Колонки.Добавить("CodeFAC");
	 ОтветТЗ.Колонки.Добавить("MovementType");
	 ОтветТЗ.Колонки.Добавить("CorrAccounts");
	 Для Каждого Строка Из Ответ.LineAccountsResponse Цикл  
		 СтрокаТЗ = ОтветТЗ.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаТЗ,Строка);
	 КонецЦикла; 
	 ОтветТЗ.Свернуть("OtherIndicators,ParentGUID,Accounts,CodeFAC,MovementType,CorrAccounts"); 
	 
	 
	 Таблица = ЗаполнитьПараметрыТаблицы(ОтветТЗ,"СтатьиБюджетов");
	 КопияТаблицы = Таблица.Скопировать();
	 КопияТаблицы.Очистить();
	 Для Каждого СтрокаТЗ Из Таблица Цикл 
		 
		 НайденныеСтроки = КопияТаблицы.НайтиСтроки(Новый Структура("СчетЭталон,Счет,СтатьяДляИтогов",СтрокаТЗ.СчетЭталон,СтрокаТЗ.Счет,СтрокаТЗ.СтатьяДляИтогов)); 
		 Если НайденныеСтроки.Количество() Тогда
			 Продолжить;
		 Иначе
			 ЗаполнитьЗначенияСвойств(КопияТаблицы.Добавить(),СтрокаТЗ);
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 
	 ЗаполнитьПоСчетамСтатейБюджетаПоВиду17(КопияТаблицы); 
	 
	ЗаполнитьДеревоПоВиду("IND2.3.4.4.");
	 
	 
	 
 КонецПроцедуры // ИнформацияПоВиду_17()
 
 &НаСервере
 Процедура  ЗаполнитьДеревоПоВиду(КодПоказателя)
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 Дерево.Строки.Очистить();
	 СтрокаРодитель = Дерево.Строки.Добавить();
	 СтрокаРодитель.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника",КодПоказателя);
	 //СтрокаРодитель.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.4.");
	 СтрокаРодитель.КодПоказателя = КодПоказателя;
	 Для Каждого  СтрокаТЧ Из Объект.ПрочиеПоказатели Цикл 
		 Если СтрокаТЧ.КодПоказателя = КодПоказателя Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 
		 ЗаполнитьЗначенияСвойств(Дерево.Строки[0].Строки.Добавить(),СтрокаТЧ);
		 
	 КонецЦикла; 
	 
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 
	 
 КонецПроцедуры // ЗаполнитьДеревоПоВиду()
 
 &НаСервере
 Процедура  ЗаполнитьДеревоПоВиду_13(МассивКодовПоказателей)
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 Дерево.Строки.Очистить();
	 Для Каждого КодПоказателя Из МассивКодовПоказателей Цикл 
		 МассивСтрокПоказателей = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("КодПоказателя",КодПоказателя)); 
		 Для Каждого СтрокаМассива Из  МассивСтрокПоказателей Цикл
			 СтрокаРодитель = Дерево.Строки.Добавить();
			 СтрокаРодитель.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника",СтрокаМассива.КодПоказателя);
			 СтрокаРодитель.КодПоказателя = КодПоказателя;
			 СтрокаРодитель.BS = СтрокаМассива.BS;
			 СтрокаРодитель.Значение = СтрокаМассива.Значение;
			 
			 МассивСтрокДерева =    Дерево.Строки.НайтиСтроки(Новый Структура("Показатель,BS",СтрокаРодитель.Показатель,СтрокаРодитель.BS));
			 Индекс = Дерево.Строки.Индекс(МассивСтрокДерева[0]);
			 Для Каждого  СтрокаТЧ Из Объект.ПрочиеПоказатели Цикл 
				 Если СтрокаТЧ.КодПоказателя = КодПоказателя Тогда
					 Продолжить;
				 КонецЕсли;
				 Если  СтрокаТЧ.Показатель.Родитель = СтрокаРодитель.Показатель И СтрокаТЧ.BS = СтрокаРодитель.BS Тогда
					 ЗаполнитьЗначенияСвойств(Дерево.Строки[Индекс].Строки.Добавить(),СтрокаТЧ); 
				 КонецЕсли;
				 
			 КонецЦикла;
		 КонецЦикла;
	 КонецЦикла;
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 
	 
 КонецПроцедуры // ЗаполнитьДеревоПоВиду()
 
 &НаСервере
 Процедура ИнформацияПоВиду_26()
	 
	 Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.2.2."); 
	 Объект.ПроверкаПолученныхДанных = "";
	 
	 
	 
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК Статьи
	 |ПОМЕСТИТЬ ВТ_Статьи
	 |ИЗ
	 |	РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних(&НаДату, ) КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
	 |ГДЕ
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя = &ВидПоказателя
	 |	И ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель = &Показатель
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ЧувствительностьКВозможнымИзменениямКурсаСрезПоследних.НаправлениеИзмененияКурса КАК НаправлениеИзмененияКурса,
	 |	ЧувствительностьКВозможнымИзменениямКурсаСрезПоследних.СтавкаИзмененияКурса КАК СтавкаИзмененияКурса
	 |ПОМЕСТИТЬ ВТ_Чувствительность
	 |ИЗ
	 |	РегистрСведений.ЧувствительностьКВозможнымИзменениямКурса.СрезПоследних(&НаДату, ) КАК ЧувствительностьКВозможнымИзменениямКурсаСрезПоследних
	 |ГДЕ
	 |	ЧувствительностьКВозможнымИзменениямКурсаСрезПоследних.ПрочийПоказатель = &Показатель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Статьи.Статьи КАК Статья,
	 |	ВТ_Чувствительность.НаправлениеИзмененияКурса КАК НаправлениеИзмененияКурса,
	 |	ВТ_Чувствительность.СтавкаИзмененияКурса КАК СтавкаИзмененияКурса
	 |ИЗ
	 |	ВТ_Статьи КАК ВТ_Статьи,
	 |	ВТ_Чувствительность КАК ВТ_Чувствительность
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Статья"; 
	 
	 
	 Запрос.УстановитьПараметр("ВидПоказателя", Объект.ВидПоказателя);
	 Запрос.УстановитьПараметр("Показатель", Показатель);
	 Запрос.УстановитьПараметр("НаДату", Объект.КонецПериода);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		 
		 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить();
		 СтрокаТЧ.Показатель       = Показатель;
		 СтрокаТЧ.КодПоказателя    = Показатель.Код; 
		 СтрокаТЧ.BS              = ВыборкаДетальныеЗаписи.Статья;
		 СтрокаТЧ.CourseDirection  = ВыборкаДетальныеЗаписи.НаправлениеИзмененияКурса;
		 СтрокаТЧ.ValuePercent     = ВыборкаДетальныеЗаписи.СтавкаИзмененияКурса;
		 
	 КонецЦикла;  
	 
	 Ответ = СведенияИзУправляющейБазы("СтатьиБюджетов"); 
	 
	 Если Ответ = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 ОтветТЗ = Новый ТаблицаЗначений;
	 ОтветТЗ.Колонки.Добавить("OtherIndicators");
	 ОтветТЗ.Колонки.Добавить("ParentGUID");
	 ОтветТЗ.Колонки.Добавить("Accounts");
	 ОтветТЗ.Колонки.Добавить("CodeFAC");
	 ОтветТЗ.Колонки.Добавить("MovementType");
	 ОтветТЗ.Колонки.Добавить("CorrAccounts");
	 Для Каждого Строка Из Ответ.LineAccountsResponse Цикл  
		 СтрокаТЗ = ОтветТЗ.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаТЗ,Строка);
	 КонецЦикла; 
	 ОтветТЗ.Свернуть("OtherIndicators,ParentGUID,Accounts,CodeFAC,MovementType,CorrAccounts"); 
	 
	 Таблица = ЗаполнитьПараметрыТаблицы(ОтветТЗ,"СтатьиБюджетов");
	 КопияТаблицы = Таблица.Скопировать();
	 КопияТаблицы.Очистить();
	 Для Каждого СтрокаТЗ Из Таблица Цикл 
		 
		 НайденныеСтроки = КопияТаблицы.НайтиСтроки(Новый Структура("СчетЭталон,Счет,СтатьяДляИтогов",СтрокаТЗ.СчетЭталон,СтрокаТЗ.Счет,СтрокаТЗ.СтатьяДляИтогов)); 
		 Если НайденныеСтроки.Количество() Тогда
			 Продолжить;
		 Иначе
			 ЗаполнитьЗначенияСвойств(КопияТаблицы.Добавить(),СтрокаТЗ);
		 КонецЕсли;
		 
	 КонецЦикла;
	 ЗаполнитьПоСчетамСтатейБюджетаПоВиду26(КопияТаблицы); 
	 
	ЗаполнитьДеревоПоВиду("IND2.3.4.2.");
	 
	 
 КонецПроцедуры // ИнформацияПоВиду_17()
 
 &НаСервере
 Процедура ИнформацияПоВиду_14() 
	 
	 
	 Таблица = ПрочиеПоказателиВызовСервера.ПолучитьИсполняемуюТаблицу(); 
	 
	 Объект.ПрочиеПоказатели.Очистить();
	 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить();
	 КодРодителя = "IND2.1.21.";
	 СтрокаТЧ.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоКоду(КодРодителя);
	 СтрокаТЧ.КодПоказателя = КодРодителя;
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	INDПрочиеПоказатели.Ссылка КАК Ссылка,
	 |	INDПрочиеПоказатели.Код КАК Код,
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Ссылка КАК СтатьиСсылка,
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ТипДвиженияСчета КАК ТипДвиженияСчета
	 |ИЗ
	 |	Справочник.INDПрочиеПоказатели КАК INDПрочиеПоказатели
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
	 |		ПО (ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель = INDПрочиеПоказатели.Ссылка)
	 |ГДЕ
	 |	INDПрочиеПоказатели.Родитель = &Родитель
	 |	И ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя = &ВидПоказателя";
	 
	 Запрос.УстановитьПараметр("Родитель",СтрокаТЧ.Показатель);
	 Запрос.УстановитьПараметр("ВидПоказателя",Объект.ВидПоказателя);
	 Выгрузка = Запрос.Выполнить().Выгрузить();
	 Выгрузка.Колонки.Добавить("Счет"); 
	 Для Каждого СтрокаТЗ Из Выгрузка Цикл 
		 
		 ТаблицаПланаСчетов =  ПрочиеПоказателиВызовСервера.ПолучитьНастройкиПланаСчетовПоЭталонномуСчету(СтрокаТЗ.СтатьиСсылка);
		 Для Каждого СтрокаСчета Из  ТаблицаПланаСчетов Цикл
			 ТипДвижения =  Лев(СтрокаТЗ.ТипДвиженияСчета,6);
			 Если ТипДвижения = "Оборот"  Тогда 
				 ТЗПоКонтрагентам = ПрочиеПоказателиВызовСервера.ПолучитьОборотыПоВиду26(СтрокаТЗ,Объект,СтрокаСчета.ИсточникДанных,СтрокаСчета.КомпоновщикНастроекОтбор);
			 Иначе
				 ТЗПоКонтрагентам = ПрочиеПоказателиВызовСервера.ОстаткиПоВиду26(СтрокаТЗ,Объект,СтрокаСчета.ИсточникДанных,СтрокаСчета.КомпоновщикНастроекОтбор);
			 КонецЕсли; 
			 ТЗПоКонтрагентамКопия = ТЗПоКонтрагентам.Скопировать();
			 Если ТЗПоКонтрагентам.Количество() = 0 Тогда
				 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить();
				 СтрокаТЧ.Показатель = СтрокаТЗ.Ссылка;
				 СтрокаТЧ.КодПоказателя = СтрокаТЗ.Код;
				 СтрокаТЧ.account = СтрокаТЗ.СтатьиСсылка;
			 Иначе
				 
				 Для Каждого СтрокаТЗПоКонтрагентам Из ТЗПоКонтрагентам Цикл 
					 
					 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить();
					 СтрокаТЧ.Показатель = СтрокаТЗ.Ссылка;
					 СтрокаТЧ.КодПоказателя = СтрокаТЗ.Код;
					 СтрокаТЧ.account = СтрокаТЗ.СтатьиСсылка;
					 СтрокаТЧ.Контрагент = СтрокаТЗПоКонтрагентам.Субконто1;
					 Если ТипЗнч(СтрокаТЗПоКонтрагентам.Субконто1) = Тип("СправочникСсылка.Контрагенты") Тогда
						 СтрокаТЧ.КонтрагентИИН  = СтрокаТЗПоКонтрагентам.Субконто1.ИдентификационныйКодЛичности; 
					 КонецЕсли;
					 //СтрокаТЧ.Quantity      = 1;
					 Если СтрокаТЗ.ТипДвиженияСчета = "Остаток Кт" Тогда 
						 СтрокаТЧ.AmountBalance = СтрокаТЗПоКонтрагентам.СуммаОстатокКт;
					 Иначе 
						 СтрокаТЧ.AmountBalance = СтрокаТЗПоКонтрагентам.СуммаОстатокДт;
					 КонецЕсли;
				 КонецЦикла;
			 КонецЕсли;
		 КонецЦикла;
		 
	 КонецЦикла; 
	 
	 //ПересчитатьДолюПоВиду14();
	 
	ЗаполнитьДеревоПоВиду("IND2.1.21.");		 
	 
	 
 КонецПроцедуры // ИнформацияПоВиду_14()
 
 
 &НаСервере
 Процедура ИнформацияПоВиду_4()
	 
	 
	 Таблица = ПрочиеПоказателиВызовСервера.ПолучитьИсполняемуюТаблицу();
	 ТаблицаКопия = Таблица.СкопироватьКолонки();
	 
	 Объект.ПрочиеПоказатели.Очистить();
	 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить();
	 КодРодителя = "IND2.3.4.5.";
	 СтрокаТЧ.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника",КодРодителя);
	 СтрокаТЧ.КодПоказателя = КодРодителя;
	 
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	INDПрочиеПоказатели.Ссылка КАК Ссылка,
	 |	INDПрочиеПоказатели.Код КАК Код,
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Ссылка КАК СтатьиСсылка,
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.СписокСчетовСтатейБюджета КАК СписокСчетовСтатейБюджета
	 |ИЗ
	 |	Справочник.INDПрочиеПоказатели КАК INDПрочиеПоказатели
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
	 |		ПО (ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель = INDПрочиеПоказатели.Ссылка)
	 |ГДЕ
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя = &ВидПоказателя
	 |	И INDПрочиеПоказатели.Ссылка = &Ссылка";
	 
	 Запрос.УстановитьПараметр("Ссылка",СтрокаТЧ.Показатель);
	 Запрос.УстановитьПараметр("ВидПоказателя",Объект.ВидПоказателя);
	 Выгрузка = Запрос.Выполнить().Выгрузить(); 
	 Для Каждого СтрокаВыгрузки  Из Выгрузка Цикл 
		 
		 МассивСтрокСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаВыгрузки.СписокСчетовСтатейБюджета,","); 
		 Для Каждого СтрокаМассива Из МассивСтрокСчетов Цикл
			 СтрокаМассива = СокрЛП(СтрокаМассива);
			 Если Не ЗначениеЗаполнено(СтрокаМассива) Тогда
				 Продолжить;
			 КонецЕсли; 
			 ЗаполнитьСчета(Таблица,СтрокаМассива,СтрокаВыгрузки.Ссылка,СтрокаВыгрузки.СтатьиСсылка,Новый СписокЗначений,Новый СписокЗначений);
		 КонецЦикла;
		 
	 КонецЦикла;  
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл
		 
		 ТЗПоКонтрагентам = ПрочиеПоказателиВызовСервера.ОстаткиПоВиду26(СтрокаТаблицы,Объект,СтрокаТаблицы.Счет,СтрокаТаблицы.КомпоновщикНастроекОтбор);
		 ТЗПоКонтрагентам.Свернуть("Субконто1","СуммаОстаток"); 
		 Для Каждого СтрокаПоКонтрагенту Из ТЗПоКонтрагентам Цикл 
			 
			 СтрокаКопия = ТаблицаКопия.Добавить();
			 ЗаполнитьЗначенияСвойств(СтрокаКопия,СтрокаТаблицы);
			 СтрокаКопия.Контрагент = СтрокаПоКонтрагенту.Субконто1;
			 СтрокаКопия.Сумма =      СтрокаПоКонтрагенту.СуммаОстаток;
			 
		 КонецЦикла;
		 
	 КонецЦикла;
	 ТаблицаКопия.Свернуть("СтатьяДляИтогов,Контрагент","Сумма");
	 ТаблицаИтог = ТаблицаКопия.Скопировать();
	 ТаблицаИтог.Свернуть(,"Сумма");
	 Итог = 0;
	 Если ТаблицаИтог.Количество() Тогда
		 Итог = ТаблицаИтог[0].Сумма;
	 КонецЕсли;
	 
	 Итог100 = 0;
	 Итог500 = 0;
	 Для Каждого СтрокаТзКопия Из  ТаблицаКопия Цикл 
		 Если СтрокаТзКопия.Сумма >= 100000000 И СтрокаТзКопия.Сумма <500000000 Тогда 
			 Итог100 = Итог100 + СтрокаТзКопия.Сумма;
		 КонецЕсли;
	 КонецЦикла;
	 
	 Для Каждого СтрокаТзКопия Из  ТаблицаКопия Цикл 
		 Если СтрокаТзКопия.Сумма >= 500000000  Тогда 
			 Итог500 = Итог500 + СтрокаТзКопия.Сумма;
		 КонецЕсли;
	 КонецЦикла; 
	 
	 Для Каждого СтрокаТзКопия Из  ТаблицаКопия Цикл 
		 Если СтрокаТзКопия.Сумма >= 100000000  Тогда 
			 СтрокаТЧ1 = Объект.ПрочиеПоказатели.Добавить();
			 СтрокаТЧ1.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.5.1.");
			 СтрокаТЧ1.КодПоказателя = СтрокаТЧ1.Показатель.КодСправочника;
			 СтрокаТЧ1.Контрагент   =  СтрокаТзКопия.Контрагент;
			 Если ТипЗнч(СтрокаТзКопия.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				 СтрокаТЧ1.КонтрагентИИН  = СтрокаТзКопия.Контрагент.ИдентификационныйКодЛичности; 
			 КонецЕсли;
			 СтрокаТЧ1.BS   =  СтрокаТзКопия.СтатьяДляИтогов;
			 СтрокаТЧ1.Значение      = 1; 
			 
			 СтрокаТЧ2 = Объект.ПрочиеПоказатели.Добавить();
			 СтрокаТЧ2.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.5.2.");
			 СтрокаТЧ2.КодПоказателя = СтрокаТЧ2.Показатель.КодСправочника;
			 СтрокаТЧ2.Значение      = СтрокаТзКопия.Сумма; 
			 СтрокаТЧ2.Контрагент =  СтрокаТзКопия.Контрагент;
			 Если ТипЗнч(СтрокаТзКопия.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				 СтрокаТЧ2.КонтрагентИИН  = СтрокаТзКопия.Контрагент.ИдентификационныйКодЛичности; 
			 КонецЕсли;
			 СтрокаТЧ2.BS   =  СтрокаТзКопия.СтатьяДляИтогов;
			 
			 СтрокаТЧ3 = Объект.ПрочиеПоказатели.Добавить();
			 СтрокаТЧ3.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.5.3.");
			 СтрокаТЧ3.КодПоказателя = СтрокаТЧ3.Показатель.КодСправочника;
			 СтрокаТЧ3.Контрагент =  СтрокаТзКопия.Контрагент;;
			 Если ТипЗнч(СтрокаТзКопия.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				 СтрокаТЧ3.КонтрагентИИН  = СтрокаТзКопия.Контрагент.ИдентификационныйКодЛичности; 
			 КонецЕсли;
			 СтрокаТЧ3.BS   =  СтрокаТзКопия.СтатьяДляИтогов; 
			 Если Итог <> 0 Тогда
				 СтрокаТЧ3.Значение      = Окр(СтрокаТзКопия.Сумма/Итог*100,2);
			 КонецЕсли;
		 КонецЕсли;
		 
	 КонецЦикла; 
	 Для Каждого СтрокаТзКопия Из  ТаблицаКопия Цикл 
		 Если СтрокаТзКопия.Сумма >= 500000000  Тогда
			 СтрокаТЧ1 = Объект.ПрочиеПоказатели.Добавить();
			 СтрокаТЧ1.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.5.4.");
			 СтрокаТЧ1.КодПоказателя = СтрокаТЧ1.Показатель.КодСправочника;
			 СтрокаТЧ1.Контрагент   =  СтрокаТзКопия.Контрагент;
			 Если ТипЗнч(СтрокаТзКопия.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				 СтрокаТЧ1.КонтрагентИИН  = СтрокаТзКопия.Контрагент.ИдентификационныйКодЛичности; 
			 КонецЕсли;
			 СтрокаТЧ1.BS   =  СтрокаТзКопия.СтатьяДляИтогов;
			 СтрокаТЧ1.Значение      = 1; 
			 
			 СтрокаТЧ2 = Объект.ПрочиеПоказатели.Добавить();
			 СтрокаТЧ2.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.5.5.");
			 СтрокаТЧ2.КодПоказателя = СтрокаТЧ2.Показатель.КодСправочника;
			 СтрокаТЧ2.Значение      = СтрокаТзКопия.Сумма; 
			 СтрокаТЧ2.Контрагент =  СтрокаТзКопия.Контрагент;;
			 Если ТипЗнч(СтрокаТзКопия.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				 СтрокаТЧ2.КонтрагентИИН  = СтрокаТзКопия.Контрагент.ИдентификационныйКодЛичности; 
			 КонецЕсли;
			 СтрокаТЧ2.BS   =  СтрокаТзКопия.СтатьяДляИтогов;
			 
			 СтрокаТЧ3 = Объект.ПрочиеПоказатели.Добавить();
			 СтрокаТЧ3.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.3.4.5.6.");
			 СтрокаТЧ3.КодПоказателя = СтрокаТЧ3.Показатель.КодСправочника;
			 СтрокаТЧ3.Контрагент =  СтрокаТзКопия.Контрагент;;
			 Если ТипЗнч(СтрокаТзКопия.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				 СтрокаТЧ3.КонтрагентИИН  = СтрокаТзКопия.Контрагент.ИдентификационныйКодЛичности; 
			 КонецЕсли;
			 СтрокаТЧ3.BS   =  СтрокаТзКопия.СтатьяДляИтогов;
			 Если Итог <> 0 Тогда
				 СтрокаТЧ3.Значение      = Окр(СтрокаТзКопия.Сумма/Итог*100,2);
			 КонецЕсли;
		 КонецЕсли;
	 КонецЦикла; 
	 
	 
	ЗаполнитьДеревоПоВиду("IND2.3.4.5.");
	 
	 
	 
	 
 КонецПроцедуры // ИнформацияПоВиду_14()
 
 &НаСервере
 Процедура ИнформацияПоВиду_13()
	 
	 //ТаблицаКопия = Таблица.СкопироватьКолонки();
	 
	 Объект.ПрочиеПоказатели.Очистить(); 
	 МассивРодителей = Новый Массив;
	 
	 МассивРодителей.Добавить("IND2.1.18."); 
	 МассивРодителей.Добавить("IND2.1.19.");
	 Для Каждого ЭлементРодителя Из МассивРодителей Цикл   
		 
		 Таблица = ПрочиеПоказателиВызовСервера.ПолучитьИсполняемуюТаблицу();
		 
		 КодРодителя = ЭлементРодителя;
		 Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника",КодРодителя);
		 
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = "ВЫБРАТЬ
		 |	INDПрочиеПоказатели.Ссылка КАК Ссылка,
		 |	INDПрочиеПоказатели.Код КАК Код,
		 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Ссылка КАК СтатьиСсылка,
		 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.СписокСчетовСтатейБюджета КАК СписокСчетовСтатейБюджета
		 |ИЗ
		 |	Справочник.INDПрочиеПоказатели КАК INDПрочиеПоказатели
		 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
		 |		ПО (ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель = INDПрочиеПоказатели.Ссылка)
		 |ГДЕ
		 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя = &ВидПоказателя
		 |	И INDПрочиеПоказатели.Ссылка = &Ссылка";
		 
		 Запрос.УстановитьПараметр("Ссылка",Показатель);
		 Запрос.УстановитьПараметр("ВидПоказателя",Объект.ВидПоказателя);
		 Выгрузка = Запрос.Выполнить().Выгрузить(); 
		 Для Каждого СтрокаВыгрузки  Из Выгрузка Цикл 
			 
			 МассивСтрокСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаВыгрузки.СписокСчетовСтатейБюджета,","); 
			 Для Каждого СтрокаМассива Из МассивСтрокСчетов Цикл
				 СтрокаМассива = СокрЛП(СтрокаМассива);
				 Если Не ЗначениеЗаполнено(СтрокаМассива) Тогда
					 Продолжить;
				 КонецЕсли; 
				 ЗаполнитьСчета(Таблица,СтрокаМассива,СтрокаВыгрузки.Ссылка,СтрокаВыгрузки.СтатьиСсылка,Новый СписокЗначений,Новый СписокЗначений);
			 КонецЦикла;
			 
		 КонецЦикла; 
		 
		 Для Каждого СтрокаТаблицы Из Таблица Цикл
			 
			 ТЗПоКонтрагентам = ПрочиеПоказателиВызовСервера.ОстаткиПоВиду26(СтрокаТаблицы,Объект,СтрокаТаблицы.Счет,СтрокаТаблицы.КомпоновщикНастроекОтбор);
			 ТЗПоКонтрагентам.Свернуть(,"СуммаОстаток");
			 Если ТЗПоКонтрагентам.Количество() Тогда
				 СтрокаТаблицы.Сумма = ТЗПоКонтрагентам[0].СуммаОстаток;
			 КонецЕсли;
		 КонецЦикла; 
		 
		 Таблица.Свернуть("ПрочийПоказатель,СтатьяДляИтогов","Сумма"); 
		 
		 Для Каждого СтрокаТЗ из Таблица Цикл 
			 
			 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить();
			 СтрокаТч.Показатель = Показатель;
			 СтрокаТЧ.КодПоказателя = КодРодителя;
			 СтрокаТЧ.BS =   СтрокаТЗ.СтатьяДляИтогов;
			 СтрокаТЧ.Значение =   СтрокаТЗ.Сумма; 
			 ТаблицаПодчиненных  = ПрочиеПоказателиВызовСервера.ТаблицаПодчиненныхПоказателейСРеквизитом_Значение();
			 Если КодРодителя =  "IND2.1.18." Тогда
				 СтрокаПодчиненных = "IND2.1.18.1.,IND2.1.18.2.,IND2.1.18.3.,IND2.1.18.4.,IND2.1.18.5.,IND2.1.18.6."; 
			 ИначеЕсли КодРодителя =  "IND2.1.19." Тогда 
				 СтрокаПодчиненных = "IND2.1.19.1.,IND2.1.19.2.,IND2.1.19.3.,IND2.1.19.4.,IND2.1.19.5.,IND2.1.19.6."; 
			 Иначе   
				 Сообщить("Что-то пошло не так");
				 Возврат;
			 КонецЕсли;
			 
			 
			 МассивПодчиненных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПодчиненных,",");
			 Для Каждого ЭлементМассива Из МассивПодчиненных Цикл 
				 
				 Если  ЭлементМассива <> "IND2.1.18.6." И ЭлементМассива <> "IND2.1.19.6." Тогда
					 СтрокаТЗПодчиненных = ТаблицаПодчиненных.Добавить();
					 СтрокаТЗПодчиненных.КодРодителя = СтрокаТЗ.ПрочийПоказатель.КодСправочника;
					 СтрокаТЗПодчиненных.КодПоказателя   = ЭлементМассива;
					 СтрокаТЗПодчиненных.ТипЗначения   = "Число";
					 СтрокаТЗПодчиненных.Длина   = "17";
					 СтрокаТЗПодчиненных.Разрядность   = "2";
					 СтрокаТЗПодчиненных.Значение   = 0; 
				 ИначеЕсли ЭлементМассива = "IND2.1.18.6." Или ЭлементМассива = "IND2.1.19.6." Тогда
					 СтрокаТЗПодчиненных = ТаблицаПодчиненных.Добавить();
					 СтрокаТЗПодчиненных.КодРодителя = СтрокаТЗ.ПрочийПоказатель.КодСправочника;
					 СтрокаТЗПодчиненных.КодПоказателя   = ЭлементМассива;
					 СтрокаТЗПодчиненных.ТипЗначения   = "Дата";
					 СтрокаТЗПодчиненных.Значение   = Дата(1,1,1); 
				 КонецЕсли;
				 
			 КонецЦикла;
			 
			 ДобавитьСтрокиВТабличнуюЧасть(СтрокаТЗ,ТаблицаПодчиненных); 
			 
		 КонецЦикла;
	 КонецЦикла; 
	 
	 
	 ЗаполнитьДеревоПоВиду_13(МассивРодителей);	 
	 
	 
 КонецПроцедуры // ИнформацияПоВиду_13()
 
 
 &НаСервере
 Процедура ДобавитьСтрокиВТабличнуюЧасть(СтрокаТЗ,ТаблицаПодчиненных)
	 
	 Для Каждого СтрокаТЗПодчиненных Из ТаблицаПодчиненных Цикл  
		 
		 СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить();
		 СтрокаТЧ.КодПоказателя = СтрокаТЗПодчиненных.КодПоказателя;
		 СтрокаТч.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника",СтрокаТЗПодчиненных.КодПоказателя);
		 СтрокаТЧ.BS =   СтрокаТЗ.СтатьяДляИтогов;
		 СтрокаТЧ.Значение =  СтрокаТЗПодчиненных.Значение; 
		 
	 КонецЦикла;
	 
	 
	 
	 
 КонецПроцедуры // ДобавитьСтрокиВТабличнуюЧасть()
 
 
 #Область Дерево
 
 &НаКлиенте
 Процедура ДеревоПрочиеПоказателиBSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 Отбор = Новый Структура("Отбор",НОвый Структура("Владелец",Бюджет ));
	 ОткрытьФорму("Справочник.авСтатьиБюджетов.ФормаВыбора",Отбор,Элемент);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура РазвернутьДерево(КоллекцияЭлементовДерева)
	 
	 Для Каждого Строка Из КоллекцияЭлементовДерева Цикл 
		 
		 ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		 Элементы.ДеревоПрочиеПоказатели.Развернуть(ИдентификаторСтроки);
		 ПодчиненныеСтроки = Строка.ПолучитьЭлементы(); 
		 Если ПодчиненныеСтроки.Количество() Тогда
			 РазвернутьДерево(ПодчиненныеСтроки);
		 КонецЕсли;
		 
		 
	 КонецЦикла; 	
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ДеревоПоказателейПриИзменении(Элемент)
	 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
 КонецПроцедуры 
 
 
 
 &НаКлиенте
 Процедура ДеревоПрочиеПоказателиПриИзменении(Элемент)
	 
	 
	 //ДеревоПрочиеПоказателиПриИзмененииНаСервере();
	 //РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
	 
 КонецПроцедуры  
 
 
 
 &НаКлиенте
 Процедура ДеревоПрочиеПоказателиПриАктивизацииСтроки(Элемент)
	 ТекущиеДанные = Элементы.ДеревоПрочиеПоказатели.ТекущиеДанные; 
	 ИдентификаторТекущейСтроки = Элементы.ДеревоПрочиеПоказатели.ТекущаяСтрока; 
	 Если ТекущиеДанные = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Если ТекущиеДанные.КодПоказателя = "IND2.3.11."  Тогда 
		 
		 МассивТиповСтрока = Новый Массив;
		 МассивТиповСтрока.Добавить(Тип("Строка"));
		 ТипСтрока = Новый ОписаниеТипов(МассивТиповСтрока);
		 Элементы.ДеревоПрочиеПоказателиFairValueBoolean.ДоступныеТипы = ТипСтрока;
		 Элементы.ДеревоПрочиеПоказателиFairValueBoolean.ОграничениеТипа  = ТипСтрока;
		 Элементы.ДеревоПрочиеПоказателиFairValueBoolean.ТолькоПросмотр = Истина;
		 
	 ИначеЕсли ТекущиеДанные.КодПоказателя = "IND2.3.11.1." Или ТекущиеДанные.КодПоказателя = "IND2.3.11.2." Тогда  
		 
		 МассивТиповБулево = Новый Массив;
		 МассивТиповБулево.Добавить(Тип("Булево"));
		 ТипБулево = Новый ОписаниеТипов(МассивТиповБулево);
		 Элементы.ДеревоПрочиеПоказателиFairValueBoolean.ДоступныеТипы = ТипБулево;
		 Элементы.ДеревоПрочиеПоказателиFairValueBoolean.ОграничениеТипа  = ТипБулево;
		 Элементы.ДеревоПрочиеПоказателиFairValueBoolean.ТолькоПросмотр = Ложь;
		 
	 Иначе
		 
		 
	 КонецЕсли;  
	 Элементы.ДеревоПрочиеПоказатели.ТекущаяСтрока	= ИдентификаторТекущейСтроки;
	 Элементы.ДеревоПрочиеПоказатели.Обновить(); 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ДеревоПрочиеПоказателиПриИзмененииНаСервере()
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 ПересчитатьВсеДерево(Дерево);
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 ОбновитьВидимостьЭлементов();
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ДеревоВТЧ(СтрокиДерева,ТЧ)
	 
	 Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		  СтрокаТЧ = ТЧ.Добавить();
		 //НайденныеСтроки  = ТЗ.НайтиСтроки(Новый Структура("Показатель,BS,account,TypeMovement,BankName,DepositName",СтрокаДерева.Показатель,СтрокаДерева.BS,СтрокаДерева.account,СтрокаДерева.TypeMovement,СтрокаДерева.BankName,СтрокаДерева.DepositName));
		 //Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			 ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаДерева);
		 //КонецЦикла;
		 Если СтрокаДерева.Строки.Количество() Тогда
			 
			 ДеревоВТЧ(СтрокаДерева.Строки,ТЧ);
			 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 
 КонецПроцедуры // ДеревоВТЧ()
 
 &НаСервере
 Процедура ОчиститьДерево()
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели"); 
	 ОчиститьСтрокиДерева(Дерево.Строки);
	 
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 
 КонецПроцедуры // ОчиститьДерево()
 
 &НаСервере
 Процедура ОчиститьСтрокиДерева(СтрокиДерева)
	 
	 Для Каждого СтрокаДерева Из СтрокиДерева Цикл 
		 
		 Для Каждого РеквизитДерева 	Из СтрокаДерева Цикл  
			 Если ТипЗнч(РеквизитДерева) = Тип("Число") Тогда
				 РеквизитДерева = 0;
			 КонецЕсли;
			 Если СтрокаДерева.Строки.Количество() Тогда 
				 ОчиститьСтрокиДерева(СтрокаДерева.Строки);
			 КонецЕсли;
			 
		 КонецЦикла;
		 
	 КонецЦикла;
	 
 КонецПроцедуры // ОчиститьСтрокиДерева()
 #КонецОбласти 
 
 
 
 &НаКлиенте
 Процедура ПрочиеПоказателиПередНачаломИзменения(Элемент, Отказ)
	 
	 ТекущиеДанные = Элементы.ПрочиеПоказатели.ТекущиеДанные;
	 
	 Если ТекущиеДанные.КодПоказателя = "IND2.1.2.1." Тогда 
		 МассивТиповСтрока = Новый Массив;
		 МассивТиповСтрока.Добавить(Тип("Строка"));
		 ТипСтрока = Новый ОписаниеТипов(МассивТиповСтрока);
		 Элементы.Значение.ДоступныеТипы = ТипСтрока;
		 Элементы.Значение.ОграничениеТипа  = ТипСтрока;
	 ИначеЕсли  ТекущиеДанные.КодПоказателя = "IND2.1.2.2." Или ТекущиеДанные.КодПоказателя = "IND2.1.7."  Или ТекущиеДанные.КодПоказателя = "IND2.1.8." Тогда 
		 МассивТиповДата = Новый Массив;
		 МассивТиповДата.Добавить(Тип("Дата"));
		 ТипДата = Новый ОписаниеТипов(МассивТиповДата);
		 Элементы.Значение.ДоступныеТипы = ТипДата;
		 Элементы.Значение.ОграничениеТипа  = ТипДата;
	 ИначеЕсли  ТекущиеДанные.КодПоказателя = "IND2.1.2.3." Или  ТекущиеДанные.КодПоказателя = "IND2.1.6."  Тогда 
		 МассивТиповЧисло = Новый Массив;
		 МассивТиповЧисло.Добавить(Тип("Число"));
		 ТипЧисло = Новый ОписаниеТипов(МассивТиповЧисло);
		 Элементы.Значение.ДоступныеТипы = ТипЧисло;
		 Элементы.Значение.ОграничениеТипа  = ТипЧисло; 
	 ИначеЕсли  ТекущиеДанные.КодПоказателя = "IND2.1.2." Тогда 
		 МассивТиповНеопределено = Новый Массив;
		 МассивТиповНеопределено.Добавить(Тип("Неопределено"));
		 ТипНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
		 Элементы.Значение.ДоступныеТипы = ТипНеопределено;
		 Элементы.Значение.ОграничениеТипа  = ТипНеопределено;
		 Возврат;
	 КонецЕсли;
	 
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ЗаполнитьПоСтатьямБюджета() 
	 
	 Ответ = СведенияИзУправляющейБазы("СтатьиБюджетов"); 
	 
	 Если Ответ = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ОтветТЗ = Новый ТаблицаЗначений;
	 ОтветТЗ.Колонки.Добавить("OtherIndicators");
	 ОтветТЗ.Колонки.Добавить("ParentGUID");
	 ОтветТЗ.Колонки.Добавить("Accounts");
	 ОтветТЗ.Колонки.Добавить("CodeFAC");
	 ОтветТЗ.Колонки.Добавить("MovementType");
	 ОтветТЗ.Колонки.Добавить("CorrAccounts");
	 Для Каждого Строка Из Ответ.LineAccountsResponse Цикл  
		 СтрокаТЗ = ОтветТЗ.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаТЗ,Строка);
	 КонецЦикла; 
	 ОтветТЗ.Свернуть("OtherIndicators,ParentGUID,Accounts,CodeFAC,MovementType,CorrAccounts"); 
	 
	 
	 
	 
	 Таблица = ЗаполнитьПараметрыТаблицы(ОтветТЗ,"СтатьиБюджетов"); 
	 
	 ЗаполнитьПоСчетамСтатейБюджета(Таблица);
	 
	 
	 
	 Таблица.Свернуть("ПрочийПоказатель,СтатьяДляИтогов","Сумма"); 
	 Для Каждого СтрокаТЗ Из Таблица Цикл 
		 
		 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель,BS",СтрокаТЗ.ПрочийПоказатель, СтрокаТЗ.СтатьяДляИтогов));
		 Для Каждого нСтрока Из НайденныеСтроки Цикл 
			 нСтрока[ОсновноеСуммируемоеПоле] =нСтрока[ОсновноеСуммируемоеПоле] +СтрокаТЗ.Сумма;
		 КонецЦикла;
		 
	 КонецЦикла; 
	 
	 
	 //РедактироватьДерево();
	 
 КонецПроцедуры 
 
 &НаСервере
 Процедура ЗаполнитьПоВидамДвижения()
	 
	 
	 
	 
	 Ответ = СведенияИзУправляющейБазы("ВидыДвижения"); 
	 
	 Если Ответ = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Таблица = ЗаполнитьПараметрыТаблицы(Ответ,"ВидыДвижения"); 
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 Если ЗначениеЗаполнено(СтрокаТаблицы.Счет) И ЗначениеЗаполнено(СтрокаТаблицы.КорСчет) Тогда
			 //Если СтрокаТаблицы.ЕстьУсловияПоСчету ИЛИ СтрокаТаблицы.ЕстьУсловияПоКорСчету Тогда
			 ПолучитьОборотыПоУсловию2(СтрокаТаблицы);
			 //Иначе
			 //    ПолучитьОборотыБезУсловия(СтрокаТаблицы);
			 //КонецЕсли; 
		 КонецЕсли;
	 КонецЦикла;
	 
	 Таблица.Свернуть("ПрочийПоказатель,СтатьяДляИтогов","Сумма"); 
	 Для Каждого СтрокаТЗ Из Таблица Цикл 
		 
		 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель,TypeMovement",СтрокаТЗ.ПрочийПоказатель, СтрокаТЗ.СтатьяДляИтогов));
		 Для Каждого нСтрока Из НайденныеСтроки Цикл 
			 нСтрока[ОсновноеСуммируемоеПоле] = нСтрока[ОсновноеСуммируемоеПоле] +СтрокаТЗ.Сумма;
		 КонецЦикла;
		 
	 КонецЦикла; 
	 
	 
	 
	 
 КонецПроцедуры // ЗаполнитьПоВидамДвижения() 
 
 &НаСервере
 Процедура ЗаполнитьПоСчетам()
	 
	 
	 Ответ = СведенияИзУправляющейБазы("ПланСчетов"); 
	 
	 Если Ответ = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 
	 
	 Таблица = ЗаполнитьПараметрыТаблицы(Ответ,"ПланСчетов"); 
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 
		 Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			 Продолжить;
		 КонецЕсли; 
		 
		 ТипДвижения =  Лев(СтрокаТаблицы.ТипДвижения,6);
		 
		 Если ТипДвижения = "Оборот"  Тогда 
			 ПолучитьОборотыПоУсловию2(СтрокаТаблицы);
		 Иначе
			 ПолучитьОcтаткиПоУсловию(СтрокаТаблицы);
		 КонецЕсли;
	 КонецЦикла;
	 Если ИспользоватьРасшифровкуПоАналитике Тогда
		 Таблица.Свернуть("ПрочийПоказатель,СчетЭталон","Сумма"); 
		 Для Каждого СтрокаТЗ Из Таблица Цикл 
			 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель,account", СтрокаТЗ.ПрочийПоказатель,СтрокаТЗ.СчетЭталон));
			 Для Каждого нСтрока Из НайденныеСтроки Цикл 
				 нСтрока[ОсновноеСуммируемоеПоле] = СтрокаТЗ.Сумма;
			 КонецЦикла;
			 
		 КонецЦикла; 
	 Иначе  
		 Если ПрочиеПоказателиВызовСервера.ЭтоВид2(Объект.ВидПоказателя) Тогда 
			 Таблица = ТаблицаДляВида2(Таблица);
		 Иначе
			 Таблица.Свернуть("ПрочийПоказатель","Сумма"); 
		 КонецЕсли;
		 Для Каждого СтрокаТЗ Из Таблица Цикл 
			 
			 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель", СтрокаТЗ.ПрочийПоказатель));
			 Для Каждого нСтрока Из НайденныеСтроки Цикл 
			 	нСтрока[ОсновноеСуммируемоеПоле] = СтрокаТЗ.Сумма;
			 КонецЦикла;
			 
		 КонецЦикла; 
	 КонецЕсли;
	 
 КонецПроцедуры // ЗаполнитьПоСчетам()
 
 
 &НаСервере
 Функция СведенияИзУправляющейБазы(ТипСтатьи)
	 
	 //Прокси = ПолучитьПроксиСервер.Прокси();  
	 
	 ArrayAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("ArrayAccountsQuery"); 
	 ArrayAccountsQuery.TypesOfOtherIndicator = XMLСтрока(Объект.ВидПоказателя);
	 ПрочиеПоказатели = Объект.ПрочиеПоказатели;
	 Для Каждого Показатель Из ПрочиеПоказатели Цикл 
		 Если ТипСтатьи = "СтатьиБюджетов" Тогда
			 Если ЗначениеЗаполнено(Показатель.BS) Тогда
				 LineAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("LineAccountsQuery"); 
				 LineAccountsQuery.ReferenceName         = "СтатьиБюджетов";
				 LineAccountsQuery.ReferenceGUID         = XMLСтрока(Показатель.BS); 
				 LineAccountsQuery.OtherIndicators         = XMLСтрока(Показатель.Показатель);
				 ArrayAccountsQuery.LineAccountsQuery.Добавить(LineAccountsQuery);
			 КонецЕсли; 
		 ИначеЕсли ТипСтатьи = "ВидыДвижения" Тогда 
			 
			 Если ЗначениеЗаполнено(Показатель.TypeMovement) Тогда
				 LineAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("LineAccountsQuery"); 
				 LineAccountsQuery.ReferenceName     = "ВидыДвижения";
				 LineAccountsQuery.ReferenceGUID     = XMLСтрока(Показатель.TypeMovement);
				 LineAccountsQuery.OtherIndicators   = XMLСтрока(Показатель.Показатель);
				 ArrayAccountsQuery.LineAccountsQuery.Добавить(LineAccountsQuery);
			 КонецЕсли;
			 
		 ИначеЕсли ТипСтатьи = "ПланСчетов" Тогда 
			 Если ИспользоватьРасшифровкуПоАналитике Тогда
				 Если ЗначениеЗаполнено(Показатель.account) Тогда
					 LineAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("LineAccountsQuery"); 
					 LineAccountsQuery.ReferenceName         = "ПланСчетов";
					 LineAccountsQuery.ReferenceGUID         = XMLСтрока(Показатель.account); 
					 LineAccountsQuery.OtherIndicators         = XMLСтрока(Показатель.Показатель);
					 ArrayAccountsQuery.LineAccountsQuery.Добавить(LineAccountsQuery);
				 КонецЕсли; 
			 Иначе 
	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК Статьи,
					|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.GUID КАК ГуидСчета
					|ИЗ
					|	РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
					|ГДЕ
					|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя = &ВидПоказателя
					|	И ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель = &Показатель
					|	И ДополнительныеСведенияПрочихПоказателейСрезПоследних.ТипСтатьи = &ТипСтатьи
					|
					|СГРУППИРОВАТЬ ПО
					|	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи";
				
				Запрос.УстановитьПараметр("ВидПоказателя", Объект.ВидПоказателя);
				Запрос.УстановитьПараметр("Показатель", Показатель.Показатель);
				Запрос.УстановитьПараметр("ТипСтатьи", "Счет");
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				 Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ГуидСчета) Тогда
					 LineAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("LineAccountsQuery"); 
					 LineAccountsQuery.ReferenceName         = "ПланСчетов";
					 LineAccountsQuery.ReferenceGUID         = XMLСтрока(ВыборкаДетальныеЗаписи.Статьи); 
					 LineAccountsQuery.OtherIndicators         = XMLСтрока(Показатель.Показатель);
					 ArrayAccountsQuery.LineAccountsQuery.Добавить(LineAccountsQuery);
				 КонецЕсли; 
				КонецЦикла;
				 
			 КонецЕсли;
			 
		 КонецЕсли;
		 
	 КонецЦикла; 
	 
	 Если НЕ ArrayAccountsQuery.LineAccountsQuery.Количество() Тогда
		 Возврат Неопределено;
	 КонецЕсли;
	 
	 
	 Ответ = ИнтеграцияДЗО.BudgeIitemAccounts(ArrayAccountsQuery); 
	 
	 Возврат Ответ;
	 
 КонецФункции 
 
 &НаСервере
 Функция ЗаполнитьПараметрыТаблицы(СведенияУправляющейБазы,ТипСтатьи)
	 
	 Таблица = ПрочиеПоказателиВызовСервера.ПолучитьИсполняемуюТаблицу(); 
	 Если ТипСтатьи = "СтатьиБюджетов" Тогда
		 Для Каждого Строка Из СведенияУправляющейБазы Цикл 
			 
			 ПрочийПоказатель         = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("GUID",Строка.OtherIndicators);
			 СтатьяБюджетаДляИтогов   = Справочники.авСтатьиБюджетов.НайтиПоРеквизиту("GUID",Строка.ParentGUID);
			 //СтатьяБюджетаРасшифровка = Справочники.авСтатьиБюджетов.НайтиПоРеквизиту("GUID",Строка.ReferenceGUID);
			 МассивСтрокСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка.Accounts,",");
			 СписокАктивов = Новый СписокЗначений;
			 КлассификаторОсновныхФондов = Справочники.КлассификаторОсновныхФондов.ПустаяСсылка();
			 Если ЗначениеЗаполнено(Строка.CodeFAC) Тогда
				 КлассификаторОсновныхФондов = Справочники.КлассификаторОсновныхФондов.НайтиПоРеквизиту("КодКОФ",Строка.CodeFAC);
				 СписокАктивов = ПолучитьСписокАктивов(КлассификаторОсновныхФондов);
			 КонецЕсли;  
			 
			 Для Каждого СтрокаМассива Из МассивСтрокСчетов Цикл
				 СтрокаМассива = СокрЛП(СтрокаМассива);
				 Если Не ЗначениеЗаполнено(СтрокаМассива) Тогда
					 Продолжить;
				 КонецЕсли; 
				 ЗаполнитьСчета(Таблица,СтрокаМассива,ПрочийПоказатель,СтатьяБюджетаДляИтогов,КлассификаторОсновныхФондов,СписокАктивов);
			 КонецЦикла;
			 
			 
		 КонецЦикла;  
	 КонецЕсли;  
	 
	 Если ТипСтатьи = "ВидыДвижения" Тогда 
		 
		 Для Каждого Строка Из СведенияУправляющейБазы.LineAccountsResponse Цикл
			 
			 СчетЭталон                = Справочники.авПланСчетов.НайтиПоРеквизиту("GUID",Строка.Accounts); 
			 ПрочийПоказатель         = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("GUID",Строка.OtherIndicators);
			 ТаблицаПланаСчетов =  ПрочиеПоказателиВызовСервера.ПолучитьНастройкиПланаСчетовПоЭталонномуСчету(СчетЭталон);
			 Для Каждого НастройкиСчета Из ТаблицаПланаСчетов Цикл 
				 
				 СтрокаТЗ       = Таблица.Добавить();
				 СтрокаТЗ.ПрочийПоказатель         = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("GUID",Строка.OtherIndicators);
				 СтрокаТЗ.СтатьяДляИтогов           = Справочники.авВидыДвижения.НайтиПоРеквизиту("GUID",Строка.ParentGUID);
				 СтрокаТЗ.СтатьяРасшифровка         = Справочники.авВидыДвижения.НайтиПоРеквизиту("GUID",Строка.ReferenceGUID);
				 СтрокаТЗ.СчетЭталон                = СчетЭталон;
				 
				 ОтборПоСчету = НастройкиСчета.КомпоновщикНастроекОтбор.Получить();
				 СтрокаТЗ.Счет                          = НастройкиСчета.ИсточникДанных;
				 Если ОтборПоСчету <> Неопределено И ОтборПоСчету.Отбор.Элементы.Количество() Тогда
					 СтрокаТЗ.ЕстьУсловияПоСчету            = Истина;
				 Иначе
					 СтрокаТЗ.ЕстьУсловияПоСчету            = Ложь;
				 КонецЕсли;
				 СтрокаТЗ.КомпоновщикНастроекОтбор           = НастройкиСчета.КомпоновщикНастроекОтбор;
				 
				 СтрокаТЗ.КорСчетЭталон        = Справочники.авПланСчетов.НайтиПоРеквизиту("GUID",Строка.CorrAccounts);
				 НастройкиКорСчета             = ПрочиеПоказателиВызовСервера.ПолучитьНастройкиПланаСчетовПоЭталонномуСчету(СтрокаТЗ.КорСчетЭталон);
				 
				 Если НастройкиКорСчета.Количество() Тогда 
					 ОтборПоСчету = НастройкиКорСчета[0].КомпоновщикНастроекОтбор.Получить();
					 СтрокаТЗ.КорСчет                   = НастройкиКорСчета[0].ИсточникДанных;
					 Если ОтборПоСчету <> Неопределено И ОтборПоСчету.Отбор.Элементы.Количество() Тогда
						 СтрокаТЗ.ЕстьУсловияПоКорСчету     = Истина; 
					 Иначе
						 
						 СтрокаТЗ.ЕстьУсловияПоКорСчету     = Ложь; 
					 КонецЕсли;
					 //СтрокаТЗ.ЕстьУсловияПоКорСчету     = ЗначениеЗаполнено(НастройкиКорСчета[0].ПредставлениеОтбора); 
				 Иначе
					 СтрокаТЗ.КорСчет                   = ПланыСчетов.Типовой.ПустаяСсылка();
					 СтрокаТЗ.ЕстьУсловияПоКорСчету     = Ложь; 
				 КонецЕсли;
				 
				 
				 СтрокаТЗ.ТипДвижения          = Строка.MovementType;
			 КонецЦикла;
			 
		 КонецЦикла;  
	 КонецЕсли;
	 
	 Если ТипСтатьи = "ПланСчетов" Тогда  
		 Для Каждого Строка Из СведенияУправляющейБазы.LineAccountsResponse Цикл  
			 
			 ПрочийПоказатель          = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("GUID",Строка.OtherIndicators);
			 СчетЭталон                = Справочники.авПланСчетов.НайтиПоРеквизиту("GUID",Строка.Accounts); 
			 
			 ТаблицаПланаСчетов =  ПрочиеПоказателиВызовСервера.ПолучитьНастройкиПланаСчетовПоЭталонномуСчету(СчетЭталон);
			 Для Каждого НастройкиСчета Из ТаблицаПланаСчетов Цикл
				 Если ИспользоватьРасшифровкуПоАналитике Тогда 
				 	НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("ПрочийПоказатель,СтатьяДляИтогов,Счет,ПредставлениеОтбора",ПрочийПоказатель,СчетЭталон,НастройкиСчета.ИсточникДанных,НастройкиСчета.ПредставлениеОтбора)); 
				 Иначе
					 НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("ПрочийПоказатель,Счет,ПредставлениеОтбора",ПрочийПоказатель,НастройкиСчета.ИсточникДанных,НастройкиСчета.ПредставлениеОтбора)); 
				 КонецЕсли;
				 Если НайденныеСтроки.Количество() Тогда
					 Продолжить;
				 КонецЕсли;
				  
				 
				 СтрокаТЗ       = Таблица.Добавить();
				 СтрокаТЗ.СчетЭталон                = СчетЭталон; 
				 ОтборПоСчету = НастройкиСчета.КомпоновщикНастроекОтбор.Получить();
				 СтрокаТЗ.Счет                          = НастройкиСчета.ИсточникДанных;
				 Если ОтборПоСчету <> Неопределено И ОтборПоСчету.Отбор.Элементы.Количество() Тогда
					 СтрокаТЗ.ЕстьУсловияПоСчету            = Истина;
				 Иначе
					 СтрокаТЗ.ЕстьУсловияПоСчету            = Ложь;
				 КонецЕсли;
				 СтрокаТЗ.ПредставлениеОтбора             = НастройкиСчета.ПредставлениеОтбора;
				 СтрокаТЗ.КомпоновщикНастроекОтбор           = НастройкиСчета.КомпоновщикНастроекОтбор;
				 СтрокаТЗ.ТипДвижения             = Строка.MovementType;
				 СтрокаТЗ.ПрочийПоказатель          = ПрочийПоказатель;
			 КонецЦикла;
		 КонецЦикла; 
	 КонецЕсли;
	 
	 Возврат Таблица;
	 
 КонецФункции 
 
 &НаСервере
 Функция ЗаполнитьПоСчетамСтатейБюджета(Таблица) 
	 
	 
	 
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 
		 Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			 Продолжить;
		 КонецЕсли; 
		 
		 Если ЗначениеЗаполнено(СтрокаТаблицы.КлассификаторОсновныхФондов) И СтрокаТаблицы.СписокАктивов.Количество() = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 
		 Если СтрокаТаблицы.ЕстьУсловияПоСчету Или СтрокаТаблицы.НоменклатурныеГруппы.Количество() 
			 Или СтрокаТаблицы.СписокАктивов.Количество() 
			 Тогда 
			 ПолучитьОcтаткиПоУсловию(СтрокаТаблицы);
		 Иначе 
			 ПолучитьОcтаткиПоУсловию(СтрокаТаблицы);
		 КонецЕсли;
		 
	 КонецЦикла;
	 
 КонецФункции // ПолучитьДанныеПоСчетамСтатейБюджета()
 
 &НаСервере
 Функция ЗаполнитьПоСчетамСтатейБюджетаПоВиду17(Таблица)  
	 
	 
	 //Объект.ПрочиеПоказатели.Очистить();
	 ВыгрузкаПрочихПоказателей = Объект.ПрочиеПоказатели.Выгрузить();
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 
		 Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			 Продолжить;
		 КонецЕсли; 
		 
		 Если ЗначениеЗаполнено(СтрокаТаблицы.КлассификаторОсновныхФондов) И СтрокаТаблицы.СписокАктивов.Количество() = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 ПолучитьОcтаткиПоУсловию(СтрокаТаблицы,ВыгрузкаПрочихПоказателей);
		 
	 КонецЦикла;
	 ВыгрузкаПрочихПоказателей.Свернуть("КодПоказателя,Показатель,BS,CUR,CourseDirection,ValuePercent","AmountBalance,Sum");
	 Объект.ПрочиеПоказатели.Очистить();
	 Объект.ПрочиеПоказатели.Загрузить(ВыгрузкаПрочихПоказателей);
	 
	 
 КонецФункции // ПолучитьДанныеПоСчетамСтатейБюджета()
 
 &НаСервере
 Функция ЗаполнитьПоСчетамСтатейБюджетаПоВиду26(Таблица)  
	 
	 
	 //Объект.ПрочиеПоказатели.Очистить();
	 ВыгрузкаПрочихПоказателей = Объект.ПрочиеПоказатели.Выгрузить();
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 
		 Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			 Продолжить;
		 КонецЕсли; 
		 
		 Если ЗначениеЗаполнено(СтрокаТаблицы.КлассификаторОсновныхФондов) И СтрокаТаблицы.СписокАктивов.Количество() = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 ПолучитьОcтаткиПоУсловию(СтрокаТаблицы,ВыгрузкаПрочихПоказателей);
		 
	 КонецЦикла;
	 ВыгрузкаПрочихПоказателей.Свернуть("КодПоказателя,Показатель,BS,CourseDirection,ValuePercent","AmountBalance,Sum");
	 Объект.ПрочиеПоказатели.Очистить();
	 Объект.ПрочиеПоказатели.Загрузить(ВыгрузкаПрочихПоказателей);
	 
	 Для Каждого СтрокаТЧ Из Объект.ПрочиеПоказатели Цикл  
		 Если  СтрокаТЧ.CourseDirection = Перечисления.ВозможныеИзмененияКурса.Увеличение Тогда 
			 СтрокаТЧ.Sum = Макс(СтрокаТЧ.Sum,-СтрокаТЧ.Sum);
		 Иначе   
			 СтрокаТЧ.Sum = Мин(СтрокаТЧ.Sum,-СтрокаТЧ.Sum);
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 
	 
 КонецФункции // ПолучитьДанныеПоСчетамСтатейБюджета()
 
 
 
 &НаСервере
 Процедура ЗаполнитьПоДепозитамНаСервере() 
	 
	 Объект.ПрочиеПоказатели.Очистить();
	 Таблица = ПрочиеПоказателиВызовСервера.ПолучитьИсполняемуюТаблицу();
	 Таблица.Колонки.Добавить("Субконто1");
	 ПрочийПоказатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.1.6.1.");
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК СчетЭталон,
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ТипДвиженияСчета КАК ТипДвиженияСчета
	 |ИЗ
	 |	РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних
	 |ГДЕ
	 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя = &ВидПоказателя
	 |	И ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель = &Показатель";
	 
	 Запрос.УстановитьПараметр("ВидПоказателя", Объект.ВидПоказателя);
	 Запрос.УстановитьПараметр("Показатель", ПрочийПоказатель);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 ТаблицаПланаСчетов =  ПрочиеПоказателиВызовСервера.ПолучитьНастройкиПланаСчетовПоЭталонномуСчету(ВыборкаДетальныеЗаписи.СчетЭталон);
		 Для Каждого НастройкиСчета Из ТаблицаПланаСчетов Цикл 
			 
			 СтрокаТЗ       = Таблица.Добавить();
			 СтрокаТЗ.СчетЭталон                = ВыборкаДетальныеЗаписи.СчетЭталон; 
			 ОтборПоСчету = НастройкиСчета.КомпоновщикНастроекОтбор.Получить();
			 СтрокаТЗ.Счет                          = НастройкиСчета.ИсточникДанных;
			 Если ОтборПоСчету <> Неопределено И ОтборПоСчету.Отбор.Элементы.Количество() Тогда
				 СтрокаТЗ.ЕстьУсловияПоСчету            = Истина;
			 Иначе
				 СтрокаТЗ.ЕстьУсловияПоСчету            = Ложь;
			 КонецЕсли;
			 СтрокаТЗ.КомпоновщикНастроекОтбор           = НастройкиСчета.КомпоновщикНастроекОтбор;
			 СтрокаТЗ.ПрочийПоказатель          = ПрочийПоказатель;
			 СтрокаТЗ.ТипДвижения              =  ВыборкаДетальныеЗаписи.ТипДвиженияСчета;
		 КонецЦикла;
	 КонецЦикла;
	 
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 
		 Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			 Продолжить;
		 КонецЕсли; 
		 
		 ТипДвижения =  Лев(СтрокаТаблицы.ТипДвижения,6);
		 
		 Если ТипДвижения = "Оборот"  Тогда 
			 ПолучитьОборотыПоУсловию2(СтрокаТаблицы);
		 Иначе
			 ПолучитьОcтаткиПоУсловию(СтрокаТаблицы);
		 КонецЕсли;
	 КонецЦикла;
	 
	 
	 
	 
 КонецПроцедуры  
 
 &НаСервере
 Процедура ДобавитьЦеннуюБумагуНаСервере()  
	 
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 
	 ЦеннаяБумагаИмя = Объект.ПрочиеПоказатели.Добавить();
	 ЦеннаяБумагаИмя.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.1.2.1.");
	 ЦеннаяБумагаИмя.КодПоказателя = ЦеннаяБумагаИмя.Показатель.Код;
	 ЦеннаяБумагаИмя.Значение = ""; 
	 
	 СтрокаДереваЦеннаяБумагаИмя =  Дерево.Строки[0].Строки.Добавить(); 
	 СтрокаДереваЦеннаяБумагаИмя.Показатель = ЦеннаяБумагаИмя.Показатель;
	 СтрокаДереваЦеннаяБумагаИмя.КодПоказателя = ЦеннаяБумагаИмя.КодПоказателя;
	 СтрокаДереваЦеннаяБумагаИмя.Значение = ""; 
	 
	 
	 ЦеннаяБумагаДата = Объект.ПрочиеПоказатели.Добавить();
	 ЦеннаяБумагаДата.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.1.2.2.");
	 ЦеннаяБумагаДата.КодПоказателя = ЦеннаяБумагаДата.Показатель.Код;
	 ЦеннаяБумагаДата.Значение = Дата(1,1,1); 
	 
	 СтрокаДереваЦеннаяБумагаДата =  Дерево.Строки[0].Строки.Добавить(); 
	 СтрокаДереваЦеннаяБумагаДата.Показатель = ЦеннаяБумагаДата.Показатель;
	 СтрокаДереваЦеннаяБумагаДата.КодПоказателя = ЦеннаяБумагаДата.КодПоказателя;
	 СтрокаДереваЦеннаяБумагаДата.Значение = ЦеннаяБумагаДата.Значение; 
	 
	 
	 ЦеннаяБумагаЧисло = Объект.ПрочиеПоказатели.Добавить();
	 ЦеннаяБумагаЧисло.Показатель = Справочники.INDПрочиеПоказатели.НайтиПоРеквизиту("КодСправочника","IND2.1.2.3.");
	 ЦеннаяБумагаЧисло.КодПоказателя = ЦеннаяБумагаЧисло.Показатель.Код;
	 ЦеннаяБумагаЧисло.Значение = 0; 
	 
	 СтрокаДереваЦеннаяБумагаЧисло =  Дерево.Строки[0].Строки.Добавить(); 
	 СтрокаДереваЦеннаяБумагаЧисло.Показатель = ЦеннаяБумагаЧисло.Показатель;
	 СтрокаДереваЦеннаяБумагаЧисло.КодПоказателя = ЦеннаяБумагаЧисло.КодПоказателя;
	 СтрокаДереваЦеннаяБумагаЧисло.Значение = ЦеннаяБумагаЧисло.Значение; 
	 
	 
	 
	 
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ДобавитьЦеннуюБумагу(Команда)
	 
	 ДобавитьЦеннуюБумагуНаСервере();
	 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы()); 
	 
 КонецПроцедуры
 
 
 Процедура ЗаполнитьСчета(Таблица,КодЭталонногоСчета,ПрочийПоказатель,СтатьяБюджетаДляИтогов,КлассификаторОсновныхФондов,СписокАктивов)   
	 
	 НоменклатурныеГруппы = ПолучитьНоменклатурныеГруппы(ПрочийПоказатель);
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	авНастройкаПланаСчетов.ИсточникДанных КАК ИсточникДанных,
	 |	авНастройкаПланаСчетов.ПредставлениеОтбора КАК ПредставлениеОтбора,
	 |	авНастройкаПланаСчетов.ЭталонныйСчет КАК ЭталонныйСчет,
	 |	авНастройкаПланаСчетов.КомпоновщикНастроекОтбор
	 |ИЗ
	 |	Справочник.авНастройкаПланаСчетов КАК авНастройкаПланаСчетов
	 |ГДЕ
	 |	авНастройкаПланаСчетов.ЭталонныйСчет.Код = &Код
	 |	И НЕ авНастройкаПланаСчетов.ПометкаУдаления";
	 
	 Запрос.УстановитьПараметр("Код", КодЭталонногоСчета);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
		 
		 Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникДанных) Тогда  
			 
			 Если ЗначениеЗаполнено(КлассификаторОсновныхФондов) И Не СписокАктивов.Количество() Тогда
				 Продолжить;
			 КонецЕсли;
			 
			 
			 СтрокаТЗ = Таблица.Добавить();
			 СтрокаТЗ.Счет = ВыборкаДетальныеЗаписи.ИсточникДанных;
			 СтрокаТЗ.СчетЭталон = ВыборкаДетальныеЗаписи.ЭталонныйСчет;
			 СтрокаТЗ.ЕстьУсловияПоСчету = ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписи.ПредставлениеОтбора));  
			 СтрокаТЗ.ПрочийПоказатель  = ПрочийПоказатель;
			 СтрокаТЗ.СтатьяДляИтогов  = СтатьяБюджетаДляИтогов; 
			 СтрокаТЗ.КомпоновщикНастроекОтбор = ВыборкаДетальныеЗаписи.КомпоновщикНастроекОтбор;
			 Если СписокАктивов.Количество() Тогда 
				 
				 СтрокаТЗ.СписокАктивов = СписокАктивов;
				 
			 КонецЕсли; 
			 
			 Если НоменклатурныеГруппы.Количество() Тогда 
				 
				 СтрокаТЗ.НоменклатурныеГруппы = НоменклатурныеГруппы;
				 
			 КонецЕсли;
			 
			 
			 
		 КонецЕсли;
		 
		 
		 
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаСервере
 Функция ПолучитьДополнительныеНастройкиСчета(ЭталонныйСчет,Счет)
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	НастройкаЭталоногоПланаСчетов.КомпоновщикНастроекОтбор КАК КомпоновщикНастроек
	 |ИЗ
	 |	Справочник.авНастройкаПланаСчетов КАК НастройкаЭталоногоПланаСчетов
	 |ГДЕ
	 |	НЕ НастройкаЭталоногоПланаСчетов.ПометкаУдаления
	 |	И НастройкаЭталоногоПланаСчетов.ЭталонныйСчет = &ЭталонныйСчет
	 |	И НастройкаЭталоногоПланаСчетов.ИсточникДанных = &Счет";
	 Запрос.УстановитьПараметр("ЭталонныйСчет",ЭталонныйСчет);  //1720 
	 Запрос.УстановитьПараметр("Счет",Счет);  //1720 
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 Возврат Выборка.КомпоновщикНастроек; 
	 Иначе
		 Возврат Неопределено;
	 КонецЕсли;
	 
	 
 КонецФункции // ПолучитьДополнительныеНастройуиСчета()
 
 &НаСервере
 Функция ПолучитьНоменклатурныеГруппы(ПрочийПоказатель)
	 
	 
	 СписокНГ = НОвый СписокЗначений; 
	 
	 Если Не ЗначениеЗаполнено(ПрочийПоказатель) Тогда
		 Возврат СписокНГ;
	 КонецЕсли;
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	авМаппингЭталонныхСправочников.Статья КАК Статья,
	 |	авМаппингЭталонныхСправочников.ПрочиеПоказатели КАК ПрочиеПоказатели
	 |ИЗ
	 |	РегистрСведений.авМаппингЭталонныхСправочников КАК авМаппингЭталонныхСправочников
	 |ГДЕ
	 |	авМаппингЭталонныхСправочников.ПрочиеПоказатели = &Показатель
	 |	И авМаппингЭталонныхСправочников.Статья ССЫЛКА Справочник.НоменклатурныеГруппы";
	 
	 Запрос.УстановитьПараметр("Показатель", ПрочийПоказатель);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 СписокНГ.Добавить(ВыборкаДетальныеЗаписи.Статья);
	 КонецЦикла;
	 
	 Возврат СписокНГ;
	 
 КонецФункции // ПолучитьНоменклатурныеГруппы()
 
 
 &НаСервере
 Функция ПолучитьСписокАктивов(CodeFAC)
	 
	 СписокАктивов = Новый СписокЗначений;
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ОсновныеСредства.Ссылка КАК Ссылка
	 |ИЗ
	 |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	 |ГДЕ
	 |	ОсновныеСредства.КодКОФ = &КодКОФ
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ОсновныеСредства.Ссылка
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	БиологическиеАктивы.Ссылка
	 |ИЗ
	 |	Справочник.БиологическиеАктивы КАК БиологическиеАктивы
	 |ГДЕ
	 |	БиологическиеАктивы.КодКОФ = &КодКОФ
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	БиологическиеАктивы.Ссылка
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	НематериальныеАктивы.Ссылка
	 |ИЗ
	 |	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	 |ГДЕ
	 |	НематериальныеАктивы.КодКОФ = &КодКОФ
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	НематериальныеАктивы.Ссылка";
	 
	 Запрос.УстановитьПараметр("КодКОФ", CodeFAC);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		 
		 СписокАктивов.Добавить(ВыборкаДетальныеЗаписи.ссылка);
		 
	 КонецЦикла; 
	 
	 Возврат СписокАктивов;
	 
 КонецФункции // ПолучитьСписокАктивов()
 
 &НаКлиенте
 Функция ЕстьНезаполненныеПоля()
	 
	 ЕстьОшибки = Ложь;
	 Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		 СообщитьПользователю("На заполнена ""Организация""","Объект.Организация");
		 ЕстьОшибки = Истина;
		 Возврат ЕстьОшибки;
	 КонецЕсли;       
	 
	 Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		 СообщитьПользователю("На установлен ""Конец периода""","Объект.КонецПериода");	
		 ЕстьОшибки = Истина;
		 Возврат ЕстьОшибки;
	 КонецЕсли;
	 
	 Если Не ЗначениеЗаполнено(Объект.ВидПоказателя) Тогда
		 СообщитьПользователю("На заполнен ""Вид показателя""","Объект.ВидПоказателя");	
		 ЕстьОшибки = Истина;
		 Возврат ЕстьОшибки;
	 КонецЕсли; 
	 
	 
	 Возврат ЕстьОшибки;
	 
	 
 КонецФункции // ПроверитьЗаполнениеОбязательнызПолей()
 
 &НаСервере
 Процедура ОбновитьВидимостьЭлементов()
	 
	 
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид7(Объект.ВидПоказателя) Тогда 
		 
		 //Элементы.ПрочиеПоказателиДобавитьЦеннуюБумагу.Видимость = Истина; 
		 //Элементы.ПрочиеПоказателиЗаполнитьПоДепозитам.Видимость = Ложь; 
		 //ЦенныеБумагиРодитель = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("КодПоказателя","IND2.1.2."));
		 //Для Каждого ЦеннаяБумагаРодитель Из ЦенныеБумагиРодитель Цикл  
		 //    
		 //    Объект.ПрочиеПоказатели.Удалить(ЦеннаяБумагаРодитель);
		 //    
		 //КонецЦикла;
		 //
		 
		 
	 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид9(Объект.ВидПоказателя) Тогда 
		 //Элементы.ПрочиеПоказателиДобавитьЦеннуюБумагу.Видимость = Ложь;  
		 //Элементы.ПрочиеПоказателиЗаполнитьПоДепозитам.Видимость = Истина; 
		 //Если Элементы.Найти("Account") <> Неопределено Тогда 
		 //    Элементы.Account.Видимость = Ложь;
		 //КонецЕсли;
		 //Если Элементы.Найти("ДеревоПрочиеПоказателиAccount") <> Неопределено Тогда 
		 //    Элементы.ДеревоПрочиеПоказателиAccount.Видимость = Ложь;
		 //КонецЕсли;
	 ИначеЕсли ПрочиеПоказателиВызовСервера.ЭтоВид17(Объект.ВидПоказателя) Тогда
		 
		 Элементы.ДеревоПрочиеПоказателиЗаполнить.Видимость = Истина; 
		 //Элементы.ПрочиеПоказателиДобавитьЦеннуюБумагу.Видимость = Ложь; 
		 //Элементы.ПрочиеПоказателиЗаполнитьПоДепозитам.Видимость = Ложь;  
		 Элементы.СтраницаДерево.Видимость = Истина;
	 КонецЕсли; 
	 
	 
	 Если Элементы.Найти("BSname") <> Неопределено Тогда 
		 Элементы.BSname.Видимость = Ложь;
	 КонецЕсли;
	 Если Элементы.Найти("ДеревоПрочиеПоказателиBSname") <> Неопределено Тогда 
		 Элементы.ДеревоПрочиеПоказателиBSname.Видимость = Ложь;
	 КонецЕсли;
	 Если Элементы.Найти("AccountName") <> Неопределено Тогда 
		 Элементы.AccountName.Видимость = Ложь;
	 КонецЕсли;
	 Если Элементы.Найти("ДеревоПрочиеПоказателиAccountName") <> Неопределено Тогда 
		 Элементы.ДеревоПрочиеПоказателиAccountName.Видимость = Ложь;
	 КонецЕсли;
	 Если Элементы.Найти("TypeMovementName") <> Неопределено Тогда 
		 Элементы.TypeMovementName.Видимость = Ложь;
	 КонецЕсли;
	 Если Элементы.Найти("ДеревоПрочиеПоказателиTypeMovementName") <> Неопределено Тогда 
		 Элементы.ДеревоПрочиеПоказателиTypeMovementName.Видимость = Ложь;
	 КонецЕсли;
	 
	 
	 
	 Если Объект.Статус = Перечисления.СтатусДокументаПрочиеПоказатели.Отправлен Тогда
		 Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусДокументаПрочиеПоказатели.Отправлен);
		 //ЗаблокироватьЭлементыФормы();
	 КонецЕсли; 
	 
	 Если Объект.Статус = Перечисления.СтатусДокументаПрочиеПоказатели.Корректировка Тогда
		 Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусДокументаПрочиеПоказатели.Корректировка);
	 КонецЕсли;
	 
	 //КорректныеПериодыОкончания =       КорректныеПериодыОкончания();
	 //Для Каждого КорПериод Из КорректныеПериодыОкончания Цикл
	 //    Элементы.КонецПериода.СписокВыбора.Добавить(КорПериод.Значение);
	 //КонецЦикла; 
	 
	 Если Не ЗначениеЗаполнено(Объект.ПериодОтчета) Или Объект.ПериодОтчета = Справочники.ПериодыПрочихПоказателей.Произвольный Тогда 
		 
		 Элементы.НачалоПериода.ТолькоПросмотр = Ложь;
		 Элементы.КонецПериода.ТолькоПросмотр = Ложь;
	 Иначе
		 Элементы.НачалоПериода.ТолькоПросмотр = Истина;
		 Элементы.КонецПериода.ТолькоПросмотр = Истина;
		 
	 КонецЕсли;
	 
	 
	 Если РольДоступна(Метаданные.Роли.ОтображатьДополнительнуюАналитикуПоПрочимПоказателямНаФорме) Тогда
		 Элементы.СтраницаПрочиеПоказатели.Видимость = Истина;
		 Элементы.СтраницаПрочиеПоказатели.Видимость = Истина;
		 Элементы.СтраницаПрочиеПоказатели.Видимость = Истина;
		 Элементы.СтраницаДерево.ОтображатьЗаголовок = Истина;
		 Элементы.СтраницыОбщая.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		 
	 Иначе
		 Элементы.СтраницаПрочиеПоказатели.Видимость = Ложь;
		 Элементы.СтраницаПрочиеПоказатели.Видимость = Ложь;
		 Элементы.СтраницаПрочиеПоказатели.Видимость = Ложь;
		 Элементы.СтраницаДерево.ОтображатьЗаголовок = Ложь;
		 Элементы.СтраницыОбщая.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	 КонецЕсли;
	 
	 
 КонецПроцедуры // ()
 
 &НаКлиентеНаСервереБезКонтекста
 Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	 
	 Сообщение = Новый СообщениеПользователю;
	 Сообщение.Текст = Текст;
	 Сообщение.ПутьКДанным = ПутьКДанным;
	 Сообщение.Сообщить();
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура ДеревоПрочиеПоказателиAmountBalanceПриИзменении(Элемент) 
	 
	 Если  ПрочиеПоказателиВызовСервера.ЭтоВид26(Объект.ВидПоказателя) Или ПрочиеПоказателиВызовСервера.ЭтоВид17(Объект.ВидПоказателя) Тогда
		 ТекДанные = Элементы.ДеревоПрочиеПоказатели.ТекущиеДанные;
		 Если ТекДанные.CourseDirection = ПредопределенноеЗначение("Перечисление.ВозможныеИзмененияКурса.Уменьшение") Тогда 
			 ТекДанные.Sum  = ТекДанные.AmountBalance  * ТекДанные.ValuePercent   /100;
		 Иначе   
			 ТекДанные.Sum  = ТекДанные.AmountBalance  * ТекДанные.ValuePercent   /100;
		 КонецЕсли; 
	 КонецЕсли; 
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура ДеревоПрочиеПоказателиSumПриИзменении(Элемент)  
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид10(Объект.ВидПоказателя) Тогда
		 ПересчитатьДеревоНаСервере();
		 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы()); 
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПересчитатьВид27(Элемент)
	 
	 Если  ПрочиеПоказателиВызовСервера.ЭтоВид27(Объект.ВидПоказателя) Тогда
		 
		 ТекДанные = Элементы.ДеревоПрочиеПоказатели.ТекущиеДанные;
		 ТекДанные.TotalLiquidity = ТекДанные.OnRequest+ ТекДанные.less3months + ТекДанные.Between3and12months + ТекДанные.Between1and5years;
	 КонецЕсли;
	 
 КонецПроцедуры // ПересчитатьВид27()
 
 &НаКлиенте
 Процедура ДеревоПрочиеПоказателиКонтрагентПриИзменении(Элемент)
	 
	 Если  ПрочиеПоказателиВызовСервера.ЭтоВид14(Объект.ВидПоказателя) Тогда
		 
		 ТекДанные = Элементы.ДеревоПрочиеПоказатели.ТекущиеДанные;
		 Если ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
			 ТекДанные.КонтрагентИИН = БинКонтрагента(ТекДанные.Контрагент); 
		 КонецЕсли;
	 КонецЕсли;
	 
 КонецПроцедуры // ДеревоПрочиеПоказателиКонтрагентПриИзменении()
 
 &НаСервереБезКонтекста
 Функция БинКонтрагента(Контрагент)
	 
	 Возврат Контрагент.ИдентификационныйКодЛичности;
	 
 КонецФункции // БинКонтрагента()
 
 
 &НаКлиенте
 Процедура ДеревоПрочиеПоказателиПередУдалением(Элемент, Отказ)
	 
	 ТекДанные =   Элементы.ДеревоПрочиеПоказатели.ТекущиеДанные;
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид14(Объект.ВидПоказателя) Тогда  
		 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель,Контрагент",ТекДанные.Показатель,ТекДанные.Контрагент));
		 Если НайденныеСтроки.Количество() Тогда  
			 
			 Объект.ПрочиеПоказатели.Удалить(НайденныеСтроки[0]);
		 КонецЕсли;
	 КонецЕсли;
	 
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ПересчитатьДеревоНаСервере()
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 ПересчитатьВсеДерево(Дерево);
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 
 КонецПроцедуры // ПересчитатьДеревоНаСервере()
 
 &НаСервере
 Процедура ПересчитатьВсеДерево(Дерево)
	 
	 
	 
	 Для каждого стр из Дерево.Строки Цикл
		 
		 Если стр.строки.количество()>0 тогда
			 ПересчитатьВсеДерево(стр);
		 Иначе
			 ПересчетСуммДерева(стр);
		 КонецЕсли;
		 
	 КонецЦикла;
	 
 Конецпроцедуры
 
 Процедура ПересчетСуммДерева(ТекСтрока)
	 
	 Родитель=ТекСтрока.Родитель;
	 Если Родитель=Неопределено Тогда
		 Возврат;
	 КонецЕсли; 
	 Если НЕ Родитель.НеСобиратьИтоги Тогда
		 Родитель.Sum                   = Родитель.Строки.Итог("Sum");
		 Родитель.AmountDebt            = Родитель.Строки.Итог("AmountDebt");
		 Родитель.AmountDebtMore100     = Родитель.Строки.Итог("AmountDebtMore100");
		 Родитель.AmountDebtMore500     = Родитель.Строки.Итог("AmountDebtMore500");
		 Родитель.AmountBalance         = Родитель.Строки.Итог("AmountBalance");
		 Родитель.AmountBalancePledge   = Родитель.Строки.Итог("AmountBalancePledge"); 
		 Родитель.OnRequest   = Родитель.Строки.Итог("OnRequest");
		 Родитель.less3months   = Родитель.Строки.Итог("less3months");
		 Родитель.Between3and12months   = Родитель.Строки.Итог("Between3and12months");
		 Родитель.Between1and5years   = Родитель.Строки.Итог("Between1and5years");
		 Родитель.TotalLiquidity   = Родитель.Строки.Итог("TotalLiquidity");
		 
	 КонецЕсли;
	 ПересчетСуммДерева(Родитель);
	 
 КонецПроцедуры
 
 &НаСервере
 Функция ИспользоватьРасшифровкуПоАналитике()
	 
	 Если ПрочиеПоказателиВызовСервера.ЭтоВид2(Объект.ВидПоказателя) Тогда 
		 
		 Возврат Ложь; 
	 Иначе
		 Возврат Истина; 
		 
	 КонецЕсли;
	 
 КонецФункции // ИспользоватьРасшифровкуПоАналитике()
 
 &НаСервере
 Функция ТаблицаДляВида2(Таблица)
 
 	Таблица.Свернуть("ПрочийПоказатель,Счет","Сумма");
	//Таблица.Колонки.Добавить("ДоходРасход");
	Таблица.Колонки.Добавить("СуммаДоход");
	Таблица.Колонки.Добавить("СуммаРасход");
	Для Каждого СтрокаТЗ Из Таблица Цикл 
		
		Если Лев(СтрокаТЗ.Счет,1) = "6" Тогда	
			//СтрокаТЗ.ДоходРасход = "Доходы";
			СтрокаТЗ.СуммаДоход = СтрокаТЗ.Сумма;
			СтрокаТЗ.СуммаРасход = 0;
		ИначеЕсли Лев(СтрокаТЗ.Счет,1) = "7" Тогда
			//СтрокаТЗ.ДоходРасход = "Расходы";
			СтрокаТЗ.СуммаРасход = СтрокаТЗ.Сумма;
			СтрокаТЗ.СуммаДоход = 0;
		Иначе
			СтрокаТЗ.ДоходРасход = "Непонятно как сюда попала"; 
			
		КонецЕсли;
		
	КонецЦикла;
	Таблица.Свернуть("ПрочийПоказатель","Сумма,СуммаДоход,СуммаРасход"); 
	Для Каждого СтрокаТаблицы Из  Таблица Цикл 
		Если СтрокаТаблицы.ПрочийПоказатель.КодСправочника = "IND2.2.3." Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаДоход - СтрокаТаблицы.СуммаРасход; 
		
	КонецЦикла; 
	
	Возврат Таблица;
	
 
	
 
 КонецФункции // ТаблицаДляВида2()


 &НаКлиенте
 Процедура ОтправитьВSQL(Команда)
	 
	 Ответ = "";
	 Записать();
	 ОтправитьВSQLНаСервере(Ответ);
	 Если ПустаяСтрока(Ответ) Тогда
		 Записать();
		 Закрыть(); 
	 Иначе
		 ПоказатьПредупреждение(,Ответ);    
	 КонецЕсли;
	 
	 
 КонецПроцедуры 
 
 
 &НаСервере
 Процедура ОтправитьВSQLНаСервере(Ответ)
     
     ТекущийОбъект = РеквизитФормыВЗначение("Объект");
     Ответ =  ИнтеграцияДЗО.ЗагрузитьДокументПрочиеПоказателиВ_SQL(ТекущийОбъект);
     Если Не ЗначениеЗаполнено(Ответ) Тогда 
    	 Объект.Статус = Перечисления.СтатусДокументаПрочиеПоказатели.Отправлен; 
     КонецЕсли;
     
     
 КонецПроцедуры // ОтправитьНаСервере()
 


&НаКлиенте
Процедура ПериодСтрокойПриИзменении(Элемент) 
	
	Если ЗначениеЗаполнено(ПериодСтрокой) Тогда
		Если ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
			Объект.НачалоПериода = Дата(Число(ПериодСтрокой),Месяц(Объект.НачалоПериода),День(Объект.НачалоПериода));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.КонецПериода) Тогда
			Объект.КонецПериода = Дата(Число(ПериодСтрокой),Месяц(Объект.КонецПериода),День(Объект.КонецПериода));
		КонецЕсли;
		
	КонецЕсли; 
	
 КонецПроцедуры


&НаКлиенте
 Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление>0 Тогда
		ЗначениеНаправления = 12;
	Иначе
		ЗначениеНаправления = -12;
	КонецЕсли;
	
	Объект.ГодОтчета 	= ДобавитьМесяц(Объект.ГодОтчета, ЗначениеНаправления);
	ПериодСтрокой 		= Формат(Объект.ГодОтчета, "ДФ='гггг'"); 
	Если ЗначениеЗаполнено(ПериодСтрокой) Тогда
		Если ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
			Объект.НачалоПериода = Дата(Число(ПериодСтрокой),Месяц(Объект.НачалоПериода),День(Объект.НачалоПериода));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.КонецПериода) Тогда
			Объект.КонецПериода = Дата(Число(ПериодСтрокой),Месяц(Объект.КонецПериода),День(Объект.КонецПериода));
		КонецЕсли;
		
	КонецЕсли;
	Модифицированность = Истина;
	
 КонецПроцедуры


&НаКлиенте
 Процедура ПериодОтчетаПриИзменении(Элемент)
	ПериодОтчетаПриИзмененииНаСервере();
 КонецПроцедуры

 &НаСервере
Процедура ПериодОтчетаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПериодОтчета) И Объект.ПериодОтчета <> Справочники.ПериодыПрочихПоказателей.Произвольный Тогда 
		
		ПериодОтчета = Объект.ПериодОтчета;
		Объект.НачалоПериода = Дата(Число(ПериодСтрокой),ПериодОтчета.КодМесяцаНачала,ПериодОтчета.ДеньНачала);
		Объект.КонецПериода = Дата(Число(ПериодСтрокой),Объект.ПериодОтчета.КодМесяцаОкончания,ПериодОтчета.ДеньОкончания);
		
	КонецЕсли;
	ОбновитьВидимостьЭлементов();	
КонецПроцедуры


&НаКлиенте
Процедура ОсобыйПериодПриИзменении(Элемент)
	СписокВыбораПериодовПоПоказателю.Очистить();
	УстановитьЗначенияПериодовПоВидуПоказателяНаСервере();
КонецПроцедуры

&НаСервере
Функция УстановитьЗначенияПериодовПоВидуПоказателяНаСервере()

	 СписокВыбораПериодовПоПоказателю = ПрочиеПоказателиВызовСервера.СписокВыбораПоВидуПоказателя(Объект.ВидПоказателя,Объект.ОсобыйПериод); 
	 
	 Объект.ПериодОтчета = СписокВыбораПериодовПоПоказателю[0].Значение;
	 ПериодОтчетаПриИзмененииНаСервере();
	 Элементы.ПериодОтчета.СписокВыбора.Очистить();
	 Для Каждого ЭлементСписка Из СписокВыбораПериодовПоПоказателю Цикл  
		 Элементы.ПериодОтчета.СписокВыбора.Добавить(ЭлементСписка.Значение);
	 КонецЦикла;

КонецФункции // УстановитьЗначенияПериодовПоВидуПоказателяНаСервере()
 
 &НаСервере
 Процедура ОчиститьДанныеДереваИТабличнойЧасти()
 
 
 	 Объект.ПрочиеПоказатели.Очистить();
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 Дерево.строки.Очистить();
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
 
 КонецПроцедуры // ОчиститьДанныеДереваИТабличнойЧасти()
   
&НаКлиенте
Процедура ВозможностьОтправки()

	 //Элементы.ФормаОтправитьВSQL.Доступность = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусДокументаПрочиеПоказатели.Утвержден");

КонецПроцедуры // ВозможностьОтправки()


&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	 ВозможностьОтправки(); 
	 
КонецПроцедуры

