 
 &НаСервере
 Процедура ПриЧтенииНаСервере(ТекущийОбъект)
 КонецПроцедуры
 
 &НаСервере
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	 
	 ВидимостьДерева = Истина;
	 
	 УстановитьЭлементыФормы();
	 
	 Если Объект.Ссылка.Пустая() Тогда
		 ДобавитьИзменитьСтрокиПоказателейНаСервере();
	 КонецЕсли;
	 
	 Бюджет = Справочники.авБюджеты.НайтиПоКоду(1);
	 ОбновитьВидимостьКоманд();
	 Если ВидимостьДерева Тогда
		 РедактироватьДерево();
	 КонецЕсли;
	 
	 
 КонецПроцедуры  
 
 &НаКлиенте
 Процедура ПриОткрытии(Отказ)
	 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
 КонецПроцедуры
 
 &НаСервере
 Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	 
	 Если Объект.ВидПоказателя.ОснованиеДляЗаполнения = "По ценным бумагам" Тогда
		 Возврат;
	 КонецЕсли;
	 
	 //Если  Объект.ВидПоказателя.РучнойВвод Тогда
	 //    Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 //    ТЗ = Объект.ПрочиеПоказатели.Выгрузить();
	 //    ДеревоВТЧ(Дерево.Строки,ТЗ);
	 //    ТекущийОбъект.ПрочиеПоказатели.Загрузить(ТЗ);
	 //    ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 //КонецЕсли; 
	 
	 Если  ВидимостьДерева Тогда
	     Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	     ТЗ = Объект.ПрочиеПоказатели.Выгрузить();
	     ДеревоВТЧ(Дерево.Строки,ТЗ);
	     ТекущийОбъект.ПрочиеПоказатели.Загрузить(ТЗ);
	     ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 КонецЕсли; 
	 
	 
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура РедактироватьДерево()
	 
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 Дерево.Строки.Очистить();
	 ПересчитатьВсеДерево(Дерево);
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 ОпределитьВидимостьКолонокДерева();
	 
 КонецПроцедуры // РедактироватьДерево()
 
 
 &НаСервере
 Процедура ПересчитатьВсеДерево(дз_стр)
	 
	 Для каждого стр из дз_стр.Строки Цикл
		 
		 Если стр.строки.количество()>0 тогда
			 ПересчитатьВсеДерево(стр);
		 Иначе
			 ПересчетСуммДерева(стр);
		 КонецЕсли;
		 
	 КонецЦикла;
	 
 Конецпроцедуры
 
 Процедура ПересчетСуммДерева(ТекСтрока)
	 
	 Родитель=ТекСтрока.Родитель;
	 Если Родитель=Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 Родитель.Sum                   = Родитель.Строки.Итог("Sum");
	 Родитель.AmountDebt            = Родитель.Строки.Итог("AmountDebt");
	 Родитель.AmountDebtMore100     = Родитель.Строки.Итог("AmountDebtMore100");
	 Родитель.AmountDebtMore500     = Родитель.Строки.Итог("AmountDebtMore500");
	 Родитель.AmountBalance         = Родитель.Строки.Итог("AmountBalance");
	 Родитель.AmountBalancePledge   = Родитель.Строки.Итог("AmountBalancePledge");
	 ПересчетСуммДерева(Родитель);
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ОпределитьВидимостьКолонокДерева()
	 
	 МассивПоказателей = Объект.ПрочиеПоказатели.Выгрузить(,"Показатель");
	 МассивПоказателей.Свернуть("Показатель");
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 ТЗ = Объект.ПрочиеПоказатели.Выгрузить();
	 
	 //ТЗ.ЗаполнитьЗначения(Справочники.авСтатьиБюджетов.ПустаяСсылка(),"BS");	
	 
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = "ВЫБРАТЬ
	 |	INDПрочиеПоказатели.Ссылка КАК Показатель,
	 |	INDПрочиеПоказатели.Родитель КАК Родитель,
	 |	INDПрочиеПоказатели.Код КАК КодПоказателя
	 |ИЗ
	 |	Справочник.авINDПрочиеПоказатели КАК INDПрочиеПоказатели
	 |ГДЕ
	 |	INDПрочиеПоказатели.Ссылка В(&МассивПоказателей)
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	INDПрочиеПоказатели.Код ИЕРАРХИЯ";
	 
	 Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл
		 
		 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("Показатель",Выборка.Родитель));
		 
		 Если НайденныеСтроки.Количество() = 0 Тогда
			 СтрокаДерева = Дерево.Строки.Добавить();
			 ЗаполнитьЗначенияСвойств(СтрокаДерева,Выборка);
		 Иначе
			 Пока СтрокаДерева.Показатель<>Выборка.Родитель Цикл
				 СтрокаДерева=СтрокаДерева.Родитель;
			 КонецЦикла;
			 СтрокаДерева				= СтрокаДерева.Строки.Добавить();
			 ЗаполнитьЗначенияСвойств(СтрокаДерева,Выборка);
		 КонецЕсли;
		 
		 ЗаполнитьСтрокуВДерево(СтрокаДерева,Выборка.КодПоказателя,ТЗ);
		 
	 КонецЦикла;	 
	 ЗаполнитьУровеньДерева(Дерево.Строки);
	 
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 Для Каждого КолонкаДерева Из Дерево.Колонки Цикл
		 Элементы["ДеревоПрочиеПоказатели"+КолонкаДерева.Имя].Видимость = Ложь;
	 КонецЦикла;
	 
	 Для Каждого ВидПоказателя Из Объект.ВидПоказателя.КолонкиПоказателей Цикл
		 Если ВидПоказателя.ИмяКолонки = "BS" Или ВидПоказателя.ИмяКолонки = "TypeMovement" ИЛИ ВидПоказателя.ИмяКолонки = "account" Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Элементы["ДеревоПрочиеПоказатели"+ВидПоказателя.ИмяКолонки].Видимость = Не ВидПоказателя.НеОтображатьВДЗО;
	 КонецЦикла;
	 
 КонецПроцедуры // ОпределитьВидимостьКолонокДерева()
 
 &НаСервере
 Процедура ЗаполнитьСтрокуВДерево(СтрокаДерева,КодПоказателя,ТЗ)
	 
	 ТЗКопия = ТЗ.Скопировать();
	 ТЗКопия.Свернуть("Показатель,BSname,TypeMovementName,AccountName",ОсновноеСуммируемоеПоле);
	 НайденныеСтроки  = ТЗКопия.НайтиСтроки(Новый Структура("Показатель",СтрокаДерева.Показатель));
	 Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		 ЗаполнитьЗначенияСвойств(СтрокаДерева,НайденнаяСтрока);
	 КонецЦикла;
	 
 КонецПроцедуры // 
 
 &НаСервере
 Процедура ЗаполнитьУровеньДерева(СтрокиДерева)
	 
	 Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		 СтрокаДерева.Уровень = СтрокаДерева.Уровень();
		 Если СтрокаДерева.Строки.Количество() Тогда 
			 ЗаполнитьУровеньДерева(СтрокаДерева.Строки);			
		 КонецЕсли;
	 КонецЦикла;
	 
	 
 КонецПроцедуры // ЗаполнитьУровеньДерева()
 
 
 
 &НаСервере
 Процедура УстановитьЭлементыФормы()
	 
	 Если ЗначениеЗаполнено(Объект.ВидПоказателя) Тогда
		 ОчиститьКолонкиПОказателей();
		 КолонкиВида = Объект.ВидПоказателя.КолонкиПоказателей;
		 ОсновноеСуммируемоеПоле = "";
		 Для Каждого  СтрокаКолонки Из КолонкиВида Цикл
			 Если СтрокаКолонки.ИмяКолонки = "КодПоказателя" Или СтрокаКолонки.ИмяКолонки = "Показатель" Тогда
				 Продолжить;
			 КонецЕсли;
			 Если ЗначениеЗаполнено(СтрокаКолонки.ИмяКолонки) Тогда
				 НовыйЭлемент = Элементы.Добавить(СтрокаКолонки.ИмяКолонки,Тип("ПолеФормы"),Элементы.ПрочиеПоказатели);
				 НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				 НовыйЭлемент.Заголовок = СтрокаКолонки.СинонимКолонки;  
				 НовыйЭлемент.ПутьКДанным = "Объект.ПрочиеПоказатели."+СтрокаКолонки.ИмяКолонки;
				 Если СтрокаКолонки.ИмяКолонки = "BS" Тогда
					 ИспользуетСтатьиБюджета = Истина;
					 НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ЭлементBSНачалоВыбора");
					 
				 КонецЕсли;
				 
				 Если СтрокаКолонки.ИспользуетНастройкиСвязей Тогда
					  ОсновноеСуммируемоеПоле = СтрокаКолонки.ИмяКолонки;
				 КонецЕсли;
					  
				 
			 КонецЕсли;
		 КонецЦикла;
	 КонецЕсли;
	 
	 Если Не ЗначениеЗаполнено(ОсновноеСуммируемоеПоле) Тогда
		 ОсновноеСуммируемоеПоле = "Sum";
	 КонецЕсли;
	 
		 
	 
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ДобавитьИзменитьСтрокиПоказателейНаСервере()
	 
	 Объект.ПрочиеПоказатели.Очистить();
	 СтрокиВида = Объект.ВидПоказателя.СтрокиПоказателей;
	 
	 Для Каждого  СтрокаВида Из СтрокиВида Цикл 
		 
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.ВидПоказателя КАК ВидПоказателя,
		 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Показатель КАК Показатель,
		 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи КАК Статья,
		 |	ДополнительныеСведенияПрочихПоказателейСрезПоследних.Статьи.Представление КАК СтатьиПредставление
		 |ИЗ
		 |	РегистрСведений.ДополнительныеСведенияПрочихПоказателей.СрезПоследних(
		 |			&НаДату,
		 |			ВидПоказателя = &ВидПоказателя
		 |				И Показатель = &Показатель) КАК ДополнительныеСведенияПрочихПоказателейСрезПоследних";
		 
		 Запрос.УстановитьПараметр("ВидПоказателя", Объект.ВидПоказателя);
		 Запрос.УстановитьПараметр("НаДату", Объект.КонецПериода);
		 Запрос.УстановитьПараметр("Показатель", СтрокаВида.Показатель);
		 
		 РезультатЗапроса = Запрос.Выполнить();
		 
		 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		 
		 Если ВыборкаДетальныеЗаписи.Количество() И Объект.ВидПоказателя <> Справочники.авВидыПрочихПоказателейMDM.НайтиПоНаименованию("9_Информация по депозитам") Тогда 
			 СтатьиБюджета = ""; 
			 ВидыДвижений  = "";
			 ПланСчетов    = "";
			 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				 Если ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авСтатьиБюджетов") Тогда
					 СтатьиБюджета = СтатьиБюджета + ВыборкаДетальныеЗаписи.СтатьиПредставление + "; ";
				 ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авВидыДвижения") Тогда
					 ВидыДвижений = ВидыДвижений + ВыборкаДетальныеЗаписи.СтатьиПредставление + "; ";
				 ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авВидыДвижения") Тогда
					 ВидыДвижений = ВидыДвижений + ВыборкаДетальныеЗаписи.СтатьиПредставление + "; ";
				 ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авПланСчетов") Тогда
					 ПланСчетов = ПланСчетов + ВыборкаДетальныеЗаписи.СтатьиПредставление + "; ";
				 КонецЕсли;
			 КонецЦикла;
			 Если СокрЛП(СтатьиБюджета) = ";" Тогда
				 СтатьиБюджета = "";
			 КонецЕсли;
			 Если СокрЛП(ВидыДвижений) = ";" Тогда
				 ВидыДвижений = "";
			 КонецЕсли;
			 Если СокрЛП(ПланСчетов) = ";" Тогда
				 ПланСчетов = "";
			 КонецЕсли;
			 
			 ВыборкаДетальныеЗаписи.Сбросить();	
			 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
				 
				 ВидПрочегоПоказателя = Объект.ПрочиеПоказатели.Добавить();
				 ВидПрочегоПоказателя.КодПоказателя = СтрокаВида.КодПоказателя;
				 ВидПрочегоПоказателя.Показатель = СтрокаВида.Показатель;
				 Если ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авСтатьиБюджетов") Тогда
					 ВидПрочегоПоказателя.BS = ВыборкаДетальныеЗаписи.Статья;
				 ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авВидыДвижения") Тогда 
					 ВидПрочегоПоказателя.TypeMovement = ВыборкаДетальныеЗаписи.Статья;
				 ИначеЕсли ТипЗнч(ВыборкаДетальныеЗаписи.Статья) = Тип("СправочникСсылка.авПланСчетов") Тогда 
					 ВидПрочегоПоказателя.account = ВыборкаДетальныеЗаписи.Статья;
				 КонецЕсли;
				 ВидПрочегоПоказателя.AccountName      = ПланСчетов;
				 ВидПрочегоПоказателя.TypeMovementName = ВидыДвижений;
				 ВидПрочегоПоказателя.BSname = СтатьиБюджета;  
				 
			 КонецЦикла; 
		 Иначе
			 ВидПрочегоПоказателя = Объект.ПрочиеПоказатели.Добавить();
			 ВидПрочегоПоказателя.КодПоказателя = СтрокаВида.КодПоказателя;
			 ВидПрочегоПоказателя.Показатель = СтрокаВида.Показатель; 
		 КонецЕсли;
	 КонецЦикла;
	 
 КонецПроцедуры // ДобавитьИзменитьСтрокиПоказателейНаСервере()
 
 
 &НаКлиенте
 Процедура ВидПоказателяПриИзменении(Элемент) 
	 
	 УстановитьЭлементыФормы();
	 ДобавитьИзменитьСтрокиПоказателейНаСервере();
	 РедактироватьДерево();
	 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы()); 
	 ОбновитьВидимостьКоманд(); 
	 
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ОчиститьКолонкиПОказателей()
	 
	 МассивКолонок = Новый Массив;
	 КолонкиВида = Элементы.ПрочиеПоказатели.ПодчиненныеЭлементы;
	 
	 Для Каждого СтрокаКолонки Из КолонкиВида Цикл
		 Если СтрокаКолонки.Имя = "КодПоказателя" Или СтрокаКолонки.Имя = "Показатель" Тогда
			 Продолжить;
		 КонецЕсли;
		 МассивКолонок.Добавить(СтрокаКолонки.Имя);
	 КонецЦикла;
	 
	 Для Каждого  ЭлементМассива Из МассивКолонок Цикл
		 НайденныйЭлемент = Элементы.Найти(ЭлементМассива);
		 Если НайденныйЭлемент <> Неопределено Тогда
			 Элементы.Удалить(НайденныйЭлемент);
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 
	 
 КонецПроцедуры // ОчиститьКолонкиПОказателей()
 
 &НаКлиенте
 Процедура КодПоказателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 // Вставить содержимое обработчика.
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ЭлементBSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 Отбор = Новый Структура("Отбор",НОвый Структура("Владелец",Бюджет ));
	 ОткрытьФорму("Справочник.авБюджеты.ФормаВыбора",Отбор,Элемент);
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 // Вставить содержимое обработчика.
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Отправить(Команда)
	 
	 Если ЕстьНезаполненныеПоля() Тогда
		 Возврат;
	 КонецЕсли;
	 
	 
	 
	 Записать();
	 ОтправитьНаСервере();
 КонецПроцедуры 
 
 
 &НаСервере
 Процедура ОтправитьНаСервере()
	 
	 ТекущийОтбъект = РеквизитФормыВЗначение("Объект");
	 ПрочиеПоказателиВызовСервера.ОтправитьНаСервере(ТекущийОтбъект);
	 
 КонецПроцедуры // ОтправитьНаСервере()
 
 
 
 &НаКлиенте
 Процедура ДеревоПрочиеПоказателиBSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 Отбор = Новый Структура("Отбор",НОвый Структура("Владелец",Бюджет ));
	 ОткрытьФорму("Справочник.авСтатьиБюджетов.ФормаВыбора",Отбор,Элемент);
	 
 КонецПроцедуры
 
 
 
 &НаКлиенте
 Процедура РазвернутьДерево(КоллекцияЭлементовДерева)
	 
	 Для Каждого Строка Из КоллекцияЭлементовДерева Цикл 
		 
		 ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		 Элементы.ДеревоПрочиеПоказатели.Развернуть(ИдентификаторСтроки);
		 ПодчиненныеСтроки = Строка.ПолучитьЭлементы(); 
		 Если ПодчиненныеСтроки.Количество() Тогда
			 РазвернутьДерево(ПодчиненныеСтроки);
		 КонецЕсли;
		 
		 
	 КонецЦикла; 	
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ДеревоПоказателейПриИзменении(Элемент)
	 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ДеревоПрочиеПоказателиПриИзменении(Элемент)
	 ДеревоПрочиеПоказателиПриИзмененииНаСервере();
	 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы());
 КонецПроцедуры
 
 &НаСервере
 Процедура ДеревоПрочиеПоказателиПриИзмененииНаСервере()
	 
	 Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	 ПересчитатьВсеДерево(Дерево);
	 ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
	 
 КонецПроцедуры
 
 
 
 &НаСервере
 Процедура ДеревоВТЧ(СтрокиДерева,ТЗ)
	 
	 Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		 
		 НайденныеСтроки  = ТЗ.НайтиСтроки(Новый Структура("Показатель",СтрокаДерева.Показатель));
		 Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			 ЗаполнитьЗначенияСвойств(НайденнаяСтрока,СтрокаДерева);
		 КонецЦикла;
		 Если СтрокаДерева.Строки.Количество() Тогда
			 
			 ДеревоВТЧ(СтрокаДерева.Строки,ТЗ);
			 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 
 КонецПроцедуры // ДеревоВТЧ()
 
 
 #Область ПроверочныеКоманды
 &НаСервере
 Процедура ЗаполнитьПоСтатьямБюджета() 
	 
	 //Документы.авПрочиеПоказателиMDM.ЗаполнитьПоСтатьямБюджета(Объект);
	 //
	 //Возврат;
	 
	 Прокси = авУправлениеЭталоннымиСправочникамиСервер.ПолучитьПроксиEtalonRefSyncEx();
	 ArrayAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("ArrayAccountsQuery"); 
	 ArrayAccountsQuery.TypesOfOtherIndicator = Объект.ВидПоказателя.GUID;
	 ПрочиеПоказатели = Объект.ПрочиеПоказатели;
	 Для Каждого Показатель Из ПрочиеПоказатели Цикл 
		 Если ЗначениеЗаполнено(Показатель.BS) Тогда
			 LineAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("LineAccountsQuery"); 
			 LineAccountsQuery.ReferenceName         = "СтатьиБюджетов";
			 LineAccountsQuery.ReferenceGUID         = Показатель.BS.GUID; 
			 //LineAccountsQuery.ReferenceName         = "INDПрочиеПоказатели";
			 LineAccountsQuery.OtherIndicators         = Показатель.Показатель.GUID;
			 ArrayAccountsQuery.LineAccountsQuery.Добавить(LineAccountsQuery);
		 КонецЕсли;
	 КонецЦикла; 
	 
	 Если НЕ ArrayAccountsQuery.LineAccountsQuery.Количество() Тогда
		 Возврат;
	 КонецЕсли;
	 
	 
	 Ответ = Прокси.BudgeIitemAccounts(ArrayAccountsQuery);
	 
	 Таблица = ПрочиеПоказателиВызовСервера.ПолучитьИсполняемуюТаблицу(); 
	 
	 Для Каждого Строка Из Ответ.LineAccountsResponse Цикл 
		 
		 ПрочийПоказатель         = Справочники.авINDПрочиеПоказатели.НайтиПоРеквизиту("GUID",Строка.OtherIndicators);
		 СтатьяБюджетаДляИтогов   = Справочники.авСтатьиБюджетов.НайтиПоРеквизиту("GUID",Строка.ParentGUID);
		 СтатьяБюджетаРасшифровка = Справочники.авСтатьиБюджетов.НайтиПоРеквизиту("GUID",Строка.ReferenceGUID);
		 МассивСтрокСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка.Accounts,",");
		 СписокАктивов = Новый СписокЗначений;
		 КлассификаторОсновныхФондов = Справочники.КлассификаторОсновныхФондов.ПустаяСсылка();
		 Если ЗначениеЗаполнено(Строка.CodeFAC) Тогда
			 КлассификаторОсновныхФондов = Справочники.КлассификаторОсновныхФондов.НайтиПоРеквизиту("КодКОФ",Строка.CodeFAC);
			 СписокАктивов = ПолучитьСписокАктивов(КлассификаторОсновныхФондов);
		 КонецЕсли;  
		 
		 
		 Для Каждого СтрокаМассива Из МассивСтрокСчетов Цикл
			 СтрокаМассива = СокрЛП(СтрокаМассива);
			 Если Не ЗначениеЗаполнено(СтрокаМассива) Тогда
				 Продолжить;
			 КонецЕсли; 
			 
			 
			   ЗаполнитьСчета(Таблица,СтрокаМассива,ПрочийПоказатель,СтатьяБюджетаДляИтогов);
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 ////////СтрокаТЗ       = Таблица.Добавить();
			 ////////СтрокаТЗ.СчетЭталон           = Справочники.авПланСчетов.НайтиПоКоду(СтрокаМассива); 
			 ////////СтрокаТЗ.Счет                 = ПланыСчетов.Типовой.НайтиПоКоду(СтрокаМассива); 
			 ////////Если ЗначениеЗаполнено(СтрокаТЗ.Счет) И ЗначениеЗаполнено(СтрокаТЗ.СчетЭталон) Тогда
			 ////////    КомпоновщикНастроекОтбор = ПолучитьДополнительныеНастройкиСчета(СтрокаТЗ.СчетЭталон,СтрокаТЗ.Счет ); 
			 ////////    Если ТипЗнч(КомпоновщикНастроекОтбор) = Тип("ХранилищеЗначения") Тогда 
			 ////////   	 Компоновщик                            = КомпоновщикНастроекОтбор.Получить();
			 ////////   	 СтрокаТЗ.КоличествоНастроек            = Компоновщик.Отбор.Элементы.Количество();
			 ////////   	 СтрокаТЗ.ЕстьУсловияПоСчету            = СтрокаТЗ.КоличествоНастроек>0;
			 ////////   	 СтрокаТЗ.КомпоновщикНастроекОтбор      = КомпоновщикНастроекОтбор; 
			 ////////    КонецЕсли;
			 ////////КонецЕсли;  
			 
			 
			 
			// Если ЗначениеЗаполнено(Строка.CodeFAC) Тогда
			//	 СтрокаТЗ.КлассификаторОсновныхФондов          = КлассификаторОсновныхФондов;
			// КонецЕсли;
			// СтрокаТЗ.СписокАктивов = СписокАктивов;
			// 
			//НоменклатурныеГруппы = ПолучитьНоменклатурныеГруппы(ПрочийПоказатель); 
			// 
			// СтрокаТЗ.НоменклатурныеГруппы                 = НоменклатурныеГруппы;
			// СтрокаТЗ.СтатьяРасшифровка                    = СтатьяБюджетаРасшифровка;
			// СтрокаТЗ.ПрочийПоказатель                     = ПрочийПоказатель;
			// СтрокаТЗ.СтатьяДляИтогов                      = СтатьяБюджетаДляИтогов;
			 
		 КонецЦикла;
		 
		 
	 КонецЦикла; 
	 
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 
		 Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			 Продолжить;
		 КонецЕсли; 
		 
		 Если ЗначениеЗаполнено(СтрокаТаблицы.КлассификаторОсновныхФондов) И СтрокаТаблицы.СписокАктивов.Количество() = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 
		 Если СтрокаТаблицы.ЕстьУсловияПоСчету Или СтрокаТаблицы.НоменклатурныеГруппы.Количество() 
			 Или СтрокаТаблицы.СписокАктивов.Количество() 
			 Тогда 
			 ПолучитьОcтаткиПоУсловию(СтрокаТаблицы);
			 
			 //ПолучитьОстаткиБезУсловия(СтрокаТаблицы.Счет,СтрокаТаблицы);
		 Иначе 
			 ПолучитьОстаткиБезУсловия(СтрокаТаблицы.Счет,СтрокаТаблицы);
			 
			 //ПолучитьОcтаткиПоУсловию(СтрокаТаблицы);
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 
	 Таблица.Свернуть("СтатьяДляИтогов","Сумма"); 
	 Для Каждого СтрокаТЗ Из Таблица Цикл 
		 
		 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("BS", СтрокаТЗ.СтатьяДляИтогов));
		 Для Каждого нСтрока Из НайденныеСтроки Цикл 
			 нСтрока[ОсновноеСуммируемоеПоле] =нСтрока[ОсновноеСуммируемоеПоле] +СтрокаТЗ.Сумма;
		 КонецЦикла;
		 
	 КонецЦикла; 
	 
	 
	 //РедактироватьДерево();
	 
 КонецПроцедуры 
 
 
 Процедура ЗаполнитьСчета(Таблица,КодЭталонногоСчета,ПрочийПоказатель,СтатьяБюджетаДляИтогов)   
	 
	 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	авНастройкаПланаСчетов.ИсточникДанных КАК ИсточникДанных,
			|	авНастройкаПланаСчетов.ПредставлениеОтбора КАК ПредставлениеОтбора,
			|	авНастройкаПланаСчетов.ЭталонныйСчет КАК ЭталонныйСчет
			|ИЗ
			|	Справочник.авНастройкаПланаСчетов КАК авНастройкаПланаСчетов
			|ГДЕ
			|	авНастройкаПланаСчетов.ЭталонныйСчет.Код = &Код";
			
			Запрос.УстановитьПараметр("Код", КодЭталонногоСчета);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникДанных) Тогда
					
					СтрокаТЗ = Таблица.Добавить();
					СтрокаТЗ.Счет = ВыборкаДетальныеЗаписи.ИсточникДанных;
					СтрокаТЗ.СчетЭталон = ВыборкаДетальныеЗаписи.ЭталонныйСчет;
					СтрокаТЗ.ЕстьУсловияПоСчету = ЗначениеЗаполнено(СокрЛП(ВыборкаДетальныеЗаписи.ПредставлениеОтбора));  
					СтрокаТЗ.ПрочийПоказатель  = ПрочийПоказатель;
					СтрокаТЗ.СтатьяДляИтогов  = СтатьяБюджетаДляИтогов;  
					//Если СтрокаТЗ.ЕстьУсловияПоСчету Тогда 
					//	Структура = Новый Структура;
					//	Структура.Вставить("Счет",СтрокаТЗ.Счет);
					//	Структура.Вставить("СчетЭталон",СтрокаТЗ.СчетЭталон);
					//	МассивСчетовСУсловием.Добавить(Структура);
					//Иначе   
					//	МассивСчетовБезУсловия.Добавить(СтрокаТЗ.Счет);
					//КонецЕсли;
					
				КонецЕсли;
				
				
				
			КонецЦикла;
 
 КонецПроцедуры
 
 
  &НаСервере
 Функция ПолучитьДополнительныеНастройкиСчета(ЭталонныйСчет,Счет)
 
	 Запрос = Новый Запрос();
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	НастройкаЭталоногоПланаСчетов.КомпоновщикНастроекОтбор КАК КомпоновщикНастроек
	 |ИЗ
	 |	Справочник.авНастройкаПланаСчетов КАК НастройкаЭталоногоПланаСчетов
	 |ГДЕ
	 |	НЕ НастройкаЭталоногоПланаСчетов.ПометкаУдаления
	 |	И НастройкаЭталоногоПланаСчетов.ЭталонныйСчет = &ЭталонныйСчет
	 |	И НастройкаЭталоногоПланаСчетов.ИсточникДанных = &Счет";
	 Запрос.УстановитьПараметр("ЭталонныйСчет",ЭталонныйСчет);  //1720 
	 Запрос.УстановитьПараметр("Счет",Счет);  //1720 
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 Возврат Выборка.КомпоновщикНастроек; 
	 Иначе
		 Возврат Неопределено;
	 КонецЕсли;
	 
 
 КонецФункции // ПолучитьДополнительныеНастройуиСчета()
 
  &НаСервере
 Функция ПолучитьНоменклатурныеГруппы(ПрочийПоказатель)
 

	СписокНГ = НОвый СписокЗначений; 
	
	Если Не ЗначениеЗаполнено(ПрочийПоказатель) Тогда
		Возврат СписокНГ;
	КонецЕсли;
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	авМаппингЭталонныхСправочников.Статья КАК Статья,
		|	авМаппингЭталонныхСправочников.ПрочиеПоказатели КАК ПрочиеПоказатели
		|ИЗ
		|	РегистрСведений.авМаппингЭталонныхСправочников КАК авМаппингЭталонныхСправочников
		|ГДЕ
		|	авМаппингЭталонныхСправочников.ПрочиеПоказатели = &Показатель
		|	И авМаппингЭталонныхСправочников.Статья ССЫЛКА Справочник.НоменклатурныеГруппы";
	
	Запрос.УстановитьПараметр("Показатель", ПрочийПоказатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокНГ.Добавить(ВыборкаДетальныеЗаписи.Статья);
	КонецЦикла;
	
	Возврат СписокНГ;
 
 КонецФункции // ПолучитьНоменклатурныеГруппы()
 
 
 &НаСервере
 Функция ПолучитьСписокАктивов(CodeFAC)
	 
	 СписокАктивов = Новый СписокЗначений;
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ОсновныеСредства.Ссылка КАК Ссылка
	 |ИЗ
	 |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	 |ГДЕ
	 |	ОсновныеСредства.КодКОФ = &КодКОФ
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ОсновныеСредства.Ссылка
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	БиологическиеАктивы.Ссылка
	 |ИЗ
	 |	Справочник.БиологическиеАктивы КАК БиологическиеАктивы
	 |ГДЕ
	 |	БиологическиеАктивы.КодКОФ = &КодКОФ
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	БиологическиеАктивы.Ссылка
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	НематериальныеАктивы.Ссылка
	 |ИЗ
	 |	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	 |ГДЕ
	 |	НематериальныеАктивы.КодКОФ = &КодКОФ
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	НематериальныеАктивы.Ссылка";
	 
	 Запрос.УстановитьПараметр("КодКОФ", CodeFAC);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		 
		 СписокАктивов.Добавить(ВыборкаДетальныеЗаписи.ссылка);
		 
	 КонецЦикла; 
	 
	 Возврат СписокАктивов;
	 
 КонецФункции // ПолучитьСписокАктивов()
 
 
 &НаСервере
 Процедура ЗаполнитьПоВидамДвижения() 
	 
	 
	 Прокси = авУправлениеЭталоннымиСправочникамиСервер.ПолучитьПроксиEtalonRefSyncEx();
	 ArrayAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("ArrayAccountsQuery"); 
	 ArrayAccountsQuery.TypesOfOtherIndicator = Объект.ВидПоказателя.GUID;
	 ПрочиеПоказатели = Объект.ПрочиеПоказатели;
	 Для Каждого Показатель Из ПрочиеПоказатели Цикл 
		 Если ЗначениеЗаполнено(Показатель.TypeMovement) Тогда
			 LineAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("LineAccountsQuery"); 
			 LineAccountsQuery.ReferenceName     = "ВидыДвижения";
			 LineAccountsQuery.ReferenceGUID     = Показатель.TypeMovement.GUID;
			 LineAccountsQuery.OtherIndicators   = Показатель.Показатель.GUID;
			 ArrayAccountsQuery.LineAccountsQuery.Добавить(LineAccountsQuery);
		 КонецЕсли;
	 КонецЦикла; 
	 
	 
	 Если НЕ ArrayAccountsQuery.LineAccountsQuery.Количество() Тогда
		 Возврат;
	 КонецЕсли;
	 
	 
	 
	 Ответ = Прокси.BudgeIitemAccounts(ArrayAccountsQuery);
	 
	 
	 Таблица = ПрочиеПоказателиВызовСервера.ПолучитьИсполняемуюТаблицу(); 
	 
	 
	 Для Каждого Строка Из Ответ.LineAccountsResponse Цикл
		 
		 СчетЭталон                = Справочники.авПланСчетов.НайтиПоРеквизиту("GUID",Строка.Accounts); 
		 
		 ТаблицаПланаСчетов =  ПрочиеПоказателиВызовСервера.ПолучитьНастройкиПланаСчетовПоЭталонномуСчету(СчетЭталон);
		 
		 Для Каждого НастройкиСчета Из ТаблицаПланаСчетов Цикл 
			 
			 СтрокаТЗ       = Таблица.Добавить();
			 
			 СтрокаТЗ.СтатьяДляИтогов           = Справочники.авВидыДвижения.НайтиПоРеквизиту("GUID",Строка.ParentGUID);
			 СтрокаТЗ.СтатьяРасшифровка         = Справочники.авВидыДвижения.НайтиПоРеквизиту("GUID",Строка.ReferenceGUID);
			 СтрокаТЗ.СчетЭталон                = СчетЭталон;
			 //НастройкиСчета                     = Справочники.авНастройкаПланаСчетов.НайтиПоРеквизиту("ЭталонныйСчет",СтрокаТЗ.СчетЭталон); 
			 //Если ЗначениеЗаполнено(НастройкиСчета) Тогда 
				 ОтборПоСчету = НастройкиСчета.КомпоновщикНастроекОтбор.Получить();
				 СтрокаТЗ.Счет                          = НастройкиСчета.ИсточникДанных;
				 Если ОтборПоСчету <> Неопределено И ОтборПоСчету.Отбор.Элементы.Количество() Тогда
					 СтрокаТЗ.ЕстьУсловияПоСчету            = Истина;
				 Иначе
					 СтрокаТЗ.ЕстьУсловияПоСчету            = Ложь;
				 КонецЕсли;
				 СтрокаТЗ.КомпоновщикНастроекОтбор           = НастройкиСчета.КомпоновщикНастроекОтбор;
			 //КонецЕсли;
			 
			 СтрокаТЗ.КорСчетЭталон        = Справочники.авПланСчетов.НайтиПоРеквизиту("GUID",Строка.CorrAccounts);
			 НастройкиКорСчета             = Справочники.авНастройкаПланаСчетов.НайтиПоРеквизиту("ЭталонныйСчет",СтрокаТЗ.КорСчетЭталон);
			 Если ЗначениеЗаполнено(НастройкиКорСчета) Тогда
				 СтрокаТЗ.КорСчет                   = НастройкиКорСчета.ИсточникДанных;
				 СтрокаТЗ.ЕстьУсловияПоКорСчету     = ЗначениеЗаполнено(НастройкиКорСчета.ПредставлениеОтбора); 
			 Иначе
				 СтрокаТЗ.КорСчет                   = ПланыСчетов.Типовой.ПустаяСсылка();
				 СтрокаТЗ.ЕстьУсловияПоКорСчету     = Ложь; 
			 КонецЕсли;
			 
			 
			 СтрокаТЗ.ТипДвижения          = Строка.MovementType;
		 КонецЦикла;
		 
	 КонецЦикла;  
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 Если ЗначениеЗаполнено(СтрокаТаблицы.Счет) И ЗначениеЗаполнено(СтрокаТаблицы.КорСчет) Тогда
			 Если СтрокаТаблицы.ЕстьУсловияПоСчету ИЛИ СтрокаТаблицы.ЕстьУсловияПоКорСчету Тогда
				 ПолучитьОборотыПоУсловию(СтрокаТаблицы);
			 Иначе
				 //ПолучитьОборотыПоУсловию(СтрокаТаблицы);
				 ПолучитьОборотыБезУсловия(СтрокаТаблицы);
			 КонецЕсли; 
		 КонецЕсли;
	 КонецЦикла;
	 
	 Таблица.Свернуть("СтатьяДляИтогов","Сумма"); 
	 Для Каждого СтрокаТЗ Из Таблица Цикл 
		 
		 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("TypeMovement", СтрокаТЗ.СтатьяДляИтогов));
		 Для Каждого нСтрока Из НайденныеСтроки Цикл 
			 нСтрока.Sum = СтрокаТЗ.Сумма;
		 КонецЦикла;
		 
	 КонецЦикла; 
	 
	 
	 
	 
 КонецПроцедуры // ЗаполнитьПоВидамДвижения() 
 

 &НаСервере
 Процедура ЗаполнитьПоСчетам()
 
	 
	 Прокси = авУправлениеЭталоннымиСправочникамиСервер.ПолучитьПроксиEtalonRefSyncEx();
	 ArrayAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("ArrayAccountsQuery"); 
	 ArrayAccountsQuery.TypesOfOtherIndicator = Объект.ВидПоказателя.GUID;
	 ПрочиеПоказатели = Объект.ПрочиеПоказатели;
	 Для Каждого Показатель Из ПрочиеПоказатели Цикл 
		 Если ЗначениеЗаполнено(Показатель.account) Тогда
			 LineAccountsQuery = ИнтеграцияДЗО.ПолучитьXDTO("LineAccountsQuery"); 
			 LineAccountsQuery.ReferenceName         = "ПланСчетов";
			 LineAccountsQuery.ReferenceGUID         = Показатель.account.GUID; 
			 LineAccountsQuery.OtherIndicators         = Показатель.Показатель.GUID;
			 ArrayAccountsQuery.LineAccountsQuery.Добавить(LineAccountsQuery);
		 КонецЕсли;
	 КонецЦикла;
	 
	 Если НЕ ArrayAccountsQuery.LineAccountsQuery.Количество() Тогда
		 Возврат;
	 КонецЕсли;
	 
	 
	 Ответ = Прокси.BudgeIitemAccounts(ArrayAccountsQuery);
	 
	 
	 Таблица = ПрочиеПоказателиВызовСервера.ПолучитьИсполняемуюТаблицу(); 
	 
	 Для Каждого Строка Из Ответ.LineAccountsResponse Цикл  
		 
		 
		 СчетЭталон                = Справочники.авПланСчетов.НайтиПоРеквизиту("GUID",Строка.Accounts); 
		 
		 ТаблицаПланаСчетов =  ПрочиеПоказателиВызовСервера.ПолучитьНастройкиПланаСчетовПоЭталонномуСчету(СчетЭталон);
		 Для Каждого НастройкиСчета Из ТаблицаПланаСчетов Цикл 
			 
			 СтрокаТЗ       = Таблица.Добавить();
			 СтрокаТЗ.СчетЭталон                = СчетЭталон; 
			 ОтборПоСчету = НастройкиСчета.КомпоновщикНастроекОтбор.Получить();
			 СтрокаТЗ.Счет                          = НастройкиСчета.ИсточникДанных;
			 Если ОтборПоСчету <> Неопределено И ОтборПоСчету.Отбор.Элементы.Количество() Тогда
				 СтрокаТЗ.ЕстьУсловияПоСчету            = Истина;
			 Иначе
				 СтрокаТЗ.ЕстьУсловияПоСчету            = Ложь;
			 КонецЕсли;
			 СтрокаТЗ.КомпоновщикНастроекОтбор           = НастройкиСчета.КомпоновщикНастроекОтбор;
			 СтрокаТЗ.ТипДвижения          = Строка.MovementType;
		 КонецЦикла;
	 КонецЦикла; 
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 
		 Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			 Продолжить;
		 КонецЕсли; 
		 
		 ТипДвижения =  Лев(СтрокаТаблицы.ТипДвижения,6);
		 
		 Если ТипДвижения = "Оборот"  Тогда 
			 ПолучитьОборотыПоУсловию2(СтрокаТаблицы);
		 Иначе
			 ПолучитьОcтаткиПоУсловию(СтрокаТаблицы);
		 КонецЕсли;
	 КонецЦикла;
	 
	 Таблица.Свернуть("СчетЭталон","Сумма"); 
	 Для Каждого СтрокаТЗ Из Таблица Цикл 
		 
		 НайденныеСтроки = Объект.ПрочиеПоказатели.НайтиСтроки(Новый Структура("account", СтрокаТЗ.СчетЭталон));
		 Для Каждого нСтрока Из НайденныеСтроки Цикл 
			 нСтрока.Sum =нСтрока.Sum +СтрокаТЗ.Сумма;
		 КонецЦикла;
		 
	 КонецЦикла; 
 
 КонецПроцедуры // ЗаполнитьПоСчетам()
 
 
 &НаСервере
 Процедура ПолучитьОборотыБезУсловия(СтрокаТз)
	 
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ТиповойОбороты.Счет КАК Счет,
	 |	ТиповойОбороты.КорСчет КАК КорСчет,
	 |	СУММА(ТиповойОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	 |	СУММА(ТиповойОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	 |	СУММА(ТиповойОбороты.СуммаОборот) КАК СуммаОборот
	 |ИЗ
	 |	РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&Счет), , Организация = &Организация, КорСчет = &КорСчет, ) КАК ТиповойОбороты
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТиповойОбороты.КорСчет,
	 |	ТиповойОбороты.Счет";
	 
	 Если Не ЗначениеЗаполнено(СтрокаТз.КорСчет) Тогда  
		 
		 Запрос.Текст = СтрЗаменить(Запрос.Текст,"КорСчет = &КорСчет","");
		 
	 КонецЕсли;
	 
	 
	 Запрос.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	 Запрос.УстановитьПараметр("КорСчет", СтрокаТз.КорСчет);
	 Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	 Запрос.УстановитьПараметр("Счет", СтрокаТз.Счет);
	 Запрос.УстановитьПараметр("Организация", Объект.Организация);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		 Если СтрокаТз.ТипДвижения = "Оборот Кт" Тогда 
			 СтрокаТз.Сумма =  ВыборкаДетальныеЗаписи.СуммаОборотКт;
		 ИначеЕсли СтрокаТз.ТипДвижения = "Оборот Дт" Тогда   
			 СтрокаТз.Сумма =  ВыборкаДетальныеЗаписи.СуммаОборотДт;
		 Иначе    
			 СтрокаТз.Сумма =  ВыборкаДетальныеЗаписи.СуммаОборот;
		 КонецЕсли;
	 КонецЦикла;
	 
	 
	 
 КонецПроцедуры // ПолучитьОбороты()
 
 &НаСервере
 Процедура ПолучитьОборотыПоУсловию(СтрокаТз)  
	 
	 

	 СохраненныйКомпоновщикНастроек = СтрокаТз.КомпоновщикНастроекОтбор.Получить();
	 Если ТипЗнч(СохраненныйКомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда 
		 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 Иначе
		 ОтборНастройки = Неопределено;
	 КонецЕсли;
	 
	 
	 
	 
	 //Возврат;
	 
	 СКД_Обороты = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Обороты");
	 НастройкиОСКД = СКД_Обороты.НастройкиПоУмолчанию;
	 ПараметрыДанныхОСКД = СКД_Обороты.Параметры; 
	 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 ТЗ1 = Новый ТаблицаЗначений;
	 Если ОтборНастройки <> Неопределено И ОтборНастройки.Элементы.Количество() >0 Тогда
		 
		 Для каждого ЭлементОтбора Из ОтборНастройки.Элементы Цикл
			 Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение));
				 НовыйЭлементОтбора.Использование 	= Истина;
				 НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
				 НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
			 КонецЕсли;	
		 КонецЦикла;
		 
	 КонецЕсли;
	 
	 НачалоПериода = НастройкиОСКД.ПараметрыДанных.Элементы.Найти("Начало");
	 Если  НачалоПериода = Неопределено Тогда 
	     НачалоПериода  = НастройкиОСКД.ПараметрыДанных.Элементы.Добавить();
	 //    НачалоПериода.Имя = "Начало";
	 //    НачалоПериода.ТипЗначения = Новый ОписаниеТипов("Дата");
	 //    НачалоПериода.ОграничениеИспользования = Ложь;
	 //    НачалоПериода.Значение = Объект.НачалоПериода;
	 //    НачалоПериода.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
	 //Иначе 
	 НачалоПериода.Использование = Истина;
		 НачалоПериода.Значение = Объект.НачалоПериода;  
		 
	 КонецЕсли; 
	 
	 
	 
	 
	 
	 
	 //ЭлементКонецПериода = НастройкиОСКД.ПараметрыДанных.Элементы.Найти("КонецПериода");
	 //ЭлементКонецПериода.Значение = КонецДня(Объект.КонецПериода); 
	 //ЭлементКонецПериода.Использование = Истина;
	 
	 КонецПериода = НастройкиОСКД.ПараметрыДанных.Элементы.Найти("Окончание");
	 Если  КонецПериода = Неопределено Тогда 
	     КонецПериода  = НастройкиОСКД.ПараметрыДанных.Элементы.Добавить();
	 //    КонецПериода.Имя = "Окончание";
	 //    КонецПериода.ТипЗначения = Новый ОписаниеТипов("Дата");
	 //    КонецПериода.ОграничениеИспользования = Ложь;
	 //    КонецПериода.Значение = Объект.НачалоПериода;
	 //    КонецПериода.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
	 //Иначе  
	 КонецПериода.Использование = Истина;
		 КонецПериода.Значение = Объект.КонецПериода; 
	 Иначе
		 
	 КонецПериода.Использование = Истина;
		 КонецПериода.Значение = Объект.КонецПериода; 
	 КонецЕсли; 
	 
	 
	 
	 
	 ЭлементСчет = НастройкиОСКД.ПараметрыДанных.Элементы.Найти("Счет"); 
	 
	 Если  ЭлементСчет = Неопределено Тогда 
		 ЭлементСчет  = НастройкиОСКД.ПараметрыДанных.Элементы.Добавить();
		 
		 ЭлементСчет.Значение = СтрокаТз.Счет;
		 ЭлементСчет.Использование = Истина; 
		 
	 Иначе
		 ЭлементСчет.Значение = СтрокаТз.Счет;
		 ЭлементСчет.Использование = Истина; 
		 
	 КонецЕсли;
	 
	 //ЭлементКорСчет = ПараметрыДанныхОСКД.Найти("КорСчет");
	 //Если ЗначениеЗаполнено(СтрокаТз.КорСчет) Тогда
	 //    ЭлементСчет.Значение = СтрокаТз.КорСчет;
	 //Иначе 
	 //    ПараметрыДанныхОСКД.Удалить(ЭлементКорСчет);
	 //КонецЕсли;
 
	 
	 Организация = НастройкиОСКД.ПараметрыДанных.Элементы.Найти("Организация");
	 Если  Организация = Неопределено Тогда 
	     Организация  = НастройкиОСКД.ПараметрыДанных.Элементы.Добавить(); 
		 
		 Организация.Значение = Объект.Организация; 
		 Организация.Использование = Истина;
		 
	 Иначе
		 
	 //    Организация.Имя = "Организация";
	 //    Организация.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	 //    Организация.ОграничениеИспользования = Ложь;
	 //    Организация.Значение = Объект.Организация;
	 //    Организация.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
	 //Иначе
		 Организация.Значение = Объект.Организация; 
		 Организация.Использование = Истина;
		 
	 КонецЕсли; 
	 
	 КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	 Макет = КомпоновщикМакетаОСКД.Выполнить(СКД_Обороты, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	 
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 ПроцессорВывода.УстановитьОбъект(ТЗ1);
	 ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД); 
	 Если ТЗ1.Количество() Тогда 
		 ТЗ1.Свернуть(,"СуммаОборотКт,СуммаОборотДт,СуммаОборот");
		 
		 Если СтрокаТз.ТипДвижения = "Оборот Кт" Тогда 
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотКт;
		 ИначеЕсли СтрокаТз.ТипДвижения = "Оборот Дт" Тогда   
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотДт;
		 Иначе    
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборот;
		 КонецЕсли;
	 КонецЕсли;
	 
	 
	 
	 
 КонецПроцедуры // ПолучитьОборотыПоУсловию()
 
 &НаСервере
 Процедура ПолучитьОборотыПоУсловию2(СтрокаТз)  
	 
	 

	 СохраненныйКомпоновщикНастроек = СтрокаТз.КомпоновщикНастроекОтбор.Получить();
	 Если ТипЗнч(СохраненныйКомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда 
		 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 Иначе
		 ОтборНастройки = Неопределено;
	 КонецЕсли;
	 
	 
	 
	 
	 //Возврат;
	 
	 СКД_Обороты = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Обороты"); 
	 КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	 КомпоновщикНастроек.ЗагрузитьНастройки(СКД_Обороты.НастройкиПоУмолчанию);
	 //Настройки
	Настройки = КомпоновщикНастроек.ПолучитьНастройки(); 
	 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 ТЗ1 = Новый ТаблицаЗначений;
	 Если ОтборНастройки <> Неопределено И ОтборНастройки.Элементы.Количество() >0 Тогда
	     
	     Для каждого ЭлементОтбора Из ОтборНастройки.Элементы Цикл
	    	 Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
	    		 НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    		 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение));
	    		 НовыйЭлементОтбора.Использование 	= Истина;
	    		 НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
	    		 НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
	    	 КонецЕсли;	
	     КонецЦикла;
	     
	 КонецЕсли;
	 
	 НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("Организация");
	 НовыйЭлементОтбора.Использование 	= Истина;
	 НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	 НовыйЭлементОтбора.ПравоеЗначение 	= Объект.Организация; 
	 
	 
	Счет = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Счет")); 
	Если Счет = Неопределено Тогда 
		
		 Счет  = Настройки.ПараметрыДанных.Элементы.Добавить();
		 
		 Счет.Значение = СтрокаТз.Счет;
		 Счет.Использование = Истина; 
		
	Иначе
		
		Счет.Значение =  СтрокаТз.Счет; 
		Счет.Использование = Истина;
	КонецЕсли;
	Окончание = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Окончание"));
	Если Окончание= Неопределено Тогда  
		Окончание  = Настройки.ПараметрыДанных.Элементы.Добавить();
		
		Окончание.Значение =  ТекущаяДата(); 
		Окончание.Использование = Истина; 
	Иначе
		
		Окончание.Значение = ТекущаяДата(); 
		Окончание.Использование = Истина; 
	КонецЕсли; 
	
	КорСчет = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КорСчет"));
	
	Если  ЗначениеЗаполнено(СтрокаТз.КорСчет) Тогда 
		КорСчет  = Настройки.ПараметрыДанных.Элементы.Добавить();
		КорСчет.Значение = СтрокаТз.КорСчет; 
		КорСчет.Использование = Истина; 
		
	КонецЕсли;
	
	
	//
	//Если КорСчет= Неопределено Тогда  
	//	КорСчет  = Настройки.ПараметрыДанных.Элементы.Добавить();
	//	КорСчет.Значение =  ТекущаяДата(); 
	//	КорСчет.Использование = ЗначениеЗаполнено(СтрокаТз.КорСчет); 
	//Иначе
	//	КорСчет.Значение = ТекущаяДата(); 
	//	КорСчет.Использование = ЗначениеЗаполнено(СтрокаТз.КорСчет); 
	//КонецЕсли; 
	//СКД_Обороты.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти(
	//СКД_Обороты.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Удалить(НОвый ПараметрКомпоновкиДанных("КорСчет"));
	
	 
	 КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	 Макет = КомпоновщикМакетаОСКД.Выполнить(СКД_Обороты, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
	 
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 ПроцессорВывода.УстановитьОбъект(ТЗ1);
	 ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД); 
	 Если ТЗ1.Количество() Тогда 
		 ТЗ1.Свернуть(,"СуммаОборотКт,СуммаОборотДт,СуммаОборот");
		 
		 Если СтрокаТз.ТипДвижения = "Оборот Кт" Тогда 
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотКт;
		 ИначеЕсли СтрокаТз.ТипДвижения = "Оборот Дт" Тогда   
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборотДт;
		 Иначе    
			 СтрокаТз.Сумма =  ТЗ1[0].СуммаОборот;
		 КонецЕсли;
	 КонецЕсли;
	 
	 
	 
	 
 КонецПроцедуры // ПолучитьОборотыПоУсловию()
 
 

 
 
 &НаСервере
 Процедура ПолучитьОcтаткиПоУсловию(СтрокаТаблицы) Экспорт
	 
		 
	 СохраненныйКомпоновщикНастроек = СтрокаТаблицы.КомпоновщикНастроекОтбор.Получить();
	 Если ТипЗнч(СохраненныйКомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда 
		 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
	 Иначе
		 ОтборНастройки = Неопределено;
	 КонецЕсли;
			 
		 ОСКД = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Остатки");
		 ПараметрыДанныхОСКД = ОСКД.Параметры;
		 
		 НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
		 ТЗ1 = Новый ТаблицаЗначений;
		 Если ОтборНастройки <> Неопределено И ОтборНастройки.Элементы.Количество() >0 Тогда
			 
			 Для каждого ЭлементОтбора Из ОтборНастройки.Элементы Цикл
				 Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение));
					 НовыйЭлементОтбора.Использование 	= Истина;
					 НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
					 НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
				 КонецЕсли;	
			 КонецЦикла;
			 
		 КонецЕсли; 
		 Если СтрокаТаблицы.СписокАктивов.Количество() Тогда
		     
		     НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		     НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("Субконто1");
		     НовыйЭлементОтбора.Использование 	= Истина;
		     НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		     НовыйЭлементОтбора.ПравоеЗначение 	= СтрокаТаблицы.СписокАктивов; 
		     
		     
		 КонецЕсли; 
		 
		 Если СтрокаТаблицы.НоменклатурныеГруппы.Количество() Тогда 
			 
			 
		     НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		     НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных("Субконто1");
		     НовыйЭлементОтбора.Использование 	= Истина;
		     НовыйЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		     НовыйЭлементОтбора.ПравоеЗначение 	= СтрокаТаблицы.НоменклатурныеГруппы; 
			 
		 
		 КонецЕсли;
		 
		 ПараметрыДанныхОСКД = ОСКД.Параметры;
		 
		 
		 ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("КонецПериода");
		 ЭлементКонецПериода.Значение = КонецДня(Объект.КонецПериода);
		 
		 
		 ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет");
		 ЭлементСчет.Значение = СтрокаТаблицы.Счет;
		 
		 Организация = ПараметрыДанныхОСКД.Найти("Организация");
		 Если  Организация = Неопределено Тогда 
			 Организация  = ПараметрыДанныхОСКД.Добавить();
			 Организация.Имя = "Организация";
			 Организация.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
			 Организация.ОграничениеИспользования = Ложь;
			 Организация.Значение = Объект.Организация;
			 Организация.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
			 
			 пОрганизация = НастройкиОСКД.ПараметрыДанных.Элементы.Добавить();
			 пОрганизация.Значение = Объект.Организация;
			 пОрганизация.Параметр = Новый ПараметрКомпоновкиДанных("Организация");
			 пОрганизация.Использование = Истина;
			 
		 Иначе
			 Организация.Значение = Объект.Организация;  
			 
		 КонецЕсли; 
		 
		 //Если СтрокаТаблицы.СписокАктивов.Количество() Тогда 
		 //    
		 //    Субконто1 = ПараметрыДанныхОСКД.Добавить();
		 //    Субконто1.Имя = "Субконто1";
		 //    Субконто1.Заголовок = "Субконто1"; 
		 //    МассивТипов = Новый Массив;
		 //    МассивТипов.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
		 //    МассивТипов.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
		 //    МассивТипов.Добавить(Тип("СправочникСсылка.БиологическиеАктивы"));
		 //    Субконто1.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		 //    Субконто1.ОграничениеИспользования = Ложь;
		 //    Субконто1.Значение = СтрокаТаблицы.СписокАктивов;
		 //    Субконто1.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
		 //    Субконто1.ДоступенСписокЗначений = Истина;  
		 //    
		 //    
		 //    пСубконто1 = НастройкиОСКД.ПараметрыДанных.Элементы.Добавить();
		 //    пСубконто1.Значение = СтрокаТаблицы.СписокАктивов;
		 //    пСубконто1.Параметр = Новый ПараметрКомпоновкиДанных("Субконто1");
		 //    пСубконто1.Использование = Истина;
		 //    //пСубконто1.
		 //    
		 //КонецЕсли; 
		 
		 
		 //Если СтрокаТаблицы.НоменклатурныеГруппы.Количество() Тогда 
		 //    
		 //    Субконто1 = ПараметрыДанныхОСКД.Добавить();
		 //    Субконто1.Имя = "Субконто1"; 
		 //    МассивТипов = Новый Массив;
		 //    МассивТипов.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
		 //    Субконто1.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		 //    Субконто1.ОграничениеИспользования = Ложь;
		 //    Субконто1.Значение = СтрокаТаблицы.НоменклатурныеГруппы;
		 //    Субконто1.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
		 //    Субконто1.ДоступенСписокЗначений = Истина;  
		 //    
		 //    
		 //    пСубконто1 = НастройкиОСКД.ПараметрыДанных.Элементы.Добавить();
		 //    пСубконто1.Значение = СтрокаТаблицы.НоменклатурныеГруппы;
		 //    пСубконто1.Параметр = Новый ПараметрКомпоновкиДанных("Субконто1");
		 //    пСубконто1.Использование = Истина;
		 //    //пСубконто1.
		 //    
		 //КонецЕсли;
		 //
		 
		 
		 
		 
		 
		 
		 
		 КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
		 Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		 
		 ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
		 ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
		 
		 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		 ПроцессорВывода.УстановитьОбъект(ТЗ1);
		 ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД);
		 
		 ТЗ1.Свернуть(,"СуммаОстаток,СуммаОстатокДт,СуммаОстатокКт");
		 Если ТЗ1.Количество() Тогда 
			 
			 
			 Если СтрокаТаблицы.ТипДвижения = "Остаток Кт" Тогда 
				 СтрокаТаблицы.Сумма =  ТЗ1[0].СуммаОстатокКт;
			 ИначеЕсли СтрокаТаблицы.ТипДвижения = "Остаток Дт" Тогда   
				 СтрокаТаблицы.Сумма =  ТЗ1[0].СуммаОстатокДт;
			 Иначе    
				 СтрокаТаблицы.Сумма =  ТЗ1[0].СуммаОстаток;
			 КонецЕсли;
			 
		 КонецЕсли;
		 
	 //КонецЦикла;
	 
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ПолучитьОстаткиБезУсловия(Счет,СтрокаТаблицы)
	 
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ТиповойОстатки.Субконто1 КАК Субконто1,
	 |	ТиповойОстатки.Субконто2 КАК Субконто2,
	 |	ТиповойОстатки.Субконто3 КАК Субконто3,
	 |	ТиповойОстатки.Организация КАК Организация,
	 |	ТиповойОстатки.Валюта КАК Валюта,
	 |	СУММА(ТиповойОстатки.СуммаОстаток) КАК СуммаОстаток,
	 |	СУММА(ТиповойОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
	 |	СУММА(ТиповойОстатки.СуммаОстатокКт) КАК СуммаОстатокКт
	 |ИЗ
	 |	РегистрБухгалтерии.Типовой.Остатки(
	 |			&НаДату,
	 |			Счет = &Счет,
	 |			,
	 |			Организация = &Организация
	 |				И Субконто1 В (&Субконто1)) КАК ТиповойОстатки
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТиповойОстатки.Субконто1,
	 |	ТиповойОстатки.Валюта,
	 |	ТиповойОстатки.Субконто3,
	 |	ТиповойОстатки.Организация,
	 |	ТиповойОстатки.Субконто2";
	 
	 Запрос.УстановитьПараметр("НаДату", Объект.КонецПериода);
	 Запрос.УстановитьПараметр("Организация", Объект.Организация);
	 Запрос.УстановитьПараметр("Счет", Счет);
	 
	 Если СтрокаТаблицы.СписокАктивов.Количество() Тогда
		 
		 Запрос.УстановитьПараметр("Субконто1",СтрокаТаблицы.СписокАктивов);
		 
	 Иначе
		 Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Субконто1 В (&Субконто1)","");
	 КонецЕсли;
	 
	 
	 Выгрузка = Запрос.Выполнить().Выгрузить();
	 Выгрузка.Свернуть(,"СуммаОстаток");
	 Если Выгрузка.Количество() Тогда 
		 СтрокаТаблицы.Сумма =Выгрузка[0].СуммаОстаток;
	 КонецЕсли;
	 //
	 //
	 //ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 ////СтрокаТаблицы.Сумма = 0;
	 //Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	 //	СтрокаТаблицы.Сумма =СтрокаТаблицы.Сумма + ВыборкаДетальныеЗаписи.СуммаОстаток;
	 //КонецЦикла;
	 //
	 
	 
 КонецПроцедуры // ПолучитьОстаткиБезУсловия()
 
 
 
 &НаСервере
 Процедура ПолучитьОборотыПоСчетам(Таблица)
	 
	 Для Каждого СтрокаТаблицы Из Таблица Цикл 
		 
		 ТаблицаСчетов = СтрокаТаблицы.ТаблицаСчетов;
		 Счета =  ТаблицаСчетов.ВыгрузитьКолонку("СчетПланаСчетов");
		 СчетаДт = Новый СписокЗначений;
		 СчетаКт = Новый СписокЗначений; 
		 Для Каждого Счет Из Счета Цикл 
			 Если Счет.Вид = ВидСчета.Активный Тогда 
				 СчетаДт.Добавить(Счет);	
			 Иначе     
				 СчетаКт.Добавить(Счет);	
			 КонецЕсли;
			 
			 
			 
		 КонецЦикла;
		 
		 Если Счета.Количество() Тогда
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	СУММА(ТиповойОбороты.СуммаОборотДт) КАК СуммаОборотДт
			 |ПОМЕСТИТЬ ВТ_Обороты
			 |ИЗ
			 |	РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаДт), , , , ) КАК ТиповойОбороты
			 |
			 |ОБЪЕДИНИТЬ ВСЕ
			 |
			 |ВЫБРАТЬ
			 |	СУММА(ТиповойОбороты.СуммаОборотКт)
			 |ИЗ
			 |	РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаКт), , , , ) КАК ТиповойОбороты
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	ВТ_Обороты.СуммаОборотДт КАК СуммаОборот
			 |ИЗ
			 |	ВТ_Обороты КАК ВТ_Обороты";
			 
			 Запрос.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
			 Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
			 Запрос.УстановитьПараметр("СчетаДт", СчетаДт); 
			 Запрос.УстановитьПараметр("СчетаКт", СчетаКт);
			 
			 РезультатЗапроса = Запрос.Выполнить();
			 
			 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			 
			 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				 Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СуммаОборот) Тогда
					 Сообщить(ВыборкаДетальныеЗаписи.СуммаОборот); 
				 КонецЕсли;
			 КонецЦикла;
		 КонецЕсли;
	 КонецЦикла;
	 
	 
	 
 КонецПроцедуры // ПолучитьОборотыПоСчетам()
 
 &НаСервере
 Процедура ЗаполнитьТЗОстатки(ЭталонныйСчет,Таблица,СтатьяБюджетаРодитель) Экспорт
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	НастройкаЭталоногоПланаСчетов.Ссылка КАК Ссылка,
	 |	НастройкаЭталоногоПланаСчетов.ЭталонныйСчет КАК ЭталонныйСчет,
	 |	НастройкаЭталоногоПланаСчетов.КомпоновщикНастроекОтбор КАК КомпоновщикНастроек,
	 |	НастройкаЭталоногоПланаСчетов.ИсточникДанных КАК Счет
	 |ИЗ
	 |	Справочник.авНастройкаПланаСчетов КАК НастройкаЭталоногоПланаСчетов
	 |ГДЕ
	 |	НЕ НастройкаЭталоногоПланаСчетов.ПометкаУдаления
	 |	И НастройкаЭталоногоПланаСчетов.ЭталонныйСчет = &ЭталонныйСчет
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ЭталонныйСчет";
	 Запрос.УстановитьПараметр("ЭталонныйСчет",ЭталонныйСчет);  //1720
	 
	 Результат = Запрос.Выполнить();
	 Выгрузка = Результат.Выгрузить();
	 Выборка = Результат.Выбрать();
	 
	 
	 СКД_Остатки = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Остатки");
	 НастройкиОСКД = СКД_Остатки.НастройкиПоУмолчанию;
	 ПараметрыДанныхОСКД = СКД_Остатки.Параметры;
	 
	 Рез = Запрос.Выполнить().Выбрать();
	 
	 
	 Пока рез.Следующий() Цикл
		 
		 СохраненныйКомпоновщикНастроек = Рез.КомпоновщикНастроек.Получить();
		 ОтборНастройки = СохраненныйКомпоновщикНастроек.Отбор;
		 ОСКД = Документы.ПрочиеПоказателиMDM.ПолучитьМакет("СКД_Остатки");
		 НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
		 ТЗ1 = Новый ТаблицаЗначений;
		 Если ОтборНастройки.Элементы.Количество() >0 Тогда
			 
			 Для каждого ЭлементОтбора Из ОтборНастройки.Элементы Цикл
				 Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					 НовыйЭлементОтбора = НастройкиОСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					 НовыйЭлементОтбора.ЛевоеЗначение 	= НОвый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение));
					 НовыйЭлементОтбора.Использование 	= Истина;
					 НовыйЭлементОтбора.ВидСравнения 	= ЭлементОтбора.ВидСравнения;
					 НовыйЭлементОтбора.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение; 
				 КонецЕсли;	
			 КонецЦикла;
			 
		 КонецЕсли;
		 
		 ПараметрыДанныхОСКД = ОСКД.Параметры;
		 
		 
		 ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("КонецПериода");
		 ЭлементКонецПериода.Значение = КонецДня(Объект.КонецПериода);
		 
		 
		 ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет");
		 ЭлементСчет.Значение = рез.Счет;
		 
		 Организация = ПараметрыДанныхОСКД.Найти("Организация");
		 Если  Организация = Неопределено Тогда 
			 Организация  = ПараметрыДанныхОСКД.Добавить();
			 Организация.Имя = "Организация";
			 Организация.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
			 Организация.ОграничениеИспользования = Ложь;
			 Организация.Значение = Объект.Организация;
			 Организация.Использование = ИспользованиеПараметраКомпоновкиданных.Всегда;
		 Иначе
			 Организация.Значение = Объект.Организация;  
			 
		 КонецЕсли;
		 
		 
		 
		 
		 
		 КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
		 Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		 
		 ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
		 ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
		 
		 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		 ПроцессорВывода.УстановитьОбъект(ТЗ1);
		 ПроцессорВывода.Вывести(ПроцессорКомпоновкиОСКД);
		 
		 ТЗ1.Свернуть(,"СуммаОстаток");
		 Если ТЗ1.Количество() Тогда
			 СтрокаТЗ = Таблица.Добавить();
			 СтрокаТЗ.BS = СтатьяБюджетаРодитель; 
			 СтрокаТЗ.Счет = рез.Счет;
			 СтрокаТЗ.Сумма = ТЗ1[0].СуммаОстаток; 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ЗаполнитьНаСервере()
	 
	 Выгрузка = Объект.ПрочиеПоказатели.Выгрузить();
	 Выгрузка.ЗаполнитьЗначения(0,ОсновноеСуммируемоеПоле);
	 Объект.ПрочиеПоказатели.Загрузить(Выгрузка);
	 ОчиститьДерево();
	 
	 ЗаполнитьПоСтатьямБюджета();
	 ЗаполнитьПоВидамДвижения();
	 ЗаполнитьПоСчетам();
	 РедактироватьДерево();
	 
 КонецПроцедуры // ЗаполнитьНаСервере()
 
 
 &НаКлиенте
 Процедура Заполнить(Команда)
	 
	 Если ЕстьНезаполненныеПоля() Тогда
		 Возврат;
	 КонецЕсли; 
	 ЗаполнитьНаСервере();
	 ДеревоПрочиеПоказателиПриИзменении(Неопределено);
	 
	 //ПересчитатьТабличнуюЧасть();
	 
 КонецПроцедуры 
 

 &НаСервере
 Процедура ПересчитатьТабличнуюЧасть()
	 
	  ИтогСумма = 0;
	 Для Каждого СтрокаТЧ Из Объект.ПрочиеПоказатели Цикл 
		 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	авПрочиеПоказателиMDMПрочиеПоказатели.Показатель КАК Показатель,
		|	СУММА(авПрочиеПоказателиMDMПрочиеПоказатели.Sum) КАК Sum,
		|	СУММА(авПрочиеПоказателиMDMПрочиеПоказатели.AmountBalance) КАК AmountBalance
		|ИЗ
		|	Документ.авПрочиеПоказателиMDM.ПрочиеПоказатели КАК авПрочиеПоказателиMDMПрочиеПоказатели
		|ГДЕ
		|	авПрочиеПоказателиMDMПрочиеПоказатели.Показатель.Родитель В ИЕРАРХИИ(&Родитель)
		|
		|СГРУППИРОВАТЬ ПО
		|	авПрочиеПоказателиMDMПрочиеПоказатели.Показатель";
	
	Запрос.УстановитьПараметр("Родитель", СтрокаТЧ.Показатель); 
	Запрос.УстановитьПараметр("BS", СтрокаТЧ.BS);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		 
	 КонецЦикла;
	 
 	
 
 КонецПроцедуры // ПересчитатьТабличнуюЧасть()
 
 
 &НаСервере
 Процедура ОчиститьДерево()
 
 	Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл 
		
		Для Каждого РеквизитДерева 	Из СтрокаДерева Цикл  
			Если ТипЗнч(РеквизитДерева) = Тип("Число") Тогда
				РеквизитДерева = 0;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
   ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");
 
 КонецПроцедуры // ОчиститьДерево()
 
 
 
 
 
 #КонецОбласти  
 
 &НаКлиенте
 Функция ЕстьНезаполненныеПоля()
	 
	 ЕстьОшибки = Ложь;
	 Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		 СообщитьПользователю("На заполнена ""Организация""","Объект.Организация");
		 ЕстьОшибки = Истина;
		 Возврат ЕстьОшибки;
	 КонецЕсли;       
	 
	 Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		 СообщитьПользователю("На установлен ""Конец периода""","Объект.КонецПериода");	
		 ЕстьОшибки = Истина;
		 Возврат ЕстьОшибки;
	 КонецЕсли;
	 
	 Если Не ЗначениеЗаполнено(Объект.ВидПоказателя) Тогда
		 СообщитьПользователю("На заполнен ""Вид показателя""","Объект.ВидПоказателя");	
		 ЕстьОшибки = Истина;
		 Возврат ЕстьОшибки;
	 КонецЕсли; 
	 
	 
	 Возврат ЕстьОшибки;
	 
	 
 КонецФункции // ПроверитьЗаполнениеОбязательнызПолей()
 
 &НаСервере
 Процедура ОбновитьВидимостьКоманд()
	 
	 Если Объект.ВидПоказателя = Справочники.авВидыПрочихПоказателейMDM.НайтиПоНаименованию("7_Расшифровка по ценным бумагам") Тогда 
		 
		 Элементы.ПрочиеПоказателиДобавитьЦеннуюБумагу.Видимость = Истина; 
		 Элементы.ПрочиеПоказателиЗаполнитьПоДепозитам.Видимость = Ложь;  
		 ВидимостьДерева = Ложь; 
		 
	 ИначеЕсли Объект.ВидПоказателя = Справочники.авВидыПрочихПоказателейMDM.НайтиПоНаименованию("9_Информация по депозитам") Тогда 
		 Элементы.ПрочиеПоказателиДобавитьЦеннуюБумагу.Видимость = Ложь;  
		 Элементы.ПрочиеПоказателиЗаполнитьПоДепозитам.Видимость = Истина; 
		 Элементы.AccountName.Видимость = Ложь;
		 Элементы.Account.Видимость = Ложь;
		 
		 ВидимостьДерева = Ложь;
	 Иначе
		 
		 Элементы.ДеревоПрочиеПоказателиЗаполнить.Видимость = Истина; 
		 Элементы.ПрочиеПоказателиДобавитьЦеннуюБумагу.Видимость = Ложь; 
		 Элементы.ПрочиеПоказателиЗаполнитьПоДепозитам.Видимость = Ложь;  
		 Элементы.СтраницаДерево.Видимость = Истина;
		 ВидимостьДерева = Истина;
	 КонецЕсли; 
	 
	 Если ИспользуетСтатьиБюджета Тогда  
		 
		 Элементы.BSname.Видимость = Ложь;
		 
	 КонецЕсли;
	 
	 
	 Элементы.СтраницаДерево.Видимость = ВидимостьДерева; 
	 
	 
 КонецПроцедуры // ОбновитьВидимостьКоманд()
 
 
 &НаКлиентеНаСервереБезКонтекста
 Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	 
	 Сообщение = Новый СообщениеПользователю;
	 Сообщение.Текст = Текст;
	 Сообщение.ПутьКДанным = ПутьКДанным;
	 Сообщение.Сообщить();
	 
 КонецПроцедуры


&НаСервере
Процедура ДобавитьЦеннуюБумагуНаСервере()  
	
	
	Дерево = РеквизитФормыВЗначение("ДеревоПрочиеПоказатели");
	
	ЦеннаяБумагаИмя = Объект.ПрочиеПоказатели.Добавить();
	ЦеннаяБумагаИмя.Показатель = Справочники.авINDПрочиеПоказатели.НайтиПоКоду("IND2.1.2.1.");
	ЦеннаяБумагаИмя.КодПоказателя = ЦеннаяБумагаИмя.Показатель.Код;
	ЦеннаяБумагаИмя.Значение = ""; 
	
	СтрокаДереваЦеннаяБумагаИмя =  Дерево.Строки[0].Строки.Добавить(); 
	СтрокаДереваЦеннаяБумагаИмя.Показатель = ЦеннаяБумагаИмя.Показатель;
	СтрокаДереваЦеннаяБумагаИмя.КодПоказателя = ЦеннаяБумагаИмя.КодПоказателя;
	СтрокаДереваЦеннаяБумагаИмя.Значение = ""; 
	
	
	ЦеннаяБумагаДата = Объект.ПрочиеПоказатели.Добавить();
	ЦеннаяБумагаДата.Показатель = Справочники.авINDПрочиеПоказатели.НайтиПоКоду("IND2.1.2.2.");
	ЦеннаяБумагаДата.КодПоказателя = ЦеннаяБумагаДата.Показатель.Код;
	ЦеннаяБумагаДата.Значение = Дата(1,1,1); 
	
	СтрокаДереваЦеннаяБумагаДата =  Дерево.Строки[0].Строки.Добавить(); 
	СтрокаДереваЦеннаяБумагаДата.Показатель = ЦеннаяБумагаДата.Показатель;
	СтрокаДереваЦеннаяБумагаДата.КодПоказателя = ЦеннаяБумагаДата.КодПоказателя;
	СтрокаДереваЦеннаяБумагаДата.Значение = ЦеннаяБумагаДата.Значение; 
	
	
	ЦеннаяБумагаЧисло = Объект.ПрочиеПоказатели.Добавить();
	ЦеннаяБумагаЧисло.Показатель = Справочники.авINDПрочиеПоказатели.НайтиПоКоду("IND2.1.2.3.");
	ЦеннаяБумагаЧисло.КодПоказателя = ЦеннаяБумагаЧисло.Показатель.Код;
	ЦеннаяБумагаЧисло.Значение = 0; 
	
	СтрокаДереваЦеннаяБумагаЧисло =  Дерево.Строки[0].Строки.Добавить(); 
	СтрокаДереваЦеннаяБумагаЧисло.Показатель = ЦеннаяБумагаЧисло.Показатель;
	СтрокаДереваЦеннаяБумагаЧисло.КодПоказателя = ЦеннаяБумагаЧисло.КодПоказателя;
	СтрокаДереваЦеннаяБумагаЧисло.Значение = ЦеннаяБумагаЧисло.Значение; 
	
	
	
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоПрочиеПоказатели");


 КонецПроцедуры


&НаКлиенте
Процедура ДобавитьЦеннуюБумагу(Команда)
	
	 ДобавитьЦеннуюБумагуНаСервере();
	 РазвернутьДерево(ДеревоПрочиеПоказатели.ПолучитьЭлементы()); 
	 
 КонецПроцедуры


 &НаКлиенте
 Процедура ПрочиеПоказателиПередНачаломИзменения(Элемент, Отказ)
	 
	 ТекущиеДанные = Элементы.ПрочиеПоказатели.ТекущиеДанные;
	 
	 Если ТекущиеДанные.КодПоказателя = "IND2.1.2.1." Тогда 
		 МассивТиповСтрока = Новый Массив;
		 МассивТиповСтрока.Добавить(Тип("Строка"));
		 ТипСтрока = Новый ОписаниеТипов(МассивТиповСтрока);
		 Элементы.Значение.ДоступныеТипы = ТипСтрока;
		 Элементы.Значение.ОграничениеТипа  = ТипСтрока;
	 ИначеЕсли  ТекущиеДанные.КодПоказателя = "IND2.1.2.2." Или ТекущиеДанные.КодПоказателя = "IND2.1.7."  Или ТекущиеДанные.КодПоказателя = "IND2.1.8." Тогда 
		 МассивТиповДата = Новый Массив;
		 МассивТиповДата.Добавить(Тип("Дата"));
		 ТипДата = Новый ОписаниеТипов(МассивТиповДата);
		 Элементы.Значение.ДоступныеТипы = ТипДата;
		 Элементы.Значение.ОграничениеТипа  = ТипДата;
	 ИначеЕсли  ТекущиеДанные.КодПоказателя = "IND2.1.2.3." Или  ТекущиеДанные.КодПоказателя = "IND2.1.6."  Тогда 
		 МассивТиповЧисло = Новый Массив;
		 МассивТиповЧисло.Добавить(Тип("Число"));
		 ТипЧисло = Новый ОписаниеТипов(МассивТиповЧисло);
		 Элементы.Значение.ДоступныеТипы = ТипЧисло;
		 Элементы.Значение.ОграничениеТипа  = ТипЧисло; 
	 ИначеЕсли  ТекущиеДанные.КодПоказателя = "IND2.1.2." Тогда 
		 МассивТиповНеопределено = Новый Массив;
		 МассивТиповНеопределено.Добавить(Тип("Неопределено"));
		 ТипНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
		 Элементы.Значение.ДоступныеТипы = ТипНеопределено;
		 Элементы.Значение.ОграничениеТипа  = ТипНеопределено;
		 Возврат;
	 КонецЕсли;
	 
	 
 КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоДепозитамНаСервере() 
	
	Объект.ПрочиеПоказатели.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОстатки.Счет КАК Счет,
		|	ТиповойОстатки.Субконто1 КАК Субконто1,
		|	ВЫБОР
		|		КОГДА ТиповойОстатки.Субконто1 ССЫЛКА Справочник.БанковскиеСчета
		|			ТОГДА ТиповойОстатки.Субконто1.Банк
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Банк,
		|	ТиповойОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&НаДату, Счет В (&Счета), &ВидСубконто, ) КАК ТиповойОстатки";
	
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства);
	Запрос.УстановитьПараметр("НаДату", Объект.КонецПериода);
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Типовой.НайтиПоКоду("1050"));
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить(); 
		СтрокаТЧ.Показатель    = Справочники.авINDПрочиеПоказатели.НайтиПоКоду("IND2.1.6.");	
		СтрокаТЧ.КодПоказателя =  СтрокаТЧ.Показатель.Код;	
		СтрокаТЧ.BankName      = Строка(ВыборкаДетальныеЗаписи.Банк); 
		СтрокаТЧ.DepositName   = Строка(ВыборкаДетальныеЗаписи.Субконто1); 
		СтрокаТЧ.Значение      = 0; 
		
		СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить(); 
		СтрокаТЧ.Показатель  = Справочники.авINDПрочиеПоказатели.НайтиПоКоду("IND2.1.7.");	
		СтрокаТЧ.КодПоказателя =  СтрокаТЧ.Показатель.Код;	
		СтрокаТЧ.BankName = Строка(ВыборкаДетальныеЗаписи.Банк);
		СтрокаТЧ.DepositName   = Строка(ВыборкаДетальныеЗаписи.Субконто1); 
		СтрокаТЧ.Значение = Дата(1,1,1);
		
		
		СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить(); 
		СтрокаТЧ.Показатель  = Справочники.авINDПрочиеПоказатели.НайтиПоКоду("IND2.1.8.");	
		СтрокаТЧ.КодПоказателя =  СтрокаТЧ.Показатель.Код;	
		СтрокаТЧ.BankName = Строка(ВыборкаДетальныеЗаписи.Банк); 
		СтрокаТЧ.DepositName   = Строка(ВыборкаДетальныеЗаписи.Субконто1); 
		СтрокаТЧ.Значение = Дата(1,1,1); 
		
		
		СтрокаТЧ = Объект.ПрочиеПоказатели.Добавить(); 
		СтрокаТЧ.Показатель    = Справочники.авINDПрочиеПоказатели.НайтиПоКоду("IND2.1.6.1.");	
		СтрокаТЧ.КодПоказателя =  СтрокаТЧ.Показатель.Код;	
		СтрокаТЧ.BankName      = Строка(ВыборкаДетальныеЗаписи.Банк); 
		СтрокаТЧ.DepositName   = Строка(ВыборкаДетальныеЗаписи.Субконто1); 
		СтрокаТЧ.Значение      = ВыборкаДетальныеЗаписи.СуммаОстаток; 
		
		
	КонецЦикла;
	

	
	
	
	
 КонецПроцедуры


&НаКлиенте
 Процедура ЗаполнитьПоДепозитам(Команда)
	 ЗаполнитьПоДепозитамНаСервере();
 КонецПроцедуры
 
