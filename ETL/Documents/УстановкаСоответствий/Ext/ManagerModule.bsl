#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций   
	
//
// Параметры:
//  Параметры - Структура:
//   * ИмяМакетаСШаблоном - Строка - наименование макета. Например, "ЗагрузкаИзФайла".
//   * ИмяТабличнойЧасти - Строка - Полное имя табличной части. Например, "Документ._ДемоСчетНаОплатуПокупателю.ТабличнаяЧасть.Товары"
//   * ОбязательныеКолонки - Массив из Строка - наименования обязательных для заполнения колонок.
//   * ТипДанныхКолонки - Соответствие из КлючИЗначение:
//      * Ключ - Строка - имя колонки;
//      * Значение - ОписаниеТипов - тип колонки загружаемых данных.
//   * ДополнительныеПараметры - Структура
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
    
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    – Строка – адрес временного хранилища с таблицей значений, в которой
//                               находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор – Число – порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления – Строка – адрес временного хранилища с пустой таблицей значений,
//                               являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей – ТаблицаЗначений – список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов.
//       * Колонка       – Строка – имя колонки, в которой была обнаружена неоднозначность;
//       * Идентификатор – Число  – идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   – Строка – полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   – ЛюбойТип – Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Данные = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ПараметрыЗапроса = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.АдресПараметрыЗапроса); 
	ТаблицаСДаннымиИсточника = ТаблицаИсточник(ДополнительныеПараметры.СпособЗаполнения, ДополнительныеПараметры.База, ПараметрыЗапроса); 
	
	ТипЗначенийЭталона = ПланыВидовХарактеристик.ТипыЭталонов.ПолучитьТипЗначенияЭталона(ДополнительныеПараметры.ТипЭталона);
	
	Если ТипЗначенийЭталона = Тип("СправочникСсылка.СтатьиЗатрат")
		ИЛИ ТипЗначенийЭталона = Тип("СправочникСсылка.Доходы")
		ИЛИ ТипЗначенийЭталона = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")
        ИЛИ ТипЗначенийЭталона = Тип("СправочникСсылка.ТоварыИУслуги") 
	Тогда
		Запрос = Новый Запрос;
		ИмяСправочника = СтрЗаменить(ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗначенийЭталона), "СправочникСсылка.", "");
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗначенияЭталонов.Ссылка КАК Ссылка,
		|	СокрЛП(ЗначенияЭталонов.КодСправочника) КАК Наименование
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ЗначенияЭталонов";
		
		Запрос.УстановитьПараметр("Владелец", ДополнительныеПараметры.ТипЭталона);
		
		ТаблицаЭталон = Запрос.Выполнить().Выгрузить();
				
	Иначе
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗначенияЭталонов.Ссылка КАК Ссылка,
		|	ЗначенияЭталонов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
		|ГДЕ
		|	ЗначенияЭталонов.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", ДополнительныеПараметры.ТипЭталона);
		
		ТаблицаЭталон = Запрос.Выполнить().Выгрузить();

	КонецЕсли;
	
	
	
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		Отбор = Новый Структура("Код", СтрокаТаблицы.ГУИДСправочника);
		СтрокиИсточника = ТаблицаСДаннымиИсточника.НайтиСтроки(Отбор);  
		Если СтрокиИсточника.Количество() > 0 Тогда
			СтрокаДанных = Данные.Добавить(); 
			СтрокаДанных.Идентификатор = СтрокаТаблицы.Идентификатор;  
			СтрокаДанных.ГУИДСправочника = СтрокиИсточника[0].ГУИД;
			СтрокаДанных.Представление = СтрокаТаблицы.Представление;
			СтрокаЭталон = ТаблицаЭталон.НайтиСтроки(Новый Структура("Наименование", СокрЛП(СтрокаТаблицы.ЗначениеЭталона)));
			Если СтрокаЭталон.Количество() <> 0 Тогда 
				Если СтрокаЭталон.Количество() = 1 Тогда 
					СтрокаДанных.ЗначениеЭталона = СтрокаЭталон[0].Ссылка;
				ИначеЕсли СтрокаЭталон.Количество() > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор;
					ЗаписьОНеоднозначности.Колонка = "Эталон";
				КонецЕсли;
			КонецЕсли;  
		Иначе
			
			Сообщить("Не найден элемент источника с кодом " + СтрокаТаблицы.ГУИДСправочника);
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Данные, АдресТаблицыСопоставления);
	
КонецПроцедуры  


// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//    ПолноеИмяТабличнойЧасти  – Строка – Полное имя табличной части, в которую загружаются данные.
//    ИмяКолонки               – Строка – Имя колонки, в который возникла неоднозначность. 
//    СписокНеоднозначностей    – Массив  – Массив для заполнения с неоднозначными данными.
//    ЗагружаемыеЗначенияСтрока – Строка  – Загружаемые данные, на основании которых возникла неоднозначность.
//    ДополнительныеПараметры   – ЛюбойТип – Любые дополнительные сведения
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт 

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияЭталонов.Ссылка КАК Ссылка,
	|	ЗначенияЭталонов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
	|ГДЕ
	|	ЗначенияЭталонов.Владелец = &Владелец
	| И ЗначенияЭталонов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ДополнительныеПараметры.ТипЭталона); 
	Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока[ИмяКолонки]);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		СписокНеоднозначностей.Добавить(Выборка.Ссылка);
	КонецЦикла;   	
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций  

Функция ТаблицаИсточник(СпособЗаполнения, База, ПараметрыЗапроса)
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Код");
	ТаблицаРезультат.Колонки.Добавить("ГУИД");

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпособыПодбораЭталонов.ТекстЗапроса КАК ТекстЗапроса
		|ИЗ
		|	Справочник.СпособыПодбораЭталонов КАК СпособыПодбораЭталонов
		|ГДЕ
		|	СпособыПодбораЭталонов.Ссылка = &СпособЗаполнения";
	
	Запрос.УстановитьПараметр("СпособЗаполнения", СпособЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи 
		Текст = ВыборкаДетальныеЗаписи.ТекстЗапроса;  
	Иначе  
		Сообщить("Отсутствует способ заполнения для загрузки данных выбранного эталона");
		Возврат ТаблицаРезультат;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для каждого ПараметрЗапроса из ПараметрыЗапроса Цикл
			
			Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Дата") Тогда
				ЗначениеПараметра = "'" + Формат(ПараметрЗапроса.Значение, "ДФ='yyyy-MM-dd'") + "'";
			ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Число") Тогда
				ЗначениеПараметра = Формат(ПараметрЗапроса.Значение, "ЧГ=");
			ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Булево") Тогда
				ЗначениеПараметра = ?(ПараметрЗапроса.Значение, 1, 0)
			Иначе   
				Если Лев(ПараметрЗапроса.Значение, 1) = "'" И Прав(ПараметрЗапроса.Значение, 1) = "'" Тогда
					ЗначениеПараметра = СокрЛП(ПараметрЗапроса.Значение);	
				Иначе
					ЗначениеПараметра = "'" +СокрЛП(ПараметрЗапроса.Значение) + "'";
				КонецЕсли;
			КонецЕсли;		
			
			Текст = СтрЗаменить(Текст, "&"+ПараметрЗапроса.ИмяПараметра, ЗначениеПараметра);	
			
			
		КонецЦикла; 
	КонецЕсли;

	//Текст = СтрЗаменить(Текст, "&База", "'" + Строка(База) + "'");	
		
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();		
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(Текст);
	
	Если Результат.ЕстьОшибки Тогда 
		
		Сообщить(СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС));
	Иначе   
				
		Для каждого Данные из Результат.Данные Цикл
			
			НоваяСтрока = ТаблицаРезультат.Добавить();
	
			Если Данные.Свойство("GUID") Тогда
				НоваяСтрока.ГУИД = Данные.GUID;
			КонецЕсли;	
			Если Данные.Свойство("Code") Тогда
				НоваяСтрока.Код = Данные.Code;
			КонецЕсли;						
		
		КонецЦикла;
	КонецЕсли; 	
	
	
	Возврат ТаблицаРезультат;
	
КонецФункции // ТаблицаИсточник()

#КонецОбласти

