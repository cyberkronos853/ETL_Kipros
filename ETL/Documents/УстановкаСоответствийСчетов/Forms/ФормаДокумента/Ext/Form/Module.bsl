
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПриУстановкеСпособаЗаполнения();	
		
	Период.ДатаНачала = Объект.НачалоПериода;
	Период.ДатаОкончания = Объект.КонецПериода; 
	
	ЗаполнитьФлагЭталонПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодВариантПриИзменении(Элемент)
	ИзменитьПериод();
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(Элемент)
	СпособЗаполненияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьДопИнформациюПриИзменении(Элемент)
	УстановитьВидимость(); 
	ПолучитьДанныеПоТекущейСтроке();
КонецПроцедуры      

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ИзменитьПериод(); 
	УстановитьПараметры();
		
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если НЕ ВыбранСпособЗаполненияПланаСчетов(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Документ предназначен только для установки соответсвия с планом счетов");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЭталонаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)

	Если НЕ ВыбранПланСчетов(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Документ предназначен только для установки соответсвия с планом счетов");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БазаПриИзменении(Элемент)
	УстановитьПараметры();
КонецПроцедуры

&НаКлиенте
Процедура ТипЭталонаПриИзменении(Элемент)

	ТипЭталонаПриИзмененииНаСервере();
	УстановитьВидимость();
	УстановитьПараметры();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоответствия

&НаКлиенте
Процедура СоответствияПриАктивизацииСтроки(Элемент)
	УстановитьОтбор();
	ПолучитьДанныеПоТекущейСтроке();	
		
КонецПроцедуры

&НаКлиенте
Процедура СоответствияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.Соответствия.ТекущиеДанные;

	Если ТекущиеДанные.Статус = "Утвержден" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;      
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияЗначениеЭталонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РаботаСЭталонамиВызовСервера.ЕстьЭлементыНижнегоУровня(ВыбранноеЗначение) Тогда 
		Сообщить("У выбранного эталона существуют элементы нижнего уровня. Необходимо выбирать элементы нижнего уровня. Выбор отменен.");
   		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 
	
	Если Элементы.Соответствия.ТекущиеДанные.ЗначениеЭталона <> ВыбранноеЗначение Тогда       
		Элементы.Соответствия.ТекущиеДанные.Статус = "Выбран";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоответствияПередУдалением(Элемент, Отказ)
   	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияЗначениеЭталонаПриИзменении(Элемент)
  	Если Не ЗначениеЗаполнено(Элементы.Соответствия.ТекущиеДанные.ЗначениеЭталона) Тогда       
		Элементы.Соответствия.ТекущиеДанные.Статус = "Не выбран"; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоответствияПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = Элементы.Соответствия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если НЕ ТекущиеДанные.РучноеРедактирование И ТекущиеДанные.Статус = "Утвержден" И НЕ Элемент.ТекущийЭлемент.Имя = "СоответствияРучноеРедактирование" Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе                                              
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь; 		
		КонецЕсли;  
		
		Если Элемент.ТекущийЭлемент.Имя = "СоответствияСтатус" Тогда
			Если ТекущиеДанные.РучноеРедактирование Тогда
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь; 		
			Иначе
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоответствияУдалитьПриИзменении(Элемент)
	ТекСтрока = Элементы.Соответствия.ТекущиеДанные;
	Если ТекСтрока.Удалить Тогда
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("СтрокаДокумента", ТекСтрока);
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбУдалении", ЭтотОбъект, ПараметрыВопроса);
		ПоказатьВопрос(Оповещение, "Вы уверены, что хотите удалить данное соответствие?", Режим, 0);
		//...	
	КонецЕсли;
	
КонецПроцедуры

//++ 08.04.2025 Муравьев Д.О. 
&НаКлиенте
Процедура СоответствияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ЗапросSQL = ПолучитьЗапросSQL();	
	ПоляЗапроса = ПолучитьПоляЗапроса();
	
	ПараметрыФормы = новый Структура("ЗапросSQL, ПоляЗапроса", ЗапросSQL, ПоляЗапроса);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыВыбораСтрок", ЭтотОбъект); 
	ОткрытьФорму("Документ.УстановкаСоответствий.Форма.Форма", ПараметрыФормы,ЭтотОбъект,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СоответствияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Отказ = Истина;
	ЗапросSQL = ПолучитьЗапросSQL();	
	ПоляЗапроса = ПолучитьПоляЗапроса();
	ВыборОднойСтроки = Истина;
	
	
	ПараметрыФормы = новый Структура("ЗапросSQL, ПоляЗапроса, ВыборОднойСтроки", ЗапросSQL, ПоляЗапроса, ВыборОднойСтроки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыВыбораСтрок", ЭтотОбъект); 
	ОткрытьФорму("Документ.УстановкаСоответствий.Форма.Форма", ПараметрыФормы,ЭтотОбъект,,,,ОписаниеОповещения);
КонецПроцедуры
//-- 08.04.2025 Муравьев Д.О.

&НаКлиенте
Процедура СоответствияНастройкаСчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)

	Если Элементы.Соответствия.ТекущиеДанные.ЗначениеЭталона <> ВыбранноеЗначение Тогда       
		Элементы.Соответствия.ТекущиеДанные.Статус = "Выбран";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗапросКБазе(Команда)
	УстановитьПараметры();
    Если ЗначениеЗаполнено(Объект.СпособЗаполнения) Тогда	
		ВыполнитьЗапросКБазеНаСервере(); 
		Если Объект.Соответствия.Количество() > 0 Тогда
			Элементы.Соответствия.ТекущаяСтрока = 0;
		КонецЕсли;
		//УстановитьОтбор();
		
	Иначе
		Сообщить("Не выбран способ заполнения данных");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзСпособаЗаполнения(Команда)
	ЗаполнитьИзСпособаЗаполненияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзЭталона(Команда)
	ПолучитьИзЭталонаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭлементамиПоУмолчанию(Команда)
	
	ЗаполнитьЭлементамиПоУмолчаниюНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЭлементы(Команда)
	  ПодобратьЭталоныПоРеквизитам();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПоЧастиСтроки(Команда)
	Если ЗначениеЗаполнено(Объект.ТипЭталона) Тогда			
		ПоискПоЧастиСтроки();     
	Иначе
		Сообщить("Не заполнен тип эталона");
	КонецЕсли; 
	
	
КонецПроцедуры   

&НаКлиенте
Процедура СоздатьЭталоны(Команда)
                         	
	СоздатьЭталоныНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайла(Команда)

	Если Не ЗначениеЗаполнено(Объект.ТипЭталона) Тогда
		Сообщить("Необходимо выбрать тип сопоставляемого эталона");
		Возврат;
	КонецЕсли;
	
    ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
    ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "Документ.УстановкаСоответствий.Соответствия";
    ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка данных из файла'");
    ДополнительныеПараметры = Новый Структура();
    ДополнительныеПараметры.Вставить("ТипЭталона", Объект.ТипЭталона);
    ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
    Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайлаЗавершение", ЭтотОбъект);
    ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
    
КонецПроцедуры  

&НаКлиенте
Процедура ЗаполнитьПоПравилам(Команда)
	
	ЗаполнитьПоПравиламНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРеквизитыИзСпособаЗаполнения(Команда)
	ПолучитьРеквизитыИзСпособаЗаполненияНаСервере();
КонецПроцедуры

//++ 16.05.2024 Корыткин Доработка из базы КФП заполнение конкретным эталоном в зависимости от определенных параметров
&НаКлиенте
Процедура ПроставитьЭталоныПоПараметруЭталон(Команда)
	ПроставитьЭталоныПоПараметруЭталонПослеНаСервере();
КонецПроцедуры
//--

&НаКлиенте
Процедура ПростойРежим(Команда)
	
	ПростойРежим = Не ПростойРежим;
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьЗапросКБазеНаСервере()
   	
		Отказ = Ложь;	
		Ошибка = "";
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ЗаполнитьИзБазы(Отказ, Ошибка);
		ДокОбъект.ЗаполнитьСоответствияИзСправочника();
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");				
		
		Если Отказ Тогда
			Сообщить(Ошибка);
		КонецЕсли;
 КонецПроцедуры

&НаСервере
Процедура СпособЗаполненияПриИзмененииНаСервере()
	
	ПриУстановкеСпособаЗаполнения();

	Если ЗначениеЗаполнено(Объект.СпособЗаполнения) Тогда
		
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ЗаполнитьПараметры();
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
						
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоТекущейСтроке() 
	
	 Если ПолучатьДопИнформацию Тогда
		ТекСтрока = Элементы.Соответствия.ТекущиеДанные; 
		
		Если ТекСтрока <> Неопределено И ЗначениеЗаполнено(Объект.ТаблицаИсточникДанных) Тогда
		
			Результат = ПолучитьДанныеНаСервере(Новый Структура("Источник, GUID, База",  Объект.ТаблицаИсточникДанных, ТекСтрока.ГУИДСправочника, Объект.База));
			
			ДопИнфо = "";
			
			Если ТипЗнч(Результат) = Тип("Массив") Тогда 
				
				Для каждого Данные из Результат Цикл
					
					Для каждого ЭлементСтруктуры из Данные Цикл
						
						ДопИнфо = ДопИнфо + ЭлементСтруктуры.Ключ + ": " + ЭлементСтруктуры.Значение + Символы.ПС;
						
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе     
				ДопИнфо = Результат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНаСервере(Параметры)
	
	ОбработкаОбмена = Обработки.ОбменSQL.Создать();
	
	возврат ОбработкаОбмена.ПолучитьДанныеОбъекта(Параметры);
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтбор()
        
КонецПроцедуры

&НаСервере
Процедура ПриУстановкеСпособаЗаполнения()
   Если ЗначениеЗаполнено(Объект.СпособЗаполнения) Тогда
		СписокВыбора = Объект.СпособЗаполнения.СтруктураПолей.ВыгрузитьКолонку("ИмяПоля");
		Элементы.РеквизитыРеквизитЗапроса.СписокВыбора.ЗагрузитьЗначения(СписокВыбора); 
		Если Объект.СпособЗаполнения = Справочники.СпособыПодбораЭталонов.ЗагрузкаИзФайла Тогда
		//	Элементы.СоответствияЗагрузитьДанные.Видимость = Истина;   
			Элементы.СоответствияВыполнитьЗапросКБазе.Видимость = Ложь;
			Элементы.Источник.Доступность = Истина;
		Иначе
		//	Элементы.СоответствияЗагрузитьДанные.Видимость = Ложь;     
			Элементы.СоответствияВыполнитьЗапросКБазе.Видимость = Истина;
			Элементы.Источник.Доступность = Ложь;
		КонецЕсли;                                                
	Иначе
		//Элементы.СоответствияЗагрузитьДанные.Видимость = Ложь;          
		Элементы.СоответствияВыполнитьЗапросКБазе.Видимость = Истина;
		Элементы.Источник.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФлагЭталонПоУмолчанию();
	Если ТипЗнч(Объект.ТипЭталона) = Тип("СправочникСсылка.ЗначенияЭталонов") Тогда
		Для каждого СтрокаТЧ из Объект.Соответствия Цикл
			СтрокаТЧ.ЭталонПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТЧ.ЗначениеЭталона), СтрокаТЧ.ЗначениеЭталона.ЭталонПоУмолчанию, Ложь);		
		КонецЦикла;  
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзСпособаЗаполненияНаСервере()
   	
	Если ЗначениеЗаполнено(Объект.СпособЗаполнения) Тогда
		Объект.Параметры.Очистить();
		
		Для каждого Параметр из Объект.СпособЗаполнения.Параметры Цикл
			
			НовыйПараметр = Объект.Параметры.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараметр, Параметр);
			Если Лев(Параметр.ТипПоля, 5) = "Число" Тогда
				НовыйПараметр.Значение = 0;
			ИначеЕсли  Лев(Параметр.ТипПоля, 4) = "Дата" Тогда
				НовыйПараметр.Значение = Дата(1, 1, 1, 0, 0, 0);
				Если НовыйПараметр.ИмяПараметра = "НачалоПериода" Тогда
					НовыйПараметр.Значение = Объект.НачалоПериода;
				ИначеЕсли НовыйПараметр.ИмяПараметра = "КонецПериода" 
					ИЛИ НовыйПараметр.ИмяПараметра = "Период"
					Тогда
					НовыйПараметр.Значение = Объект.КонецПериода; 
				КонецЕсли; 
			ИначеЕсли  Лев(Параметр.ТипПоля, 6) = "Булево" Тогда	
				НовыйПараметр.Значение = Ложь;
			Иначе
				НовыйПараметр.Значение = "";
			КонецЕсли;
			
		КонецЦикла;  
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьИзЭталонаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ТипЭталона) Тогда
		
		Объект.Реквизиты.Очистить();
		Для каждого Реквизит из Объект.ТипЭталона.Реквизиты Цикл
		       НовыйРеквизит = Объект.Реквизиты.Добавить();
			   НовыйРеквизит.РеквизитЭталона = Реквизит.Реквизит;
			   		
		КонецЦикла;   
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод()
	Объект.НачалоПериода = НачалоДня(Период.ДатаНачала);
	Объект.КонецПериода = КонецДня(Период.ДатаОкончания);
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьЭлементамиПоУмолчаниюНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ТипЭталона) Тогда  
		
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ПодобратьЭталоныПоУмолчанию();
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		ЗаполнитьФлагЭталонПоУмолчанию();
	Иначе
		Сообщить("Не выбран тип эталона.");
	КонецЕсли;
		
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПодобратьЭталоныПоРеквизитам()
	 	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПодобратьЭталоныПоРеквизитам(,,ПерезаполнятьУтвержденные, ПерезаполнятьВыбранные);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ЗаполнитьФлагЭталонПоУмолчанию();
КонецПроцедуры

&НаСервере
Процедура ПоискПоЧастиСтроки();

	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПодобратьЭталоныПоЧастиСтроки(,,ПерезаполнятьУтвержденные, ПерезаполнятьВыбранные);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");	
	ЗаполнитьФлагЭталонПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭталоныНаСервере()
	
	Ошибка = "";    
	Отказ = ЛожЬ;
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПодобратьСоздатьЭталоныПоРеквизитам(Отказ, Ошибка);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");                  
	Если Отказ Тогда
		Сообщить(Ошибка);
	Иначе
    	ЗаполнитьФлагЭталонПоУмолчанию(); 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
    
    Если АдресЗагруженныхДанных = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    
    ЗагрузитьДанныеИзФайлаНаСервере(АдресЗагруженныхДанных);
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьДанныеИзФайлаНаСервере(АдресЗагруженныхДанных)
    
    ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
    
    ТоварыДобавлены = Ложь;
    Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
        
        Если Не ЗначениеЗаполнено(СтрокаТаблицы.ГУИДСПравочника) Тогда 
            Продолжить;
        КонецЕсли;
        
        НоваяСтрокаДанные = Объект.Соответствия.Добавить();
        НоваяСтрокаДанные.База = СтрокаТаблицы.База;
        НоваяСтрокаДанные.ГУИДСПравочника = СтрокаТаблицы.ГУИДСПравочника;
        НоваяСтрокаДанные.ЗначениеЭталона = СтрокаТаблицы.ЗначениеЭталона;
		НоваяСтрокаДанные.Представление = СтрокаТаблицы.Представление;
		НоваяСтрокаДанные.Статус = ?(ЗначениеЗаполнено(НоваяСтрокаДанные.ЗначениеЭталона), "Загружен", "Не выбран");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизит(Ссылка, НазваниеРеквизита) 
	
	возврат Общегоназначения.ЗначениеРеквизитаОбъекта(Ссылка, НазваниеРеквизита);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПравиламНаСервере()
		
	Если Объект.СпособЗаполнения.ПравилаУстановкиЗначений.Количество() <> 0	Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ПодобратьЭталоныПоПравилам(,,ПерезаполнятьУтвержденные, ПерезаполнятьВыбранные);
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект"); 
		ЗаполнитьФлагЭталонПоУмолчанию();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьРеквизитыИзСпособаЗаполненияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.СпособЗаполнения) Тогда
		Объект.Реквизиты.Очистить();
		Для каждого Реквизит из Объект.СпособЗаполнения.СтруктураПолей Цикл
		       НовыйРеквизит = Объект.Реквизиты.Добавить();
			   НовыйРеквизит.РеквизитЭталона = Реквизит.РеквизитЭталона;
			   НовыйРеквизит.РеквизитЗапроса = Реквизит.ИмяПоля;
			   НовыйРеквизит.Поиск = Реквизит.Поиск; 		   		
		КонецЦикла;  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбУдалении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Параметры.СтрокаДокумента.Удалить = Ложь;
        Возврат;
    КонецЕсли;

    //...


КонецПроцедуры      

//++ 16.05.2024 Корыткин А.А. Доработка из КФП подстановка эталонов по параметрам
&НаСервере
Процедура ПроставитьЭталоныПоПараметруЭталонПослеНаСервере()
	Ошибка = "";    
	Отказ = ЛожЬ;
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПодобратьЗаполнитьЭлементыПоЗначению(Отказ, Ошибка, ПерезаполнятьВыбранные, ПерезаполнятьУтвержденные);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");                  
	Если Отказ Тогда
		Сообщить(Ошибка);
	Иначе
    	ЗаполнитьФлагЭталонПоУмолчанию(); 
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыбранПланСчетов(ТипЭталона)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЭталона, "ПланСчетов");	

КонецФункции

&НаСервереБезКонтекста
Функция ВыбранСпособЗаполненияПланаСчетов(СпособЗаполнения) 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СпособыПодбораЭталонов.ТипЭталона.ПланСчетов, ЛОЖЬ) КАК ЭтоПланСчетов
		|ИЗ
		|	Справочник.СпособыПодбораЭталонов КАК СпособыПодбораЭталонов
		|ГДЕ
		|	СпособыПодбораЭталонов.Ссылка = &Ссылка"; 
	Запрос.УстановитьПараметр("Ссылка", СпособЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ЭтоПланСчетов;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Процедура УстановитьПараметры()
	
	Для каждого Параметр из Объект.Параметры Цикл
		
		Если Параметр.ИмяПараметра = "НачалоПериода" Тогда
			Параметр.Значение = Объект.НачалоПериода;
		ИначеЕсли Параметр.ИмяПараметра = "КонецПериода" ИЛИ Параметр.ИмяПараметра = "Период" Тогда
			Параметр.Значение = Объект.КонецПериода;
		ИначеЕсли Параметр.ИмяПараметра = "База" Тогда
			Параметр.Значение = Строка(Объект.База);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	Элементы.ДопИнфо.Видимость = ПолучатьДопИнформацию;
	Элементы.Источник.Видимость = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПараметра", "НачалоПериода");
	
	
	Если Объект.Параметры.НайтиСтроки(Новый Структура("ИмяПараметра", "НачалоПериода")).Количество() <> 0
		ИЛИ  Объект.Параметры.НайтиСтроки(Новый Структура("ИмяПараметра", "Период")).Количество()
		Тогда
		Элементы.Период.Видимость = Истина;
	Иначе
		Элементы.Период.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаПростойРежим.Пометка = ПростойРежим;  
	
	Элементы.СпособЗаполнения.Видимость = Не ПростойРежим;
	Элементы.Параметры.Видимость = Не ПростойРежим;
	Элементы.Реквизиты.Видимость = Не ПростойРежим;
	Элементы.СоответствияГУИДСправочника.Видимость = Не ПростойРежим;
	Элементы.ПерезаполнятьВыбранные.Видимость = Не ПростойРежим;
	Элементы.ПерезаполнятьУтвержденные.Видимость = Не ПростойРежим;
	
	УстановитьВидимостьНаСервере();
	
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	//Элементы.ТипЭталона.Видимость = НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СпособЗаполнения, "ТипЭталона"));	
	
КонецПроцедуры

//++ 08.04.2025 Муравьев Д.О.
&НаСервере
Функция ПолучитьЗапросSQL()
	Текст = Объект.СпособЗаполнения.ТекстЗапроса;      
	
	Для каждого ПараметрЗапроса из Объект.Параметры Цикл
		
		Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Дата") Тогда
			ЗначениеПараметра = "'" + Формат(ПараметрЗапроса.Значение, "ДФ='yyyy-MM-dd'") + "'";
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Число") Тогда
			ЗначениеПараметра = Формат(ПараметрЗапроса.Значение, "ЧГ=");
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Булево") Тогда
			ЗначениеПараметра = ?(ПараметрЗапроса.Значение, 1, 0)
		Иначе
		    ЗначениеПараметра = "'" +СокрЛП(ПараметрЗапроса.Значение) + "'";  
		КонецЕсли;		
		
		Текст = СтрЗаменить(Текст, "&"+ПараметрЗапроса.ИмяПараметра, ЗначениеПараметра);	
		
		
	КонецЦикла;
	Возврат Текст;	

	
КонецФункции 

&НаСервере
Функция ПолучитьПоляЗапроса()
	ПоляЗапроса = "GUID,";
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыПодбораЭталоновСтруктураПолей.ИмяПоля КАК ИмяПоля
		|ИЗ
		|	Справочник.СпособыПодбораЭталонов.СтруктураПолей КАК СпособыПодбораЭталоновСтруктураПолей
		|ГДЕ
		|	СпособыПодбораЭталоновСтруктураПолей.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.СпособЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		Если ВыборкаДетальныеЗаписи.ИмяПоля = "GUID" Тогда
			продолжить;
		Иначе	
			ПоляЗапроса = ПоляЗапроса + " " +ВыборкаДетальныеЗаписи.ИмяПоля + ",";
		КонецЕсли;
		
	КонецЦикла;
	
    ПоляЗапроса = Лев(ПоляЗапроса, СтрДлина(ПоляЗапроса) - 1);
	Возврат ПоляЗапроса;	
КонецФункции

&НаСервере
Процедура ВыполнитьПослеЗакрытияФормыВыбораСтрок(РезультатЗакрытия, ПараметрыОповещения) Экспорт
	Если РезультатЗакрытия <> Неопределено Тогда
		Если НЕ РезультатЗакрытия.Свойство("ВыборОднойСтроки") тогда
			ДобавитьСтрокиИзПодбора(РезультатЗакрытия.Адрес); 
		Иначе
			ИзменитьСтроку(РезультатЗакрытия.Адрес)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры                

&НаСервере
Процедура ДобавитьСтрокиИзПодбора(Адрес)
	ТаблицаСтрок = ПолучитьИзВременногоХранилища(Адрес); 
	//ТекущийКлючСвязи = ПолучитьМаксимальныйКлючСвязи() + 1;
	КолонкиТЗ = ТаблицаСтрок.Колонки;
	Для Каждого стр из ТаблицаСтрок Цикл
		СтрокаТабличнойЧасти = Объект.Соответствия.Добавить();
		СтрокаТабличнойЧасти.ГУИДСправочника = стр.GUID;
		//СтрокаТабличнойЧасти.Представление = стр.Name;
		//СтрокаТабличнойЧасти.База = Объект.База;
		//СтрокаТабличнойЧасти.КлючСвязи = ТекущийКлючСвязи;
		
		Для каждого Поле из Объект.СпособЗаполнения.СтруктураПолей Цикл
			
			Если КолонкиТЗ.Найти(Поле.ИмяПоля) <> Неопределено Тогда
				
				Если Поле.ОсновноеПредставление Тогда
					СтрокаТабличнойЧасти.Представление = стр[Поле.ИмяПоля];
				КонецЕсли;
				
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтроку(Адрес)
	ТаблицаСтрок = ПолучитьИзВременногоХранилища(Адрес); 
	//ТекущийКлючСвязи = ПолучитьМаксимальныйКлючСвязи() + 1;
	стр = ТаблицаСтрок[0];
	КолонкиТЗ = ТаблицаСтрок.Колонки;
	СтрокаТабличнойЧасти = Объект.Соответствия[Элементы.Соответствия.ТекущаяСтрока];
	//ТекущийКлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;

	//СтрокаТабличнойЧасти = Объект.Соответствия.Добавить();
	СтрокаТабличнойЧасти.ГУИДСправочника = стр.GUID;
	//СтрокаТабличнойЧасти.Представление = стр.Name;
	//СтрокаТабличнойЧасти.База = Объект.База;
	//СтрокаТабличнойЧасти.КлючСвязи = ТекущийКлючСвязи;
	
	Для каждого Поле из Объект.СпособЗаполнения.СтруктураПолей Цикл
		
		Если КолонкиТЗ.Найти(Поле.ИмяПоля) <> Неопределено Тогда
			
			Если Поле.ОсновноеПредставление Тогда
				СтрокаТабличнойЧасти.Представление = стр[Поле.ИмяПоля];
			КонецЕсли;					
			
		КонецЕсли;	
		
	КонецЦикла;
	
	
КонецПроцедуры
   //-- 08.04.2025 Муравьев Д.О. 
   
&НаСервере
Процедура ТипЭталонаПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпособыПодбораЭталонов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СпособыПодбораЭталонов КАК СпособыПодбораЭталонов
		|ГДЕ
		|	СпособыПодбораЭталонов.ПоУмолчанию
		|	И СпособыПодбораЭталонов.ТипЭталона = &ТипЭталона";
	
	Запрос.УстановитьПараметр("ТипЭталона", Объект.ТипЭталона);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Объект.СпособЗаполнения = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Объект.СпособЗаполнения = Справочники.СпособыПодбораЭталонов.ПустаяСсылка();
		Сообщить("Для данного типа эталонов не установлен способ заполнения по умолчанию. Отключите простой режим для выбора способа заполнения вручную.");
	КонецЕсли;
	
	СпособЗаполненияПриИзмененииНаСервере();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

#КонецОбласти












