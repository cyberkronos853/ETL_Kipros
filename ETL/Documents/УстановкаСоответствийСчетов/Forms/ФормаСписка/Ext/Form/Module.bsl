
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	ОбновитьУведомления();
	
КонецПроцедуры

	
#КонецОбласти   

 #Область ОбработчикиКомандФормы	
&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	ОбновитьУведомления()
КонецПроцедуры
	
#КонецОбласти



#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьУведомления()	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатистикаВыгрузкиЭталонов.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.СтатистикаВыгрузкиЭталонов КАК СтатистикаВыгрузкиЭталонов
		|ГДЕ
		|	НЕ СтатистикаВыгрузкиЭталонов.ЕстьОшибки
		|	И СтатистикаВыгрузкиЭталонов.Статус = &Статус
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОкончания УБЫВ";
	
	Запрос.УстановитьПараметр("Статус", "Выполнены все этапы");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Элементы.ДекорацияУведомлениеОбОбмене.Заголовок = "Последний обмен эталонами выполнен в " 
		+ Формат(ВыборкаДетальныеЗаписи.ДатаОкончания,"ДЛФ=DT");
	Иначе
		Элементы.ДекорацияУведомлениеОбОбмене.Заголовок = "Обмен эталонами не выполнялся";		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбменЭталонами);
	ВремяЗапуска = ПолучитьВремяСледующегоЗапуска(РегЗадание);
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеЗаполнено(ВремяЗапуска) Тогда
		 Элементы.ДекорацияУведомлениеОбОбмене.Заголовок = Элементы.ДекорацияУведомлениеОбОбмене.Заголовок 
		 + Символы.ПС + "Следующий запуск ориентировочно в: " + Формат(ВремяЗапуска, "ДФ='dd.MM.yyyy HH:mm:ss'");
	 Иначе
		  Элементы.ДекорацияУведомлениеОбОбмене.Заголовок = Элементы.ДекорацияУведомлениеОбОбмене.Заголовок 
		 + Символы.ПС + "Следующий запуск не запланирован";
    КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтатусВыполненияПроцедурSQLСрезПоследних.Статус КАК Статус,
	               |	СтатусВыполненияПроцедурSQLСрезПоследних.Период КАК Период,
	               |	СтатусВыполненияПроцедурSQLСрезПоследних.ДатаЗавершения КАК ДатаЗавершения
	               |ИЗ
	               |	РегистрСведений.СтатусВыполненияПроцедурSQL.СрезПоследних(, ИмяХранимойПроцедуры = &ИмяПроцедуры) КАК СтатусВыполненияПроцедурSQLСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ"; 
	
	Запрос.УстановитьПараметр("ИмяПроцедуры", "build_map_Turnovers_change");
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если Выборка.Статус = "Выполняется" Тогда
			Элементы.ДекорацияУведомлениеОМаппингеПроводок.Заголовок = 
			"Пересчет консолидационных проводок выполняется с " + Выборка.Период + ". Ориентировочное время окончания - " + (Выборка.Период + 60*60*2);
		Иначе
			Элементы.ДекорацияУведомлениеОМаппингеПроводок.Заголовок = 
			"Пересчет консолидационных проводок завершен в " + ?(ЗначениеЗаполнено(Выборка.ДатаЗавершения), Формат(Выборка.ДатаЗавершения," ДЛФ=DT"), "");
			
			УстановитьПривилегированныйРежим(Истина);
			РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ЗапускОбмена);
			ВремяЗапуска = ПолучитьВремяСледующегоЗапуска(РегЗадание); 
			УстановитьПривилегированныйРежим(Ложь);

			Если ЗначениеЗаполнено(ВремяЗапуска) Тогда
				 Элементы.ДекорацияУведомлениеОМаппингеПроводок.Заголовок = Элементы.ДекорацияУведомлениеОМаппингеПроводок.Заголовок 
				 + Символы.ПС + "Следующий запуск обмена данными с пересчетом проводок ориентировочно в: " + Формат(ВремяЗапуска, "ДФ='dd.MM.yyyy HH:mm:ss'");
		    КонецЕсли;
	
		КонецЕсли;
	Иначе
		Элементы.ДекорацияУведомлениеОМаппингеПроводок.Заголовок = "Пересчет консолидационных проводоке не выполнялся";
	КонецЕсли; 

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры



Функция ПолучитьВремяСледующегоЗапуска(РегламентноеЗадание, ДеньПроверки = Неопределено) Экспорт
    Если НЕ РегламентноеЗадание.Использование Тогда
        Возврат Неопределено; // Задание отключено
    КонецЕсли;

    Расписание = РегламентноеЗадание.Расписание;
	Если Не ЗначениеЗаполнено(ДеньПроверки) Тогда
		ТекущаяДата = ТекущаяДатаСеанса(); 
	Иначе
		ТекущаяДата = ДеньПроверки;
	КонецЕсли;

    // Проверка периода действия расписания
    Если Расписание.ДатаНачала <> '00010101' И ТекущаяДата < Расписание.ДатаНачала Тогда
        Возврат Расписание.ДатаНачала;
    КонецЕсли;
    Если Расписание.ДатаКонца <> '00010101' И ТекущаяДата > Расписание.ДатаКонца Тогда
        Возврат Неопределено; // Расписание истекло
    КонецЕсли;

    // Поиск следующего подходящего дня
    БлижайшаяДата = ТекущаяДата; 
	НайденДень = Ложь;
   	Если НЕ Расписание.ПериодПовтораДней = 0 Тогда
	    Для Сч = 0 По 365 Цикл // Проверяем до года вперед
	        Если Расписание.ДниНедели.Количество() > 0 И Расписание.ДниНедели.Найти(ДеньНедели(БлижайшаяДата)) = Неопределено Тогда
	            БлижайшаяДата = БлижайшаяДата + 86400;
	            Продолжить;
	        КонецЕсли;

	        Если Расписание.Месяцы.Количество() > 0 И Расписание.Месяцы.Найти(Месяц(БлижайшаяДата)) = Неопределено Тогда
	            БлижайшаяДата = БлижайшаяДата + 86400;
	            Продолжить;
	        КонецЕсли;

		
	        Если Расписание.ПериодПовтораДней > 1 И (Сч % Расписание.ПериодПовтораДней) <> 0 Тогда
	            БлижайшаяДата = БлижайшаяДата + 86400;
	            Продолжить;
	        КонецЕсли;

	        НайденДень = Истина;
	        Прервать;
		КонецЦикла;
	КонецЕсли;

    Если НЕ НайденДень Тогда
        Возврат Неопределено; // Нет подходящих дней
    КонецЕсли;

    // Определяем время выполнения
    ВремяНачала = ?(Расписание.ВремяНачала = '00010101', '00010101000000', Расписание.ВремяНачала);
    БлижайшееВремя = НачалоДня(БлижайшаяДата) + (ВремяНачала - '00010101');

    // Учитываем повторение в течение дня
    Если Расписание.ПериодПовтораВТечениеДня > 0 Тогда
        ВремяОкончания = ?(Расписание.ВремяКонца = '00010101', '00010101235959', Расписание.ВремяКонца);
        Если БлижайшееВремя <= ТекущаяДата Тогда
            Интервал = Расписание.ПериодПовтораВТечениеДня;
            КоличествоПовторов = Цел((ТекущаяДата - БлижайшееВремя) / Интервал) + 1;
            БлижайшееВремя = БлижайшееВремя + КоличествоПовторов * Интервал;

            Если БлижайшееВремя > (НачалоДня(БлижайшаяДата) + (ВремяОкончания - '00010101')) Тогда
                БлижайшаяДата = БлижайшаяДата + 86400;
                БлижайшееВремя = НачалоДня(БлижайшаяДата) + (ВремяНачала - '00010101');
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;

    // Проверяем, что время в будущем
    Если БлижайшееВремя <= ТекущаяДата Тогда
        БлижайшееВремя = ПолучитьВремяСледующегоЗапуска(РегламентноеЗадание, КонецДня(БлижайшееВремя) + 1); // Рекурсия для следующего дня
    КонецЕсли;

    Возврат БлижайшееВремя;
КонецФункции
#КонецОбласти