
 
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Если Соответствия.Найти(Справочники.ЗначенияЭталонов.ПустаяСсылка(), "ЗначениеЭталона") <> Неопределено Тогда
		Сообщить("Не во всех строках задано соответствие. Проведение не возможно");
		Отказ = Истина; 
		возврат;
	КонецЕсли;
	
	Если Не ЭтоНовый() И Ссылка.Проведен Тогда
		ОбработкаУдаленияПроведения(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	//Проверка возможности проведения
	ТаблицаПроверяемыхСтрок = ЭтотОбъект.Соответствия.ВыгрузитьКолонки("ГУИДСправочника, НастройкаСчета");
	
	Для каждого СтрокаТЧ из ЭтотОбъект.Соответствия Цикл
		
		Если НЕ (СтрокаТЧ.Статус = "Утвержден" И СтрокаТЧ.Статус = "Не выбран") ИЛИ СтрокаТЧ.Удалить Тогда
			
			НоваяПроверяемаяСтрока = ТаблицаПроверяемыхСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПроверяемаяСтрока, СтрокаТЧ);
			
		КонецЕсли;
		
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.ГУИДСправочника КАК ГУИДСправочника,
	               |	ТЗ.НастройкаСчета КАК НастройкаСчета,
				   |	&База КАК База
	               |ПОМЕСТИТЬ ПроверяемыеЭлементы
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УстановкаСоответствийСоответствия.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПроверяемыеЭлементы КАК ПроверяемыеЭлементы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаСоответствийСчетов.Соответствия КАК УстановкаСоответствийСоответствия
	               |		ПО ПроверяемыеЭлементы.ГУИДСправочника = УстановкаСоответствийСоответствия.ГУИДСправочника
	               |			И ПроверяемыеЭлементы.База = УстановкаСоответствийСоответствия.Ссылка.База
	               |			И (УстановкаСоответствийСоответствия.Ссылка.Дата > &ДатаДокумента) 
				   |			И (УстановкаСоответствийСоответствия.НастройкаСчета = ПроверяемыеЭлементы.НастройкаСчета)
	               |			И (УстановкаСоответствийСоответствия.Ссылка.ТаблицаИсточникДанных = &ТаблицаИсточник)
	               |			И (НЕ УстановкаСоответствийСоответствия.Ссылка.ПометкаУдаления)
	               |			И (УстановкаСоответствийСоответствия.Ссылка.Проведен)
				   |			И УстановкаСоответствийСоответствия.Статус <> ""Не выбран""";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("ТЗ", ТаблицаПроверяемыхСтрок);
	Запрос.УстановитьПараметр("ТаблицаИсточник", ЭтотОбъект.ТаблицаИсточникДанных); 
	Запрос.УстановитьПараметр("База", ЭтотОбъект.База);
		
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Сообщить("Проведение не возможно, существуют документы более поздней даты, устанавливающие соответствия из данного документа.");		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить(Выборка.Ссылка);
		КонецЦикла;
		Отказ = Истина;
		Возврат;
    			
	КонецЕсли;

	//конец проверки
	
		
	НаборДвиженияИстории = ЭтотОбъект.Движения.ИсторияУстановкиСоответствийСчетов;
	НаборДвиженияИстории.Записывать = Истина;
	
	
	Для каждого СтрокаДанных Из Соответствия Цикл
		Если СтрокаДанных.Удалить Тогда
									
			РС = РегистрыСведений.СоответствияСчетов.СоздатьМенеджерЗаписи(); 
			РС.ТаблицаИсточник = ТаблицаИсточникДанных;
			РС.База = База;
			РС.ГУИДСправочника = СтрокаДанных.ГУИДСправочника; 
			РС.НастройкаСчета = СтрокаДанных.НастройкаСчета;
			РС.Удалить();
			
			
			РСИ = НаборДвиженияИстории.Добавить();
			РСИ.ТаблицаИсточник = ТаблицаИсточникДанных;
			РСИ.База = База;
			РСИ.ГУИДСправочника = СтрокаДанных.ГУИДСправочника;  
			РСИ.НастройкаСчета = СтрокаДанных.НастройкаСчета;
			РСИ.Статус = "Удален";  
			РСИ.Период = ЭтотОбъект.Дата;
			РСИ.ДатаУстановки = ТекущаяДата();
                    			
			
		Иначе 
			Если НЕ (СтрокаДанных.Статус = "Утвержден" ИЛИ СтрокаДанных.Статус = "Не выбран") Тогда
				Если ЗначениеЗаполнено(База) И ЗначениеЗаполнено(СтрокаДанных.ГУИДСправочника) И ЗначениеЗаполнено(СтрокаДанных.ЗначениеЭталона) Тогда
					
				
									
					//
					РС = РегистрыСведений.СоответствияСчетов.СоздатьМенеджерЗаписи(); 
					РС.ТаблицаИсточник = ТаблицаИсточникДанных;
					РС.База = База;
					РС.ГУИДСправочника = СтрокаДанных.ГУИДСправочника;
					РС.НастройкаСчета = СтрокаДанных.НастройкаСчета;
					РС.ЗначениеЭталона = СтрокаДанных.ЗначениеЭталона;
					РС.Представление = СтрокаДанных.Представление;
					РС.Документ = ЭтотОбъект.Ссылка;
					РС.Записать(); 	 
					
								
					
					
					РСИ = НаборДвиженияИстории.Добавить();
				    ЗаполнитьЗначенияСвойств(РСИ, РС); 
					РСИ.Статус = СтрокаДанных.Статус;  
					РСИ.Период = ЭтотОбъект.Дата;
					РСИ.ДатаУстановки = ТекущаяДата();
					
					
				Иначе
					
					Сообщить("В строке " + Строка(СТрокаДанных.НомерСтроки) + " не заполнены все необходимые поля");
					
					
				КонецЕсли;  
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЦикла;   
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	

	//Проверка возможности отмены проведения
	ТаблицаПроверяемыхСтрок = ЭтотОбъект.Соответствия.ВыгрузитьКолонки("НастройкаСчета, ГУИДСправочника, Удалить");
	
	Для каждого СтрокаТЧ из ЭтотОбъект.Соответствия Цикл
		
		Если НЕ (СтрокаТЧ.Статус = "Утвержден" ИЛИ СтрокаТЧ.Статус = "Не выбран") ИЛИ СтрокаТЧ.Удалить Тогда
			
			НоваяПроверяемаяСтрока = ТаблицаПроверяемыхСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПроверяемаяСтрока, СтрокаТЧ);
			
		КонецЕсли;  	
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.ГУИДСправочника КАК ГУИДСправочника,
	               |	&База КАК База,
	               |	ТЗ.НастройкаСчета КАК НастройкаСчета
	               |ПОМЕСТИТЬ ПроверяемыеЭлементы
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УстановкаСоответствийСоответствия.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПроверяемыеЭлементы КАК ПроверяемыеЭлементы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаСоответствийСчетов.Соответствия КАК УстановкаСоответствийСоответствия
	               |		ПО ПроверяемыеЭлементы.ГУИДСправочника = УстановкаСоответствийСоответствия.ГУИДСправочника
				   |			И ПроверяемыеЭлементы.НастройкаСчета = УстановкаСоответствийСоответствия.НастройкаСчета
	               |			И ПроверяемыеЭлементы.База = УстановкаСоответствийСоответствия.Ссылка.База
	               |			И (УстановкаСоответствийСоответствия.Ссылка.Дата > &ДатаДокумента)
	               |			И (УстановкаСоответствийСоответствия.Ссылка.ТаблицаИсточникДанных = &ТаблицаИсточник)
	               |			И (НЕ УстановкаСоответствийСоответствия.Ссылка.ПометкаУдаления)
	               |			И (УстановкаСоответствийСоответствия.Ссылка.Проведен)
				   |			И УстановкаСоответствийСоответствия.Статус <> ""Не выбран""";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("ТЗ", ТаблицаПроверяемыхСтрок);
	Запрос.УстановитьПараметр("ТаблицаИсточник", ЭтотОбъект.ТаблицаИсточникДанных);  
	Запрос.УстановитьПараметр("База", ЭтотОбъект.База);
	
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
					
		Сообщить("Отмена проведения не возможна. Существуют документы более поздней даты, использующие соответствия из данного документа:");
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			  Сообщить(Выборка.Ссылка);
		КонецЦикла;
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;  
	
	
	//Ищем измерения эталонов, установленных текущим документов и их предыдущие значения  
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствияЭталонов.ТаблицаИсточник КАК ТаблицаИсточник,
	               |	СоответствияЭталонов.ГУИДСправочника КАК ГУИДСправочника,
	               |	СоответствияЭталонов.База КАК База,
				   |	СоответствияЭталонов.НастройкаСчета КАК НастройкаСчета,
	               |	ИсторияУстановкиСоответствийСрезПоследних.ЗначениеЭталона КАК ЗначениеЭталона,
	               |	ИсторияУстановкиСоответствийСрезПоследних.Регистратор КАК Регистратор,
	               |	ИсторияУстановкиСоответствийСрезПоследних.Представление КАК Представление
				   |ИЗ
	               |	РегистрСведений.СоответствияСчетов КАК СоответствияЭталонов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияУстановкиСоответствийСчетов.СрезПоследних(&ДатаСреза, ) КАК ИсторияУстановкиСоответствийСрезПоследних
	               |		ПО ИсторияУстановкиСоответствийСрезПоследних.ТаблицаИсточник = СоответствияЭталонов.ТаблицаИсточник
	               |			И ИсторияУстановкиСоответствийСрезПоследних.ГУИДСправочника = СоответствияЭталонов.ГУИДСправочника
	               |			И ИсторияУстановкиСоответствийСрезПоследних.База = СоответствияЭталонов.База
				   |           	И ИсторияУстановкиСоответствийСрезПоследних.НастройкаСчета = СоответствияЭталонов.НастройкаСчета

	               |ГДЕ
	               |	СоответствияЭталонов.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза", ЭтотОбъект.Дата - 1); 
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Пока Выборка.Следующий() Цикл   
		//Если значение заполнено, то заменяем, иначе удаляем 
		Если ЗначениеЗаполнено(Выборка.ЗначениеЭталона) Тогда
			
			РС = РегистрыСведений.СоответствияСчетов.СоздатьМенеджерЗаписи(); 
			ЗаполнитьЗначенияСвойств(РС, Выборка);  
			РС.Документ = Выборка.Регистратор;
			РС.Записать(); 
		Иначе 		
			РС = РегистрыСведений.СоответствияСчетов.СоздатьМенеджерЗаписи(); 
			ЗаполнитьЗначенияСвойств(РС, Выборка);
			РС.Удалить(); 
		КонецЕсли;
		
	КонецЦикла;      
	
	//Восстанавливаем удаленные.
	УдаленныеЭталоны = ТаблицаПроверяемыхСтрок.Скопировать(Новый Структура("Удалить", Истина), "НастройкаСчета, ГУИДСправочника");
	
	
	Если УдаленныеЭталоны.Количество() <> 0 Тогда
					
		Запрос = Новый Запрос;
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТЗ.ГУИДСправочника КАК ГУИДСправочника,
		               |	&База КАК База,
		               |	ТЗ.НастройкаСчета КАК НастройкаСчета,
					   |	&ТаблицаИсточник КАК ТаблицаИсточник
		               |ПОМЕСТИТЬ ПроверяемыеЭлементы
		               |ИЗ
		               |	&ТЗ КАК ТЗ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПроверяемыеЭлементы.ТаблицаИсточник КАКТаблицаИсточник,
		               |	ПроверяемыеЭлементы.ГУИДСправочника КАК ГУИДСправочника,
		               |	ПроверяемыеЭлементы.База КАК База,
		               |	ИсторияУстановкиСоответствийСрезПоследних.ЗначениеЭталона КАК ЗначениеЭталона,
		               |	ИсторияУстановкиСоответствийСрезПоследних.Регистратор КАК Регистратор,
		               |	ИсторияУстановкиСоответствийСрезПоследних.Представление КАК Представление,
		               |	ИсторияУстановкиСоответствийСрезПоследних.НастройкаСчета КАК НастройкаСчета
		               |ИЗ
		               |	РегистрСведений.ИсторияУстановкиСоответствийСчетов.СрезПоследних(&ДатаСреза, ) КАК ИсторияУстановкиСоответствийСрезПоследних
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроверяемыеЭлементы КАК ПроверяемыеЭлементы
		               |		ПО ИсторияУстановкиСоответствийСрезПоследних.ТаблицаИсточник = ПроверяемыеЭлементы.ТаблицаИсточник
		               |			И ИсторияУстановкиСоответствийСрезПоследних.ГУИДСправочника = ПроверяемыеЭлементы.ГУИДСправочника
		               |			И ИсторияУстановкиСоответствийСрезПоследних.База = ПроверяемыеЭлементы.База"; 
		
		Запрос.УстановитьПараметр("ТЗ", УдаленныеЭталоны);
		Запрос.УстановитьПараметр("ДатаСреза", ЭтотОбъект.Дата - 1); 
		Запрос.УстановитьПараметр("База", База);
        Запрос.УстановитьПараметр("ТаблицаИсточник", ТаблицаИсточникДанных);

		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РС = РегистрыСведений.СоответствияСчетов.СоздатьМенеджерЗаписи(); 
			ЗаполнитьЗначенияСвойств(РС, Выборка);
			РС.Записать(); 	
			
		КонецЦикла;   

		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	
	Если ЭтотОбъект.Ссылка.ПометкаУдаления И НЕ ЭтотОбъект.ПометкаУдаления Тогда
		Отказ = Истина;
		Сообщить("Пометку удаления отменить нельзя. Неоьбходимо создать новый документ копированием");
	КонецЕсли;    
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	 ЗаполнитьСоответствияИзСправочника(); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
Процедура ЗаполнитьИзБазы(Отказ = Ложь, Ошибка = "") Экспорт
   
	Текст = ЭтотОбъект.СпособЗаполнения.ТекстЗапроса;      
	
	Для каждого ПараметрЗапроса из ЭтотОбъект.Параметры Цикл
		
		Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Дата") Тогда
			ЗначениеПараметра = "'" + Формат(ПараметрЗапроса.Значение, "ДФ='yyyy-MM-dd'") + "'";
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Число") Тогда
			ЗначениеПараметра = Формат(ПараметрЗапроса.Значение, "ЧГ=");
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Булево") Тогда
			ЗначениеПараметра = ?(ПараметрЗапроса.Значение, 1, 0)
		Иначе
		    ЗначениеПараметра = "'" +СокрЛП(ПараметрЗапроса.Значение) + "'";  
		КонецЕсли;		
		
		Текст = СтрЗаменить(Текст, "&"+ПараметрЗапроса.ИмяПараметра, ЗначениеПараметра);	
		
		
	КонецЦикла;
		
	
	Коннектор = ОбменSQLСервер.ПолучитьКоннектор();		
	Результат = Коннектор.ВыполнитьПроизвольныйЗапрос(Текст);
	
	Если Результат.ЕстьОшибки Тогда 
		
		Ошибка = СтрСоединить(Коннектор.ПолучитьОшибки(), Символы.ПС);;
		Отказ = Истина;
	
	Иначе 
		ЭтотОбъект.Соответствия.Очистить();		
		Для каждого Данные из Результат.Данные Цикл
			
			НоваяСтрока = ЭтотОбъект.Соответствия.Добавить();
		
			Если Данные.Свойство("GUID") Тогда
				НоваяСтрока.ГУИДСправочника = Данные.GUID;
			КонецЕсли;	
			
			Если Данные.Свойство("DestGUID") Тогда
				Если Данные.DestGUID <> NULL Тогда
					
					НоваяСтрока.ЗначениеЭталона = Справочники.ЗначенияЭталонов.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.DestGUID));
					НоваяСтрока.Статус = "Утвержден";
				КонецЕсли;    
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеЭталона) Тогда
				НоваяСтрока.Статус = "Не выбран";
            КонецЕсли;
			
			Для каждого Поле из ЭтотОбъект.СпособЗаполнения.СтруктураПолей Цикл
				
				Если Данные.Свойство(Поле.ИмяПоля) Тогда
					
					Если Поле.ОсновноеПредставление Тогда
						НоваяСтрока.Представление = Данные[Поле.ИмяПоля];
					КонецЕсли;									
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЦикла;  
		
		ЭтотОбъект.Соответствия.Сортировать("Представление");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ЗаполнитьПараметры(Отказ = Ложь, Ошибка = "") Экспорт

	Попытка
		
		Если ЗначениеЗаполнено(ЭтотОбъект.СпособЗаполнения) Тогда
			ЭтотОбъект.ТаблицаИсточникДанных = ЭтотОбъект.СпособЗаполнения.ТаблицаИсточникДанных;
			ЭтотОбъект.Параметры.Очистить();
			
			Для каждого Параметр из ЭтотОбъект.СпособЗаполнения.Параметры Цикл
				
				НовыйПараметр = ЭтотОбъект.Параметры.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПараметр, Параметр); 
				Если ЗначениеЗаполнено(Параметр.ЗначениеПоУмолчанию) Тогда
					НовыйПараметр.Значение = Параметр.ЗначениеПоУмолчанию;
				Иначе
					Если Лев(Параметр.ТипПоля, 5) = "Число" Тогда
						НовыйПараметр.Значение = 0;
					ИначеЕсли  Лев(Параметр.ТипПоля, 4) = "Дата" Тогда
						НовыйПараметр.Значение = Дата(1, 1, 1, 0, 0, 0);
						Если НовыйПараметр.ИмяПараметра = "НачалоПериода" Тогда
							НовыйПараметр.Значение = ЭтотОбъект.НачалоПериода;
						ИначеЕсли НовыйПараметр.ИмяПараметра = "КонецПериода" ИЛИ НовыйПараметр.ИмяПараметра = "Период" Тогда
							НовыйПараметр.Значение = ЭтотОбъект.КонецПериода; 
						КонецЕсли; 
					ИначеЕсли  Лев(Параметр.ТипПоля, 6) = "Булево" Тогда	
						НовыйПараметр.Значение = Ложь;
						
					Иначе
						НовыйПараметр.Значение = "";
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			
			ЭтотОбъект.ТипЭталона = ЭтотОбъект.СпособЗаполнения.ТипЭталона;
			
			ЭтотОбъект.Реквизиты.Очистить();
			Для каждого Реквизит из ЭтотОбъект.СпособЗаполнения.СтруктураПолей Цикл
				НовыйРеквизит = ЭтотОбъект.Реквизиты.Добавить();
				НовыйРеквизит.РеквизитЭталона = Реквизит.РеквизитЭталона;
				НовыйРеквизит.РеквизитЗапроса = Реквизит.ИмяПоля;
				НовыйРеквизит.Поиск = Реквизит.Поиск; 		   		
			КонецЦикла;  
		КонецЕсли;	
	Исключение
		Отказ = Истина;
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры 

Процедура ЗаполнитьСоответствияИзСправочника(Отказ = Ложь, ТолькоДляНезаполненных = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	

	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствияСчетов.ГУИДСправочника КАК ГУИД,
	               |	СоответствияСчетов.База КАК База,
	               |	СоответствияСчетов.ЗначениеЭталона КАК ЗначениеЭталона
	               |ИЗ
	               |	РегистрСведений.СоответствияСчетов КАК СоответствияСчетов
	               |ГДЕ
	               |	СоответствияСчетов.ГУИДСправочника В(&МассивГуидов)
	               |	И СоответствияСчетов.ТаблицаИсточник = &ТаблицаИсточник";

	
	Запрос.УстановитьПараметр("ТаблицаИсточник", ЭтотОбъект.ТаблицаИсточникДанных); 
	Запрос.УстановитьПараметр("МассивГуидов", ЭтотОбъект.Соответствия.ВыгрузитьКолонку("ГУИДСправочника"));
	
	
	ТЗЭталонов = Запрос.Выполнить().Выгрузить();
	
	//Подходящих эталонов нет, ничего не делаем
	Если ТЗЭталонов.Количество() = 0 Тогда
		возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЧ из ЭтотОбъект.Соответствия Цикл
		
		Если ТолькоДляНезаполненных И ЗначениеЗаполнено(СтрокаТЧ.ЗначениеЭталонаСоответствие) Тогда
			 Продолжить;
		КонецЕсли;
		
		ПодходящиеЭталоны = ТЗЭталонов.НайтиСтроки(Новый Структура("ГУИД, База", СтрокаТЧ.ГУИДСправочника, База));
		
		Если ПодходящиеЭталоны.Количество() <> 0 Тогда
			
			 СтрокаТЧ.ЗначениеЭталона = ПодходящиеЭталоны[0].ЗначениеЭталона;
			 СтрокаТЧ.Статус = "Утвержден";
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ПодобратьЭталоныПоЧастиСтроки(Отказ = Ложь, Ошибка = "", ПерезаполнятьУтвержденные = Ложь, ПерезаполнятьВыбранные = Ложь) Экспорт

	Запрос = новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияЭталоновСтрокиПоиска.Ссылка КАК Ссылка,
	               |	ЗначенияЭталоновСтрокиПоиска.СтрокаПоиска КАК СтрокаПоиска
	               |ИЗ
	               |	Справочник.ЗначенияЭталонов.СтрокиПоиска КАК ЗначенияЭталоновСтрокиПоиска
	               |ГДЕ
	               |	ЗначенияЭталоновСтрокиПоиска.Ссылка.Владелец = &ТипЭталона
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗначенияЭталоновСтрокиПоиска.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("ТипЭталона", ЭтотОбъект.ТипЭталона);
	
	ТЗКлючевыхСтрок = Запрос.Выполнить().Выгрузить();
	
	Попытка 
		Для каждого СтрокаТЧ из ЭтотОбъект.Соответствия Цикл	
			
			Если (Не ЗначениеЗаполнено(СтрокаТЧ.ЗначениеЭталона) ИЛИ (ПерезаполнятьВыбранные И НЕ СтрокаТЧ.Статус = "Утвержден"))
				ИЛИ (ПерезаполнятьУтвержденные И СтрокаТЧ.Статус = "Утвержден")
				Тогда
				Для каждого СтрокаТЗ из ТЗКлючевыхСтрок Цикл
					
					Если СтрНайти(НРЕГ(СтрокаТЧ.Представление), НРЕГ(СтрокаТЗ.СтрокаПоиска)) <> 0 Тогда
						
						СтрокаТЧ.ЗначениеЭталона = СТрокаТЗ.Ссылка;  
						СтрокаТЧ.Статус = "Подобран по ключевой строке";
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла; 
			КонецЕсли;			
			
		КонецЦикла; 
		
	Исключение
		Ошибка = ОписаниеОшибки();
		Отказ = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодобратьЭталоныПоПравилам(Отказ = Ложь, Ошибка = "", ПерезаполнятьУтвержденные = Ложь, ПерезаполнятьВыбранные = Ложь) Экспорт
	
	Если ЭтотОбъект.СпособЗаполнения.ПравилаУстановкиЗначений.Количество() <> 0 Тогда
		
		ТаблицаПравил = ЭтотОбъект.СпособЗаполнения.ПравилаУстановкиЗначений.Выгрузить();
		ГруппыПравил = ТаблицаПравил.ВыгрузитьКолонку("ГруппаПравил");
		
		Попытка
			Для каждого СтрокаТЧ из ЭтотОбъект.Соответствия Цикл
				
				Если (Не ЗначениеЗаполнено(СтрокаТЧ.ЗначениеЭталона) ИЛИ (ПерезаполнятьВыбранные И НЕ СтрокаТЧ.Статус = "Утвержден"))
				ИЛИ (ПерезаполнятьУтвержденные И СтрокаТЧ.Статус = "Утвержден") Тогда
					
					Для каждого ГруппаПравил из ГруппыПравил Цикл
						
						Подходит = Истина;
						
						ДопИнфо = ЭтотОбъект.ДопИнформация.Выгрузить(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи), "ИмяПоля, ЗначениеПоля");
						//Последовательно проверяем все правила из группы, 
						//Только если все правила выполнены для элементов доп информации, то присваиваем значение эталона.	
						Для каждого Правило Из ТаблицаПравил.НайтиСтроки(Новый Структура("ГруппаПравил", ГруппаПравил)) Цикл
							
							ПолеДляПроверки = ДопИнфо.Найти(Правило.ИмяПоля, "ИмяПоля");
							Если ПолеДляПроверки = Неопределено Тогда
								Подходит = Ложь;
								прервать;
							Иначе
								Попытка 
									Если Правило.ВидСравнения = Перечисления.ВидыСравнения.НачинаетсяС ИЛИ Правило.ВидСравнения = Перечисления.ВидыСравнения.Содержит Тогда
										Значение = СокрЛП(ПолеДляПроверки.ЗначениеПоля);										
									ИначеЕсли	ТипЗнч(Правило.Значение) = Тип("Число") Тогда
										Значение = Число(ПолеДляПроверки.ЗначениеПоля);
									ИначеЕсли ТипЗнч(Правило.Значение) = Тип("Дата") Тогда
										Значение = Дата(Число(Сред(ПолеДляПроверки.ЗначениеПоля, 7, 4)), Число(Сред(ПолеДляПроверки.ЗначениеПоля, 4, 2)), Число(Лев(ПолеДляПроверки.ЗначениеПоля, 2)), 0, 0, 0);
									ИначеЕсли ТипЗнч(Правило.Значение) = Тип("Булево") Тогда  										
										Если СокрЛП(ПолеДляПроверки.ЗначениеПоля) = "Да" или СокрЛП(ПолеДляПроверки.ЗначениеПоля) = 1 Тогда
											Значение = Истина;
										ИначеЕсли СокрЛП(ПолеДляПроверки.ЗначениеПоля) = "Нет" или СокрЛП(ПолеДляПроверки.ЗначениеПоля) = 0 Тогда
											Значение = Ложь;
										Иначе ВызватьИсключение "Некорректное значение в поле булевого типа";
										КонецЕсли;
									Иначе Значение = СокрЛП(ПолеДляПроверки.ЗначениеПоля);
									КонецЕсли;									  
									
									Если Правило.ВидСравнения = Перечисления.ВидыСравнения.Больше Тогда
										Подходит = Значение > Правило.Значение;            
									ИначеЕсли Правило.ВидСравнения = Перечисления.ВидыСравнения.БольшеИлиРавно Тогда	  
										Подходит = Значение >= Правило.Значение;
									ИначеЕсли Правило.ВидСравнения = Перечисления.ВидыСравнения.Меньше Тогда	  
										Подходит = Значение < Правило.Значение;
									ИначеЕсли Правило.ВидСравнения = Перечисления.ВидыСравнения.МеньшеИлиРавно Тогда	  
										Подходит = Значение <= Правило.Значение;   
									ИначеЕсли Правило.ВидСравнения = Перечисления.ВидыСравнения.НеРавно Тогда	  
										Подходит = Значение <> Правило.Значение;
									ИначеЕсли Правило.ВидСравнения = Перечисления.ВидыСравнения.НачинаетсяС Тогда
										Подходит = Лев(Значение, СтрДлина(Строка(Правило.Значение))) = Правило.Значение;
									ИначеЕсли Правило.ВидСравнения = Перечисления.ВидыСравнения.Содержит Тогда
										Подходит = СтрНайти(Значение, Строка(Правило.Значение)) <> 0;	
											
									Иначе	
										Подходит = Значение = Правило.Значение;
									КонецЕсли;   
									
									
								Исключение
									Сообщить("Тип значения поля: " + Правило.ИмяПоля + " для соответствия в строке " + Строка(СтрокаТЧ.НомерСтроки) + " не соответствуют значению в правиле");
									Подоходит = Ложь;
									прервать;						 
									
								КонецПопытки;
								
								//Если правило не подходит, дальше эту группу правил не проверяем
								Если Не Подходит Тогда прервать; КонецЕсли;
							КонецЕсли;							  
							
						КонецЦикла;
						//если группа правил подходит, остальные группы не проверяем
						Если Подходит Тогда
							прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если Подходит Тогда
						СтрокаТЧ.ЗначениеЭталона = Правило.ЗначениеЭталона; 
						СтрокаТЧ.Статус = "Подобран по правилу";
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЦикла;		
		Исключение
			Ошибка = ОписаниеОшибки();
			Отказ = Истина;			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьЭталоныПоРеквизитам(Отказ = Ложь, Ошибка = "", ПерезаполнятьУтвержденные = Ложь, ПерезаполнятьВыбранные = Ложь) Экспорт
	
	МассивРеквизитовПоиска = ЭтотОбъект.Реквизиты.НайтиСтроки(Новый Структура("Поиск", Истина));
	Если МассивРеквизитовПоиска.Количество() = 0 Тогда
		Обшибка = "Не заданы реквизиты поиска";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого РеквизитПоиска из МассивРеквизитовПоиска Цикл 
		Если Не (ЗначениеЗаполнено(РеквизитПоиска.РеквизитЭталона) И ЗначениеЗаполнено(РеквизитПоиска.РеквизитЗапроса)) Тогда
			Ошибка = "Не заданы соответствия реквизитов поиска и реквизитов эталона";
            Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеРеквизитовПоиска = Новый Соответствие;
	Для каждого ЭлементМассива ИЗ МассивРеквизитовПоиска Цикл
		СоответствиеРеквизитовПоиска.Вставить(ЭлементМассива.РеквизитЗапроса, ЭлементМассива.РеквизитЭталона);	
	КонецЦикла;   
	
	
	
	МассивКодов = Новый Массив; 
	МассивКодов = ЭтотОбъект.Соответствия.ВыгрузитьКолонку("Представление");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПланСчетов.Ссылка КАК Ссылка,
	               |	ПланСчетов.Код КАК Значение
	               |ИЗ
	               |	Справочник.ПланСчетов КАК ПланСчетов
	               |ГДЕ
	               |	ПланСчетов.Код В(&МассивКодов)";
	
	Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
	
	ВсеПодходящиеЗначения = Запрос.Выполнить().Выгрузить();
	Попытка 
		Для каждого СтрокаТЧ из ЭтотОбъект.Соответствия Цикл
			
			Если (Не ЗначениеЗаполнено(СтрокаТЧ.ЗначениеЭталона) ИЛИ (ПерезаполнятьВыбранные И НЕ СтрокаТЧ.Статус = "Утвержден"))
				ИЛИ (ПерезаполнятьУтвержденные И СтрокаТЧ.Статус = "Утвержден") Тогда
				
				ПодходящееЗначение = ВсеПодходящиеЗначения.Найти(СтрокаТЧ.Представление, "Значение");
			
				Если ПодходящееЗначение <> Неопределено Тогда					
					СтрокаТЧ.ЗначениеЭталона = ПодходящееЗначение.Ссылка;	   
					СтрокаТЧ.Статус = "Подобран по полям поиска";			
					
				КонецЕсли;
				
			КонецЕсли;			
			
		КонецЦикла;
		
	Исключение
		
		Отказ = Истина;
		Ошибка = ОписаниеОшибки();
		
	КонецПопытки;  
	
	
	
	
КонецПроцедуры

Процедура ПодобратьЭталоныПоУмолчанию(Отказ = Ложь, Ошибка = "") Экспорт
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СпособЗаполнения) Тогда
		
		ЗначениеПоУмолчанию = Справочники.ЗначенияЭталонов.ПолучитьЭталонПоУмолчанию(ЭтотОбъект.ТипЭталона);
		Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) = 0 Тогда
		
			Ошибка = "Для данного типа эталона не установлено значение по умолчанию";
			Отказ = Истина;
			возврат;
		Иначе                 
			
			Для каждого СтрокаТЧ из ЭтотОбъект.Соответствия Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.ЗначениеЭталона) Тогда
					
					СтрокаТЧ.ЗначениеЭталона = ЗначениеПоУмолчанию;
					СтрокаТЧ.Статус = "Подобран по умолчанию";
					
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьСоздатьЭталоныПоРеквизитам(Отказ = Ложь, Ошибка = "") Экспорт
	
	МассивРеквизитовПоиска = ЭтотОбъект.Реквизиты.НайтиСтроки(Новый Структура("Поиск", Истина));
	Если МассивРеквизитовПоиска.Количество() = 0 Тогда
		Ошибка = "Не заданы реквизиты поиска";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого РеквизитПоиска из МассивРеквизитовПоиска Цикл 
		Если Не (ЗначениеЗаполнено(РеквизитПоиска.РеквизитЭталона) И ЗначениеЗаполнено(РеквизитПоиска.РеквизитЗапроса)) Тогда
			Ошибка = "Не заданы соответствия реквизитов запроса и реквизитов эталона";
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеРеквизитовПоиска = Новый Соответствие;
	Для каждого ЭлементМассива ИЗ МассивРеквизитовПоиска Цикл
		СоответствиеРеквизитовПоиска.Вставить(ЭлементМассива.РеквизитЗапроса, ЭлементМассива.РеквизитЭталона);	
	КонецЦикла; 
			
	
	СоответствиеРеквизитов = Новый Соответствие;
	Для каждого ЭлементРеквизиты ИЗ ЭтотОбъект.Реквизиты Цикл   
		Если ЗначениеЗаполнено(ЭлементРеквизиты.РеквизитЭталона) Тогда
			СоответствиеРеквизитов.Вставить(ЭлементРеквизиты.РеквизитЗапроса, ЭлементРеквизиты.РеквизитЭталона);
		КонецЕсли;
	КонецЦикла;

	
	
	ТЗЗначенияРеквизитов = Новый ТаблицаЗначений; 
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.РеквизитыЭталонов"));
	ТЗЗначенияРеквизитов.Колонки.Добавить("Реквизит", Новый ОписаниеТипов(МассивТипов));    
	
	КС = Новый КвалификаторыСтроки(500);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ТЗЗначенияРеквизитов.Колонки.Добавить("Значение", Новый ОписаниеТипов(МассивТипов,,КС)); 
	
	РодительПоУмолчанию = Справочники.ЗначенияЭталонов.ПолучитьРодителяПоУмолчанию(ЭтотОбъект.ТипЭталона);
	
	Для каждого СтрокаТЧ из ЭтотОбъект.ДопИнформация Цикл		
		
		Если СоответствиеРеквизитовПоиска.Получить(СтрокаТЧ.ИмяПоля) <> Неопределено Тогда
			НоваяСтрокаТЗ = ТЗЗначенияРеквизитов.Добавить();
			
			НоваяСтрокаТЗ.Реквизит = СоответствиеРеквизитовПоиска.Получить(СтрокаТЧ.ИмяПоля);
			НоваяСтрокаТЗ.Значение = СтрокаТЧ.ЗначениеПоля;                 
			
		КонецЕсли;		
		
	КонецЦикла; 	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияРеквизитов.Реквизит КАК Реквизит,
	               |	ЗначенияРеквизитов.Значение КАК Значение
	               |ПОМЕСТИТЬ ВТИскомыхЗначений
	               |ИЗ
	               |	&ЗначенияРеквизитов КАК ЗначенияРеквизитов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗначенияЭталоновРеквизиты.Ссылка КАК Ссылка,
	               |	ЗначенияЭталоновРеквизиты.Реквизит КАК Реквизит,
	               |	ЗначенияЭталоновРеквизиты.Значение КАК Значение
	               |ИЗ
	               |	Справочник.ЗначенияЭталонов.Реквизиты КАК ЗначенияЭталоновРеквизиты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИскомыхЗначений КАК ВТИскомыхЗначений
	               |		ПО ЗначенияЭталоновРеквизиты.Реквизит = ВТИскомыхЗначений.Реквизит
	               |			И ЗначенияЭталоновРеквизиты.Значение = ВТИскомыхЗначений.Значение";
	
	Запрос.УстановитьПараметр("ЗначенияРеквизитов", ТЗЗначенияРеквизитов);
	
	ВсеПодходящиеЗначения = Запрос.Выполнить().Выгрузить();
	
	Попытка 
		Для каждого СтрокаТЧ из ЭтотОбъект.Соответствия Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ЗначениеЭталона) Тогда
				ПодходящиеЗначения = ВсеПодходящиеЗначения.Скопировать();
			
				ТекДопИнфо = ЭтотОбъект.ДопИнформация.Выгрузить(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
			   //Последовательно ищем среди всех подходящих значений значения реквизитов из доп информации, заменяя таблицу подходящих реквизитов
			   //Если после всех итераций в ней что-то осталось - берем оттуда эталон, иначе создаем новый и добавляем значения реквизитов поиска в таблицу всех подходящих значений
			   //Для присвоения для других подходящих по реквизитам поиска значений.
			    Для каждого ДопИнфо Из ТекДопИнфо Цикл
					
					Если СоответствиеРеквизитовПоиска.Получить(ДопИнфо.ИмяПоля) <> Неопределено Тогда
				
					  ПодходящиеЗначения = ПодходящиеЗначения.Скопировать(Новый Структура("Реквизит, Значение", СоответствиеРеквизитовПоиска.Получить(ДопИнфо.ИмяПоля), ДопИнфо.ЗначениеПоля)) ;
									   
					   Если ПодходящиеЗначения.Количество() = 0 Тогда
						   
							прервать;
						   
					   КонецЕсли;
					   
					КонецЕсли; 
				КонецЦикла;
				
				Если ПодходящиеЗначения.Количество() <> 0 Тогда
						   
					СтрокаТЧ.ЗначениеЭталона = ПодходящиеЗначения[0].Ссылка;	   
					СтрокаТЧ.Статус = "Подобран по полям поиска";
				Иначе
					ЗаписатьЭталон = Истина;

					//Создаем эталон
					НовыйЭталон = Справочники.ЗначенияЭталонов.СоздатьЭлемент();
					НовыйЭталон.Владелец = ЭтотОбъект.ТипЭталона;  
					НовыйЭталон.Родитель = РодительПоУмолчанию;
					
					Для каждого ДопИнфо Из ТекДопИнфо Цикл
						РеквизитЭталона = НовыйЭталон.Реквизиты.Добавить(); 
						Если Не ЗначениеЗаполнено(ДопИнфо.ЗначениеПоля) Тогда
							ЗаписатьЭталон = Ложь;
						КонецЕсли;						
							
						РеквизитЭталона.Реквизит = СоответствиеРеквизитов.Получить(ДопИнфо.ИмяПоля);
						РеквизитЭталона.Значение = ДопИнфо.ЗначениеПоля;					
					КонецЦикла;
					
					Если ЗаписатьЭталон Тогда
						НовыйЭталон.Записать();  
						Сообщить("Добавлен эталон: " + НовыйЭталон.Наименование);
						
						Для каждого РеквизитЭталона из НовыйЭталон.Реквизиты Цикл
							НоваяСтрокаТЗ = ВсеПодходящиеЗначения.Добавить();
							НоваяСтрокаТЗ.Ссылка = НовыйЭталон.Ссылка;
							НоваяСтрокаТЗ.Реквизит = РеквизитЭталона.Реквизит;
							НоваяСтрокаТЗ.Значение = РеквизитЭталона.Значение;
						КонецЦикла;   
						СтрокаТЧ.ЗначениеЭталона = НовыйЭталон.Ссылка;	   
						СтрокаТЧ.Статус = "Подобран созданный";	
						
					КонецЕсли;				
					
				КонецЕсли;    		
				
			КонецЕсли;			
			
		КонецЦикла;  
	Исключение 
		Ошибка = ОписаниеОшибки();
		Отказ = Истина;
	КонецПопытки

	
КонецПроцедуры	

//16.05.2024 
// Подбирает нужные эталоны по значению параметров
// Работает по логике если правда то подставляем эталон: 
// Если ИскомоеПоле = ПолеСравнения Тогда Ставим Эталон 
// Если не указать поля ИскомоеПоле и ИскомоеЗначение, то он просто проставит всем НаименованиеЭталона.
//  - НаименованиеЭталона (string) - Поле в котором указывается эталон, подставляемый к примеру "МашиныИОборудование";
//  - НаименованиеИскомогоЗначения (string) - Поле в котором указывается значение которое ищем, к примеру "808ff15d-75cc-11e3-8a8f-0019d1e6d60b";
//  - НаименованиеИскомогоПоле (string) - Поле в котором мы ищем Значение, к примеру "Parent";
Процедура ПодобратьЗаполнитьЭлементыПоЗначению(Отказ = Ложь, Ошибка = "", ПерезаполнятьВыбранные = Ложь, ПерезаполнятьУтвержденные = Ложь) Экспорт

	НаименованиеЭталона = "";
	НаименованиеИскомогоЗначения = "";
	НаименованиеИскомогоПоле = "";  
	
	//Получаем параметры и проверяем не пусто ли там
	МассивПараметровПоиска = ЭтотОбъект.Параметры.НайтиСтроки(Новый Структура("ИмяПараметра", "Эталон"));
	МассивПараметровПоискаИскомоеПоле = ЭтотОбъект.Параметры.НайтиСтроки(Новый Структура("ИмяПараметра", "ИскомоеПоле"));
	МассивПараметровПоискаИскомоеЗначение = ЭтотОбъект.Параметры.НайтиСтроки(Новый Структура("ИмяПараметра", "ИскомоеЗначение"));

	Если МассивПараметровПоиска.Количество() = 0 Тогда
		Ошибка = "Не заданы параметры, Эталон";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Получаем данные из параметров
	Для каждого ПараметрПоиска из МассивПараметровПоиска Цикл 
		Если ПараметрПоиска.ИмяПараметра = "Эталон" Тогда 
			Если ЗначениеЗаполнено(ПараметрПоиска.Представление) Тогда
				НаименованиеЭталона = ПараметрПоиска.Представление;
			Иначе
				НаименованиеЭталона = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ПараметрПоиска из МассивПараметровПоискаИскомоеПоле Цикл
		Если Не (ЗначениеЗаполнено(ПараметрПоиска.Представление)) И ПараметрПоиска.ИмяПараметра = "ИскомоеПоле" Тогда
			Сообщить("Не заданы соответствия параметров представление в параметре ИскомоеПоле");
		Иначе  
			НаименованиеИскомогоПоле = ПараметрПоиска.Представление;
		КонецЕсли;  
	КонецЦикла;
	
	Для каждого ПараметрПоиска из МассивПараметровПоискаИскомоеЗначение Цикл 
		Если Не (ЗначениеЗаполнено(ПараметрПоиска.Представление)) И ПараметрПоиска.ИмяПараметра = "ИскомоеЗначение" Тогда
			Сообщить("Не заданы соответствия параметров представление в параметре ИскомоеЗначение");		
		Иначе  
			НаименованиеИскомогоЗначения = ПараметрПоиска.Представление;
		КонецЕсли;	
	КонецЦикла;
			
	//Делаем запрос   
	Если НаименованиеЭталона <> "" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗначенияЭталонов.Ссылка КАК Ссылка,
		               |	ЗначенияЭталонов.Наименование КАК Наименование
		               |ИЗ
		               |	Справочник.ЗначенияЭталонов КАК ЗначенияЭталонов
					   |ГДЕ
					   |	ЗначенияЭталонов.Наименование = &НаименованиеЭталона";
		
		Запрос.УстановитьПараметр("НаименованиеЭталона", НаименованиеЭталона);
		ВсеПодходящиеЗначения = Запрос.Выполнить().Выгрузить(); 
	КонецЕсли;
	
	//Проставляем значеиня в эталоны
	Попытка 
		Для каждого СтрокаТЧ из ЭтотОбъект.Соответствия Цикл
			Если ((Не ЗначениеЗаполнено(СтрокаТЧ.ЗначениеЭталона) И НЕ НаименованиеЭталона = "") ИЛИ (ПерезаполнятьВыбранные И НЕ СтрокаТЧ.Статус = "Утвержден" И НЕ НаименованиеЭталона = "")) ИЛИ (ПерезаполнятьУтвержденные И СтрокаТЧ.Статус = "Утвержден" И НЕ НаименованиеЭталона = "") Тогда
				ПодходящиеЗначения = ВсеПодходящиеЗначения.Скопировать(); 
				
				Если НаименованиеИскомогоЗначения <> "" и НаименованиеИскомогоПоле <> "" Тогда
					ТекДопИнфо = ЭтотОбъект.ДопИнформация.Выгрузить(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
					Для каждого ДопИнфо из ТекДопИнфо Цикл
						
						Если ПодходящиеЗначения.Количество() <> 0 Тогда
							Если ДопИнфо.ИмяПоля = НаименованиеИскомогоПоле и ДопИнфо.ЗначениеПоля = НаименованиеИскомогоЗначения Тогда
								СтрокаТЧ.ЗначениеЭталона = ПодходящиеЗначения[0].Ссылка;	   
								СтрокаТЧ.Статус = "Подобран по параметру эталон"; 
							КонецЕсли;
						Иначе
							Ошибка = "Эталонов с таким наименованием не найдено."
						КонецЕсли;
					КонецЦикла;
				Иначе
					СтрокаТЧ.ЗначениеЭталона = ПодходящиеЗначения[0].Ссылка;	   
					СтрокаТЧ.Статус = "Подобран по параметру эталон"; 	
				КонецЕсли; 
			КонецЕсли;
			Если (НаименованиеЭталона = "" И (ПерезаполнятьВыбранные И НЕ СтрокаТЧ.Статус = "Утвержден")) ИЛИ (НаименованиеЭталона = "" И ПерезаполнятьУтвержденные И СтрокаТЧ.Статус = "Утвержден") тогда// Если значение не указано в Эталоне, то он очищает таблицу.
				Если НаименованиеИскомогоЗначения <> "" и НаименованиеИскомогоПоле <> "" Тогда
					ТекДопИнфо = ЭтотОбъект.ДопИнформация.Выгрузить(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
					Для каждого ДопИнфо из ТекДопИнфо Цикл
						Если ДопИнфо.ИмяПоля = НаименованиеИскомогоПоле и ДопИнфо.ЗначениеПоля = НаименованиеИскомогоЗначения Тогда
							СтрокаТЧ.ЗначениеЭталона = "";	   
							СтрокаТЧ.Статус = "Очищен"; 
						КонецЕсли;
					КонецЦикла;
				Иначе
					СтрокаТЧ.ЗначениеЭталона = "";	   
					СтрокаТЧ.Статус = "Очищен"; 	
				КонецЕсли; 	
			КонецЕсли;			
		КонецЦикла;  
	Исключение 
		Ошибка = ОписаниеОшибки();
		Отказ = Истина;
	КонецПопытки
                
КонецПроцедуры	
#КонецОбласти


 

