
#Область ПоведениеФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	если Объект.Ссылка.Пустая() Тогда
		Объект.ПериодПланирования = НачалоГода(ТекущаяДата());
	КонецЕсли;
	ПериодПланированияНачисленияСтрокой 		= Формат(Объект.ПериодПланирования, "ДФ='гггг'");
	
	ПриСозданииНаСервереKPI(Отказ, СтандартнаяОбработка);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДерево();
	УправлениеФормой();
	ПересчетИтоговДерева("ДеревоКредиторы");
	ПересчетИтоговДерева("ДеревоДебиторы");
	
	МассивДереваKPI = Новый Массив();
	МассивДереваKPI.Добавить("ДеревоKPI1v2");
	МассивДереваKPI.Добавить("ДеревоKPI3v2");
	МассивДереваKPI.Добавить("ДеревоKPI5v2");
	МассивДереваKPI.Добавить("ДеревоKPI6v2");
	МассивДереваKPI.Добавить("ДеревоKPI8v2");
	
	Для Каждого ЭлементМассива из МассивДереваKPI Цикл
		ИмяДерева = ЭлементМассива;
		
		Элементы[ИмяДерева].ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Верх;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПередЗаписьюНаСервереKPI(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	КредитыЗаписатьДеревоВТЧ(ТекущийОбъект);
	
	ПересчетИтоговДерева("ДеревоКредиторы");
	ПересчетИтоговДерева("ДеревоДебиторы");
	
КонецПроцедуры

Процедура УправлениеФормой()

КонецПроцедуры	

&НаСервере
Процедура КредитыЗаписатьДеревоВТЧ(ТекущийОбъект)
	НаимКолонки = "Значение_"; 
	Попытка
		ТЗ  = ТекущийОбъект.ДанныеКредиторы.Выгрузить();
		ТЗ.Очистить();
		
		Дерево = РеквизитФормыВЗначение("ДеревоКредиторы");
		Для Каждого стр из Дерево.Строки Цикл
			Ном = 1;
			//Для каждого Кол Из Дерево.Колонки Цикл
			//    
			//    НайденноеИмяЗначение 	= Найти(Кол.Имя,НаимКолонки);
			//    НайденноеИмяГод 		= Найти(Кол.Имя,"Год");
			//    НайденноеИмяМесяц 		= Найти(Кол.Имя,"Месяц");
			//    НайденноеСимвол 		= Найти(Кол.Имя,"_");
			//    
			//    Если НайденноеИмяЗначение>0 Тогда
			//   	 
			//   	 
			//   	 Если НайденноеИмяГод>0 Тогда
			//   		КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяГод-1);
			//   		ПериодЗначение	= Дата(Прав(Кол.Имя,4),1,1);
			//   	 	СвернутоПоГоду 	= Истина;
			//   	 КонецЕсли;	 
			//   	 
			//   	 Если НайденноеИмяМесяц>0 Тогда
			//   		КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяМесяц-1);
			//   		ПериодЗначение	= Дата(Год(ТекущийОбъект.ПериодПланирования),Число(Сред(Кол.Имя,НайденноеСимвол+1)),1);
			//   	 	СвернутоПоГоду 	= Ложь;
			//   	 КонецЕсли;	 
			//   	 
			//   	 НовСтрока = ТЗ.Добавить();
			//   	 ЗаполнитьЗначенияСвойств(НовСтрока,стр);
			//   	 НовСтрока.СвернутоПоГоду 	= СвернутоПоГоду;
			//   	 НовСтрока.Период 			= ПериодЗначение;
			//   	 НовСтрока[КолонкаЗначение] = стр[Кол.Имя];
			//   	 
			//    КонецЕсли; 
			//КонецЦикла;			
			Для каждого Кол Из Дерево.Колонки Цикл
				
				НайденноеИмяЗначение 		= Найти(Кол.Имя,НаимКолонки);
				НайденноеИмяГод 			= Найти(Кол.Имя,"Год");
				НайденноеИмяМесяц 			= Найти(Кол.Имя,"Месяц");
				НайденноеСимвол 			= Найти(Кол.Имя,"_");
				НайденноеИмяСальдо			= Найти(Кол.Имя,"Сальдо");
				НайденноеИмяСальдоНаНачало	= Найти(Кол.Имя,"СальдоНаНачало");
				НайденноеИмяСальдоНаКонец	= Найти(Кол.Имя,"СальдоНаКонец");
				КолонкаЗначение = "";
				
				Если НайденноеИмяЗначение>0 Тогда
					
				СвернутоПоГоду	= Ложь;
					Если НайденноеИмяМесяц>0 Тогда
						КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяМесяц-1);
						ПериодЗначение	= Дата(Год(ТекущийОбъект.ПериодПланирования),Число(Сред(Кол.Имя,НайденноеСимвол+1)),1);
					ИначеЕсли НайденноеИмяСальдо>0 Тогда 
						Если НайденноеИмяСальдоНаНачало>0 Тогда
							КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяЗначение-1);
							ПериодЗначение	= ТекущийОбъект.ПериодПланирования;
						КонецЕсли;	 
						
						Если НайденноеИмяСальдоНаКонец>0 Тогда
							КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяЗначение-1);
							ПериодЗначение	= НачалоМесяца(ТекущийОбъект.ПериодПланирования);
						КонецЕсли;	 
						//КонецЕсли;	
					ИначеЕсли НайденноеИмяГод>0 Тогда
						КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяГод-1);
						ПериодЗначение	= Дата(Прав(Кол.Имя,4),1,1);
						СвернутоПоГоду	= Истина;
					КонецЕсли;	 
					
					Если КолонкаЗначение <> "" Тогда
						НовСтрока = ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока,стр);
						НовСтрока.Период 			= ПериодЗначение;
						НовСтрока.СвернутоПоГоду 	= СвернутоПоГоду;
						НовСтрока[КолонкаЗначение] = стр[Кол.Имя];
					КонецЕсли;
					
				КонецЕсли; 
			КонецЦикла;			
			
		КонецЦикла;	
		ТЗ.Свернуть("Период,СвернутоПоГоду,Договор,НомерДоговора,ДатаДоговора,ДатаПогашения,Контрагент,КонтрагентБИН,ТипКредитора,ДолговойИнструмент,Валюта,Индексация,КурсНаДату,СрокКредитования,ПроцентнаяСтавка,ЦелевоеНазначениеСредств,СуммаПоДоговору,СуммаОсвоенияПоДоговору",",СальдоНаНачалоОД,СальдоНаНачалоНачисленныеПроценты,СуммаОД,НачисленныеПроценты,СальдоНаКонецОД,СальдоНаКонецНачисленныеПроценты");
		ТекущийОбъект.ДанныеКредиторы.Загрузить(ТЗ);
	Исключение
		Сообщить(ОписаниеОшибки()); 
	КонецПопытки;	
	
	
	Попытка
		ТЗ  = ТекущийОбъект.ДанныеДебиторы.Выгрузить();
		ТЗ.Очистить();
		
		Дерево = РеквизитФормыВЗначение("ДеревоДебиторы");
		Для Каждого стр из Дерево.Строки Цикл
			Ном = 1;
			//Для каждого Кол Из Дерево.Колонки Цикл
			//	
			//	НайденноеИмяЗначение 	= Найти(Кол.Имя,НаимКолонки);
			//	НайденноеИмяГод 		= Найти(Кол.Имя,"Год");
			//	НайденноеИмяМесяц 		= Найти(Кол.Имя,"Месяц");
			//	НайденноеСимвол 		= Найти(Кол.Имя,"_");
			//	
			//	Если НайденноеИмяЗначение>0 Тогда
			//		
			//		
			//		Если НайденноеИмяГод>0 Тогда
			//			КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяГод-1);
			//			ПериодЗначение	= Дата(Прав(Кол.Имя,4),1,1);
			//			СвернутоПоГоду 	= Истина;
			//		КонецЕсли;	 
			//		
			//		Если НайденноеИмяМесяц>0 Тогда
			//			КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяМесяц-1);
			//			ПериодЗначение	= Дата(Год(ТекущийОбъект.ПериодПланирования),Число(Сред(Кол.Имя,НайденноеСимвол+1)),1);
			//			СвернутоПоГоду 	= Ложь;
			//		КонецЕсли;	 
			//		
			//		НовСтрока = ТЗ.Добавить();
			//		ЗаполнитьЗначенияСвойств(НовСтрока,стр);
			//		НовСтрока.СвернутоПоГоду 	= СвернутоПоГоду;
			//		НовСтрока.Период 			= ПериодЗначение;
			//		НовСтрока[КолонкаЗначение] = стр[Кол.Имя];
			//		
			//	КонецЕсли; 
			//КонецЦикла;			
			Для каждого Кол Из Дерево.Колонки Цикл
				
				НайденноеИмяЗначение 		= Найти(Кол.Имя,НаимКолонки);
				НайденноеИмяГод 			= Найти(Кол.Имя,"Год");
				НайденноеИмяМесяц 			= Найти(Кол.Имя,"Месяц");
				НайденноеСимвол 			= Найти(Кол.Имя,"_");
				НайденноеИмяСальдо			= Найти(Кол.Имя,"Сальдо");
				НайденноеИмяСальдоНаНачало	= Найти(Кол.Имя,"СальдоНаНачало");
				НайденноеИмяСальдоНаКонец	= Найти(Кол.Имя,"СальдоНаКонец");
				КолонкаЗначение = "";
				Если НайденноеИмяЗначение>0 Тогда
					
					Если НайденноеИмяМесяц>0 Тогда
						КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяМесяц-1);
						ПериодЗначение	= Дата(Год(ТекущийОбъект.ПериодПланирования),Число(Сред(Кол.Имя,НайденноеСимвол+1)),1);
					Иначе
						Если НайденноеИмяСальдо>0 Тогда 
							Если НайденноеИмяСальдоНаНачало>0 Тогда
								КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяЗначение-1);
								ПериодЗначение	= ТекущийОбъект.ПериодПланирования;
							КонецЕсли;	 
							
							Если НайденноеИмяСальдоНаКонец>0 Тогда
								КолонкаЗначение = Лев(Кол.Имя,НайденноеИмяЗначение-1);
								ПериодЗначение	= НачалоМесяца(ТекущийОбъект.ПериодПланирования);
							КонецЕсли;	 
						КонецЕсли;	
						
					КонецЕсли;	 
					
					Если КолонкаЗначение <> "" Тогда
						НовСтрока = ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока,стр);
						НовСтрока.Период 			= ПериодЗначение;
						НовСтрока[КолонкаЗначение] = стр[Кол.Имя];
					КонецЕсли;
					
				КонецЕсли; 
			КонецЦикла;			
			
		КонецЦикла;	
		ТЗ.Свернуть("Период,СвернутоПоГоду,Договор,НомерДоговора,ДатаДоговора,ДатаПогашения,Контрагент,КонтрагентБИН,ТипКредитора,ДолговойИнструмент,Валюта,Индексация,КурсНаДату,СрокКредитования,ПроцентнаяСтавка,ЦелевоеНазначениеСредств,СуммаПоДоговору,СуммаОсвоенияПоДоговору",",СальдоНаНачалоОД,СальдоНаНачалоНачисленныеПроценты,СуммаОД,НачисленныеПроценты,СальдоНаКонецОД,СальдоНаКонецНачисленныеПроценты");
		ТекущийОбъект.ДанныеДебиторы.Загрузить(ТЗ);
	Исключение
		Сообщить(ОписаниеОшибки()); 
	КонецПопытки;	
	
	
КонецПроцедуры	 

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)	
	
	Объект.ПериодПланирования 	= НачалоГода(Объект.ПериодПланирования);
	ПериодПланированияНачисленияСтрокой 		= Формат(Объект.ПериодПланирования, "ДФ='гггг'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Направление>0 Тогда
		ЗначениеНаправления = 12;
	Иначе
		ЗначениеНаправления = -12;
	КонецЕсли;
	
	Объект.ПериодПланирования 	= ДобавитьМесяц(Объект.ПериодПланирования, ЗначениеНаправления);
	ПериодПланированияНачисленияСтрокой 		= Формат(Объект.ПериодПланирования, "ДФ='гггг'");
	ПериодПланированияНачисленияСтрокойПриИзменении(Неопределено);
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияНачисленияСтрокойПриИзменении(Элемент)
	
	Для Каждого СтрокаТаблицы Из ТаблицаСтраницKPI Цикл  
		
		ЭлментТекущийГод = Элементы.Найти("ТекущийГод"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментТекущийГод  <> Неопределено Тогда  
			ЭлментТекущийГод.Заголовок = Формат(Объект.ПериодПланирования,"ДФ=""гггг"""); 
		КонецЕсли;
		ЭлментГодПлюс1 = Элементы.Найти("ГодПлюс1"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс1  <> Неопределено Тогда  
			ЭлментГодПлюс1.Заголовок = Формат(ДобавитьМесяц(Объект.ПериодПланирования,12),"ДФ=""гггг"""); 
		КонецЕсли;
		ЭлментГодПлюс2 = Элементы.Найти("ГодПлюс2"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс2  <> Неопределено Тогда  
			ЭлментГодПлюс2.Заголовок = Формат(ДобавитьМесяц(Объект.ПериодПланирования,24),"ДФ=""гггг"""); 
		КонецЕсли;
		ЭлментГодПлюс3 = Элементы.Найти("ГодПлюс3"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс3  <> Неопределено Тогда  
			ЭлментГодПлюс3.Заголовок = Формат(ДобавитьМесяц(Объект.ПериодПланирования,36),"ДФ=""гггг"""); 
		КонецЕсли;
		
		ЭлментГодПлюс4 = Элементы.Найти("ГодПлюс4"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс4  <> Неопределено Тогда  
			ЭлментГодПлюс4.Заголовок = Формат(ДобавитьМесяц(Объект.ПериодПланирования,48),"ДФ=""гггг"""); 
		КонецЕсли;
		
	КонецЦикла;
	Объект.Данные.Очистить();
	Объект.ДанныеКапитальныеВложения.Очистить();
	Объект.ДанныеКредиторы.Очистить();
	Объект.ДанныеДебиторы.Очистить();
	ОбновитьДерево();
	Модифицированность = Истина;
КонецПроцедуры

Функция ПолучитьПериодМесяц(Период)
	Возврат Формат(Период,"ДФ=""ММММ""");	
КонецФункции	

Функция ПолучитьПериодГод(Период)
	Возврат Формат(Период,"ДФ=""гггг""");	
КонецФункции	

Процедура ПересчетИтоговТекущейКолонки(НаимДерева,НаимКолонки)
	//пересчет итогов колонки
	
	НайденноеИмяЗначение 	= Найти(НаимКолонки,"Значение_");
	НайденноеИмяСальдо 	= Найти(НаимКолонки,"СальдоНаНачало");
	
	НаимКолонкиЭлементов = СтрЗаменить(НаимКолонки,НаимДерева,"");
	
	Если НайденноеИмяЗначение>0 или НайденноеИмяСальдо>0 Тогда
		ИтСумма = 0;
		Для Каждого стр из ДеревоКредиторы.ПолучитьЭлементы() Цикл
			ИтСумма = ИтСумма + стр[НаимКолонкиЭлементов];
		КонецЦикла;	
		Элементы[НаимКолонки].ТекстПодвала = ИтСумма;
	КонецЕсли; 
	
КонецПроцедуры 
#КонецОбласти

#Область РаботаДерева

&НаСервере
Процедура ОбновитьДерево()
	//тДерево = СформироватьДерево(1);
	//ЗаполнитьДерево(тДерево,"ДеревоBS");	
	
	тДерево = СформироватьДерево(2);
	ЗаполнитьДерево(тДерево,"ДеревоPL");	
	
	//тДерево = СформироватьДерево(3);
	//ЗаполнитьДерево(тДерево,"ДеревоCFD");	
	//
	//тДерево = СформироватьДеревоКапитальныеВложения();
	//ЗаполнитьДеревоКапитальныеВложения(тДерево,"ДеревоКапитальныеВложения");	
	//
	//тДерево = СформироватьДеревоДебиторыКредиторы("ДанныеКредиторы");
	//ЗаполнитьДеревоДебиторыКредиторы(тДерево,"ДеревоКредиторы","ДанныеКредиторы");	
	//
	//тДерево = СформироватьДеревоДебиторыКредиторы("ДанныеДебиторы");
	//ЗаполнитьДеревоДебиторыКредиторы(тДерево,"ДеревоДебиторы","ДанныеДебиторы");	
	
КонецПроцедуры

&НаСервере
Функция СформироватьДерево(TypeOfReport)  
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка КАК Ссылка,
	|	СтатьиБюджетов.Родитель КАК Родитель,
	|	СтатьиБюджетов.Код КАК Код,
	|	СтатьиБюджетов.КодСправочника КАК КодСправочника
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Владелец.Код = &Бюджет
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБюджетов.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Бюджет",TypeOfReport);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Код",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("Статья",Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов"));
	ДеревоЗн.Колонки.Добавить("СтатьяДоходов",Новый ОписаниеТипов("СправочникСсылка.Доходы"));
	ДеревоЗн.Колонки.Добавить("СтатьяЗатрат",Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ДеревоЗн.Колонки.Добавить("КатегорияАктивов",Новый ОписаниеТипов("СправочникСсылка.КатегорииАктивов"));
	ДеревоЗн.Колонки.Добавить("Контрагент",ОписаниеСтрока);//Новый ОписаниеТипов("СправочникСсылка.Контрагенты")
	ДеревоЗн.Колонки.Добавить("СтатьяТРУ",Новый ОписаниеТипов("СправочникСсылка.ТоварыИУслуги"));
	ДеревоЗн.Колонки.Добавить("СтатьяТРУУровень2",Новый ОписаниеТипов("СправочникСсылка.ТоварыИУслуги"));
	ДеревоЗн.Колонки.Добавить("ВидДвижения",Новый ОписаниеТипов("СправочникСсылка.ВидыДвижения"));
	ДеревоЗн.Колонки.Добавить("ЭтоАналитика",ОписаниеБулево);
	
	
	ТЗ = Объект.Данные.Выгрузить();
	ТЗ.Свернуть("Статья,Контрагент,СтатьяТРУ,СтатьяТРУУровень2,СтатьяДоходов,СтатьяЗатрат,КатегорияАктивов,ВидДвижения");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ТекЭлемент				= ДеревоЗн.Строки.Добавить();
			ТекЭлемент.Статья		= Выборка.Ссылка;
			ТекЭлемент.Код			= Выборка.КодСправочника;
		Иначе
			Пока ТекЭлемент.Статья<>Выборка.Родитель Цикл
				ТекЭлемент=ТекЭлемент.Родитель;
			КонецЦикла;
			ТекЭлемент				= ТекЭлемент.Строки.Добавить();
			ТекЭлемент.Статья		= Выборка.Ссылка;
			ТекЭлемент.Код			= Выборка.КодСправочника;
		КонецЕсли;
		
		ДобавитьСтрокиВДерево(ТекЭлемент,Выборка.КодСправочника,ТЗ);
		
	КонецЦикла;	
	
	возврат ДеревоЗн; 	
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиВДерево(ТекСтрока,MainParentCode,ТЗ) 
	
	НайденныеСтроки  = ТЗ.НайтиСтроки(Новый Структура("Статья",ТекСтрока.Статья));
	если НайденныеСтроки.Количество()=1 Тогда
		ТекСтрока.Контрагент		= НайденныеСтроки[0].Контрагент;
		ТекСтрока.СтатьяТРУ			= НайденныеСтроки[0].СтатьяТРУ;
		ТекСтрока.СтатьяТРУУровень2	= НайденныеСтроки[0].СтатьяТРУУровень2;
		ТекСтрока.ВидДвижения		= НайденныеСтроки[0].ВидДвижения;
		ТекСтрока.СтатьяДоходов		= НайденныеСтроки[0].СтатьяДоходов;
		ТекСтрока.СтатьяЗатрат		= НайденныеСтроки[0].СтатьяЗатрат;
		ТекСтрока.КатегорияАктивов	= НайденныеСтроки[0].КатегорияАктивов;
		ТекСтрока.ЭтоАналитика		= Ложь;
		
	Иначе
		
		для каждого стрМ из НайденныеСтроки Цикл
			
			ТекЭлемент					= ТекСтрока.Строки.Добавить();
			ТекЭлемент.Статья			= ТекСтрока.Статья;
			ТекЭлемент.Код				= ТекСтрока.Код;
			ТекЭлемент.ЭтоАналитика		= Истина;
			
			Если стрМ.СтатьяДоходов <> Справочники.Доходы.ПустаяСсылка() Тогда
				ТекЭлемент.Код			= ТекСтрока.Код+стрМ.СтатьяДоходов.КодСправочника;
			КонецЕсли;
			
			Если стрМ.СтатьяЗатрат <> Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
				ТекЭлемент.Код			= ТекСтрока.Код+стрМ.СтатьяЗатрат.КодСправочника;
			КонецЕсли;
			
			Если стрМ.КатегорияАктивов <> Справочники.КатегорииАктивов.ПустаяСсылка() Тогда
				ТекЭлемент.Код			= ТекСтрока.Код+стрМ.КатегорияАктивов.КодСправочника;
			КонецЕсли;
			
			ТекЭлемент.Контрагент		= стрМ.Контрагент;
			ТекЭлемент.СтатьяТРУ		= стрМ.СтатьяТРУ;
			ТекЭлемент.СтатьяТРУУровень2= стрМ.СтатьяТРУУровень2;
			ТекЭлемент.ВидДвижения		= стрМ.ВидДвижения;
			ТекЭлемент.СтатьяДоходов	= стрМ.СтатьяДоходов;
			ТекЭлемент.СтатьяЗатрат		= стрМ.СтатьяЗатрат;
			ТекЭлемент.КатегорияАктивов	= стрМ.КатегорияАктивов;
		КонецЦикла;  
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДерево(тДерево,НаимДерева)
	
	МассивДобавляемыхРеквизитов 	= Новый Массив;
	МассивУдаляемыхРеквизитов 		= Новый Массив;
	
	ТекДерево = РеквизитФормыВЗначение(НаимДерева);
	для каждого Кол из ТекДерево.Колонки Цикл
		НаимКолонки = "Значение_"; 
		Если Найти(Кол.Имя,НаимКолонки)>0 Тогда
			МассивУдаляемыхРеквизитов.Добавить(НаимДерева+"."+Кол.Имя);
			Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя)<>Неопределено Тогда
				Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		 
	ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	
	ТЗ = Объект.Данные.Выгрузить();
	ТЗ.Свернуть("Период,СвернутоПоГоду");
	ТЗ.Сортировать("СвернутоПоГоду,Период");
	
	МассивКолонокМесяц = Новый Массив();
	
	для каждого стр из  ТЗ Цикл
		если стр.СвернутоПоГоду Тогда
			НаимКолонки = "Значение_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Иначе
			НаимКолонки = "Значение_"+Формат(Стр.Период,"ДФ=""ММММгггг"""); 
			МассивКолонокМесяц.Добавить(НаимКолонки);
		КонецЕсли;
		Попытка
			тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// 3. создаем РЕКВИЗИТ КОЛОНКИ (невидимая часть, справа в редакторе форм)
	
	// реквизит принадлежит дереву
	// добавляем реквизит в форму (невидимая часть, справа в редакторе форм)
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// 4. заполняем дерево (реквизит формы) занчением
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	// 5. добавляем НА ФОРМУ (видимая часть, слева в редакторе форм)
	// назовем ДеревоУзел, принадлежит элементу дерева, связан с добавленной колонкой «Узел»
	
	для каждого стр из  ТЗ Цикл
		если стр.СвернутоПоГоду Тогда
			НаимКолонки = "Значение_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Иначе
			НаимКолонки = "Значение_"+Формат(Стр.Период,"ДФ=""ММММгггг"""); 
		КонецЕсли;
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Элементы[НаимДерева]);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		если стр.СвернутоПоГоду Тогда
			НовыйЭлемент.Заголовок	= Формат(Стр.Период,"ДФ=""гггг""");		
		Иначе
			НовыйЭлемент.Заголовок	= Формат(Стр.Период,"ДФ=""ММММ гггг""");		
		КонецЕсли;
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	КонецЦикла;
	
	тДерево = РеквизитФормыВЗначение(НаимДерева);
	
	ЗаполнитьЗначенияКолонок(тДерево,тДерево.Колонки);		 
	
	СписокСтатейДляОтбора = Новый Массив;
	Если НаимДерева = "ДеревоBS" Тогда
		//т.к. это сальдовый то надо вытащить статьи где в плане забили и остатки на начало и на конец и обороты
		
		//Остаток на конец периода	+/-
		//Остаток на начало периода	+/-
		//Поступление	+
		//Выбытие	-
		
		//и чтоб не было задвоения надо посчитать итоги только по определенной статье
		
		СтатьяОстаток	= Справочники.ВидыДвижения.НайтиПоРеквизиту("КодСправочника","RFW3."); //(RFW3.) Остаток на конец периода
		
		НайденныеСтроки = Объект.Данные.НайтиСтроки(Новый Структура("ВидДвижения",СтатьяОстаток));
		Для каждого стрН из НайденныеСтроки Цикл
			СписокСтатейДляОтбора.Добавить(стрН.Статья);
		КонецЦикла;	
		
	КонецЕсли;	
	
	ПересчитатьВсеДерево(тДерево.Строки,тДерево.Колонки,СписокСтатейДляОтбора,МассивКолонокМесяц);	
	
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияКолонок(тДерево,тКолонки)
	Для Каждого тСтр Из тДерево.Строки Цикл
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Статья",тСтр.Статья);
		СтруктураПоиска.Вставить("КатегорияАктивов",тСтр.КатегорияАктивов);
		СтруктураПоиска.Вставить("СтатьяДоходов",тСтр.СтатьяДоходов);
		СтруктураПоиска.Вставить("СтатьяЗатрат",тСтр.СтатьяЗатрат);
		СтруктураПоиска.Вставить("Контрагент",тСтр.Контрагент);
		СтруктураПоиска.Вставить("СтатьяТРУ",тСтр.СтатьяТРУ);
		СтруктураПоиска.Вставить("ВидДвижения",тСтр.ВидДвижения);
		
		НайденныеСтроки = Объект.Данные.НайтиСтроки(СтруктураПоиска);
		для каждого стрМ из НайденныеСтроки Цикл
			если стрМ.СвернутоПоГоду Тогда
				НаимКолонки = "Значение_"+Формат(стрМ.Период,"ДФ=""гггг"""); 
			Иначе
				НаимКолонки = "Значение_"+Формат(стрМ.Период,"ДФ=""ММММгггг"""); 
			КонецЕсли;
			тСтр[НаимКолонки] = стрМ.Сумма;
		КонецЦикла; 
		Если тСтр.Строки.Количество()>0 Тогда
			ЗаполнитьЗначенияКолонок(тСтр,тКолонки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	 

/////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Функция СформироватьДеревоКапитальныеВложения()  
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("КраткоеОписаниеПроекта",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("ТипИнвестиции",Новый ОписаниеТипов("СправочникСсылка.ТипПроектаИИнвестиции"));
	ДеревоЗн.Колонки.Добавить("КатегорияАктива",Новый ОписаниеТипов("СправочникСсылка.КатегорииАктивов"));
	ДеревоЗн.Колонки.Добавить("ЗаказчикПроекта",Новый ОписаниеТипов("СправочникСсылка.ФЦО"));
	ДеревоЗн.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	ТЗ = Объект.ДанныеКапитальныеВложения.Выгрузить();
	ТЗ.Свернуть("КраткоеОписаниеПроекта,ТипИнвестиции,КатегорияАктива,ЗаказчикПроекта,Валюта");
	
	для каждого стр из ТЗ Цикл
		ТекЭлемент				= ДеревоЗн.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекЭлемент,Стр);
	КонецЦикла;	
	
	возврат ДеревоЗн; 	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияКолонокКапитальныеВложения(тДерево,тКолонки)
	Для Каждого тСтр Из тДерево.Строки Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("КраткоеОписаниеПроекта",тСтр.КраткоеОписаниеПроекта);
		СтруктураПоиска.Вставить("ТипИнвестиции",тСтр.ТипИнвестиции);
		СтруктураПоиска.Вставить("КатегорияАктива",тСтр.КатегорияАктива);
		СтруктураПоиска.Вставить("ЗаказчикПроекта",тСтр.ЗаказчикПроекта);
		
		НайденныеСтроки  = Объект.ДанныеКапитальныеВложения.НайтиСтроки(СтруктураПоиска);
		для каждого стрМ из НайденныеСтроки Цикл
			
			ИмяКол  = "ЦенаЗаЕдиницу";
			если стрМ.СвернутоПоГоду Тогда
				НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(стрМ.Период,"ДФ=""гггг"""); 
			Иначе
				НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(стрМ.Период,"ДФ=""ММММгггг"""); 
			КонецЕсли;
			тСтр[НаимКолонки] = стрМ[ИмяКол];
			
			ИмяКол  = "Объем";
			если стрМ.СвернутоПоГоду Тогда
				НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(стрМ.Период,"ДФ=""гггг"""); 
			Иначе
				НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(стрМ.Период,"ДФ=""ММММгггг"""); 
			КонецЕсли;
			тСтр[НаимКолонки] = стрМ[ИмяКол];
			
			ИмяКол  = "СуммаРасходы";
			если стрМ.СвернутоПоГоду Тогда
				НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(стрМ.Период,"ДФ=""гггг"""); 
			Иначе
				НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(стрМ.Период,"ДФ=""ММММгггг"""); 
			КонецЕсли;
			тСтр[НаимКолонки] = стрМ[ИмяКол];
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры	 

&НаСервере
Процедура ЗаполнитьДеревоКапитальныеВложения(тДерево,НаимДерева)
	МассивДобавляемыхРеквизитов 	= Новый Массив;
	МассивУдаляемыхРеквизитов 		= Новый Массив;
	
	ТекДерево = РеквизитФормыВЗначение(НаимДерева);
	для каждого Кол из ТекДерево.Колонки Цикл
		НаимКолонки = "Значение_"; 
		Если Найти(Кол.Имя,НаимКолонки)>0 Тогда
			МассивУдаляемыхРеквизитов.Добавить(НаимДерева+"."+Кол.Имя);
			Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя)<>Неопределено Тогда
				Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		 
	ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	
	МассивУдаляемыхЭлементов 	= Новый Массив;
	для каждого стр из  Элементы[НаимДерева].ПодчиненныеЭлементы Цикл
		НаимКолонки = "ГруппаГод"; 
		Если Найти(стр.Имя,НаимКолонки)>0  Тогда
			МассивУдаляемыхЭлементов.Добавить(стр.Имя);
		Конецесли;	
	КонецЦикла;	
	
	для каждого стр из  МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(стр));
	КонецЦикла;	
	
	ТЗ = Объект.ДанныеКапитальныеВложения.Выгрузить();
	ТЗ.Свернуть("Период,СвернутоПоГоду");
	для каждого стр из  ТЗ Цикл
		
		ИмяКол  = "ЦенаЗаЕдиницу";
		если стр.СвернутоПоГоду Тогда
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Иначе
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""ММММгггг"""); 
		КонецЕсли;
		Попытка
			тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
		Исключение
		КонецПопытки;
		
		
		ИмяКол  = "Объем";
		если стр.СвернутоПоГоду Тогда
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Иначе
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""ММММгггг"""); 
		КонецЕсли;
		Попытка
			тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
		Исключение
		КонецПопытки;
		
		
		ИмяКол  = "СуммаРасходы";
		если стр.СвернутоПоГоду Тогда
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Иначе
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""ММММгггг"""); 
		КонецЕсли;
		Попытка
			тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	// 3. создаем РЕКВИЗИТ КОЛОНКИ (невидимая часть, справа в редакторе форм)
	
	// реквизит принадлежит дереву
	// добавляем реквизит в форму (невидимая часть, справа в редакторе форм)
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// 4. заполняем дерево (реквизит формы) занчением
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	// 5. добавляем НА ФОРМУ (видимая часть, слева в редакторе форм)
	// назовем ДеревоУзел, принадлежит элементу дерева, связан с добавленной колонкой «Узел»
	
	ТЗ = Объект.ДанныеКапитальныеВложения.Выгрузить();
	ТЗ.Свернуть("Период,СвернутоПоГоду");
	для каждого стр из  ТЗ Цикл
		
		если стр.СвернутоПоГоду Тогда
			НаимКолонки 	= НаимДерева+"ГруппаГод"+Формат(Стр.Период,"ДФ=""гггг"""); 
			ЗаголовокГруппы = Формат(Стр.Период,"ДФ=""гггг""");
		Иначе
			НаимКолонки 	= НаимДерева+"ГруппаМесяц"+Формат(Стр.Период,"ДФ=""ММММ"""); 
			ЗаголовокГруппы = Формат(Стр.Период,"ДФ=""ММММ""");
		КонецЕсли;
		
		НайденнаяГруппа = Элементы.Найти(НаимКолонки);
		Если НайденнаяГруппа = Неопределено Тогда
			Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
			Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
			Группа.Заголовок 		= ЗаголовокГруппы;
			Группа.ОтображатьВШапке = Истина;
		Иначе
			Группа = НайденнаяГруппа;
		КонецЕсли;
		
		Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
		
		ИмяКол  = "ЦенаЗаЕдиницу";
		если стр.СвернутоПоГоду Тогда
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Иначе
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""ММММгггг"""); 
		КонецЕсли;
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Цена за ед.";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		
		ИмяКол  = "Объем";
		если стр.СвернутоПоГоду Тогда
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Иначе
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""ММММгггг"""); 
		КонецЕсли;
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Объем";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		
		ИмяКол  = "СуммаРасходы";
		если стр.СвернутоПоГоду Тогда
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Иначе
			НаимКолонки = "Значение_"+ИмяКол+"_"+Формат(Стр.Период,"ДФ=""ММММгггг"""); 
		КонецЕсли;
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Расходы";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		
	КонецЦикла;
	
	тДерево = РеквизитФормыВЗначение(НаимДерева);
	
	ЗаполнитьЗначенияКолонокКапитальныеВложения(тДерево,тДерево.Колонки);		 
	
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Функция СформироватьДеревоДебиторыКредиторы(НаимТЧ)  
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ОписаниеДата = Новый ОписаниеТипов("Дата");	
	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Договор"						,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("НомерДоговора"				,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("ДатаДоговора"				,ОписаниеДата);
	ДеревоЗн.Колонки.Добавить("ДатаПогашения"				,ОписаниеДата);
	ДеревоЗн.Колонки.Добавить("Контрагент"					,Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДеревоЗн.Колонки.Добавить("КонтрагентБИН"				,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("ТипКредитора"				,Новый ОписаниеТипов("СправочникСсылка.ТипыКредиторов"));
	ДеревоЗн.Колонки.Добавить("ДолговойИнструмент"			,Новый ОписаниеТипов("СправочникСсылка.ДолговыеИнструменты"));
	ДеревоЗн.Колонки.Добавить("Валюта"						,Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ДеревоЗн.Колонки.Добавить("Индексация"					,ОписаниеБулево);
	ДеревоЗн.Колонки.Добавить("КурсНаДату"					,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("СрокКредитования"			,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ПроцентнаяСтавка"			,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ЦелевоеНазначениеСредств"	,Новый ОписаниеТипов("СправочникСсылка.ЦелевоеЗначениеСредств"));
	ДеревоЗн.Колонки.Добавить("СуммаПоДоговору"				,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("СуммаОсвоенияПоДоговору"		,ОписаниеЧисло);
	
	
	ТЗ = Объект[НаимТЧ].Выгрузить();
	ТЗ.Свернуть("Договор,НомерДоговора,ДатаДоговора,ДатаПогашения,Контрагент,КонтрагентБИН,ТипКредитора,ДолговойИнструмент,Валюта,Индексация,КурсНаДату,СрокКредитования,ПроцентнаяСтавка,ЦелевоеНазначениеСредств,СуммаПоДоговору,СуммаОсвоенияПоДоговору");//,СальдоНаНачалоОД,СальдоНаНачалоНачисленныеПроценты
	
	для каждого стр из ТЗ Цикл
		ТекЭлемент	= ДеревоЗн.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекЭлемент,Стр);
	КонецЦикла;	
	
	возврат ДеревоЗн; 	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоДебиторыКредиторы(тДерево,НаимДерева,НаимТЧ)
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивДобавляемыхПолей 	= Новый Массив;
	МассивДобавляемыхПолей.Добавить("СуммаОД");
	МассивДобавляемыхПолей.Добавить("НачисленныеПроценты");
	
	МассивДобавляемыхРеквизитов 	= Новый Массив;
	МассивУдаляемыхРеквизитов 		= Новый Массив;
	
	ТекДерево = РеквизитФормыВЗначение(НаимДерева);
	для каждого Кол из ТекДерево.Колонки Цикл
		НаимКолонки = "Значение_"; 
		Если Найти(Кол.Имя,"Значение_")>0 или Найти(Кол.Имя,"СальдоНаКонец")>0 Тогда
			МассивУдаляемыхРеквизитов.Добавить(НаимДерева+"."+Кол.Имя);
			Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя)<>Неопределено Тогда
				Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		 
	ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	
	МассивУдаляемыхЭлементов 	= Новый Массив;
	для каждого стр из  Элементы[НаимДерева].ПодчиненныеЭлементы Цикл
		НаимКолонки = "ГруппаГод"; 
		Если Найти(стр.Имя,НаимКолонки)>0  Тогда
			МассивУдаляемыхЭлементов.Добавить(стр.Имя);
		Конецесли;	
		
	КонецЦикла;	
	
	для каждого стр из  МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(стр));
	КонецЦикла;	
	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Период",ОписаниеДата);
	ТЗ.Колонки.Добавить("СвернутоПоГоду",ОписаниеБулево);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&Дата1, &Дата2, МЕСЯЦ)+1 КАК КолМесяцев";
	Запрос.УстановитьПараметр("Дата1",Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("Дата2",КонецГода(Объект.ПериодПланирования));
	Рез = Запрос.Выполнить().Выбрать();			   
	Рез.Следующий();
	КолМесяцев = Рез.КолМесяцев;
	
	
	для а=1 по КолМесяцев Цикл  
		НовСтр = ТЗ.Добавить();
		НовСтр.Период = Дата(Год(Объект.ПериодПланирования),а,1);
	КонецЦикла;
	
	НовСтр = ТЗ.Добавить();
	НовСтр.Период = ДобавитьМесяц(Объект.ПериодПланирования,12);
	НовСтр.СвернутоПоГоду = Истина;
	НовСтр = ТЗ.Добавить();
	НовСтр.Период = ДобавитьМесяц(Объект.ПериодПланирования,24);
	НовСтр.СвернутоПоГоду = Истина;
	НовСтр = ТЗ.Добавить();
	НовСтр.Период = ДобавитьМесяц(Объект.ПериодПланирования,36);
	НовСтр.СвернутоПоГоду = Истина;
	
	НовСтр = ТЗ.Добавить();
	НовСтр.Период = ДобавитьМесяц(Объект.ПериодПланирования,48);
	НовСтр.СвернутоПоГоду = Истина;
	
	
	для каждого стр из  ТЗ Цикл
		
		если стр.СвернутоПоГоду Тогда
			НаимКолонки = НаимДерева+"ГруппаГод"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Иначе
			НаимКолонки = НаимДерева+"ГруппаМесяц"+Формат(Стр.Период,"ДФ=""ММММ"""); 
		КонецЕсли;
		
		Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимКолонки)<>Неопределено Тогда
			Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимКолонки));
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаНачало")<>Неопределено Тогда
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаНачало"));
	КонецЕсли;
	
	Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаКонец")<>Неопределено Тогда
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаКонец"));
	КонецЕсли;
	
	
	ИмяКол  		= "СальдоНаНачалоОД";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	ИмяКол  		= "СальдоНаНачалоНачисленныеПроценты";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	
	для каждого стр из  ТЗ Цикл
		если стр.СвернутоПоГоду Тогда
			Продолжить;
		КонецЕсли;	
		
		НаимКолонки 	= НаимДерева+"ГруппаМесяц"+Формат(Стр.Период,"ДФ=""М"""); 
		ЗаголовокГруппы = Формат(Стр.Период,"ДФ=""ММММ""");
		
		НайденнаяГруппа = Элементы.Найти(НаимКолонки);
		
		
		ИмяКол  = "СуммаОД";
		НаимКолонки = ИмяКол+"МесяцЗначение_"+Формат(Стр.Период,"ДФ=""М"""); 
		Попытка
			тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
		Исключение
		КонецПопытки;
		
		ИмяКол  = "НачисленныеПроценты";
		НаимКолонки = ИмяКол+"МесяцЗначение_"+Формат(Стр.Период,"ДФ=""М"""); 
		Попытка
			тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	
	
	ИмяКол  		= "СальдоНаКонецОД";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	ИмяКол  		= "СальдоНаКонецНачисленныеПроценты";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	
	//заполним по годам
	для каждого стр из  ТЗ Цикл
		
		если НЕ стр.СвернутоПоГоду Тогда
			Продолжить;
		КонецЕсли;	
		
		НаимКолонки 	= НаимДерева+"ГруппаГод"+Формат(Стр.Период,"ДФ=""гггг"""); 
		ЗаголовокГруппы = Формат(Стр.Период,"ДФ=""ММММ""");
		
		НайденнаяГруппа = Элементы.Найти(НаимКолонки);
		
		
		ИмяКол  	= "СуммаОД";
		НаимКолонки = ИмяКол+"ГодЗначение_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Попытка
			тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
		Исключение
		КонецПопытки;
		
		ИмяКол  	= "НачисленныеПроценты";
		НаимКолонки = ИмяКол+"ГодЗначение_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		Попытка
			тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	// 3. создаем РЕКВИЗИТ КОЛОНКИ (невидимая часть, справа в редакторе форм)
	
	// реквизит принадлежит дереву
	// добавляем реквизит в форму (невидимая часть, справа в редакторе форм)
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// 4. заполняем дерево (реквизит формы) занчением
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	// 5. добавляем НА ФОРМУ (видимая часть, слева в редакторе форм)
	// назовем ДеревоУзел, принадлежит элементу дерева, связан с добавленной колонкой «Узел»
	
	
	
	
	НаимКолонки 	= НаимДерева+"ГруппаСальдоНаНачало"; 
	ЗаголовокГруппы = "Сальдо на начало";
	НайденнаяГруппа = Элементы.Найти(НаимКолонки);
	Если НайденнаяГруппа = Неопределено Тогда
		Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
		Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
		Группа.Заголовок 		= ЗаголовокГруппы;
		Группа.ОтображатьВШапке = Истина;
	Иначе
		Группа = НайденнаяГруппа;
	КонецЕсли;
	Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ИмяКол  					= "СальдоНаНачалоОД";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	Если Элементы.Найти(НаимДерева+НаимКолонки)=Неопределено Тогда
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма ОД";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	КонецЕсли;
	
	ИмяКол  					= "СальдоНаНачалоНачисленныеПроценты";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	Если Элементы.Найти(НаимДерева+НаимКолонки)=Неопределено Тогда
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма %";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	КонецЕсли;
	
	//по месяцам
	для каждого стр из  ТЗ Цикл
		
		если стр.СвернутоПоГоду Тогда
			Продолжить;
		КонецЕсли;	
		
		НаимКолонки 	= НаимДерева+"ГруппаМесяц"+Формат(Стр.Период,"ДФ=""ММММ"""); 
		ЗаголовокГруппы = Формат(Стр.Период,"ДФ=""ММММ""");
		
		НайденнаяГруппа = Элементы.Найти(НаимКолонки);
		Если НайденнаяГруппа = Неопределено Тогда
			Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
			Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
			Группа.Заголовок 		= ЗаголовокГруппы;
			Группа.ОтображатьВШапке = Истина;
		Иначе
			Группа 					= НайденнаяГруппа;
		КонецЕсли;
		Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
		
		ИмяКол  = "СуммаОД";
		НаимКолонки 				= ИмяКол+"МесяцЗначение_"+Формат(Стр.Период,"ДФ=""М"""); 
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма ОД";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		
		
		ИмяКол  = "НачисленныеПроценты";
		НаимКолонки 				= ИмяКол+"МесяцЗначение_"+Формат(Стр.Период,"ДФ=""М"""); 
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма %";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		
	КонецЦикла;
	
	
	
	НаимКолонки 	= НаимДерева+"ГруппаСальдоНаКонец"; 
	ЗаголовокГруппы = "Сальдо на конец";
	
	НайденнаяГруппа = Элементы.Найти(НаимКолонки);
	Если Элементы.Найти(НаимКолонки)=Неопределено Тогда
		Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
		Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
		Группа.Заголовок 		= ЗаголовокГруппы;
		Группа.ОтображатьВШапке = Истина;
	Иначе
		Группа = НайденнаяГруппа;
	КонецЕсли;
	Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ИмяКол  					= "СальдоНаКонецОД";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	Если Элементы.Найти(НаимДерева+НаимКолонки)=Неопределено Тогда
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма ОД";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	КонецЕсли;
	
	
	ИмяКол  					= "СальдоНаКонецНачисленныеПроценты";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	Если Элементы.Найти(НаимДерева+НаимКолонки)=Неопределено Тогда
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма %";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	КонецЕсли;
	
	
	//по годам
	для каждого стр из  ТЗ Цикл
		
		если НЕ стр.СвернутоПоГоду Тогда
			Продолжить;
		КонецЕсли;	
		
		НаимКолонки 	= НаимДерева+"ГруппаГод"+Формат(Стр.Период,"ДФ=""гггг"""); 
		//ЗаголовокГруппы = Формат(Стр.Период,"ДФ=""гггг""");
		ЗаголовокГруппы = "Сальдо на конец "+Формат(Стр.Период,"ДФ=""гггг""")+"г.";
		
		НайденнаяГруппа = Элементы.Найти(НаимКолонки);
		Если НайденнаяГруппа = Неопределено Тогда
			Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
			Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
			Группа.Заголовок 		= ЗаголовокГруппы;
			Группа.ОтображатьВШапке = Истина;
		Иначе
			Группа 					= НайденнаяГруппа;
		КонецЕсли;
		Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
		
		ИмяКол  = "СуммаОД";
		НаимКолонки 				= ИмяКол+"ГодЗначение_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма ОД";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		
		
		ИмяКол  = "НачисленныеПроценты";
		НаимКолонки 				= ИмяКол+"ГодЗначение_"+Формат(Стр.Период,"ДФ=""гггг"""); 
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма %";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		
	КонецЦикла;
	
	
	тДерево = РеквизитФормыВЗначение(НаимДерева);
	
	ЗаполнитьЗначенияКолонокДебиторыКредиторы(тДерево,тДерево.Колонки,НаимТЧ);		 
	
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияКолонокДебиторыКредиторы(тДерево,тКолонки,НаимТЧ)
	Для Каждого тСтр Из тДерево.Строки Цикл
		СтруктураПоиска = Новый Структура();        	
		СтруктураПоиска.Вставить("Договор"				,тСтр.Договор);
		СтруктураПоиска.Вставить("НомерДоговора"		,тСтр.НомерДоговора);
		СтруктураПоиска.Вставить("ДатаДоговора"			,тСтр.ДатаДоговора);
		СтруктураПоиска.Вставить("ДатаПогашения"		,тСтр.ДатаПогашения);
		СтруктураПоиска.Вставить("Контрагент"			,тСтр.Контрагент);
		СтруктураПоиска.Вставить("КонтрагентБИН"		,тСтр.КонтрагентБИН);
		СтруктураПоиска.Вставить("ТипКредитора"			,тСтр.ТипКредитора);
		СтруктураПоиска.Вставить("ДолговойИнструмент"	,тСтр.ДолговойИнструмент);
		СтруктураПоиска.Вставить("Валюта"				,тСтр.Валюта);
		СтруктураПоиска.Вставить("Индексация"			,тСтр.Индексация);
		СтруктураПоиска.Вставить("КурсНаДату"			,тСтр.КурсНаДату);
		СтруктураПоиска.Вставить("СрокКредитования"		,тСтр.СрокКредитования);
		СтруктураПоиска.Вставить("ПроцентнаяСтавка"		,тСтр.ПроцентнаяСтавка);
		СтруктураПоиска.Вставить("ЦелевоеНазначениеСредств"	,тСтр.ЦелевоеНазначениеСредств);
		СтруктураПоиска.Вставить("СуммаПоДоговору"			,тСтр.СуммаПоДоговору);
		СтруктураПоиска.Вставить("СуммаОсвоенияПоДоговору",тСтр.СуммаОсвоенияПоДоговору);
		//СтруктураПоиска.Вставить("СальдоНаНачалоОД"					,тСтр.СальдоНаНачалоОД);
		//СтруктураПоиска.Вставить("СальдоНаНачалоНачисленныеПроценты",тСтр.СальдоНаНачалоНачисленныеПроценты);
		
		НайденныеСтроки  = Объект[НаимТЧ].НайтиСтроки(СтруктураПоиска);
		для каждого стрМ из НайденныеСтроки Цикл
			
			
			ИмяКол  			= "СальдоНаНачалоОД";
			НаимКолонки 		= ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] 	= тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			ИмяКол  			= "СальдоНаНачалоНачисленныеПроценты";
			НаимКолонки 		= ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] 	= тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			ИмяКол  = "СуммаОД";
			
			если стрМ.СвернутоПоГоду Тогда
				НаимКолонки = ИмяКол+"ГодЗначение_"+Формат(стрМ.Период,"ДФ=""гггг"""); 
			Иначе
				НаимКолонки = ИмяКол+"МесяцЗначение_"+Формат(стрМ.Период,"ДФ=""М"""); 
			КонецЕсли;
			тСтр[НаимКолонки] = стрМ[ИмяКол];
			
			
			ИмяКол  = "НачисленныеПроценты";
			
			если стрМ.СвернутоПоГоду Тогда
				НаимКолонки = ИмяКол+"ГодЗначение_"+Формат(стрМ.Период,"ДФ=""гггг"""); 
			Иначе
				НаимКолонки = ИмяКол+"МесяцЗначение_"+Формат(стрМ.Период,"ДФ=""М"""); 
			КонецЕсли;
			тСтр[НаимКолонки] = стрМ[ИмяКол];
			
			
			ИмяКол		  		= "СальдоНаКонецОД";
			НаимКолонки 		= ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] 	= тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			ИмяКол  			= "СальдоНаКонецНачисленныеПроценты";
			НаимКолонки 		= ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] 	= тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры	 


/////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПересчитатьВсеДерево(дз_стр,Колонки,СписокСтатейДляОтбора,МассивКолонокМесяц)
	
	
	
	для каждого стр из дз_стр Цикл
		
		// Если мы в строке, у неё нет итогов, пропустим
		Если стр.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Попытка
		//	Если стр.Контрагент <> "Всего" Тогда
		//		Продолжить;
		//	КонецЕсли;
		//Исключение
		//КонецПопытки;
		
		//ИтСумма = 0;
		//Для каждого ЭлМассива из МассивКолонокМесяц Цикл
		//	ИтСумма = ИтСумма+ стр[ЭлМассива];
		//КонецЦикла;
		//Стр["Значение_"+Формат(Объект.ПериодПланирования,"ДФ=""гггг""")] = ИтСумма;
		
		
		ПересчитатьВсеДерево(стр.Строки,Колонки,СписокСтатейДляОтбора,МассивКолонокМесяц);
		
		//Если стр.Код = "BS1.3.4." Тогда
		//	а=1;
		//КонецЕсли;	
		
		Если  Колонки.Найти("Статья")<>Неопределено и СписокСтатейДляОтбора.Найти(стр.Статья)<>Неопределено Тогда
			// стр.Код = "BS1.1.1." или стр.Код = "BS1.3.4.1." или стр.Код = "BS2.3.1.1.1." или стр.Код = "BS2.3.1.1.2." Тогда
			для каждого стрС из стр.Строки Цикл
				если стрС.ВидДвижения.КодСправочника <> "RFW3." Тогда
					Продолжить;
				КонецЕсли;
				
				для каждого Кол из Колонки Цикл  
					НаимКолонки = "Значение_"; 
					Если Найти(Кол.Имя,НаимКолонки)>0 Тогда
						стр[Кол.Имя] 		= стр[Кол.Имя]+стрС[Кол.Имя];
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;
		Иначе
			для каждого Кол из Колонки Цикл
				НаимКолонки = "Значение_"; 
				Если Найти(Кол.Имя,НаимКолонки)>0 Тогда
					стр[Кол.Имя] 		= стр.Строки.Итог(Кол.Имя);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
Конецпроцедуры

Процедура ПересчетИтоговДерева(НаимДерева)
	НаимКолонки = "Значение_"; 
	Дерево = РеквизитФормыВЗначение(НаимДерева);
	Для каждого Кол Из Дерево.Колонки Цикл
		
		Ном = 1;
		НайденноеИмяЗначение 	= Найти(Кол.Имя,НаимКолонки);
		НайденноеИмяСальдо 		= Найти(Кол.Имя,"Сальдо");
		Если НайденноеИмяЗначение>0 или НайденноеИмяСальдо>0 Тогда
			ИтСумма = 0;
			Для Каждого стр из Дерево.Строки Цикл
				ИтСумма = ИтСумма + стр[Кол.Имя];
			КонецЦикла;	
			Элементы[НаимДерева+Кол.Имя].ТекстПодвала = ИтСумма;
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоКредитыПриИзменении(Элемент)
	
	НаимКолонки = Элемент.ТекущийЭлемент.Имя;
	НаимДерева  = "ДеревоКредиторы";
	
	НайденноеИмяЗначение 	= Найти(НаимКолонки,"МесяцЗначение_");
	НайденноеИмяСальдо		= Найти(НаимКолонки,"Сальдо");
	НайденноеИмяГодЗначение= Найти(НаимКолонки,"ГодЗначение_");
	
	ГодСтрока = Формат(Объект.ПериодПланирования,"ДФ=""гггг""");
	
	Если НайденноеИмяЗначение>0 или НайденноеИмяСальдо>0 Тогда
		НачисленныеПроценты 	= 0;
		СуммаОД 				= 0;
		
		
		ТекДанные = Элемент.ТекущиеДанные;
		для а=1 по 12 Цикл
			НачисленныеПроценты 	= НачисленныеПроценты+ТекДанные["НачисленныеПроцентыМесяцЗначение_"+а];
			СуммаОД 				= СуммаОД+ТекДанные["СуммаОДМесяцЗначение_"+а];
		КонецЦикла;	 
		//ТекДанные["НачисленныеПроцентыГодЗначение_"+ГодСтрока] = ТекДанные["СальдоНаНачалоНачисленныеПроценты"]+НачисленныеПроценты;
		
		//для а=1 по 12 Цикл
		//КонецЦикла;	 
		
		ТекДанные["СальдоНаКонецОДЗначение_"] 					= ТекДанные["СальдоНаНачалоОДЗначение_"]+СуммаОД;
		ТекДанные["СальдоНаКонецНачисленныеПроцентыЗначение_"] = ТекДанные["СальдоНаКонецНачисленныеПроцентыЗначение_"]+НачисленныеПроценты;
		
		ПересчетИтоговТекущейКолонки(НаимДерева,НаимКолонки);
		ПересчетИтоговТекущейКолонки(НаимДерева,НаимДерева+"СальдоНаКонецОДЗначение_");
		ПересчетИтоговТекущейКолонки(НаимДерева,НаимДерева+"СальдоНаКонецНачисленныеПроцентыЗначение_");
	Конецесли;
	
	Если НайденноеИмяГодЗначение>0  Тогда
		ПересчетИтоговТекущейКолонки(НаимДерева,НаимКолонки);
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДЗПриИзменении(Элемент)
	
	НаимКолонки = Элемент.ТекущийЭлемент.Имя;
	НаимДерева  = "ДеревоДебиторы";
	
	НайденноеИмяЗначение 	= Найти(НаимКолонки,"МесяцЗначение_");
	
	Если НайденноеИмяЗначение>0 Тогда
		НачисленныеПроценты 	= 0;
		СуммаОД 				= 0;
		
		ГодСтрока = Формат(Объект.ПериодПланирования,"ДФ=""гггг""");
		
		ТекДанные = Элемент.ТекущиеДанные;
		для а=1 по 12 Цикл
			НачисленныеПроценты = НачисленныеПроценты+ТекДанные["НачисленныеПроцентыМесяцЗначение_"+а];
		КонецЦикла;	 
		ТекДанные["НачисленныеПроцентыГодЗначение_"+ГодСтрока] = НачисленныеПроценты;
		
		для а=1 по 12 Цикл
			СуммаОД = СуммаОД+ТекДанные["СуммаОДМесяцЗначение_"+а];
		КонецЦикла;	 
		
		ТекДанные["СуммаОДГодЗначение_"+ГодСтрока] = СуммаОД;
	Конецесли;
	
	ПересчетИтоговТекущейКолонки(НаимДерева,НаимКолонки);
	ПересчетИтоговТекущейКолонки(НаимДерева,НаимДерева+"НачисленныеПроцентыГодЗначение_"+ГодСтрока);
	ПересчетИтоговТекущейКолонки(НаимДерева,НаимДерева+"СуммаОДГодЗначение_"+ГодСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКредитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	НоваяСтрока = ДеревоКредиторы.ПолучитьЭлементы().Добавить();
	если Копирование Тогда
		исходнаяСтрока = Элементы.ДеревоКредиторы.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,исходнаяСтрока);
	КонецЕсли;
	Элементы.ДеревоКредиторы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ДеревоКредиторы.ИзменитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДЗПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	НоваяСтрока = ДеревоДебиторы.ПолучитьЭлементы().Добавить();
	если Копирование Тогда
		исходнаяСтрока = Элементы.ДеревоДебиторы.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,исходнаяСтрока);
	КонецЕсли;
	Элементы.ДеревоДебиторы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ДеревоДебиторы.ИзменитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКапитальныеВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	НоваяСтрока = ДеревоКапитальныеВложения.ПолучитьЭлементы().Добавить();
	если Копирование Тогда
		исходнаяСтрока = Элементы.ДеревоКапитальныеВложения.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,исходнаяСтрока);
	КонецЕсли;
	Элементы.ДеревоКапитальныеВложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ДеревоКапитальныеВложения.ИзменитьСтроку();
КонецПроцедуры

#КонецОбласти


#Область KPIНаСервере  

&НаСервере
Процедура ПриСозданииНаСервереKPI(Отказ, СтандартнаяОбработка) 
	
	Форма	 = ЭтаФорма;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеПоказателиДеятельности.Ссылка КАК КлючевойПоказатель,
		|	КлючевыеПоказателиДеятельности.Наименование КАК Наименование,
		|	КлючевыеПоказателиДеятельности.КодСправочника КАК Код
		|ИЗ
		|	Справочник.КлючевыеПоказателиДеятельности КАК КлючевыеПоказателиДеятельности
		|ГДЕ
		|	КлючевыеПоказателиДеятельности.Родитель = ЗНАЧЕНИЕ(Справочник.КлючевыеПоказателиДеятельности.ПустаяССылка)
		|	И НЕ КлючевыеПоказателиДеятельности.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	КлючевыеПоказателиДеятельности.Ссылка,
		|	КлючевыеПоказателиДеятельности.Наименование,
		|	КлючевыеПоказателиДеятельности.КодСправочника
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Выборка = Справочники.КлючевыеПоказателиДеятельности.Выбрать(ВыборкаДетальныеЗаписи.КлючевойПоказатель);
		Если Не Выборка.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы 			= Форма.ТаблицаСтраницKPI.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,ВыборкаДетальныеЗаписи);
		
		Позиция 				= Найти(ВыборкаДетальныеЗаписи.Код,".");
		СтрокаТаблицы.ИмяГруппы = СокрЛП(Лев(ВыборкаДетальныеЗаписи.Код,Позиция-1))+"v2";
		
	КонецЦикла; 
	
	Если  НЕ Форма.ТаблицаСтраницKPI.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаСтраницKPI Цикл  
		
			НовыйЭлементГруппа 				= Форма.Элементы.Добавить("ГруппаДляОтбора"+СтрокаТаблицы.ИмяГруппы,Тип("ГруппаФормы"),Форма.Элементы.СтраницыГруппыKPI);
			НовыйЭлементГруппа.Вид 			= ВидГруппыФормы.Страница;
			НовыйЭлементГруппа.Заголовок 	= СтрокаТаблицы.Наименование;
	
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаСтраницKPI Цикл  
		
		Реквизиты = Новый Массив;
		Дерево = Новый РеквизитФормы("Дерево" + СтрокаТаблицы.ИмяГруппы,Новый ОписаниеТипов("ДеревоЗначений"));
		Реквизиты.Добавить(Дерево);
		
		РеквизитКод = Новый РеквизитФормы("Код",Новый ОписаниеТипов("Строка"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(РеквизитКод);
		
		РеквизитПоказатель = Новый РеквизитФормы("КлючевойПоказатель",Новый ОписаниеТипов("СправочникСсылка.КлючевыеПоказателиДеятельности"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(РеквизитПоказатель);
		
		РеквизитЕдиницаИзмерения = Новый РеквизитФормы("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмеренияKPI"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(РеквизитЕдиницаИзмерения);
		
		СтрокаМесяцев = "Январь,Февраль,Март,Апрель,Май,Июнь,Июль,Август,Сентябрь,Октябрь,Ноябрь,Декабрь";
		МассивМесяцев = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаМесяцев,",");
		
		Для Каждого Месяц Из МассивМесяцев Цикл
			
			Реквизиты.Добавить(Новый РеквизитФормы(Месяц,Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы));
			
		КонецЦикла;
			
		ТекущийГод = Новый РеквизитФормы("ТекущийГод",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ТекущийГод); 
		
		ГодПлюс1 = Новый РеквизитФормы("ГодПлюс1",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ГодПлюс1);
		
		ГодПлюс2 = Новый РеквизитФормы("ГодПлюс2",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ГодПлюс2);
		
		ГодПлюс3 = Новый РеквизитФормы("ГодПлюс3",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ГодПлюс3); 
		
		ГодПлюс4 = Новый РеквизитФормы("ГодПлюс4",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ГодПлюс4);
		
		Форма.ИзменитьРеквизиты(Реквизиты);
		
		
		НовыйЭлемент 							= Форма.Элементы.Добавить("Дерево"+СтрокаТаблицы.ИмяГруппы,Тип("ТаблицаФормы"),Форма.Элементы["ГруппаДляОтбора"+СтрокаТаблицы.ИмяГруппы]);
		НовыйЭлемент.ПутьКДанным 				= "Дерево" + СтрокаТаблицы.ИмяГруппы;
		НовыйЭлемент.ПоложениеКоманднойПанели	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		//НовыйЭлемент.Высота = 20;
		
		НовыйЭлементКод 			= Форма.Элементы.Добавить("Код"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементКод.ПутьКДанным = "Дерево" + СтрокаТаблицы.ИмяГруппы +".Код";
		НовыйЭлементКод.Вид 		= ВидПоляФормы.ПолеВвода;
		НовыйЭлементКод.Ширина		= 15;
		//
		НовыйЭлементКлючевойПоказатель 				= Форма.Элементы.Добавить("КлючевойПоказатель"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементКлючевойПоказатель.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".КлючевойПоказатель";
		НовыйЭлементКлючевойПоказатель.Вид 			= ВидПоляФормы.ПолеВвода; 
		
		НовыйЭлементЕдиницаИзмерения 				= Форма.Элементы.Добавить("ЕдиницаИзмерения"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементЕдиницаИзмерения.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ЕдиницаИзмерения";
		НовыйЭлементЕдиницаИзмерения.Вид 			= ВидПоляФормы.ПолеВвода; 
		
		
		Для Каждого Месяц Из МассивМесяцев Цикл
			
			ЭлементМесяц 				= Форма.Элементы.Добавить(Месяц+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
			ЭлементМесяц.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +"."+Месяц;
			ЭлементМесяц.Вид 			= ВидПоляФормы.ПолеВвода; 
			
		КонецЦикла; 

		ПериодПланирования 				= Объект.ПериодПланирования;
		
		НовыйЭлементГТекущийГод 			= Форма.Элементы.Добавить("ТекущийГод"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГТекущийГод.ПутьКДанным = "Дерево" + СтрокаТаблицы.ИмяГруппы +".ТекущийГод";
		НовыйЭлементГТекущийГод.Вид 		= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГТекущийГод.Заголовок 	= Формат(ПериодПланирования,"ДФ=""гггг"""); 
		
		НовыйЭлементГодПлюс1 				= Форма.Элементы.Добавить("ГодПлюс1"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГодПлюс1.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ГодПлюс1";
		НовыйЭлементГодПлюс1.Вид 			= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГодПлюс1.Заголовок	 	= Формат(ДобавитьМесяц(ПериодПланирования,12),"ДФ=""гггг""");  
		
		
		НовыйЭлементГодПлюс2 				= Форма.Элементы.Добавить("ГодПлюс2"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГодПлюс2.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ГодПлюс2";
		НовыйЭлементГодПлюс2.Вид 			= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГодПлюс2.Заголовок 		= Формат(ДобавитьМесяц(ПериодПланирования,24),"ДФ=""гггг""");  
		
		
		НовыйЭлементГодПлюс3 				= Форма.Элементы.Добавить("ГодПлюс3"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГодПлюс3.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ГодПлюс3";
		НовыйЭлементГодПлюс3.Вид	 		= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГодПлюс3.Заголовок 		= Формат(ДобавитьМесяц(ПериодПланирования,36),"ДФ=""гггг"""); 
		
		НовыйЭлементГодПлюс4 				= Форма.Элементы.Добавить("ГодПлюс4"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГодПлюс4.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ГодПлюс4";
		НовыйЭлементГодПлюс4.Вид 			= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГодПлюс4.Заголовок 		= Формат(ДобавитьМесяц(ПериодПланирования,48),"ДФ=""гггг""");  
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	авКлючевыеПоказателиДеятельности.КодСправочника КАК Код,
		|	авКлючевыеПоказателиДеятельности.Ссылка КАК КлючевойПоказатель,
		|	авКлючевыеПоказателиДеятельности.ЕдиницаИзмерения
		|ИЗ
		|	Справочник.КлючевыеПоказателиДеятельности КАК авКлючевыеПоказателиДеятельности
		|ГДЕ
		|	авКлючевыеПоказателиДеятельности.Родитель В ИЕРАРХИИ(&Родитель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	авКлючевыеПоказателиДеятельности.Код ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("Родитель", СтрокаТаблицы.КлючевойПоказатель);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Дерево = Форма.РеквизитФормыВЗначение("Дерево" + СтрокаТаблицы.ИмяГруппы);
		КоличествоСтрок = 0;
		Для Каждого СтрокаРезультата Из РезультатЗапроса.Строки Цикл 
			
			СтрокаДерева 					= Дерево.Строки.Добавить();
			СтрокаДерева.Код 				= СтрокаРезультата.Код;
			СтрокаДерева.КлючевойПоказатель = СтрокаРезультата.КлючевойПоказатель;
			СтрокаДерева.ЕдиницаИзмерения 	= СтрокаРезультата.ЕдиницаИзмерения;
			
			НайденныеСтроки = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("КлючевойПоказатель",СтрокаДерева.КлючевойПоказатель));
			Если НЕ НайденныеСтроки.Количество() Тогда
				СтрокаТЧ 					= Объект.ДанныеКПД.Добавить();
				СтрокаТЧ.Код 				= СтрокаДерева.Код;
				СтрокаТЧ.КлючевойПоказатель = СтрокаДерева.КлючевойПоказатель;
				СтрокаТЧ.ЕдиницаИзмерения 	= СтрокаДерева.ЕдиницаИзмерения;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаДерева,НайденныеСтроки[0]);
			КонецЕсли;
			КоличествоСтрок = КоличествоСтрок +1;
			Если СтрокаРезультата.Строки.Количество() Тогда 
				Для Каждого  ВторойУровеньСтрок Из СтрокаРезультата.Строки Цикл
					
					СтрокаДерева2 					= СтрокаДерева.Строки.Добавить();
					СтрокаДерева2.Код 				= ВторойУровеньСтрок.Код;
					СтрокаДерева2.ЕдиницаИзмерения 	= ВторойУровеньСтрок.ЕдиницаИзмерения; 
					СтрокаДерева2.КлючевойПоказатель= ВторойУровеньСтрок.КлючевойПоказатель; 
					
					НайденныеСтроки = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("КлючевойПоказатель",СтрокаДерева2.КлючевойПоказатель));
					Если НЕ НайденныеСтроки.Количество() Тогда
						СтрокаТЧ 					= Объект.ДанныеКПД.Добавить();
						СтрокаТЧ.Код 				= СтрокаДерева2.Код;
						СтрокаТЧ.КлючевойПоказатель = СтрокаДерева2.КлючевойПоказатель;
						СтрокаТЧ.ЕдиницаИзмерения 	= СтрокаДерева2.ЕдиницаИзмерения;
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаДерева2,НайденныеСтроки[0]);
					КонецЕсли;
					
					КоличествоСтрок = КоличествоСтрок +1;
					Если ВторойУровеньСтрок.Строки.Количество() Тогда 
						Для Каждого ТретийУровеньСтрок Из ВторойУровеньСтрок.Строки Цикл 
							КоличествоСтрок 				= КоличествоСтрок +1;
							СтрокаДерева3 					= СтрокаДерева2.Строки.Добавить();
							СтрокаДерева3.Код 				= ВторойУровеньСтрок.Код;
							СтрокаДерева3.КлючевойПоказатель= ВторойУровеньСтрок.КлючевойПоказатель; 
							СтрокаДерева3.ЕдиницаИзмерения 	= ВторойУровеньСтрок.ЕдиницаИзмерения; 
							
							НайденныеСтроки = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("КлючевойПоказатель",СтрокаДерева3.КлючевойПоказатель));
							Если НЕ НайденныеСтроки.Количество() Тогда
								СтрокаТЧ 					= Объект.ДанныеКПД.Добавить();
								СтрокаТЧ.Код 				= СтрокаДерева3.Код;
								СтрокаТЧ.КлючевойПоказатель = СтрокаДерева3.КлючевойПоказатель;
								СтрокаТЧ.ЕдиницаИзмерения 	= СтрокаДерева3.ЕдиницаИзмерения;
							Иначе
								ЗаполнитьЗначенияСвойств(СтрокаДерева3,НайденныеСтроки[0]);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
					КонецЦикла;	
				КонецЕсли;
			
			
		КонецЦикла;
		
		Форма.Элементы["Дерево"+СтрокаТаблицы.ИмяГруппы].Высота = КоличествоСтрок;
		
		Форма.ЗначениеВРеквизитФормы(Дерево,"Дерево" + СтрокаТаблицы.ИмяГруппы);
		
	КонецЦикла;
	
	
	
КонецПроцедуры  


&НаСервере
Процедура ПередЗаписьюНаСервереKPI(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	КлючевыеПоказателиВызовСервера.ПередЗаписьюНаСервереKPI(ЭтаФорма,Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры


#КонецОбласти 

#Область KPIНаКлиенте 

&НаКлиенте
Процедура ПриОткрытииKPI(Отказ) 
	
	Для Каждого СтрокаТаблицы Из ТаблицаСтраницKPI Цикл 
		РазвернутьДерево(ЭтаФорма["Дерево"+СтрокаТаблицы.ИмяГруппы].ПолучитьЭлементы(),"Дерево"+СтрокаТаблицы.ИмяГруппы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(КоллекцияЭлементовДерева,ИмяДерева=Неопределено)
	
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл 
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы[ИмяДерева].Развернуть(ИдентификаторСтроки);
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы(); 
		Если ПодчиненныеСтроки.Количество() Тогда
			РазвернутьДерево(ПодчиненныеСтроки,ИмяДерева);
		КонецЕсли;
		
	КонецЦикла; 	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	//  КоллекцияЭлементовДерева=ДеревоBS.ПолучитьЭлементы();
	//Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
	//     ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
	//     Элементы.ДеревоНоменклатуры.Свернуть(ИдентификаторСтроки);
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийГодПриИзменении(Элемент)  
	
	Для Каждого СтрокаТаблицы Из ТаблицаСтраницKPI Цикл  
		
		ЭлментТекущийГод = Элементы.Найти("ТекущийГод"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментТекущийГод  <> Неопределено Тогда  
			ЭлментТекущийГод.Заголовок = Формат(Объект.ПериодПланирования,"ДФ=гггг"); 
		КонецЕсли;
		ЭлментГодПлюс1 = Элементы.Найти("ГодПлюс1"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс1  <> Неопределено Тогда  
			ЭлментГодПлюс1.Заголовок = СтрЗаменить(СтрЗаменить(Строка(Год(Объект.ПериодПланирования) +1),Символ(150),""),",",""); 
		КонецЕсли;
		ЭлментГодПлюс2 = Элементы.Найти("ГодПлюс2"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс2  <> Неопределено Тогда  
			ЭлментГодПлюс2.Заголовок = СтрЗаменить(СтрЗаменить(Строка(Год(Объект.ПериодПланирования) +2),Символ(150),""),",",""); 
		КонецЕсли;
		ЭлментГодПлюс3 = Элементы.Найти("ГодПлюс3"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс3  <> Неопределено Тогда  
			ЭлментГодПлюс3.Заголовок = СтрЗаменить(СтрЗаменить(Строка(Год(Объект.ПериодПланирования) +3),Символ(150),""),",",""); 
		КонецЕсли;
		
		ЭлментГодПлюс4 = Элементы.Найти("ГодПлюс4"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс4  <> Неопределено Тогда  
			ЭлментГодПлюс4.Заголовок = СтрЗаменить(СтрЗаменить(Строка(Год(Объект.ПериодПланирования) +4),Символ(150),""),",",""); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьKPI(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПериодПланирования) Тогда
		СообщитьПользователю("На заполнен ""Период Планирования""","Объект.ПериодПланирования");
		Возврат;
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		СообщитьПользователю("На заполнена ""Организация""","Объект.Организация");
		Возврат;
	КонецЕсли; 
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		Сообщить("Документ не записан или изменен. Необходимо записать документ!!!");
		Возврат;
	КонецЕсли;  
	
	ИнтеграцияДЗО.ОтправитьДокКлючевыеПоказатели(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ТабличнаяЧастьВДерево()
	
	Для Каждого СтрокаТаблицы Из ТаблицаСтраницKPI Цикл    
		Дерево = РеквизитФормыВЗначение("Дерево" + СтрокаТаблицы.ИмяГруппы);
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл 
			НайденныеСтроки = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("Код",СтрокаДерева.Код));
			Если НайденныеСтроки.Количество() Тогда 
				ЗаполнитьЗначенияСвойств(СтрокаДерева,НайденныеСтроки[0]);
				Если СтрокаДерева.Строки.Количество() Тогда  
					Для Каждого СтрокаДерева2 Из СтрокаДерева.Строки Цикл
						НайденныеСтроки2 = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("Код",СтрокаДерева2.Код));
						ЗаполнитьЗначенияСвойств(СтрокаДерева2,НайденныеСтроки2[0]);
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗначениеВРеквизитФормы(Дерево,"Дерево" + СтрокаТаблицы.ИмяГруппы);
	КонецЦикла;
	
	
КонецПроцедуры // ТабличнаяЧастьВДерево()


#КонецОбласти  

&НаСервере
Процедура ПреобразоватьВТЗРекурсия(тДерево, тТаблица,МассивКолонокПериод,Code)
	Для Каждого тСтр Из тДерево.Строки Цикл
		
		нСтр = тТаблица.Добавить();
		нСтр.Code 		= тСтр.Code;
		нСтр.Name 		= тСтр.Name;
		нСтр.ParentCode = Code;
		
		для каждого ЭлМассива из МассивКолонокПериод Цикл
			нСтр[ЭлМассива]		= тСтр[ЭлМассива];
		КонецЦикла;
		
		Если тСтр.Строки.Количество()>0 Тогда
			ПреобразоватьВТЗРекурсия(тСтр, тТаблица,МассивКолонокПериод,нСтр.Code);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПреобразоватьВДЗРекурсия(тДерево, тТаблица, Code) экспорт
	тПоиск = Новый Структура("ParentCode", Code);
	тМассив = тТаблица.НайтиСтроки(тПоиск);
	Для Каждого тСтр Из тМассив Цикл
		нСтр = тДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр,тСтр);
		ПреобразоватьВДЗРекурсия(нСтр, тТаблица, тСтр.Code);
	КонецЦикла;
КонецПроцедуры
