
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УдалитьЗаписиSQL();	
	
	ИнтеграцияДЗО.ЗагрузитьДокументKPI_В_SQL(Ссылка);
	
	Результат = ПолучитьЗначения_ID_из_SQL_по_GUID();
	
	IDОрганизации 	= ПолучитьIDСправочника(Организация,"map_Organizations",Результат); 
	IDВерсия 		= ПолучитьIDСправочника(Версия,"map_Versions",Результат);
	
	//Корректировка плана
	ВыполнитьСторнирование(IDВерсия,IDОрганизации,Результат,Отказ); 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	PlanData(IDВерсия,IDОрганизации,Результат,Отказ);
	PlanDataCAPEX(IDВерсия,IDОрганизации,Результат,Отказ);
	PlanDataCreditors(IDВерсия,IDОрганизации,Результат,Отказ);
	PlanDataDebtors(IDВерсия,IDОрганизации,Результат,Отказ);

	Если Отказ Тогда
		УдалитьЗаписиSQL();
	Иначе 
		НаборЗаписей = РегистрыСведений.ЗаданиеНаИнтеграциюВSQL.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись 				= НаборЗаписей.Добавить();
			Запись.Документ 	= Ссылка;
			Запись.Интегрирован = Истина;
		ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
			Запись = НаборЗаписей[0];
			Запись.Документ 	= Ссылка;
			Запись.Интегрирован = Истина;
		КонецЕсли;
		НаборЗаписей.Записать();
		
	КонецЕсли;
КонецПроцедуры

Процедура PlanData(IDВерсия,IDОрганизации,Результат,Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст  ="ВЫБРАТЬ
	               |	ПлановыеДанныеДанные.Ссылка КАК Ссылка,
	               |	ПлановыеДанныеДанные.НомерСтроки КАК НомерСтроки,
	               |	ПлановыеДанныеДанные.Статья КАК Статья,
	               |	ПлановыеДанныеДанные.СтатьяДоходов КАК СтатьяДоходов,
	               |	ПлановыеДанныеДанные.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	ПлановыеДанныеДанные.КатегорияАктивов КАК КатегорияАктивов,
	               |	ПлановыеДанныеДанные.СтатьяТРУ КАК СтатьяТРУ,
	               |	ПлановыеДанныеДанные.ВидДвижения КАК ВидДвижения,
	               |	ПлановыеДанныеДанные.Период КАК Период,
	               |	ПлановыеДанныеДанные.СвернутоПоГоду КАК СвернутоПоГоду,
	               |	ПлановыеДанныеДанные.Сумма КАК Сумма,
	               |	ПлановыеДанныеДанные.СтатьяТРУУровень2 КАК СтатьяТРУУровень2,
	               |	ПлановыеДанныеДанные.Контрагент КАК КонтрагентИНН,
	               |	ПлановыеДанныеДанные.Ссылка.Дата КАК ДатаДокумента,
	               |	ПлановыеДанныеДанные.Ссылка.НомерВходящего КАК НомерВходящегоДокумента,
	               |	ПлановыеДанныеДанные.Ссылка.GUIDВходящего КАК GUIDВходящего,
	               |	ПлановыеДанныеДанные.Ссылка.Номер КАК Номер
	               |ИЗ
	               |	Документ.ПлановыеДанные.Данные КАК ПлановыеДанныеДанные
	               |ГДЕ
	               |	ПлановыеДанныеДанные.Ссылка = &Ссылка
	               |	И НЕ ПлановыеДанныеДанные.Статья.Ссылка ЕСТЬ NULL
	               |	И ПлановыеДанныеДанные.СвернутоПоГоду = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Статья,
	               |	Период";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	
	KZT = Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора","398");
	
	GUIDДокумента  = ссылка.УникальныйИдентификатор();
	НомерДокумента = Номер;

	ДопЗнач = "";
	НомПП = 0;
	Для Каждого Стр Из Рез Цикл
		
		НомПП = НомПП+1; 
		
		//Если Не ЗначениеЗаполнено(Стр.GUIDВходящего) Тогда
		//	GUIDДокумента = Объект.ссылка.УникальныйИдентификатор();
		//Иначе
		//	GUIDДокумента = Стр.GUIDВходящего;
		//КонецЕсли;	
		
		//Если Не ЗначениеЗаполнено(Стр.НомерВходящегоДокумента) Тогда
		//	НомерДокумента = Стр.НомерДокумента;
		//Иначе
		//	НомерДокумента = Стр.НомерВходящегоДокумента;
		//КонецЕсли;	
		

		DateFormation = ?(ЗначениеЗаполнено(Стр.Период),Формат(Стр.Период,"ДФ='yyyyMMdd'"),Формат(Дата(1753,1,1),"ДФ='yyyyMMdd'"));

		Если ЗначениеЗаполнено(СокрЛП(Стр.КонтрагентИНН)) Тогда
			IDКонтрагент = ПолучитьIDКонтрагента(СокрЛП(Стр.КонтрагентИНН));
		Иначе 
			IDКонтрагент = 0;
		КонецЕсли;
		
		
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_PlanData]
		|           ([company]
		|           ,[Amount]
		|           ,[ReportLine]
		|           ,[Revenue]
		|           ,[Expenditure]
		|           ,[AssetCategory]
		|           ,[Counterpartу]
		|           ,[NomenclatureGroup]
		|           ,[NomenclatureGroupLevel2]
		|           ,[TypesOfMovement]
		|           ,[Period]
		|           ,[Version]
		|           ,[Currency]
		|           ,[RecorderNumber]
		|           ,[RecorderDate]
		|           ,[RecorderGUID]
		|           ,[Storno])
		|     VALUES
		|           (N'"+IDОрганизации+"'
		|           ,'"+УдалитьПробелы(Стр.Сумма)+"'
		|           ,'"+ПолучитьIDСправочника(Стр.Статья,"map_rpt_ReportLines",Результат)+"'
		|           ,'"+ПолучитьIDСправочника(Стр.СтатьяДоходов,"map_Revenues",Результат)+"'
		|           ,'"+ПолучитьIDСправочника(Стр.СтатьяЗатрат,"map_Expenditures",Результат)+"'
		|           ,'"+ПолучитьIDСправочника(Стр.КатегорияАктивов,"map_AssetCategories",Результат)+"'
		|           ,'"+0 +"'
		|           ,'"+ПолучитьIDСправочника(Стр.СтатьяТРУ,"map_NomenclatureGroups",Результат)+"'
		|           ,'"+ПолучитьIDСправочника(Стр.СтатьяТРУУровень2,"map_NomenclatureGroups",Результат)+"'
		|           ,'"+ПолучитьIDСправочника(Стр.ВидДвижения,"map_TypesOfMovements",Результат)+"'
		|           ,'"+Формат(Стр.Период,"ДФ='yyyyMMdd'")+"'
		|           ,'"+IDВерсия+"'	 
		|           ,'"+ИнтеграцияДЗО.ПолучитьIDВалюты(KZT.КодСправочника)+"'
		|           ,'"+СокрЛП(НомерДокумента)+"'
		|           ,'"+Формат(Стр.ДатаДокумента,"ДФ='yyyyMMdd'")+"'
		|           ,'"+СокрЛП(GUIDДокумента)+"'
		|           ,'"+0+"')";
		Отказ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	КонецЦикла;   
	
КонецПроцедуры	

Процедура PlanDataCAPEX(IDВерсия,IDОрганизации,Результат,Отказ)
	НомПП = 0;
	KZT = Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора","398");

	GUIDДокумента  = ссылка.УникальныйИдентификатор();
	НомерДокумента = Номер;
	
	Для Каждого СтрокаТЧ Из ДанныеКапитальныеВложения Цикл
		
		Если СтрокаТЧ.СвернутоПоГоду Тогда
			Продолжить;
		КонецЕсли;	
		

		DateFormation = ?(ЗначениеЗаполнено(СтрокаТЧ.Период),Формат(СтрокаТЧ.Период,"ДФ='yyyyMMdd'"),Формат(Дата(1753,1,1),"ДФ='yyyyMMdd'"));

		НомПП = НомПП+1;
		
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_PlanDataCAPEX]
		|           ([Period]
		|           ,[Company]
		|           ,[ProjectDescription]
		|           ,[TypeInvestment]
		|           ,[AssetCategory]
		|           ,[ProjectCustomer]
		|           ,[Currency]
		|           ,[UnitPrice]
		|           ,[Volume]
		|           ,[AmountExpenses]
		|           ,[Version]
		|           ,[RecorderNumber]
		|           ,[RecorderDate]
		|           ,[RecorderGUID]
		|			,[Storno])
		|     VALUES
		|           (N'"+Формат(СтрокаТЧ.Период,"ДФ='yyyyMMdd'")+"'
		|           ,'"+IDОрганизации+"'
		|           ,'"+СокрЛП(СтрокаТЧ.КраткоеОписаниеПроекта)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.ТипИнвестиции,"map_ProjectTypesAndInvestments",Результат)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.КатегорияАктива,"map_AssetCategories",Результат)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.ЗаказчикПроекта,"map_FCR",Результат)+"'
		|           ,'"+ИнтеграцияДЗО.ПолучитьIDВалюты(KZT.КодСправочника)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.Объем)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.ЦенаЗаЕдиницу)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СуммаРасходы)+"'	 
		|           ,'"+IDВерсия+"'	 
		|           ,'"+СокрЛП(НомерДокумента)+"'
		|           ,'"+Формат(Дата,"ДФ='yyyyMMdd'")+"'
		|           ,'"+СокрЛП(GUIDДокумента)+"'
		|           ,'"+0+"')";
		
		Отказ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	КонецЦикла;
	
КонецПроцедуры	

Процедура PlanDataCreditors(IDВерсия,IDОрганизации,Результат,Отказ)
	НомПП = 0;
	KZT = Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора","398");

	GUIDДокумента  = ссылка.УникальныйИдентификатор();
	НомерДокумента = Номер;
	
	Для Каждого СтрокаТЧ Из ДанныеКредиторы Цикл

		Если СтрокаТЧ.СвернутоПоГоду Тогда
			Продолжить;
		КонецЕсли;	
		
		DateFormation = ?(ЗначениеЗаполнено(СтрокаТЧ.Период),Формат(СтрокаТЧ.Период,"ДФ='yyyyMMdd'"),Формат(Дата(1753,1,1),"ДФ='yyyyMMdd'"));
		
		НомПП = НомПП+1;
		
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_PlanDataCreditors]
		| ([Period]
		|,[Company]
		|,[Version]
		|,[ContractNumber]
		|,[ContractDate]
		|,[MaturityDate]
		|,[CounterpartyINN]
		|,[DebtTool]
		|,[LoanLenderType]
		|,[Currency]
		|,[Indexing]
		|,[ExchangeRateOnDate]
		|,[LoanTerms]
		|,[InterestRate]
		|,[PurposeOfFunds]
		|,[ContractSumm]
		|,[AmountOfDisbursement]
		|,[PrincipalAmountBalance]
		|,[AccruedInterestBalance]
		|,[PrincipalAmountEndBalance]
		|,[AccruedInterestEndBalance]
		|,[PrincipalAmountByPeriod]
		|,[AccruedInterestByPeriod]
		|,[RecorderNumber]
		|,[RecorderDate]
		|,[RecorderGUID]
		|,[Storno])
		| VALUES
		|           (N'"+Формат(СтрокаТЧ.Период,"ДФ='yyyyMMdd'")+"'
		|           ,'"+IDОрганизации+"'
		|           ,'"+IDВерсия+"' 
		|           ,'"+СокрЛП(СтрокаТЧ.НомерДоговора)+"'
		|           ,'"+Формат(СтрокаТЧ.ДатаДоговора,"ДФ='yyyyMMdd'")+"' 
		|           ,'"+Формат(СтрокаТЧ.ДатаПогашения,"ДФ='yyyyMMdd'")+"' 
		|           ,'"+СокрЛП(СтрокаТЧ.КонтрагентБИН)+"' 
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.ДолговойИнструмент,"map_DebtInstruments",Результат)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.ТипКредитора,"map_LenderTypes",Результат)+"'
		|           ,'"+ИнтеграцияДЗО.ПолучитьIDВалюты(?(ЗначениеЗаполнено(СтрокаТЧ.Валюта),СтрокаТЧ.Валюта.КодСправочника,KZT.КодСправочника))+"'
		|           ,'"+?(СтрокаТЧ.Индексация,1,0)+"'	 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.КурсНаДату)+"' 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.ПроцентнаяСтавка)+"' 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СрокКредитования)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.ЦелевоеНазначениеСредств,"map_PurposeOfFunds",Результат)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СуммаПоДоговору)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СуммаОсвоенияПоДоговору)+"' 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СальдоНаНачалоОД)+"'	 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СальдоНаНачалоНачисленныеПроценты)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СальдоНаКонецОД)+"'	 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СальдоНаКонецНачисленныеПроценты)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СуммаОД)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.НачисленныеПроценты)+"'
		|           ,'"+СокрЛП(НомерДокумента)+"'
		|           ,'"+Формат(Дата,"ДФ='yyyyMMdd'")+"'
		|           ,'"+СокрЛП(GUIDДокумента)+"'
		|           ,'"+0+"')";
		Отказ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	КонецЦикла;
	
КонецПроцедуры	

Процедура PlanDataDebtors(IDВерсия,IDОрганизации,Результат,Отказ)
	НомПП = 0;
	KZT = Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора","398");  
	
	GUIDДокумента  = ссылка.УникальныйИдентификатор();
	НомерДокумента = Номер;

	Для Каждого СтрокаТЧ Из ДанныеДебиторы Цикл
		DateFormation = ?(ЗначениеЗаполнено(СтрокаТЧ.Период),Формат(СтрокаТЧ.Период,"ДФ='yyyyMMdd'"),Формат(Дата(1753,1,1),"ДФ='yyyyMMdd'"));
		
		Если СтрокаТЧ.СвернутоПоГоду Тогда
			Продолжить;
		КонецЕсли;	
		
		НомПП = НомПП+1;
		
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_PlanDataDebtors]
		| ([Period]
		|,[Company]
		|,[Version]
		|,[ContractNumber]
		|,[ContractDate]
		|,[MaturityDate]
		|,[CounterpartyINN]
		|,[DebtTool]
		|,[LoanLenderType]
		|,[Currency]
		|,[Indexing]
		|,[ExchangeRateOnDate]
		|,[LoanTerms]
		|,[InterestRate]
		|,[PurposeOfFunds]
		|,[ContractSumm]
		|,[AmountOfDisbursement]
		|,[PrincipalAmountBalance]
		|,[AccruedInterestBalance]
		|,[PrincipalAmountEndBalance]
		|,[AccruedInterestEndBalance]
		|,[PrincipalAmountByPeriod]
		|,[AccruedInterestByPeriod]
		|,[RecorderNumber]
		|,[RecorderDate]
		|,[RecorderGUID]
		|,[Storno])
		| VALUES
		|           (N'"+Формат(СтрокаТЧ.Период,"ДФ='yyyyMMdd'")+"'
		|           ,'"+IDОрганизации+"'
		|           ,'"+IDВерсия+"' 
		|           ,'"+СокрЛП(СтрокаТЧ.НомерДоговора)+"'
		|           ,'"+Формат(СтрокаТЧ.ДатаДоговора,"ДФ='yyyyMMdd'")+"' 
		|           ,'"+Формат(СтрокаТЧ.ДатаПогашения,"ДФ='yyyyMMdd'")+"' 
		|           ,'"+СокрЛП(СтрокаТЧ.КонтрагентБИН)+"' 
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.ДолговойИнструмент,"map_DebtInstruments",Результат)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.ТипКредитора,"map_LenderTypes",Результат)+"'
		|           ,'"+ИнтеграцияДЗО.ПолучитьIDВалюты(?(ЗначениеЗаполнено(СтрокаТЧ.Валюта),СтрокаТЧ.Валюта.КодСправочника,KZT.КодСправочника))+"'
		|           ,'"+?(СтрокаТЧ.Индексация,1,0)+"'	 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.КурсНаДату)+"' 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.ПроцентнаяСтавка)+"' 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СрокКредитования)+"'
		|           ,'"+ПолучитьIDСправочника(СтрокаТЧ.ЦелевоеНазначениеСредств,"map_PurposeOfFunds",Результат)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СуммаПоДоговору)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СуммаОсвоенияПоДоговору)+"' 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СальдоНаНачалоОД)+"'	 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СальдоНаНачалоНачисленныеПроценты)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СальдоНаКонецОД)+"'	 
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СальдоНаКонецНачисленныеПроценты)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.СуммаОД)+"'
		|           ,'"+УдалитьПробелы(СтрокаТЧ.НачисленныеПроценты)+"'
		|           ,'"+СокрЛП(НомерДокумента)+"'
		|           ,'"+Формат(Дата,"ДФ='yyyyMMdd'")+"'
		|           ,'"+СокрЛП(GUIDДокумента)+"'
		|           ,'"+0+"')";
		Отказ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	КонецЦикла;
	
КонецПроцедуры	


Процедура ВыполнитьСторнирование(IDВерсия,IDОрганизации,Результат,Отказ)
	Если IDВерсия <> 2 тогда
		Возврат;
	КонецЕсли;	
		Если Данные.Количество()>0 Тогда 
			СторноPlanData(IDВерсия,IDОрганизации,Отказ);
		КонецЕсли;
		
		Если ДанныеКапитальныеВложения.Количество()>0 Тогда 
			СторноPlanCAPEX(IDВерсия,IDОрганизации,Отказ);
		КонецЕсли;
		
		Если ДанныеКредиторы.Количество()>0 Тогда 
			СторноPlanCreditors(IDВерсия,IDОрганизации,Отказ);
		КонецЕсли;
		
		Если ДанныеДебиторы.Количество()>0 Тогда 
			СторноPlanDebtors(IDВерсия,IDОрганизации,Отказ);
		КонецЕсли;
	//КонецЕсли;	
КонецПроцедуры   


Функция ПолучитьПоследнегоРегистратора(парамIDОрганизации,ИмяТаблицы)
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	БазаДанныхSQL 	= НастройкиОбмена.БазаДанныхSQL;
	
	Запрос = "
	|USE paramBase
	|SELECT Top (1)
	|[Company]
	|,[RecorderDate]
	|,[RecorderNumber]
	|,[RecorderGUID]
	|FROM paramTableName
	|where Storno = 0
	|and Company = paramIDОрганизации
	|group by 
	|Company
	|,RecorderNumber
	|,RecorderDate
	|,RecorderGUID
	|order by 
	| RecorderDate DESC
	|,RecorderNumber
	|";     
	
	Запрос = СтрЗаменить(Запрос,"paramIDОрганизации",парамIDОрганизации);
	Запрос = СтрЗаменить(Запрос,"paramBase",БазаДанныхSQL);
	Запрос = СтрЗаменить(Запрос,"paramTableName",ИмяТаблицы);
	
	Таблица = Новый ТаблицаЗначений;   
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	Возврат	Таблица;
КонецФункции

Процедура СторноPlanData(IDВерсия,парамIDОрганизации,Отказ)
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	БазаДанныхSQL 	= НастройкиОбмена.БазаДанныхSQL;
	
	//получитьПоследнего регистратора по дате чтобы в дальшейшем по нему сторнировать записи
	ТаблицаПоследнегоРегистратора = ПолучитьПоследнегоРегистратора(парамIDОрганизации,"map_PlanData");
	
	Если ТаблицаПоследнегоРегистратора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	парамGUID = ТаблицаПоследнегоРегистратора[0].RecorderGUID;	
		
	
	Запрос = "
		|USE paramBase
		|SELECT 
		|	[Period]
		|  ,[Version]
		|  ,[Company]
		|  ,[ReportLine]
		|  ,[Revenue]
		|  ,[Expenditure]
		|  ,[AssetCategory]
		|  ,[Counterpartу]
		|  ,[NomenclatureGroup]
		|  ,[TypesOfMovement]
		|  ,[NomenclatureGroupLevel2]
		|  ,[Currency]
		|  ,[Amount]
		|  ,[RecorderDate]
		|  ,[RecorderNumber]
		|  ,[RecorderGUID]
		|FROM [dbo].[map_PlanData]
		| where Company = paramIDОрганизации	
		| and RecorderGUID = 'paramGUID'
		| and Storno = 0
		|";     
		
		Запрос = СтрЗаменить(Запрос,"paramIDОрганизации",парамIDОрганизации);
		Запрос = СтрЗаменить(Запрос,"paramGUID",парамGUID);
		Запрос = СтрЗаменить(Запрос,"paramBase",БазаДанныхSQL);
		
		Таблица = Новый ТаблицаЗначений;   
		Команда = Соединение();
		Команда.CommandTimeout = 500;
		
		Команда.CommandText = Запрос;
		
		Выборка = Команда.Execute();
		
		Если НЕ Выборка.BOF Тогда
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				ИмяСтолбца = Выборка.Fields.Item(А).Name;  
				
				Таблица.Колонки.Добавить(ИмяСтолбца);
				
			КонецЦикла;
			
			
			Пока НЕ Выборка.EOF Цикл
				
				НоваяСтрока = Таблица.Добавить();
				
				Для А = 0 По Выборка.Fields.Count - 1 Цикл
					
					НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
					
				КонецЦикла;
				
				Выборка.MoveNext();
				
			КонецЦикла;
			
		КонецЕсли;
		
		//отсторнируем найденные записи. в поля Recorder запишем реквизиты текущего документа.
		
		Для Каждого Стр Из Таблица Цикл
			
			
			ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_PlanData]
			|           ([Period]
			|           ,[Version]
			|			,[company]			
			|           ,[ReportLine]
			|           ,[Revenue]
			|           ,[Expenditure]
			|           ,[AssetCategory]
			|           ,[Counterpartу]
			|           ,[NomenclatureGroup]
			|           ,[NomenclatureGroupLevel2]
			|           ,[TypesOfMovement]
			|           ,[Currency]
			|           ,[Amount]
			|           ,[RecorderNumber]
			|           ,[RecorderDate]
			|           ,[RecorderGUID]
			|			,[Storno])
			|     VALUES
			|           (N'"+Стр.Period+"'	 
			|           ,'"+Стр.Version+"'	 
			|			,'"+Стр.company+"'
			|           ,'"+Стр.ReportLine+"'
			|           ,'"+Стр.Revenue+"'
			|           ,'"+Стр.Expenditure+"'
			|           ,'"+Стр.AssetCategory+"'
			|           ,'"+Стр.Counterpartу+"'
			|           ,'"+Стр.NomenclatureGroup+"'
			|           ,'"+Стр.NomenclatureGroupLevel2+"'
			|           ,'"+Стр.TypesOfMovement+"'
			|           ,'"+Стр.Currency+"'
			|           ,'"+УдалитьПробелы(-Стр.Amount)+"'
			|           ,'"+СокрЛП(НомерВходящего)+"'
			|           ,'"+Формат(Дата,"ДФ='yyyyMMdd'")+"'
			|           ,'"+GUIDВходящего+"'
			|			,'"+1+"')";
			//Сообщить(Стр.Статья);
		Отказ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
		КонецЦикла;   
		
		
	
КонецПроцедуры	

Процедура СторноPlanCAPEX(IDВерсия,парамIDОрганизации,Отказ)

	//кап вложения

	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	БазаДанныхSQL 	= НастройкиОбмена.БазаДанныхSQL;

	ТаблицаПоследнегоРегистратора = ПолучитьПоследнегоРегистратора(парамIDОрганизации,"map_PlanDataCAPEX");
	
	Если ТаблицаПоследнегоРегистратора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	парамGUID = ТаблицаПоследнегоРегистратора[0].RecorderGUID;	
	
	Запрос = "
	|USE paramBase
	|SELECT 
	| [Period]
	|,[Version]
	|,[Company]
	|,[Currency]
	|,[ProjectDescription]
	|,[TypeInvestment]
	|,[AssetCategory]
	|,[ProjectCustomer]
	|,[UnitPrice]
	|,[Volume]
	|,[AmountExpenses]
	|,[RecorderDate]
	|,[RecorderNumber]
	|,[RecorderGUID]
	|FROM [map_PlanDataCAPEX]
	|where Company = paramIDОрганизации
	| and RecorderGUID = 'paramGUID'
	| and Storno = 0
	|";     
	
	Запрос = СтрЗаменить(Запрос,"paramIDОрганизации",парамIDОрганизации);
	Запрос = СтрЗаменить(Запрос,"paramGUID",парамGUID);
	Запрос = СтрЗаменить(Запрос,"paramBase",БазаДанныхSQL);
	
	Таблица = Новый ТаблицаЗначений;   
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	//отсторнируем найденные записи. в поля Recorder запишем реквизиты текущего документа.
	
	Для Каждого Стр Из Таблица Цикл
		
		
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_PlanDataCAPEX]
		|           ([Period]
		|           ,[Version]
		|           ,[Company]
		|           ,[ProjectDescription]
		|           ,[TypeInvestment]
		|           ,[AssetCategory]
		|           ,[ProjectCustomer]
		|           ,[Currency]
		|           ,[UnitPrice]
		|           ,[Volume]
		|           ,[AmountExpenses]
		|           ,[RecorderNumber]
		|           ,[RecorderDate]
		|           ,[RecorderGUID]
		|			,[Storno])
		|     VALUES
		|           (N'"+Стр.Period+"'
		|           ,'"+Стр.Version+"'	 
		|           ,'"+Стр.Company+"'
		|           ,'"+Стр.ProjectDescription+"'
		|           ,'"+Стр.TypeInvestment+"'
		|           ,'"+Стр.AssetCategory+"'
		|           ,'"+Стр.ProjectCustomer+"'
		|           ,'"+УдалитьПробелы(Стр.Currency)+"'
		|           ,'"+УдалитьПробелы(Стр.UnitPrice)+"'
		|           ,'"+УдалитьПробелы(-Стр.Volume)+"'
		|           ,'"+УдалитьПробелы(-Стр.AmountExpenses)+"'	 
		|           ,'"+СокрЛП(НомерВходящего)+"'
		|           ,'"+Формат(Дата,"ДФ='yyyyMMdd'")+"'
		|           ,'"+СокрЛП(GUIDВходящего)+"'
		|			,'"+1+"')";
		
		Отказ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СторноPlanCreditors(IDВерсия,парамIDОрганизации,Отказ)

	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	БазаДанныхSQL 	= НастройкиОбмена.БазаДанныхSQL;

	ТаблицаПоследнегоРегистратора = ПолучитьПоследнегоРегистратора(парамIDОрганизации,"map_PlanDataCreditors");
	
	Если ТаблицаПоследнегоРегистратора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	парамGUID = ТаблицаПоследнегоРегистратора[0].RecorderGUID;	

	Запрос = "
	|USE paramBase
	|  SELECT 
	|	[Period]
    |  ,[Version]
    |  ,[Company]
    |  ,[ContractNumber]
    |  ,[ContractDate]
    |  ,[MaturityDate]
    |  ,[CounterpartyINN]
    |  ,[DebtTool]
    |  ,[LoanLenderType]
    |  ,[Currency]
    |  ,[Indexing]
    |  ,[ExchangeRateOnDate]
    |  ,[LoanTerms]
    |  ,[InterestRate]
    |  ,[PurposeOfFunds]
    |  ,[ContractSumm]
    |  ,[AmountOfDisbursement]
    |  ,[PrincipalAmountBalance]
    |  ,[AccruedInterestBalance]
    |  ,[PrincipalAmountByPeriod]
    |  ,[AccruedInterestByPeriod]
    |  ,[PrincipalAmountEndBalance]
    |  ,[AccruedInterestEndBalance]
    |  ,[RecorderDate]
    |  ,[RecorderNumber]
    |  ,[RecorderGUID]
  	|	FROM [map_PlanDataCreditors]
  	|	where Company = paramIDОрганизации
	| and RecorderGUID = 'paramGUID'
	| and Storno = 0
	|";     
	
	Запрос = СтрЗаменить(Запрос,"paramIDОрганизации",парамIDОрганизации);
	Запрос = СтрЗаменить(Запрос,"paramGUID",парамGUID);
	Запрос = СтрЗаменить(Запрос,"paramBase",БазаДанныхSQL);
	
	Таблица = Новый ТаблицаЗначений;   
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	//отсторнируем найденные записи. в поля Recorder запишем реквизиты текущего документа.
	
	Для Каждого Стр Из Таблица Цикл
		
		
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_PlanDataCreditors]
		|([Period]
		|,[Version]
		|,[Company]
		|,[ContractNumber]
		|,[ContractDate]
		|,[MaturityDate]
		|,[CounterpartyINN]
		|,[DebtTool]
		|,[LoanLenderType]
		|,[Currency]
		|,[Indexing]
		|,[ExchangeRateOnDate]
		|,[LoanTerms]
		|,[InterestRate]
		|,[PurposeOfFunds]
		|,[ContractSumm]
		|,[AmountOfDisbursement]
		|,[PrincipalAmountBalance]
		|,[AccruedInterestBalance]
		|,[PrincipalAmountEndBalance]
		|,[AccruedInterestEndBalance]
		|,[PrincipalAmountByPeriod]
		|,[AccruedInterestByPeriod]
		|,[RecorderNumber]
		|,[RecorderDate]
		|,[RecorderGUID]
		|,[Storno])
		| VALUES
		|           (N'"+Стр.Period+"'
		|           ,'"+Стр.Version+"'	 
		|           ,'"+Стр.Company+"'
		|           ,'"+СокрЛП(Стр.ContractNumber)+"'
		|           ,'"+Стр.ContractDate+"' 
		|           ,'"+Стр.MaturityDate+"' 
		|           ,'"+Стр.CounterpartyINN+"' 
		|           ,'"+Стр.DebtTool+"'
		|           ,'"+Стр.LoanLenderType+"'
		|           ,'"+Стр.Currency+"'
		|           ,'"+Стр.Indexing+"'	 
		|           ,'"+УдалитьПробелы(Стр.ExchangeRateOnDate)+"' 
		|           ,'"+УдалитьПробелы(Стр.LoanTerms)+"' 
		|           ,'"+УдалитьПробелы(Стр.InterestRate)+"'
		|           ,'"+Стр.PurposeOfFunds+"'
		|           ,'"+УдалитьПробелы(Стр.ContractSumm)+"'
		|           ,'"+УдалитьПробелы(Стр.AmountOfDisbursement)+"' 
		|           ,'"+УдалитьПробелы(-Стр.PrincipalAmountBalance)+"'	 
		|           ,'"+УдалитьПробелы(-Стр.AccruedInterestBalance)+"'
		|           ,'"+УдалитьПробелы(-Стр.PrincipalAmountEndBalance)+"'	 
		|           ,'"+УдалитьПробелы(-Стр.AccruedInterestEndBalance)+"'
		|           ,'"+УдалитьПробелы(-Стр.PrincipalAmountByPeriod)+"'
		|           ,'"+УдалитьПробелы(-Стр.AccruedInterestByPeriod)+"'
		|           ,'"+СокрЛП(НомерВходящего)+"'
		|           ,'"+Формат(Дата,"ДФ='yyyyMMdd'")+"'
		|           ,'"+СокрЛП(GUIDВходящего)+"'
		|			,'"+1+"')";
		
		Отказ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СторноPlanDebtors(IDВерсия,парамIDОрганизации,Отказ)

	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	БазаДанныхSQL 	= НастройкиОбмена.БазаДанныхSQL;

	ТаблицаПоследнегоРегистратора = ПолучитьПоследнегоРегистратора(парамIDОрганизации,"map_PlanDataDebtors");
	
	Если ТаблицаПоследнегоРегистратора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	парамGUID = ТаблицаПоследнегоРегистратора[0].RecorderGUID;	
	Запрос = "
	|USE paramBase
	|  SELECT 
	|	[Period]
    |  ,[Company]
    |  ,[ContractNumber]
    |  ,[ContractDate]
    |  ,[MaturityDate]
    |  ,[CounterpartyINN]
    |  ,[DebtTool]
    |  ,[LoanLenderType]
    |  ,[Currency]
    |  ,[Indexing]
    |  ,[ExchangeRateOnDate]
    |  ,[LoanTerms]
    |  ,[InterestRate]
    |  ,[PurposeOfFunds]
    |  ,[ContractSumm]
    |  ,[AmountOfDisbursement]
    |  ,[PrincipalAmountBalance]
    |  ,[AccruedInterestBalance]
    |  ,[PrincipalAmountByPeriod]
    |  ,[AccruedInterestByPeriod]
    |  ,[PrincipalAmountEndBalance]
    |  ,[AccruedInterestEndBalance]
    |  ,[Version]
    |  ,[RecorderDate]
    |  ,[RecorderNumber]
    |  ,[RecorderGUID]
  	|	FROM [map_PlanDataDebtors]
  	|	where Company = paramIDОрганизации
	| and RecorderGUID = 'paramGUID'
	| and Storno = 0
	|";     
	
	Запрос = СтрЗаменить(Запрос,"paramIDОрганизации",парамIDОрганизации);
	Запрос = СтрЗаменить(Запрос,"paramGUID",парамGUID);
	Запрос = СтрЗаменить(Запрос,"paramBase",БазаДанныхSQL);
	
	Таблица = Новый ТаблицаЗначений;   
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	//отсторнируем найденные записи. в поля Recorder запишем реквизиты текущего документа.
	
	Для Каждого Стр Из Таблица Цикл
		
		
		ТекстЗапросаЗаписи = "INSERT INTO [dbo].[map_PlanDataDebtors]
		|([Period]
		|,[Version]
		|,[Company]
		|,[ContractNumber]
		|,[ContractDate]
		|,[MaturityDate]
		|,[CounterpartyINN]
		|,[DebtTool]
		|,[LoanLenderType]
		|,[Currency]
		|,[Indexing]
		|,[ExchangeRateOnDate]
		|,[LoanTerms]
		|,[InterestRate]
		|,[PurposeOfFunds]
		|,[ContractSumm]
		|,[AmountOfDisbursement]
		|,[PrincipalAmountBalance]
		|,[AccruedInterestBalance]
		|,[PrincipalAmountEndBalance]
		|,[AccruedInterestEndBalance]
		|,[PrincipalAmountByPeriod]
		|,[AccruedInterestByPeriod]
		|,[RecorderNumber]
		|,[RecorderDate]
		|,[RecorderGUID]
		|,[Storno])
		| VALUES
		|           (N'"+Стр.Period+"'
		|           ,'"+Стр.Version+"'	 
		|           ,'"+Стр.Company+"'
		|           ,'"+СокрЛП(Стр.ContractNumber)+"'
		|           ,'"+Стр.ContractDate+"' 
		|           ,'"+Стр.MaturityDate+"' 
		|           ,'"+Стр.CounterpartyINN+"' 
		|           ,'"+Стр.DebtTool+"'
		|           ,'"+Стр.LoanLenderType+"'
		|           ,'"+Стр.Currency+"'
		|           ,'"+Стр.Indexing+"'	 
		|           ,'"+УдалитьПробелы(Стр.ExchangeRateOnDate)+"' 
		|           ,'"+УдалитьПробелы(Стр.LoanTerms)+"' 
		|           ,'"+УдалитьПробелы(Стр.InterestRate)+"'
		|           ,'"+Стр.PurposeOfFunds+"'
		|           ,'"+УдалитьПробелы(Стр.ContractSumm)+"'
		|           ,'"+УдалитьПробелы(Стр.AmountOfDisbursement)+"' 
		|           ,'"+УдалитьПробелы(-Стр.PrincipalAmountBalance)+"'	 
		|           ,'"+УдалитьПробелы(-Стр.AccruedInterestBalance)+"'
		|           ,'"+УдалитьПробелы(-Стр.PrincipalAmountEndBalance)+"'	 
		|           ,'"+УдалитьПробелы(-Стр.AccruedInterestEndBalance)+"'
		|           ,'"+УдалитьПробелы(-Стр.PrincipalAmountByPeriod)+"'
		|           ,'"+УдалитьПробелы(-Стр.AccruedInterestByPeriod)+"'+
		|           ,'"+СокрЛП(НомерВходящего)+"'
		|           ,'"+Формат(Дата,"ДФ='yyyyMMdd'")+"'
		|           ,'"+СокрЛП(GUIDВходящего)+"'
		|			,'"+1+"')";
		
		Отказ = ИнтеграцияДЗО.ВыполнитьИнструкциюЗаписи(ТекстЗапросаЗаписи);
	КонецЦикла;	
	
КонецПроцедуры	


Функция ПолучитьЗначения_ID_из_SQL_по_GUID()
	Массив = Новый Массив;
	Массив.Добавить("map_Organizations");
	Массив.Добавить("map_rpt_ReportLines");
	Массив.Добавить("map_Revenues");
	Массив.Добавить("map_Expenditures");
	Массив.Добавить("map_AssetCategories");
	Массив.Добавить("map_NomenclatureGroups");
	Массив.Добавить("map_TypesOfMovements");
	Массив.Добавить("map_StagesOfTheProject");
	Массив.Добавить("map_ProjectTypesAndInvestments");
	Массив.Добавить("map_FCR"); 
	Массив.Добавить("map_PurposeOfFunds");    
	Массив.Добавить("map_DebtInstruments");
	Массив.Добавить("map_Versions");
	Массив.Добавить("map_LenderTypes");
	
	Возврат ИнтеграцияДЗО.ПолучитьЗначения_ID_из_SQL_по_GUID(Массив);
	
КонецФункции
 
Процедура ВыгрузитьДанныеКонтрагентовВSQL() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	ПутьВыгрузки = Константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	Если ПутьВыгрузки = "" Тогда
		Сообщить("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	Если Прав(ПутьВыгрузки,1) <> "\" Тогда
		ПутьВыгрузки = ПутьВыгрузки + "\";
	КонецЕсли;
	
	ПапкаДляВыгрузки = ПутьВыгрузки + "Plan\";
	СоздатьКаталог(ПапкаДляВыгрузки);
	
	ВыгрузитьДанные(ПапкаДляВыгрузки);
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	
	СтрокаКоманды = "@echo off";
	Обмен.ОбойтиКаталог(ОбменSQL, СтрокаКоманды, НастройкиОбмена, ПапкаДляВыгрузки, "Plan", "Plan");
	
	ОбменSQL.ВыполнитьОбмен(СтрокаКоманды);
	
	Попытка
		УдалитьФайлы(ПапкаДляВыгрузки);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыгрузитьДанные(ПапкаДляВыгрузки)
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	Команда = ОбменSQL.Соединение();
	Команда.CommandText = 
	"TRUNCATE TABLE [dbo].[map_PlanData]";	
	Команда.Execute();
	
	ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "map_PlanData" + "\";
	СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
	
	IDОрганизации 	= ПолучитьID(Организация,"map_Organizations"); 
	IDВерсия 		= ПолучитьID(Версия,"map_Versions");
	
	Запрос = Новый Запрос();
	Запрос.Текст  ="ВЫБРАТЬ
	|	авПлановыеДанныеДанные.Ссылка КАК Ссылка,
	|	авПлановыеДанныеДанные.НомерСтроки КАК НомерСтроки,
	|	авПлановыеДанныеДанные.Статья КАК Статья,
	|	авПлановыеДанныеДанные.СтатьяДоходов КАК СтатьяДоходов,
	|	авПлановыеДанныеДанные.СтатьяЗатрат КАК СтатьяЗатрат,
	|	авПлановыеДанныеДанные.КатегорияАктивов КАК КатегорияАктивов,
	|	авПлановыеДанныеДанные.КонтрагентGUID КАК КонтрагентGUID,
	|	авПлановыеДанныеДанные.СтатьяТРУ КАК СтатьяТРУ,
	|	авПлановыеДанныеДанные.ВидДвижения КАК ВидДвижения,
	|	авПлановыеДанныеДанные.Период КАК Период,
	|	авПлановыеДанныеДанные.СвернутоПоГоду КАК СвернутоПоГоду,
	|	авПлановыеДанныеДанные.Сумма КАК Сумма,
	|	авПлановыеДанныеДанные.СтатьяТРУУровень2 КАК СтатьяТРУУровень2,
	|	авПлановыеДанныеДанные.КонтрагентИНН КАК КонтрагентИНН,
	|	авПлановыеДанныеДанные.КонтрагентНаименование КАК КонтрагентНаименование
	|ИЗ
	|	Документ.авПлановыеДанные.Данные КАК авПлановыеДанныеДанные
	|ГДЕ
	|	авПлановыеДанныеДанные.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статья,
	|	Период";
	Запрос.УстановитьПараметр("Статья",Справочники.СтатьиБюджетов.НайтиПоРеквизиту("КодСправочника","PL1.2."));
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Файл = Новый ЗаписьТекста(ПапкаДляВыгрузкиОбъекта + "data.csv");	
	Пока Выборка.Следующий() Цикл	 
		Если Не ЗначениеЗаполнено(Выборка.Статья) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВыгрузки =  "0"													+ Символы.Таб
		+ СокрЛП(IDОрганизации) 											+ Символы.Таб 
		+ ПреобразоватьОбъектВЗначение(Выборка.Сумма,"0") 					+ Символы.Таб 
		+ ПолучитьID(Выборка.Статья,"map_rpt_ReportLines") 					+ Символы.Таб
		+ ПолучитьID(Выборка.СтатьяДоходов,"map_Revenues") 					+ Символы.Таб
		+ ПолучитьID(Выборка.СтатьяЗатрат,"map_Expenditures")  				+ Символы.Таб
		+ "0"																+ Символы.Таб
		+ СокрЛП(Выборка.КонтрагентИНН)										+ Символы.Таб
		+ ПолучитьID(Выборка.СтатьяТРУ,"map_NomenclatureGroups")  			+ Символы.Таб
		+ ПолучитьID(Выборка.ВидДвижения,"map_TypesOfMovements")  			+ Символы.Таб 
		+ ПреобразоватьОбъектВЗначение(Выборка.Период,"0")					+ Символы.Таб 
		+ ПолучитьID(Выборка.СтатьяТРУУровень2,"map_NomenclatureGroups")  	+ Символы.Таб
		+ СокрЛП(IDВерсия) +  Символы.Таб;
		Файл.ЗаписатьСтроку(СтрокаВыгрузки);	
	КонецЦикла;
	Файл.Закрыть(); 
	//
	//	|           ,'"+ПреобразоватьОбъектВЗначение(ПолучитьIDСправочника(Стр.СтатьяЗатрат,"map_Expenditures",Результат)+"'
	//	|           ,'"+ПреобразоватьОбъектВЗначение(ПолучитьIDСправочника(Стр.КатегорияАктивов,"map_AssetCategories",Результат)+"'
	//	|           ,'"+IDКонтрагент +"'
	//	//|           ,'"+ПолучитьIDСправочника(СокрЛП(СтрокаТЧ.КонтрагентGUID),"Counterparties",Результат) +"'
	//	|           ,'"+ПреобразоватьОбъектВЗначение(ПолучитьIDСправочника(Стр.СтатьяТРУ,"map_NomenclatureGroups",Результат)+"'
	//	|           ,'"+ПреобразоватьОбъектВЗначение(ПолучитьIDСправочника(Стр.СтатьяТРУУровень2,"map_NomenclatureGroups",Результат)+"'
	//	|           ,'"+ПреобразоватьОбъектВЗначение(ПолучитьIDСправочника(Стр.ВидДвижения,"map_TypesOfMovements",Результат)+"'
	//	|           ,'"+ПреобразоватьОбъектВЗначение(Стр.Период,"0")+"'
	//	|           ,'"+IDВерсия+"'	 
	//	|           ,'"+Ном+"')";
	
	
КонецПроцедуры

Функция ПреобразоватьОбъектВЗначение(ОбъектПреобразования, ЕслиNull = "") Экспорт
	
	Если ОбъектПреобразования = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	ТипЗначения = ТипЗнч(ОбъектПреобразования);
	Если ТипЗначения = Тип("Дата") Тогда
		Значение = Формат(ОбъектПреобразования, "ДФ = гггг-ММ-дд");
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Значение = Формат(ОбъектПреобразования, "ЧГ=0;ЧН=0;ЧРД=.;ЧДЦ=2");
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Если ОбъектПреобразования = Истина Тогда
			Значение = "1";
		Иначе
			Значение = "0";
		КонецЕсли;
	ИначеЕсли ОбъектПреобразования = NULL Тогда
		Значение = ЕслиNull;
	Иначе
		Значение = XMLСтрока(СокрЛП(ОбъектПреобразования));	
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьID(Ссылка, Таблица)  Экспорт
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Результат = "0";
		Возврат Результат; 
	КонецЕсли;	
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Соединение  = Новый COMОбъект("ADODB.Connection");	
	Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
	Соединение.CommandTimeout	 = 600;
	Соединение.ConnectionTimeout = 180;
	Соединение.Open();
	
	Выборка     = Новый COMОбъект("ADODB.RecordSet");
	Выборка.CursorType = 3;
	Выборка.ActiveConnection = Соединение;
	Выборка.Open("Select id from " + Таблица + " where GUID = '" + XMLСтрока(Ссылка) + "'");
	Выборка.MoveFirst(); 
	Если Выборка.EOF() = 0 Тогда
		Результат = Выборка.Fields("id").Value;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Выборка.Close();
	Соединение.Close();  
	
	Возврат Результат; 
	
КонецФункции

Функция УдалитьПробелы(ТекЧисло)
	
	Возврат ИнтеграцияДЗО.УдалитьПробелы(ТекЧисло);	
	//
	//Если ЗначениеЗаполнено(ТекЧисло) Тогда
	//	Возврат Формат(ТекЧисло,"ЧГ=");
	//Иначе
	//	Возврат "0";
	//КонецЕсли;
	
КонецФункции // УдалитьПробелы¶()

&НаСервере
Функция ПолучитьIDСправочника(Ссылка,ИмяТаблицы,ДанныеSQL)
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		GUID = Ссылка;
	Иначе 
		Если ЗначениеЗаполнено(Ссылка)Тогда
			GUID = XMLСтрока(Ссылка); 
		Иначе 
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТЗ = ДанныеSQL[ИмяТаблицы];
	Результат = ДанныеSQL[ИмяТаблицы].Найти(GUID,"GUID");
	Если Результат <> Неопределено Тогда
		Возврат Результат.ID;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьIDСправочника()

&НаСервере
Функция ПолучитьIDКонтрагента(ИИН)
	
	ID = ИнтеграцияДЗО.ПолучитьIDКонтрагентаПоИИН(ИИН);	
	Возврат ID; 
	
КонецФункции // ПолучитьIDКонтрагента()

Функция Соединение() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Попытка
		
		Команда     = Новый COMОбъект("ADODB.Command");
		Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");
		
		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 1800;
		Соединение.ConnectionTimeout = 1800;
		
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
		
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Команда;
	
КонецФункции

Процедура УдалитьЗаписиSQL()

	Результат = ПолучитьЗначения_ID_из_SQL_по_GUID();
	
	GUIDДокумента  = ссылка.УникальныйИдентификатор();

	IDОрганизации =ПолучитьIDСправочника(Организация,"map_Organizations",Результат); 

	ТекстЗапросаУдаления = "DELETE  FROM map_PlanData 
	|WHERE [company] = '"+IDОрганизации+"' AND 
	|RecorderGUID = '"+GUIDДокумента+"'";
	
	Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюУдаления(ТекстЗапросаУдаления);
	//Сообщить(Ответ); 
	
	ТекстЗапросаУдаления = "DELETE  FROM map_PlanDataCreditors 
	|WHERE [company] = '"+IDОрганизации+"' AND 
	|RecorderGUID = '"+GUIDДокумента+"'";
	
	Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюУдаления(ТекстЗапросаУдаления);
	
	ТекстЗапросаУдаления = "DELETE  FROM map_PlanDataDebtors 
	|WHERE [company] = '"+IDОрганизации+"' AND 
	|RecorderGUID = '"+GUIDДокумента+"'";
	
	Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюУдаления(ТекстЗапросаУдаления);
	
	ТекстЗапросаУдаления = "DELETE  FROM map_PlanDataCAPEX 
	|WHERE [company] = '"+IDОрганизации+"' AND 
	|RecorderGUID = '"+GUIDДокумента+"'";
	
	Ответ = ИнтеграцияДЗО.ВыполнитьИнструкциюУдаления(ТекстЗапросаУдаления);
	
КонецПроцедуры	


Процедура ОбработкаУдаленияПроведения(Отказ)
	УдалитьЗаписиSQL();
КонецПроцедуры
	