
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОтбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьОстаток(Команда)
	
	ЗагрузитьФайл("Остаток");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбороты(Команда)
	
	ЗагрузитьФайл("Обороты");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтбор()
	
	ЭлементОтбора = НачальныйОстаток.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Регистратор");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
	
	ЭлементОтбора = Обороты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Регистратор");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
	
КонецПроцедуры

&НаСервере
Функция ИзExcelВТаблицу(ПутьДоExcel, НомерСтраницы = 1, ПерСтрокаЗаголовок = Ложь , ФормаИндикатора = Неопределено) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	
	Попытка
		ТабДок.Прочитать(ПутьДоExcel, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		Сообщить("Произошла ошибка при обращение к Excel:" + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ТЗ = Новый ТаблицаЗначений();
	МакСтрок = ТабДок.ВысотаТаблицы; // макс. колич. строк
	МакСтолб = ТабДок.ШиринаТаблицы; // макс. колич. столбцов
	Для Столбец = 1 по МакСтолб цикл
		ИмяСтолбца = "Столбец_" + Столбец;
		Если ПерСтрокаЗаголовок тогда
			ИмяСтолбца = ТабДок.Область(1,Столбец).Текст;
			ИмяСтолбца = СокрЛП(ИмяСтолбца);
			ИмяСтолбца = СтрЗаменить(ИмяСтолбца," ","_");
		КонецЕсли;
		ТЗ.Колонки.Добавить(ИмяСтолбца, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	НачальнаяСтрока = 1;
	Если ПерСтрокаЗаголовок тогда
		НачальнаяСтрока = 2;
	КонецЕсли;
	Для НомСтрока = НачальнаяСтрока по МакСтрок цикл
		СтрТЗ = ТЗ.Добавить();
		Для НомСтолбец = 1 по МакСтолб цикл
			Если ТабДок.Область(НомСтрока,НомСтолбец).СодержитЗначение Тогда 
				Данные = ТабДок.Область(НомСтрока,НомСтолбец).Значение;			
			Иначе 
				Данные = ТабДок.Область(НомСтрока,НомСтолбец).Текст;			
			КонецЕсли;
			СтрТЗ[НомСтолбец-1] = Данные;
		КонецЦикла;
		
	КонецЦикла;
	Возврат ТЗ;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = Нстр("ru = 'Указанный файл не существует'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, "");
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение, ДополнительныеПараметры);
		
		УстановитьОтбор();
		ЭтаФорма.Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(ТипЗагрузки)
	
	АдресФайлаВоВременномХранилище = "";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект, ТипЗагрузки);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,Нстр("ru = 'Файл загрузки'"),, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкуТаблицы(База, ТипОбъекта, ТЗ, Счетчик, НоваяСтрока, ИмяКолонки, СпособПоиска, КолонкаНаименования, КолонкаКод="", Структура=Неопределено)
	
	Если Структура = Неопределено Тогда
		Структура = Новый Структура;
	КонецЕсли;
	
	ЗначениеНаименования = ТЗ[Счетчик][КолонкаНаименования];
	ЗначениеКод ="";
	Если КолонкаКод <> ""  Тогда
		
		ЗначениеКод = ТЗ[Счетчик][КолонкаКод];
		Структура.Вставить("Код",ЗначениеКод);
		
	КонецЕСли;
	
	Если ЗначениеНаименования <> "" И СпособПоиска = "ПоНаименованию" Тогда
		НоваяСтрока[ИмяКолонки] = ЗагрузкаИзФайлаСервер.ПолучитьЭлементСправочникаПоНаименованию(База, ТипОбъекта, ЗначениеНаименования, Структура);
	КонецЕсли;
	
	Если ЗначениеКод <> "" И СпособПоиска = "ПоКоду" Тогда
		НоваяСтрока[ИмяКолонки] = ЗагрузкаИзФайлаСервер.ПолучитьЭлементСправочникаПоНаименованию(База, ТипОбъекта, ЗначениеКод, Структура);
	КонецЕсли;
	
	Если СпособПоиска = "ПоБин" и Структура.Бин <>"" Тогда    // поиск по бин заходит сюда только если БИН не пустой
		НоваяСтрока[ИмяКолонки] = ЗагрузкаИзФайлаСервер.ПолучитьЭлементСправочникаПоБин(База, ТипОбъекта, Структура.Бин, Структура);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЭлемент()

&НаСервере
Процедура УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, ИмяСубконто)
	
	Если ЗначениеЗаполнено(НоваяСтрока[ИмяСубконто]) Тогда
		Если МассивСубконто.Найти(ИмяСубконто) = Неопределено Тогда
			МассивСубконто.Добавить(ИмяСубконто);		
		КонецЕсли;                           
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеСубконтоУСчета(СоответсвиеСчетов, НоваяСтрока)
	//заполняем массив субконто которые встречались у счета 
	//далее мы обойдем полученный массив и запишем у счета один раз в конце цикла
	
	МассивСубконто = СоответсвиеСчетов.Получить(НоваяСтрока.Счет);
	Если СоответсвиеСчетов.Получить(НоваяСтрока.Счет) = Неопределено Тогда
		МассивСубконто = Новый Массив;
		СоответсвиеСчетов.Вставить(НоваяСтрока.Счет, МассивСубконто);
	КонецЕсли;
	
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "Кассы");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "БанковскиеСчета");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "Контрагенты");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "Договоры");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "Номенклатура");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "Склады");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "ЦенныеБумаги");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "РасходыБудущихПериодов");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "ДоходыБудущихПериодов");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "СтатьиДоходов");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "СтатьиЗатрат");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "СтатьиДвиженияДенежныхСредств");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "ОсновныеСредства");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "НематериальныеАктивы");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "ОбъектыСтроительства");
	УстановитьСубконтоУСчета(НоваяСтрока, МассивСубконто, "НоменклатурныеГруппы");
	
	СоответсвиеСчетов.Вставить(НоваяСтрока.Счет, МассивСубконто);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСчета(СоответсвиеСчетов)
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеСчетов Цикл
		БылиИзменения = Ложь;
		Счет  = ЭлементСоответсвия.Ключ;
		СчетОбъект = Счет.ПолучитьОбъект();
		
		МассивСубконто = ЭлементСоответсвия.Значение;
		
		НазначенныеАналитики = СчетОбъект.Субконто;
		Для Каждого ЭлементМассива Из МассивСубконто Цикл
			НайденнаяСтрока = НазначенныеАналитики.Найти(ЭлементМассива, "ИмяСубконто");		
			Если НайденнаяСтрока = Неопределено тогда
				БылиИзменения = Истина;
				НоваяСтрока = НазначенныеАналитики.Добавить();
				НоваяСтрока.ИмяСубконто = ЭлементМассива;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если БылиИзменения Тогда
			СчетОбъект.Записать();	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, Расширение, ДополнительныеПараметры)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТЗ = ИзExcelВТаблицу(ИмяВременногоФайла);
	
	СоответсвиеТиповОбъекта = ЗагрузкаИзФайлаСервер.ПолучитьСоответсвияТипов(Объект.База);
	
	СоответсвиеСчетов = Новый Соответствие;
	
	Попытка
		
		НачатьТранзакцию();
		
		Если ДополнительныеПараметры = "Остаток" Тогда
			СоответсвиеКолонок = ЗагрузкаИзФайлаСервер.ПолучитьСоответсвиеДляОстатка();
			
			НаборЗаписей = РегистрыСведений.НачальныйОстаток.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Объект.Ссылка);
			ТзДвижений = НаборЗаписей.Выгрузить();
			ТзДвижений.Очистить();
			
			КоличествоСтрок = ТЗ.Количество();
			НомерПроводки = 0;
			Для а= 1 по КоличествоСтрок-1 Цикл   //первую строку пропускаем там название
				
				НомерПроводки = НомерПроводки+1;
				
				ТекстДаты = ТЗ[а]["Столбец_3"];
				
				Если СокрЛП(ТекстДаты) ="" Тогда // пропускаем итоги
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТзДвижений.Добавить();
				ДатаПроводки = Дата(ТекстДаты);
				Если ДатаПроводки < Объект.Дата Тогда
					ДатаПроводки = Объект.Дата;
				КонецЕсли;
				НоваяСтрока.НомерПроводки = НомерПроводки;
				НоваяСтрока.Активность = Истина;
				НоваяСтрока.Период = ДатаПроводки;
				НоваяСтрока.База = Объект.База;
				НоваяСтрока.Организация = Объект.Организация;
				Если Число(ТЗ[а]["Столбец_13"]) <> 0 Тогда
					НоваяСтрока.ТипСальдо = ?(Число(ТЗ[а]["Столбец_13"])>0, Перечисления.ТипСальдо.Дт, Перечисления.ТипСальдо.КТ);
				Иначе
					НоваяСтрока.ТипСальдо = ?(Число(ТЗ[а]["Столбец_15"])>0, Перечисления.ТипСальдо.Дт, Перечисления.ТипСальдо.КТ); //сумма 0 смотрим на количество
				КонецЕсли;
				
				НоваяСтрока.Сумма = Число(ТЗ[а]["Столбец_13"]);
				НоваяСтрока.СуммаВал = Число(ТЗ[а]["Столбец_12"]);
				НоваяСтрока.СуммаУпр = Число(ТЗ[а]["Столбец_13"]);
				НоваяСтрока.Количество = Число(ТЗ[а]["Столбец_15"]);
				
				НоваяСтрока.Счет = ЗагрузкаИзФайлаСервер.ПолучитьСчет(Объект.База, ТЗ[а]["Столбец_8"], ТЗ[а]["Столбец_9"]);
				
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Валюта"], ТЗ, а, НоваяСтрока, "Валюта", "ПоНаименованию", СоответсвиеКолонок["Валюта"]);
				
				
				Структура = Новый Структура;
				Структура.Вставить("Код",ТЗ[а][СоответсвиеКолонок["Подразделение_Код"]]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Подразделения"], ТЗ, а, НоваяСтрока, "Подразделения", "ПоНаименованию", СоответсвиеКолонок["Подразделение"], "", Структура);
				
				
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Кассы"], ТЗ, а, НоваяСтрока, "Кассы", "ПоНаименованию", СоответсвиеКолонок["Кассы"], "", Неопределено);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["БанковскиеСчета"], ТЗ, а, НоваяСтрока, "БанковскиеСчета", "ПоНаименованию", СоответсвиеКолонок["БанковскиеСчета"]);
				
				КонтрагентНаименование = ТЗ[а][СоответсвиеКолонок["Контрагенты"]];				
				Если КонтрагентНаименование <> "" Тогда
					Бин = ТЗ[а][СоответсвиеКолонок["БИН"]];
					ДебеторКод = ТЗ[а][СоответсвиеКолонок["Дебитор_Код"]];
					КредиторКод =  ТЗ[а][СоответсвиеКолонок["Кредитор_Код"]];
					
					Если СтрНайти(БИН, "БИН") >0 ИЛИ СтрНайти(БИН, "*") >0 Тогда
						Бин =""; // Мусор зануляем	
					КонецЕсли;
					
					КодИскомый = ?(СокрЛП(ДебеторКод)<>"", СокрЛП(ДебеторКод), СокрЛП(КредиторКод));
					
					Структура = Новый Структура;
					Структура.Вставить("Код",КодИскомый);
					Структура.Вставить("БИН", Бин);
					//Если Бин <> "" Тогда
					//ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Контрагенты"], ТЗ, а, НоваяСтрока, "Контрагенты", "ПоБИН", СоответсвиеКолонок["Контрагенты"], "", Структура);
					//Иначе
					ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Контрагенты"], ТЗ, а, НоваяСтрока, "Контрагенты", "ПоНаименованию", СоответсвиеКолонок["Контрагенты"], "", Структура);
					//КонецЕсли;
				КонецЕСли;
				
				Структура = Новый Структура;
				Структура.Вставить("КонтрагентВладелец", НоваяСтрока.Контрагенты);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Договоры"], ТЗ, а, НоваяСтрока, "Договоры", "ПоНаименованию", СоответсвиеКолонок["Договоры"], "", Структура);
				
				Структура = Новый Структура;
				Структура.Вставить("Код",ТЗ[а][СоответсвиеКолонок["Номенклатура_Код"]]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Номенклатура"], ТЗ, а, НоваяСтрока, "Номенклатура", "ПоНаименованию", СоответсвиеКолонок["Номенклатура"], "", Структура);
				
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["ЦенныеБумаги"], ТЗ, а, НоваяСтрока, "ЦенныеБумаги", "ПоНаименованию", СоответсвиеКолонок["ЦенныеБумаги"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["РасходыБудущихПериодов"], ТЗ, а, НоваяСтрока, "РасходыБудущихПериодов", "ПоНаименованию", СоответсвиеКолонок["РасходыБудущихПериодов"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["ДоходыБудущихПериодов"], ТЗ, а, НоваяСтрока, "ДоходыБудущихПериодов", "ПоНаименованию", СоответсвиеКолонок["ДоходыБудущихПериодов"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["СтатьиДоходов"], ТЗ, а, НоваяСтрока, "СтатьиДоходов", "ПоНаименованию", СоответсвиеКолонок["СтатьиДоходов"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["СтатьиЗатрат"], ТЗ, а, НоваяСтрока, "СтатьиЗатрат", "ПоНаименованию", СоответсвиеКолонок["СтатьиЗатрат"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["СтатьиДвиженияДенежныхСредств"], ТЗ, а, НоваяСтрока, "СтатьиДвиженияДенежныхСредств", "ПоНаименованию", СоответсвиеКолонок["СтатьиДвиженияДенежныхСредств"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["ОсновныеСредства"], ТЗ, а, НоваяСтрока, "ОсновныеСредства", "ПоНаименованию", СоответсвиеКолонок["ОсновныеСредства"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["НематериальныеАктивы"], ТЗ, а, НоваяСтрока, "НематериальныеАктивы", "ПоНаименованию", СоответсвиеКолонок["НематериальныеАктивы"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["ОбъектыСтроительства"], ТЗ, а, НоваяСтрока, "ОбъектыСтроительства", "ПоНаименованию", СоответсвиеКолонок["ОбъектыСтроительства"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["НоменклатурныеГруппы"], ТЗ, а, НоваяСтрока, "НоменклатурныеГруппы", "ПоНаименованию", СоответсвиеКолонок["НоменклатурныеГруппы"]);
				
				ЗаполнитьЗначениеСубконтоУСчета(СоответсвиеСчетов, НоваяСтрока);
				
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТзДвижений);
			НаборЗаписей.Записать(Истина);
		Иначе  //обороты
			
			СоответсвиеКолонок = ЗагрузкаИзФайлаСервер.ПолучитьСоответсвиеДляОборотов();
			
			НаборЗаписейОбороты = РегистрыСведений.Обороты.СоздатьНаборЗаписей();
			НаборЗаписейОбороты.Отбор.Регистратор.Установить(Объект.Ссылка);
			ТзДвижений = НаборЗаписейОбороты.Выгрузить();
			ТзДвижений.Очистить();
			НомерПроводки = 0;
			КоличествоСтрок = ТЗ.Количество();
			Для а= 1 по КоличествоСтрок-1 Цикл   //первую строку пропускаем там название
				
				НомерПроводки = НомерПроводки+1;
				ТекстДаты = ТЗ[а]["Столбец_3"];
				
				Если СокрЛП(ТекстДаты) ="" Тогда // пропускаем итоги
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТзДвижений.Добавить();
				ДатаПроводки = Дата(ТекстДаты);
				НоваяСтрока.НомерПроводки = НомерПроводки;
				НоваяСтрока.Активность = Истина;
				НоваяСтрока.Период = ДатаПроводки;
				НоваяСтрока.База = Объект.База;
				НоваяСтрока.ТипРегистратора = ТЗ[а]["Столбец_10"];
				
				НоваяСтрока.Организация = Объект.Организация;
				Если Число(ТЗ[а]["Столбец_13"]) <> 0 Тогда
					НоваяСтрока.ТипОборота = ?(Число(ТЗ[а]["Столбец_13"])>0, Перечисления.ТипСальдо.Дт, Перечисления.ТипСальдо.КТ);
				Иначе
					НоваяСтрока.ТипОборота = ?(Число(ТЗ[а]["Столбец_15"])>0, Перечисления.ТипСальдо.Дт, Перечисления.ТипСальдо.КТ); //сумма 0 смотрим на количество
				КонецЕсли;
				
				НоваяСтрока.Сумма = Число(ТЗ[а]["Столбец_13"])*?(НоваяСтрока.ТипОборота = Перечисления.ТипСальдо.КТ, (-1), 1);
				НоваяСтрока.СуммаВал = Число(ТЗ[а]["Столбец_12"])*?(НоваяСтрока.ТипОборота = Перечисления.ТипСальдо.КТ, (-1), 1);
				НоваяСтрока.СуммаУпр = Число(ТЗ[а]["Столбец_13"])*?(НоваяСтрока.ТипОборота = Перечисления.ТипСальдо.КТ, (-1), 1);
				НоваяСтрока.Количество = Число(ТЗ[а]["Столбец_15"])*?(НоваяСтрока.ТипОборота = Перечисления.ТипСальдо.КТ, (-1), 1);
				
				НоваяСтрока.Счет = ЗагрузкаИзФайлаСервер.ПолучитьСчет(Объект.База, ТЗ[а]["Столбец_8"], ТЗ[а]["Столбец_9"]);
				
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Валюта"], ТЗ, а, НоваяСтрока, "Валюта", "ПоНаименованию", СоответсвиеКолонок["Валюта"]);
				
				
				Структура = Новый Структура;
				Структура.Вставить("Код",ТЗ[а][СоответсвиеКолонок["Подразделение_Код"]]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Подразделения"], ТЗ, а, НоваяСтрока, "Подразделения", "ПоНаименованию", СоответсвиеКолонок["Подразделение"], "", Структура);
				
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Кассы"], ТЗ, а, НоваяСтрока, "Кассы", "ПоНаименованию", СоответсвиеКолонок["Кассы"], "", Неопределено);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["БанковскиеСчета"], ТЗ, а, НоваяСтрока, "БанковскиеСчета", "ПоНаименованию", СоответсвиеКолонок["БанковскиеСчета"]);
				
				КонтрагентНаименование = ТЗ[а][СоответсвиеКолонок["Контрагенты"]];				
				Если КонтрагентНаименование <> "" Тогда
					Бин = ТЗ[а][СоответсвиеКолонок["БИН"]];
					ДебеторКод = ТЗ[а][СоответсвиеКолонок["Дебитор_Код"]];
					КредиторКод =  ТЗ[а][СоответсвиеКолонок["Кредитор_Код"]];
					
					Если СтрНайти(БИН, "БИН") >0 ИЛИ СтрНайти(БИН, "*") >0 Тогда
						Бин =""; // Мусор зануляем	
					КонецЕсли;
					
					КодИскомый = ?(СокрЛП(ДебеторКод)<>"", СокрЛП(ДебеторКод), СокрЛП(КредиторКод));
					
					Структура = Новый Структура;
					Структура.Вставить("Код",КодИскомый);
					Структура.Вставить("БИН", Бин);
					//Если Бин <> "" Тогда
					//	ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Контрагенты"], ТЗ, а, НоваяСтрока, "Контрагенты", "ПоБИН", СоответсвиеКолонок["Контрагенты"], "", Структура);
					//Иначе
					ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Контрагенты"], ТЗ, а, НоваяСтрока, "Контрагенты", "ПоНаименованию", СоответсвиеКолонок["Контрагенты"], "", Структура);
					//КонецЕсли;
				КонецЕСли;
				
				Структура = Новый Структура;
				Структура.Вставить("КонтрагентВладелец", НоваяСтрока.Контрагенты);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Договоры"], ТЗ, а, НоваяСтрока, "Договоры", "ПоНаименованию", СоответсвиеКолонок["Договоры"],"",Структура);
				
				
				Структура = Новый Структура;
				Структура.Вставить("Код",ТЗ[а][СоответсвиеКолонок["Номенклатура_Код"]]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["Номенклатура"], ТЗ, а, НоваяСтрока, "Номенклатура", "ПоНаименованию", СоответсвиеКолонок["Номенклатура"], "", Структура);
				
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["ЦенныеБумаги"], ТЗ, а, НоваяСтрока, "ЦенныеБумаги", "ПоНаименованию", СоответсвиеКолонок["ЦенныеБумаги"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["РасходыБудущихПериодов"], ТЗ, а, НоваяСтрока, "РасходыБудущихПериодов", "ПоНаименованию", СоответсвиеКолонок["РасходыБудущихПериодов"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["ДоходыБудущихПериодов"], ТЗ, а, НоваяСтрока, "ДоходыБудущихПериодов", "ПоНаименованию", СоответсвиеКолонок["ДоходыБудущихПериодов"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["СтатьиДоходов"], ТЗ, а, НоваяСтрока, "СтатьиДоходов", "ПоНаименованию", СоответсвиеКолонок["СтатьиДоходов"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["СтатьиЗатрат"], ТЗ, а, НоваяСтрока, "СтатьиЗатрат", "ПоНаименованию", СоответсвиеКолонок["СтатьиЗатрат"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["СтатьиДвиженияДенежныхСредств"], ТЗ, а, НоваяСтрока, "СтатьиДвиженияДенежныхСредств", "ПоНаименованию", СоответсвиеКолонок["СтатьиДвиженияДенежныхСредств"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["ОсновныеСредства"], ТЗ, а, НоваяСтрока, "ОсновныеСредства", "ПоНаименованию", СоответсвиеКолонок["ОсновныеСредства"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["НематериальныеАктивы"], ТЗ, а, НоваяСтрока, "НематериальныеАктивы", "ПоНаименованию", СоответсвиеКолонок["НематериальныеАктивы"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["ОбъектыСтроительства"], ТЗ, а, НоваяСтрока, "ОбъектыСтроительства", "ПоНаименованию", СоответсвиеКолонок["ОбъектыСтроительства"]);
				ЗаполнитьКолонкуТаблицы(Объект.База, СоответсвиеТиповОбъекта["НоменклатурныеГруппы"], ТЗ, а, НоваяСтрока, "НоменклатурныеГруппы", "ПоНаименованию", СоответсвиеКолонок["НоменклатурныеГруппы"]);
				
			КонецЦикла;
			
			НаборЗаписейОбороты.Загрузить(ТзДвижений);
			НаборЗаписейОбороты.Записать(Истина);
			
		КонецЕСли;
		
		ОбработатьСчета(СоответсвиеСчетов);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Файл = Новый Файл(ИмяВременногоФайла);
	
	Если Файл.Существует() Тогда
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти









