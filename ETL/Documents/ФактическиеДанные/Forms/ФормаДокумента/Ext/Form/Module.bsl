#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() тогда
		Объект.Версия 	= Справочники.Версии.НайтиПоРеквизиту("КодСправочника","VER4.");
		Объект.Дата1 	= НачалоКвартала(ТекущаяДата());
		Объект.Дата2 	= КонецКвартала(ТекущаяДата());
	КонецЕсли;	
	
	ВыборПериода.ДатаНачала 	= Объект.Дата1;
	ВыборПериода.ДатаОкончания 	= Объект.Дата2;
	
	//++ 16.07.2025 Кибернетика Корыткин
	ЗаполнитьТабличныйДокумент();
    //-- 16.07.2025

	ОбновитьДерево();
	
	ПриСозданииНаСервереKPI(Отказ, СтандартнаяОбработка);	
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеФормой();
	
	МассивДереваKPI = Новый Массив();
	МассивДереваKPI.Добавить("ДеревоKPI1v2");
	МассивДереваKPI.Добавить("ДеревоKPI3v2");
	МассивДереваKPI.Добавить("ДеревоKPI5v2");
	МассивДереваKPI.Добавить("ДеревоKPI6v2");
	МассивДереваKPI.Добавить("ДеревоKPI8v2");
	
	Для Каждого ЭлементМассива из МассивДереваKPI Цикл
		ИмяДерева = ЭлементМассива;
		
		Элементы[ИмяДерева].ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Верх;
		
	КонецЦикла;
	
КонецПроцедуры

	
#КонецОбласти 	 
	 
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗакрытьПериодПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура Дата2ПриИзменении(Элемент)
	Объект.ДатаОтчета = Объект.Дата2;
КонецПроцедуры


&НаКлиенте
Процедура ВыборПериодаПриИзменении(Элемент)
	Объект.Дата1 		= ВыборПериода.ДатаНачала;
	Объект.Дата2 		= ВыборПериода.ДатаОкончания;
	Объект.ДатаОтчета 	= ВыборПериода.ДатаОкончания;
	ПериодПланированияНачисленияСтрокойПриИзменении();
	Объект.ДанныеКредиторы.Очистить();
	Объект.ДанныеДебиторы.Очистить();
	
	ОбновитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры   



#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьKPI(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Дата2) Тогда
		 СообщитьПользователю("На заполнена ""Дата окончания периода""","ОбъектДата2");
		Возврат;
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		 СообщитьПользователю("На заполнена ""Организация""","Объект.Организация");
		Возврат;
	КонецЕсли; 
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		Сообщить("Документ не записан или изменен. Необходимо записать документ!!!");
		Возврат;
	КонецЕсли;  
	
	ИнтеграцияДЗО.ОтправитьДокКлючевыеПоказатели(Объект);
	
 КонецПроцедуры


&НаКлиенте
Процедура КомандаЗакрытьПериод(Команда)
	
	Объект.ДатаОтчета = Объект.Дата2;
	ЕстьВозможностьЗаписи = ПроверитьДатаЗакрытия();
	Если ЕстьВозможностьЗаписи и КомандаЗакрытьПериодНаСервере() Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусДокумента.Утвержден");
		Записать();
	КонецЕсли;	
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьKPI(Команда)
	ТабДокумент = Новый ТабличныйДокумент;
	
	
	ВидОтчета 	= "KPI";
	ИмяТЧ 		= "ДанныеКПД";
	
	ПечатьKPIНаСервере(ТабДокумент,ИмяТЧ,ВидОтчета);
	ТабДокумент.Показать("KPI");
КонецПроцедуры

//++ 23.07.2025 Кибернетика Корыткин Заполнение отчетности
&НаКлиенте
Процедура ЗаполнитьОтчеты(Команда)
	ЗаполнитьОтчетыНаСервере();
КонецПроцедуры
//-- 23.07.2025 

//++ 24.07.2025 Кибернетика Корыткин
&НаКлиенте
Процедура СнятьУтверждение(Команда)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусДокумента.Утвержден") Тогда
	
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусДокумента.Корректировка");
	
	КонецЕсли;
	
	УправлениеФормой(); 
	УстановитьВидимость();
КонецПроцедуры
//-- 24.07.2025


#КонецОбласти                  

#Область СлужебныеПроцедурыИФункции
	
////////////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ОбновитьДерево()
	
	ЗаполнитьДеревоКредиты("ДеревоКредиторы");	
	
	ЗаполнитьДеревоДЗ("ДеревоДебиторы");	
	
КонецПроцедуры

&НаСервере
Функция СформироватьДеревоКредиты()  
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ОписаниеДата = Новый ОписаниеТипов("Дата");	
	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Контрагент"							,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("КонтрагентБИН"						,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("Договор"								,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("НомерДоговора"						,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("ДатаДоговора"						,ОписаниеДата);
	ДеревоЗн.Колонки.Добавить("ДатаПогашения"						,ОписаниеДата);
	ДеревоЗн.Колонки.Добавить("ДолговойИнструмент"					,Новый ОписаниеТипов("СправочникСсылка.ДолговыеИнструменты"));
	ДеревоЗн.Колонки.Добавить("ТипКредитора"						,Новый ОписаниеТипов("СправочникСсылка.ТипыКредиторов"));
	ДеревоЗн.Колонки.Добавить("Валюта"								,Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ДеревоЗн.Колонки.Добавить("Индексация"							,ОписаниеБулево);
	ДеревоЗн.Колонки.Добавить("КурсНаДату"							,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("СрокКредитования"					,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ПроцентнаяСтавка"					,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ЦелевоеНазначениеСредств"			,Новый ОписаниеТипов("СправочникСсылка.ЦелевоеЗначениеСредств"));
	ДеревоЗн.Колонки.Добавить("СуммаПоДоговору"						,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("СуммаОсвоенияПоДоговору"				,ОписаниеЧисло);
	

	ТЗ = Объект.ДанныеКредиторы.Выгрузить();
	ТЗ.Свернуть("Договор,НомерДоговора,ДатаДоговора,ДатаПогашения,Контрагент,КонтрагентБИН,ТипКредитора,ДолговойИнструмент,Валюта,Индексация,КурсНаДату,СрокКредитования,ПроцентнаяСтавка,ЦелевоеНазначениеСредств,СуммаПоДоговору,СуммаОсвоенияПоДоговору");
	
	для каждого стр из ТЗ Цикл
		ТекЭлемент	= ДеревоЗн.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекЭлемент,Стр);
	КонецЦикла;	
	
	возврат ДеревоЗн; 	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоКредиты(НаимДерева)
	
	тДерево = СформироватьДеревоКредиты();
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Период");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&Дата1, &Дата2, МЕСЯЦ)+1 КАК КолМесяцев";
	Запрос.УстановитьПараметр("Дата1",Объект.Дата1);
	Запрос.УстановитьПараметр("Дата2",КонецДня(Объект.Дата2));
	Рез = Запрос.Выполнить().Выбрать();			   
	Рез.Следующий();
	КолМесяцев = Рез.КолМесяцев;
	
	для а=1 по КолМесяцев Цикл  
		Период 			= ДобавитьМесяц(Объект.Дата1,а-1); 
		
		НовСтр 			= ТЗ.Добавить();
		НовСтр.Период 	= Период;
	КонецЦикла;
	
	
	МассивДобавляемыхПолей 	= Новый Массив;
	МассивДобавляемыхПолей.Добавить("СуммаОД");
	МассивДобавляемыхПолей.Добавить("Переоценка");
	МассивДобавляемыхПолей.Добавить("ПрочиеОперации");
	МассивДобавляемыхПолей.Добавить("НачисленныеПроценты");
	
	МассивДобавляемыхРеквизитов 	= Новый Массив;
	МассивУдаляемыхРеквизитов 		= Новый Массив;
	
	ТекДерево = РеквизитФормыВЗначение(НаимДерева);
	для каждого Кол из ТекДерево.Колонки Цикл
		НаимКолонки 		= "Значение_"; 
		
		Если Найти(Кол.Имя,НаимКолонки)>0 Тогда
			МассивУдаляемыхРеквизитов.Добавить(НаимДерева+"."+Кол.Имя);
			Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя)<>Неопределено Тогда
				Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		 
	ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	
		
	Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаНачало")<>Неопределено Тогда
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаНачало"));
	КонецЕсли;
	
	Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаКонец")<>Неопределено Тогда
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаКонец"));
	КонецЕсли;
	
	
	Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаМесяц")<>Неопределено Тогда
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаМесяц"));
	КонецЕсли;
	
	для а=1 по 12 Цикл
		//Период = Формат(Дата(Год(Объект.Дата),а,1),"ДФ=""ММММ""");
		Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаМесяц"+а)<>Неопределено Тогда
			Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаМесяц"+а));
		КонецЕсли;
		
	КонецЦикла;	
	
	ИмяКол  		= "СальдоНаНачалоОД";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	ИмяКол  		= "СальдоНаНачалоНачисленныеПроценты";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	
		
	для каждого стр из  ТЗ Цикл
		
		Для каждого ЭлМассива из МассивДобавляемыхПолей Цикл
			
			ИмяКол  = ЭлМассива;
			НаимКолонки = ИмяКол+"МесяцЗначение_"+Формат(Стр.Период,"ДФ=""М"""); 
			Попытка
				тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;
	
	
	ИмяКол  		= "СальдоНаКонецОД";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	ИмяКол  		= "СальдоНаКонецНачисленныеПроценты";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
		
	// 3. создаем РЕКВИЗИТ КОЛОНКИ (невидимая часть, справа в редакторе форм)
	
	// реквизит принадлежит дереву
	// добавляем реквизит в форму (невидимая часть, справа в редакторе форм)
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// 4. заполняем дерево (реквизит формы) занчением
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	// 5. добавляем НА ФОРМУ (видимая часть, слева в редакторе форм)
	// назовем ДеревоУзел, принадлежит элементу дерева, связан с добавленной колонкой «Узел»
	
	
	
	НаимКолонки 	= НаимДерева+"ГруппаСальдоНаНачало"; 
	ЗаголовокГруппы = "Сальдо на начало";
	НайденнаяГруппа = Элементы.Найти(НаимКолонки);
	Если НайденнаяГруппа = Неопределено Тогда
		Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
		Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
		Группа.Заголовок 		= ЗаголовокГруппы;
		Группа.ОтображатьВШапке = Истина;
	Иначе
		Группа = НайденнаяГруппа;
	КонецЕсли;
	Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ИмяКол  					= "СальдоНаНачалоОД";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	Если Элементы.Найти(НаимДерева+НаимКолонки)=Неопределено Тогда
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма ОД";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	КонецЕсли;
	
	ИмяКол  					= "СальдоНаНачалоНачисленныеПроценты";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	Если Элементы.Найти(НаимДерева+НаимКолонки)=Неопределено Тогда
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма %";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	КонецЕсли;
	
	для каждого стр из  ТЗ Цикл
		
		НаимКолонки 	= НаимДерева+"ГруппаМесяц"+Формат(Стр.Период,"ДФ=""М"""); 
		ЗаголовокГруппы = Формат(Стр.Период,"ДФ=""ММММ""");
		
		НайденнаяГруппа = Элементы.Найти(НаимКолонки);
		Если НайденнаяГруппа = Неопределено Тогда
			Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
			Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
			Группа.Заголовок 		= ЗаголовокГруппы;
			Группа.ОтображатьВШапке = Истина;
		Иначе
			Группа 					= НайденнаяГруппа;
		КонецЕсли;
		Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
		
		Для каждого ЭлМассива из МассивДобавляемыхПолей Цикл
			ИмяКол  					= ЭлМассива;
			
			ЗаголовокПоля =  ИмяКол;
			Если ИмяКол = "СуммаОД" Тогда
				ЗаголовокПоля =  "Сумма ОД";
			ИначеЕсли ИмяКол = "ПрочиеОперации" Тогда
				ЗаголовокПоля =  "Прочие операции";
			ИначеЕсли ИмяКол = "НачисленныеПроценты" Тогда
				ЗаголовокПоля =  "Сумма %";
			КонецЕсли;	
			
			НаимКолонки 				= ИмяКол+"МесяцЗначение_"+Формат(Стр.Период,"ДФ=""М"""); 
			НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
			НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Заголовок		= ЗаголовокПоля;		
			НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		КонецЦикла;
		
	КонецЦикла;

	НаимКолонки 	= НаимДерева+"ГруппаСальдоНаКонец"; 
	ЗаголовокГруппы = "Сальдо на конец";
	
	НайденнаяГруппа = Элементы.Найти(НаимКолонки);
	Если Элементы.Найти(НаимКолонки)=Неопределено Тогда
		Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
		Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
		Группа.Заголовок 		= ЗаголовокГруппы;
		Группа.ОтображатьВШапке = Истина;
	Иначе
		Группа = НайденнаяГруппа;
	КонецЕсли;
	Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ИмяКол  					= "СальдоНаКонецОД";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	Если Элементы.Найти(НаимДерева+НаимКолонки)=Неопределено Тогда
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма ОД";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	КонецЕсли;
	
	
	ИмяКол  					= "СальдоНаКонецНачисленныеПроценты";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	Если Элементы.Найти(НаимДерева+НаимКолонки)=Неопределено Тогда
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= "Сумма %";		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	КонецЕсли;
	
	тДерево = РеквизитФормыВЗначение(НаимДерева);
	
	ЗаполнитьЗначенияКолонокКредиты(тДерево,тДерево.Колонки);		 
	
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	
	ПересчетИтоговДерева(НаимДерева);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияКолонокКредиты(тДерево,тКолонки)
	МассивДобавляемыхПолей 	= Новый Массив;
	МассивДобавляемыхПолей.Добавить("СуммаОД");
	МассивДобавляемыхПолей.Добавить("Переоценка");
	МассивДобавляемыхПолей.Добавить("ПрочиеОперации");
	МассивДобавляемыхПолей.Добавить("НачисленныеПроценты");
	
	
	Для Каждого тСтр Из тДерево.Строки Цикл
		СтруктураПоиска = Новый Структура();        	
		СтруктураПоиска.Вставить("Договор"					,тСтр.Договор);
		СтруктураПоиска.Вставить("НомерДоговора"			,тСтр.НомерДоговора);
		СтруктураПоиска.Вставить("ДатаДоговора"				,тСтр.ДатаДоговора);
		СтруктураПоиска.Вставить("ДатаПогашения"			,тСтр.ДатаПогашения);
		СтруктураПоиска.Вставить("Контрагент"				,тСтр.Контрагент);
		СтруктураПоиска.Вставить("КонтрагентБИН"			,тСтр.КонтрагентБИН);
		СтруктураПоиска.Вставить("ДолговойИнструмент"		,тСтр.ДолговойИнструмент);
		СтруктураПоиска.Вставить("ТипКредитора"				,тСтр.ТипКредитора);
		СтруктураПоиска.Вставить("Валюта"					,тСтр.Валюта);
		СтруктураПоиска.Вставить("Индексация"				,тСтр.Индексация);
		СтруктураПоиска.Вставить("КурсНаДату"				,тСтр.КурсНаДату);
		СтруктураПоиска.Вставить("СрокКредитования"			,тСтр.СрокКредитования);
		СтруктураПоиска.Вставить("ПроцентнаяСтавка"			,тСтр.ПроцентнаяСтавка);
		СтруктураПоиска.Вставить("ЦелевоеНазначениеСредств"	,тСтр.ЦелевоеНазначениеСредств);
		СтруктураПоиска.Вставить("СуммаПоДоговору"			,тСтр.СуммаПоДоговору);
		СтруктураПоиска.Вставить("СуммаОсвоенияПоДоговору"	,тСтр.СуммаОсвоенияПоДоговору);
		
		НайденныеСтроки  = Объект.ДанныеКредиторы.НайтиСтроки(СтруктураПоиска);
		для каждого стрМ из НайденныеСтроки Цикл
			ИмяКол  			= "СальдоНаНачалоОД";
			НаимКолонки 		= ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] 	= тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			ИмяКол  			= "СальдоНаНачалоНачисленныеПроценты";
			НаимКолонки 		= ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] 	= тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			Для каждого ЭлМассива из МассивДобавляемыхПолей Цикл
				ИмяКол  		  = ЭлМассива;
				НаимКолонки 	  = ИмяКол+"МесяцЗначение_"+Формат(стрМ.Период,"ДФ=""М"""); 
				тСтр[НаимКолонки] = стрМ[ИмяКол];
			КонецЦикла;
			
			ИмяКол		  		= "СальдоНаКонецОД";
			НаимКолонки 		= ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] 	= тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			ИмяКол  			= "СальдоНаКонецНачисленныеПроценты";
			НаимКолонки 		= ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] 	= тСтр[НаимКолонки]+стрМ[ИмяКол];
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры	 


&НаСервере
Функция СформироватьДеревоДЗ()  
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ОписаниеДата = Новый ОписаниеТипов("Дата");	
	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Контрагент"							,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("КонтрагентБИН"						,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("Договор"								,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("НомерДоговора"						,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("ДатаДоговора"						,ОписаниеДата);
	ДеревоЗн.Колонки.Добавить("ДатаПогашения"						,ОписаниеДата);
	ДеревоЗн.Колонки.Добавить("ДолговойИнструмент"					,Новый ОписаниеТипов("СправочникСсылка.ДолговыеИнструменты"));
	ДеревоЗн.Колонки.Добавить("ТипКредитора"						,Новый ОписаниеТипов("СправочникСсылка.ТипыКредиторов"));
	ДеревоЗн.Колонки.Добавить("Валюта"								,Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ДеревоЗн.Колонки.Добавить("Индексация"							,ОписаниеБулево);
	ДеревоЗн.Колонки.Добавить("КурсНаДату"							,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("СрокКредитования"					,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ПроцентнаяСтавка"					,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ЦелевоеНазначениеСредств"			,Новый ОписаниеТипов("СправочникСсылка.ЦелевоеЗначениеСредств"));
	ДеревоЗн.Колонки.Добавить("СуммаПоДоговору"						,ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("СуммаОсвоенияПоДоговору"				,ОписаниеЧисло);
	

	ТЗ = Объект.ДанныеДебиторы.Выгрузить();
	ТЗ.Свернуть("Договор,НомерДоговора,ДатаДоговора,ДатаПогашения,Контрагент,КонтрагентБИН,ТипКредитора,ДолговойИнструмент,Валюта,Индексация,КурсНаДату,СрокКредитования,ПроцентнаяСтавка,ЦелевоеНазначениеСредств,СуммаПоДоговору,СуммаОсвоенияПоДоговору");
	
	для каждого стр из ТЗ Цикл
		ТекЭлемент	= ДеревоЗн.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТекЭлемент,Стр);
	КонецЦикла;	
	
	возврат ДеревоЗн; 	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоДЗ(НаимДерева)
	
	тДерево = СформироватьДеревоДЗ();
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Период");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&Дата1, &Дата2, МЕСЯЦ)+1 КАК КолМесяцев";
	Запрос.УстановитьПараметр("Дата1",Объект.Дата1);
	Запрос.УстановитьПараметр("Дата2",КонецДня(Объект.Дата2));
	Рез = Запрос.Выполнить().Выбрать();			   
	Рез.Следующий();
	КолМесяцев = Рез.КолМесяцев;
	
	для а=1 по КолМесяцев Цикл  
		Период 			= ДобавитьМесяц(Объект.Дата1,а-1); 
		
		НовСтр 			= ТЗ.Добавить();
		НовСтр.Период 	= Период;
	КонецЦикла;
	
	
	МассивДобавляемыхПолей 	= Новый Массив;
	МассивДобавляемыхПолей.Добавить("СуммаОД");
	МассивДобавляемыхПолей.Добавить("Переоценка");
	МассивДобавляемыхПолей.Добавить("ПрочиеОперации");
	МассивДобавляемыхПолей.Добавить("НачисленныеПроценты");
	
	МассивДобавляемыхРеквизитов 	= Новый Массив;
	МассивУдаляемыхРеквизитов 		= Новый Массив;
	
	ТекДерево = РеквизитФормыВЗначение(НаимДерева);
	для каждого Кол из ТекДерево.Колонки Цикл
		НаимКолонки = "Значение_"; 
		Если Найти(Кол.Имя,НаимКолонки)>0 Тогда
			МассивУдаляемыхРеквизитов.Добавить(НаимДерева+"."+Кол.Имя);
			Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя)<>Неопределено Тогда
				Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		 
	ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	
	
	Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаНачало")<>Неопределено Тогда
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаНачало"));
	КонецЕсли;
	
	Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаКонец")<>Неопределено Тогда
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаСальдоНаКонец"));
	КонецЕсли;
	
	
	Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаМесяц")<>Неопределено Тогда
		Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаМесяц"));
	КонецЕсли;
	
	для а=1 по 12 Цикл
		//Период = Формат(Дата(Год(Объект.Дата),а,1),"ДФ=""ММММ""");
		Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаМесяц"+а)<>Неопределено Тогда
			Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+"ГруппаМесяц"+а));
		КонецЕсли;
		
	КонецЦикла;	
	
	ИмяКол  		= "СальдоНаНачалоОД";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	ИмяКол  		= "СальдоНаНачалоНачисленныеПроценты";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	для каждого стр из  ТЗ Цикл
		
		Для каждого ЭлМассива из МассивДобавляемыхПолей Цикл
			
			ИмяКол  = ЭлМассива;
			НаимКолонки = ИмяКол+"МесяцЗначение_"+Формат(Стр.Период,"ДФ=""М"""); 
			Попытка
				тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;
	
	
	ИмяКол  		= "СальдоНаКонецОД";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
	ИмяКол  		= "СальдоНаКонецНачисленныеПроценты";
	НаимКолонки 	= ИмяКол+"Значение_"; 
	Попытка
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
	Исключение
	КонецПопытки;
	
		
	// 3. создаем РЕКВИЗИТ КОЛОНКИ (невидимая часть, справа в редакторе форм)
	
	// реквизит принадлежит дереву
	// добавляем реквизит в форму (невидимая часть, справа в редакторе форм)
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// 4. заполняем дерево (реквизит формы) занчением
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	// 5. добавляем НА ФОРМУ (видимая часть, слева в редакторе форм)
	// назовем ДеревоУзел, принадлежит элементу дерева, связан с добавленной колонкой «Узел»
	
	
	
	НаимКолонки 	= НаимДерева+"ГруппаСальдоНаНачало"; 
	ЗаголовокГруппы = "Сальдо на начало";
	
	НайденнаяГруппа = Элементы.Найти(НаимКолонки);
	Если НайденнаяГруппа = Неопределено Тогда
		Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
		Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
		Группа.Заголовок 		= ЗаголовокГруппы;
		Группа.ОтображатьВШапке = Истина;
	Иначе
		Группа = НайденнаяГруппа;
	КонецЕсли;
	Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ИмяКол  					= "СальдоНаНачалоОД";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент.Заголовок		= "Сумма ОД";		
	НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	
	
	ИмяКол  					= "СальдоНаНачалоНачисленныеПроценты";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент.Заголовок		= "Сумма %";		
	НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	
	для каждого стр из  ТЗ Цикл
		
		НаимКолонки 	= НаимДерева+"ГруппаМесяц"+Формат(Стр.Период,"ДФ=""М"""); 
		ЗаголовокГруппы = Формат(Стр.Период,"ДФ=""ММММ""");
		
		НайденнаяГруппа = Элементы.Найти(НаимКолонки);
		Если НайденнаяГруппа = Неопределено Тогда
			Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
			Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
			Группа.Заголовок 		= ЗаголовокГруппы;
			Группа.ОтображатьВШапке = Истина;
		Иначе
			Группа 					= НайденнаяГруппа;
		КонецЕсли;
		
		Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
		
		Для каждого ЭлМассива из МассивДобавляемыхПолей Цикл
			
			ИмяКол  					= ЭлМассива;
			
			ЗаголовокПоля =  ИмяКол;
			Если ИмяКол = "СуммаОД" Тогда
				ЗаголовокПоля =  "Сумма ОД";
			ИначеЕсли ИмяКол = "ПрочиеОперации" Тогда
				ЗаголовокПоля =  "Прочие операции";
			ИначеЕсли ИмяКол = "НачисленныеПроценты" Тогда
				ЗаголовокПоля =  "Сумма %";
			КонецЕсли;	
			
			НаимКолонки 				= ИмяКол+"МесяцЗначение_"+Формат(Стр.Период,"ДФ=""М"""); 
			НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
			НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Заголовок		= ЗаголовокПоля;		
			НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		КонецЦикла;
		
	КонецЦикла;

	НаимКолонки 	= НаимДерева+"ГруппаСальдоНаКонец"; 
	ЗаголовокГруппы = "Сальдо на конец";
	
	НайденнаяГруппа = Элементы.Найти(НаимКолонки);
	Если Элементы.Найти(НаимКолонки)=Неопределено Тогда
		Группа 					= Элементы.Добавить(НаимКолонки,Тип("ГруппаФормы"),Элементы[НаимДерева]);
		Группа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
		Группа.Заголовок 		= ЗаголовокГруппы;
		Группа.ОтображатьВШапке = Истина;
	Иначе
		Группа = НайденнаяГруппа;
	КонецЕсли;
	Элементы[НаимКолонки].Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ИмяКол  					= "СальдоНаКонецОД";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент.Заголовок		= "Сумма ОД";		
	НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	
	
	ИмяКол  					= "СальдоНаКонецНачисленныеПроценты";
	НаимКолонки 				= ИмяКол+"Значение_"; 
	НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
	
	НовыйЭлемент.Заголовок		= "Сумма %";		
	НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
	
	тДерево = РеквизитФормыВЗначение(НаимДерева);
	
	ЗаполнитьЗначенияКолонокДЗ(тДерево,тДерево.Колонки);		 
	
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	
	ПересчетИтоговДерева(НаимДерева);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияКолонокДЗ(тДерево,тКолонки)
	МассивДобавляемыхПолей 	= Новый Массив;
	МассивДобавляемыхПолей.Добавить("СуммаОД");
	МассивДобавляемыхПолей.Добавить("Переоценка");
	МассивДобавляемыхПолей.Добавить("ПрочиеОперации");
	МассивДобавляемыхПолей.Добавить("НачисленныеПроценты");
	
	
	Для Каждого тСтр Из тДерево.Строки Цикл
		СтруктураПоиска = Новый Структура();        	
		СтруктураПоиска.Вставить("Договор"					,тСтр.Договор);
		СтруктураПоиска.Вставить("НомерДоговора"			,тСтр.НомерДоговора);
		СтруктураПоиска.Вставить("ДатаДоговора"				,тСтр.ДатаДоговора);
		СтруктураПоиска.Вставить("ДатаПогашения"			,тСтр.ДатаПогашения);
		СтруктураПоиска.Вставить("Контрагент"				,тСтр.Контрагент);
		СтруктураПоиска.Вставить("КонтрагентБИН"			,тСтр.КонтрагентБИН);
		СтруктураПоиска.Вставить("ДолговойИнструмент"		,тСтр.ДолговойИнструмент);
		СтруктураПоиска.Вставить("ТипКредитора"				,тСтр.ТипКредитора);
		СтруктураПоиска.Вставить("Валюта"					,тСтр.Валюта);
		СтруктураПоиска.Вставить("Индексация"				,тСтр.Индексация);
		СтруктураПоиска.Вставить("КурсНаДату"				,тСтр.КурсНаДату);
		СтруктураПоиска.Вставить("СрокКредитования"			,тСтр.СрокКредитования);
		СтруктураПоиска.Вставить("ПроцентнаяСтавка"			,тСтр.ПроцентнаяСтавка);
		СтруктураПоиска.Вставить("ЦелевоеНазначениеСредств"	,тСтр.ЦелевоеНазначениеСредств);
		СтруктураПоиска.Вставить("СуммаПоДоговору"			,тСтр.СуммаПоДоговору);
		СтруктураПоиска.Вставить("СуммаОсвоенияПоДоговору"	,тСтр.СуммаОсвоенияПоДоговору);
		
		НайденныеСтроки  = Объект.ДанныеДебиторы.НайтиСтроки(СтруктураПоиска);
		для каждого стрМ из НайденныеСтроки Цикл
			ИмяКол  = "СальдоНаНачалоОД";
			НаимКолонки = ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] = тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			ИмяКол  = "СальдоНаНачалоНачисленныеПроценты";
			НаимКолонки = ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] = тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			Для каждого ЭлМассива из МассивДобавляемыхПолей Цикл
				ИмяКол  = ЭлМассива;
				НаимКолонки = ИмяКол+"МесяцЗначение_"+Формат(стрМ.Период,"ДФ=""М"""); 
				тСтр[НаимКолонки] = стрМ[ИмяКол];
			КонецЦикла;
			
			ИмяКол  = "СальдоНаКонецОД";
			НаимКолонки = ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] = тСтр[НаимКолонки]+стрМ[ИмяКол];
			
			ИмяКол  = "СальдоНаКонецНачисленныеПроценты";
			НаимКолонки = ИмяКол+"Значение_"; 
			тСтр[НаимКолонки] = тСтр[НаимКолонки]+стрМ[ИмяКол];
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры	 

&НаСервере
Процедура ЗаполнитьТабличныйДокумент()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	тДеревоBS = Новый ДеревоЗначений;
	тДеревоBS.Колонки.Добавить("Code");
	тДеревоBS.Колонки.Добавить("Name");
	тДеревоBS.Колонки.Добавить("ParentCode");
	тДеревоBS.Колонки.Добавить("Amount",ОписаниеЧисло);    //итоговая колонка для вывода
	тДеревоBS.Колонки.Добавить("BalAmount",ОписаниеЧисло); //итоговая колонка для вывода
	
	тДеревоPL  = Новый ДеревоЗначений;
	тДеревоPL  = тДеревоBS.Скопировать();
	
	тДеревоCFD = Новый ДеревоЗначений;
	тДеревоCFD = тДеревоBS.Скопировать();
	
	
	ФормированиеОтчетаПланФакт.ПреобразоватьВДЗРекурсия(тДеревоBS, Объект.ДанныеBS, "", "Code");
	ФормированиеОтчетаПланФакт.ПреобразоватьВДЗРекурсия(тДеревоPL, Объект.ДанныеPL, "", "Code");
	ФормированиеОтчетаПланФакт.ПреобразоватьВДЗРекурсия(тДеревоCFD,Объект.ДанныеCFD, "", "Code");
	
	ПересчитатьВсеДерево(тДеревоBS.Строки);
	ПересчитатьВсеДерево(тДеревоPL.Строки);
	ПересчитатьВсеДерево(тДеревоCFD.Строки);
	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоBS.Строки,"BS1.");
	СуммаАктивы = 0;
	если СтрокаДерева<>Неопределено тогда
		СуммаАктивы 	= СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоBS.Строки,"BS2.");
	СуммаОб  = 0;
	если СтрокаДерева<>Неопределено тогда
		СуммаОб 	= СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоBS.Строки,"BS3.");
	СуммаКап  = 0;
	если СтрокаДерева<>Неопределено тогда
		СуммаКап 	= СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоBS.Строки,"BS4.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.Amount = СуммаАктивы + СуммаОб + СуммаКап;
	КонецЕсли;	
	
	СуммаДДС  = 0;
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFD.Строки,"CFD1.");
	если СтрокаДерева<>Неопределено тогда
		СуммаДДС 	= СуммаДДС+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFD.Строки,"CFD2.");
	если СтрокаДерева<>Неопределено тогда
		СуммаДДС 	= СуммаДДС+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFD.Строки,"CFD3.");
	если СтрокаДерева<>Неопределено тогда
		СуммаДДС 	= СуммаДДС+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFD.Строки,"CFD6.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.Amount	= СуммаДДС;
	КонецЕсли;	
	
	СуммаPL31 	= 0;
	
	СуммаPL32 	= 0;
	
	СуммаPL33 	= 0;
	
	СуммаPL6 	= 0;
	СуммаPL12 	= 0;
		
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL1.1.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL31		= СуммаPL31		+ СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL2.1.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL31		= СуммаPL31		+ СтрокаДерева.Amount;
	КонецЕсли;	
	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL1.2.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL32		= СуммаPL32		+ СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL2.2.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL32		= СуммаPL32		+ СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL1.3.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL33		= СуммаPL33		+ СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL2.3.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL33		= СуммаPL33		+ СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL3.1.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.Amount 	= СуммаPL31;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL3.2.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.Amount 	= СуммаPL32;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL3.3.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.Amount 	= СуммаPL33;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL3.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.Amount 	= СуммаPL31+СуммаPL32+СуммаPL33;
		
		СуммаPL6	= СуммаPL6+СтрокаДерева.Amount;
	КонецЕсли;	
		
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL4.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL6	= СуммаPL6+СтрокаДерева.Amount;
	КонецЕсли;	
		
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL5.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL6 	= СуммаPL6+СтрокаДерева.Amount;
	КонецЕсли;	
		
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL6.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.Amount 	= СуммаPL6;
		
		СуммаPL12 	 = СуммаPL12+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL7.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 = СуммаPL12+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL8.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 = СуммаPL12+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL9.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 = СуммаPL12+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL10.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 = СуммаPL12+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL11.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 = СуммаPL12+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL12.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.Amount	= СуммаPL12;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL13.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL13 	= СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = ПолучениеОтчетов.НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL16.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.Amount 	= СуммаPL12+СуммаPL13;
	КонецЕсли;	
	
	//ЗначениеВРеквизитФормы(тДеревоBS, "ДеревоBS");
	//ЗначениеВРеквизитФормы(тДеревоPL, "ДеревоPL");
	//ЗначениеВРеквизитФормы(тДеревоCFD, "ДеревоCFD");
	
	Печать("Баланс",тДеревоBS,ТабличныйДокументBS);
	Печать("Бюджет доходов и расходов",тДеревоPL,ТабличныйДокументPL);
	Печать("Бюджет движения денежных средств - Прямой",тДеревоCFD,ТабличныйДокументCFD);
	
	
КонецПроцедуры	

&НаСервере
Процедура ПересчитатьВсеДерево(дз_стр) экспорт
	
Для Каждого СтрокаДерева Из дз_стр Цикл

        // Если мы в строке, у неё нет итогов, пропустим
        Если СтрокаДерева.Строки.Количество() = 0 Тогда
            Продолжить;
        КонецЕсли;

        ПересчитатьВсеДерево(СтрокаДерева.Строки);

        // Для текущей записи вычислим сумму строк колонки
		Попытка
			СтрокаДерева.AmountTotal 		= СтрокаДерева.Строки.Итог("AmountTotal");
			СтрокаДерева.AmountTotalBuh 	= СтрокаДерева.Строки.Итог("AmountTotalBuh");
		Исключение
		КонецПопытки;

		Попытка
			СтрокаДерева.Amount 		= СтрокаДерева.Строки.Итог("Amount");
		Исключение
		КонецПопытки;
    КонецЦикла;	
	
Конецпроцедуры


 &НаСервере
Процедура Печать(ВидОтчета,ДанныеДерева,ТабДок)
	
	Макет = Документы.ФактическиеДанные.ПолучитьМакет("Макет");
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.ВидОтчета = ВидОтчета;
	Шапка.Параметры.Период = "За период с "+Формат(Объект.Дата1,"ДЛФ=DD")+" по "+Формат(КонецДня(Объект.Дата2),"ДЛФ=DD");
	Шапка.Параметры.Организация = Объект.Организация;
	
	ТабДок.Очистить();
	
	ТабДок.Вывести(Шапка);
	ТабДок.НачатьАвтогруппировкуСтрок();
	ПечатьДерева(ТабДок,Макет,ДанныеДерева,);
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры	

&НаСервере
Процедура ПечатьДерева(ТабДок,Макет,СтрокаДерева,Уровень = 0)
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		Если стр.Строки.Количество() >0 Тогда
			ОблСтрока 		= Макет.ПолучитьОбласть("Строка1");
		Иначе
			ОблСтрока 		= Макет.ПолучитьОбласть("Строка");
		КонецЕсли;	
		отступ = "";
		Для н = 1 По Уровень Цикл   
			отступ = отступ + "  ";
		КонецЦикла;
		ОблСтрока.Параметры.Заполнить(стр);
		ОблСтрока.Параметры.Code = отступ+стр.Code;
		ТабДок.Вывести(ОблСтрока,Уровень+1);
		Если стр.Строки.Количество() >0 Тогда
			ПечатьДерева(ТабДок,Макет,стр,Уровень+1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////////////////////
Процедура УправлениеФормой()
	ТекСтатус = Объект.Статус = Перечисления.СтатусДокумента.Утвержден;
	ЭтаФорма.ТолькоПросмотр = ТекСтатус;  
КонецПроцедуры	

 

#Область KPIНаСервере  

&НаСервере
Процедура ПриСозданииНаСервереKPI(Отказ, СтандартнаяОбработка) 
	Форма = ЭтаФорма;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеПоказателиДеятельности.Ссылка КАК КлючевойПоказатель,
		|	КлючевыеПоказателиДеятельности.Наименование КАК Наименование,
		|	КлючевыеПоказателиДеятельности.КодСправочника КАК Код
		|ИЗ
		|	Справочник.КлючевыеПоказателиДеятельности КАК КлючевыеПоказателиДеятельности
		|ГДЕ
		|	КлючевыеПоказателиДеятельности.Родитель = ЗНАЧЕНИЕ(Справочник.КлючевыеПоказателиДеятельности.ПустаяССылка)
		|	И НЕ КлючевыеПоказателиДеятельности.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	КлючевыеПоказателиДеятельности.Ссылка,
		|	КлючевыеПоказателиДеятельности.Наименование,
		|	КлючевыеПоказателиДеятельности.КодСправочника
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Выборка = Справочники.КлючевыеПоказателиДеятельности.Выбрать(ВыборкаДетальныеЗаписи.КлючевойПоказатель);
		Если Не Выборка.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы 			= Форма.ТаблицаСтраницKPI.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,ВыборкаДетальныеЗаписи);
		
		Позиция 				= Найти(ВыборкаДетальныеЗаписи.Код,".");
		СтрокаТаблицы.ИмяГруппы = СокрЛП(Лев(ВыборкаДетальныеЗаписи.Код,Позиция-1))+"v2";
		
	КонецЦикла; 
	
	Если  НЕ Форма.ТаблицаСтраницKPI.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаСтраницKPI Цикл  
		
			НовыйЭлементГруппа 				= Форма.Элементы.Добавить("ГруппаДляОтбора"+СтрокаТаблицы.ИмяГруппы,Тип("ГруппаФормы"),Форма.Элементы.СтраницыГруппыKPI);
			НовыйЭлементГруппа.Вид 			= ВидГруппыФормы.Страница;
			НовыйЭлементГруппа.Заголовок 	= СтрокаТаблицы.Наименование;
	
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаСтраницKPI Цикл  
		
		Реквизиты = Новый Массив;
		Дерево = Новый РеквизитФормы("Дерево" + СтрокаТаблицы.ИмяГруппы,Новый ОписаниеТипов("ДеревоЗначений"));
		Реквизиты.Добавить(Дерево);
		
		РеквизитКод = Новый РеквизитФормы("Код",Новый ОписаниеТипов("Строка"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(РеквизитКод);
		
		РеквизитПоказатель = Новый РеквизитФормы("КлючевойПоказатель",Новый ОписаниеТипов("СправочникСсылка.КлючевыеПоказателиДеятельности"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(РеквизитПоказатель);
		
		РеквизитЕдиницаИзмерения = Новый РеквизитФормы("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмеренияKPI"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(РеквизитЕдиницаИзмерения);
		
		СтрокаМесяцев = "Январь,Февраль,Март,Апрель,Май,Июнь,Июль,Август,Сентябрь,Октябрь,Ноябрь,Декабрь";
		МассивМесяцев = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаМесяцев,",");
		
		Для Каждого Месяц Из МассивМесяцев Цикл
			
			Реквизиты.Добавить(Новый РеквизитФормы(Месяц,Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы));
			
		КонецЦикла;
			
		ТекущийГод = Новый РеквизитФормы("ТекущийГод",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ТекущийГод); 
		
		ГодПлюс1 = Новый РеквизитФормы("ГодПлюс1",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ГодПлюс1);
		
		ГодПлюс2 = Новый РеквизитФормы("ГодПлюс2",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ГодПлюс2);
		
		ГодПлюс3 = Новый РеквизитФормы("ГодПлюс3",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ГодПлюс3); 
		
		ГодПлюс4 = Новый РеквизитФормы("ГодПлюс4",Новый ОписаниеТипов("Число"),"Дерево" + СтрокаТаблицы.ИмяГруппы);
		Реквизиты.Добавить(ГодПлюс4);
		
		Форма.ИзменитьРеквизиты(Реквизиты);
		
		
		НовыйЭлемент 							= Форма.Элементы.Добавить("Дерево"+СтрокаТаблицы.ИмяГруппы,Тип("ТаблицаФормы"),Форма.Элементы["ГруппаДляОтбора"+СтрокаТаблицы.ИмяГруппы]);
		НовыйЭлемент.ПутьКДанным 				= "Дерево" + СтрокаТаблицы.ИмяГруппы;
		НовыйЭлемент.ПоложениеКоманднойПанели	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		//НовыйЭлемент.Высота = 20;
		
		НовыйЭлементКод 			= Форма.Элементы.Добавить("Код"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементКод.ПутьКДанным = "Дерево" + СтрокаТаблицы.ИмяГруппы +".Код";
		НовыйЭлементКод.Вид 		= ВидПоляФормы.ПолеВвода;
		НовыйЭлементКод.Ширина		= 15;
		//
		НовыйЭлементКлючевойПоказатель 				= Форма.Элементы.Добавить("КлючевойПоказатель"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементКлючевойПоказатель.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".КлючевойПоказатель";
		НовыйЭлементКлючевойПоказатель.Вид 			= ВидПоляФормы.ПолеВвода; 
		
		НовыйЭлементЕдиницаИзмерения 				= Форма.Элементы.Добавить("ЕдиницаИзмерения"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементЕдиницаИзмерения.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ЕдиницаИзмерения";
		НовыйЭлементЕдиницаИзмерения.Вид 			= ВидПоляФормы.ПолеВвода; 
		
		
		Для Каждого Месяц Из МассивМесяцев Цикл
			
			ЭлементМесяц 				= Форма.Элементы.Добавить(Месяц+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
			ЭлементМесяц.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +"."+Месяц;
			ЭлементМесяц.Вид 			= ВидПоляФормы.ПолеВвода; 
			
		КонецЦикла; 
		
		ПериодПланирования 				= Объект.ДатаОтчета;
		
		НовыйЭлементГТекущийГод 			= Форма.Элементы.Добавить("ТекущийГод"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГТекущийГод.ПутьКДанным = "Дерево" + СтрокаТаблицы.ИмяГруппы +".ТекущийГод";
		НовыйЭлементГТекущийГод.Вид 		= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГТекущийГод.Заголовок 	= Формат(ПериодПланирования,"ДФ=""гггг"""); 
		
		НовыйЭлементГодПлюс1 				= Форма.Элементы.Добавить("ГодПлюс1"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГодПлюс1.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ГодПлюс1";
		НовыйЭлементГодПлюс1.Вид 			= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГодПлюс1.Заголовок	 	= Формат(ДобавитьМесяц(ПериодПланирования,12),"ДФ=""гггг""");  
		
		
		НовыйЭлементГодПлюс2 				= Форма.Элементы.Добавить("ГодПлюс2"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГодПлюс2.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ГодПлюс2";
		НовыйЭлементГодПлюс2.Вид 			= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГодПлюс2.Заголовок 		= Формат(ДобавитьМесяц(ПериодПланирования,24),"ДФ=""гггг""");  
		
		
		НовыйЭлементГодПлюс3 				= Форма.Элементы.Добавить("ГодПлюс3"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГодПлюс3.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ГодПлюс3";
		НовыйЭлементГодПлюс3.Вид	 		= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГодПлюс3.Заголовок 		= Формат(ДобавитьМесяц(ПериодПланирования,36),"ДФ=""гггг"""); 
		
		НовыйЭлементГодПлюс4 				= Форма.Элементы.Добавить("ГодПлюс4"+СтрокаТаблицы.ИмяГруппы,Тип("ПолеФормы"),НовыйЭлемент);
		НовыйЭлементГодПлюс4.ПутьКДанным 	= "Дерево" + СтрокаТаблицы.ИмяГруппы +".ГодПлюс4";
		НовыйЭлементГодПлюс4.Вид 			= ВидПоляФормы.ПолеВвода; 
		НовыйЭлементГодПлюс4.Заголовок 		= Формат(ДобавитьМесяц(ПериодПланирования,48),"ДФ=""гггг""");  
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	авКлючевыеПоказателиДеятельности.КодСправочника КАК Код,
		|	авКлючевыеПоказателиДеятельности.Ссылка КАК КлючевойПоказатель,
		|	авКлючевыеПоказателиДеятельности.ЕдиницаИзмерения
		|ИЗ
		|	Справочник.КлючевыеПоказателиДеятельности КАК авКлючевыеПоказателиДеятельности
		|ГДЕ
		|	авКлючевыеПоказателиДеятельности.Родитель В ИЕРАРХИИ(&Родитель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	авКлючевыеПоказателиДеятельности.Код ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("Родитель", СтрокаТаблицы.КлючевойПоказатель);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Дерево = Форма.РеквизитФормыВЗначение("Дерево" + СтрокаТаблицы.ИмяГруппы);
		КоличествоСтрок = 0;
		Для Каждого СтрокаРезультата Из РезультатЗапроса.Строки Цикл 
			
			СтрокаДерева 					= Дерево.Строки.Добавить();
			СтрокаДерева.Код 				= СтрокаРезультата.Код;
			СтрокаДерева.КлючевойПоказатель = СтрокаРезультата.КлючевойПоказатель;
			СтрокаДерева.ЕдиницаИзмерения 	= СтрокаРезультата.ЕдиницаИзмерения;
			
			НайденныеСтроки = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("КлючевойПоказатель",СтрокаДерева.КлючевойПоказатель));
			Если НЕ НайденныеСтроки.Количество() Тогда
				СтрокаТЧ 					= Объект.ДанныеКПД.Добавить();
				СтрокаТЧ.Код 				= СтрокаДерева.Код;
				СтрокаТЧ.КлючевойПоказатель = СтрокаДерева.КлючевойПоказатель;
				СтрокаТЧ.ЕдиницаИзмерения 	= СтрокаДерева.ЕдиницаИзмерения;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаДерева,НайденныеСтроки[0]);
			КонецЕсли;
			КоличествоСтрок = КоличествоСтрок +1;
			Если СтрокаРезультата.Строки.Количество() Тогда 
				Для Каждого  ВторойУровеньСтрок Из СтрокаРезультата.Строки Цикл
					
					СтрокаДерева2 					= СтрокаДерева.Строки.Добавить();
					СтрокаДерева2.Код 				= ВторойУровеньСтрок.Код;
					СтрокаДерева2.ЕдиницаИзмерения 	= ВторойУровеньСтрок.ЕдиницаИзмерения; 
					СтрокаДерева2.КлючевойПоказатель= ВторойУровеньСтрок.КлючевойПоказатель; 
					
					НайденныеСтроки = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("КлючевойПоказатель",СтрокаДерева2.КлючевойПоказатель));
					Если НЕ НайденныеСтроки.Количество() Тогда
						СтрокаТЧ 					= Объект.ДанныеКПД.Добавить();
						СтрокаТЧ.Код 				= СтрокаДерева2.Код;
						СтрокаТЧ.КлючевойПоказатель = СтрокаДерева2.КлючевойПоказатель;
						СтрокаТЧ.ЕдиницаИзмерения 	= СтрокаДерева2.ЕдиницаИзмерения;
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаДерева2,НайденныеСтроки[0]);
					КонецЕсли;
					
					КоличествоСтрок = КоличествоСтрок +1;
					Если ВторойУровеньСтрок.Строки.Количество() Тогда 
						Для Каждого ТретийУровеньСтрок Из ВторойУровеньСтрок.Строки Цикл 
							КоличествоСтрок 				= КоличествоСтрок +1;
							СтрокаДерева3 					= СтрокаДерева2.Строки.Добавить();
							СтрокаДерева3.Код 				= ВторойУровеньСтрок.Код;
							СтрокаДерева3.КлючевойПоказатель= ВторойУровеньСтрок.КлючевойПоказатель; 
							СтрокаДерева3.ЕдиницаИзмерения 	= ВторойУровеньСтрок.ЕдиницаИзмерения; 
							
							НайденныеСтроки = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("КлючевойПоказатель",СтрокаДерева3.КлючевойПоказатель));
							Если НЕ НайденныеСтроки.Количество() Тогда
								СтрокаТЧ 					= Объект.ДанныеКПД.Добавить();
								СтрокаТЧ.Код 				= СтрокаДерева3.Код;
								СтрокаТЧ.КлючевойПоказатель = СтрокаДерева3.КлючевойПоказатель;
								СтрокаТЧ.ЕдиницаИзмерения 	= СтрокаДерева3.ЕдиницаИзмерения;
							Иначе
								ЗаполнитьЗначенияСвойств(СтрокаДерева3,НайденныеСтроки[0]);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
					КонецЦикла;	
				КонецЕсли;
			
			
		КонецЦикла;
		
		Форма.Элементы["Дерево"+СтрокаТаблицы.ИмяГруппы].Высота = КоличествоСтрок;
		
		Форма.ЗначениеВРеквизитФормы(Дерево,"Дерево" + СтрокаТаблицы.ИмяГруппы);
		
	КонецЦикла;
КонецПроцедуры  


&НаСервере
Процедура ПередЗаписьюНаСервереKPI(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	
	КлючевыеПоказателиВызовСервера.ПередЗаписьюНаСервереKPI(ЭтаФорма,Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры
 

#КонецОбласти 

#Область KPIНаКлиенте 

&НаКлиенте
Процедура ПриОткрытииKPI(Отказ) 
	ВидОперацииПриИзменении(Неопределено);
	Для Каждого СтрокаТаблицы Из ТаблицаСтраницKPI Цикл 
		РазвернутьДерево(ЭтаФорма["Дерево"+СтрокаТаблицы.ИмяГруппы].ПолучитьЭлементы(),"Дерево"+СтрокаТаблицы.ИмяГруппы);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(КоллекцияЭлементовДерева,ИмяДерева=Неопределено)
	
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл 
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы[ИмяДерева].Развернуть(ИдентификаторСтроки);
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы(); 
		Если ПодчиненныеСтроки.Количество() Тогда
			 РазвернутьДерево(ПодчиненныеСтроки,ИмяДерева);
		КонецЕсли;
		
	КонецЦикла; 	
КонецПроцедуры


&НаСервере
 Процедура ЗагрузитьСтраницуKPI(ТабДок)
	 
	 ОбластьДанных = ТабДок.ПолучитьОбласть("КПД");
	 ТЗДанные = ПреобразоватьТабличныйДокументВТаблицуЗначений(ОбластьДанных,28); 
	 
	 
	 
	 Для КАждого СтрокаТЗ Из ТЗДанные Цикл 
		 Если Прав(СтрокаТЗ.Код,1) = "." Тогда
			 КодПоиска = СтрокаТЗ.Код;
		 Иначе
			 КодПоиска = СтрокаТЗ.Код+".";
		 КонецЕсли;
		 
		 НайденныеСтроки = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("Код",КодПоиска));
		 
		 Если НайденныеСтроки.Количество() Тогда 
			 НайденнаяСтрока = НайденныеСтроки[0];
			 ЗаполнитьЗначенияСвойств(НайденнаяСтрока,СтрокаТЗ,,"Код");
			 НайденнаяСтрока.ЕдиницаИзмерения = НайденнаяСтрока.КлючевойПоказатель.ЕдиницаИзмерения;
			 НайденнаяСтрока.ТекущийГод   =    СтрокаТЗ[ТЗДанные.Колонки.Получить(20).Имя];
			 НайденнаяСтрока.ГодПлюс1   =    СтрокаТЗ[ТЗДанные.Колонки.Получить(21).Имя];
			 НайденнаяСтрока.ГодПлюс2   =    СтрокаТЗ[ТЗДанные.Колонки.Получить(22).Имя];
			 НайденнаяСтрока.ГодПлюс3   =    СтрокаТЗ[ТЗДанные.Колонки.Получить(23).Имя];
			 НайденнаяСтрока.ГодПлюс4   =    СтрокаТЗ[ТЗДанные.Колонки.Получить(24).Имя];
		 КонецЕсли;
		 
		 
	 КонецЦикла;
	 
	 ТабличнаяЧастьВДерево();
	 
	 
 КонецПроцедуры // ЗагрузитьСтраницуKPI()
 
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	 Если Объект.ВидОперации = "KPI" Тогда 
		 Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаKPI;
	 Иначе
		 Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаBS;
	 КонецЕсли;
 КонецПроцедуры

 &НаСервере
 Процедура ТабличнаяЧастьВДерево()
	 
	 Для Каждого СтрокаТаблицы Из ТаблицаСтраницKPI Цикл    
		 Дерево = РеквизитФормыВЗначение("Дерево" + СтрокаТаблицы.ИмяГруппы);
		 Для Каждого СтрокаДерева Из Дерево.Строки Цикл 
			  НайденныеСтроки = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("Код",СтрокаДерева.Код));
			  Если НайденныеСтроки.Количество() Тогда 
				  ЗаполнитьЗначенияСвойств(СтрокаДерева,НайденныеСтроки[0]);
				  Если СтрокаДерева.Строки.Количество() Тогда  
					  Для Каждого СтрокаДерева2 Из СтрокаДерева.Строки Цикл
						  НайденныеСтроки2 = Объект.ДанныеКПД.НайтиСтроки(Новый Структура("Код",СтрокаДерева2.Код));
						  ЗаполнитьЗначенияСвойств(СтрокаДерева2,НайденныеСтроки2[0]);
						  
					  КонецЦикла;
					  
				  КонецЕсли;
			  КонецЕсли;
		 КонецЦикла;
		 ЗначениеВРеквизитФормы(Дерево,"Дерево" + СтрокаТаблицы.ИмяГруппы);
	 КонецЦикла;
	 
	 
 КонецПроцедуры // ТабличнаяЧастьВДерево()
 
#КонецОбласти  

 &НаКлиентеНаСервереБезКонтекста
 Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	 
	 Сообщение = Новый СообщениеПользователю;
	 Сообщение.Текст = Текст;
	 Сообщение.ПутьКДанным = ПутьКДанным;
	 Сообщение.Сообщить();
	 
 КонецПроцедуры

&НаСервере
Функция ПреобразоватьТабличныйДокументВТаблицуЗначений(ТабДокумент,ПерваяСтрока)
	
	ПоследняяСтрока = ТабДокумент.ВысотаТаблицы;
	
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	
	ОбластьЯчеек = ТабДокумент.Область(ПерваяСтрока, 1, ПоследняяСтрока, ПоследняяКолонка);
	
	// Создаем описание источника данных на основании области ячеек табличного документа.
	
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	
	// Создаем объект для интеллектуального построения отчетов,
	
	// указываем источник данных и выполняем построение отчета.
	
	ПостроительОтчета = Новый ПостроительОтчета;
	
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	
	ПостроительОтчета.Выполнить();
	
	// Результат выгружаем в таблицу значений.
	
	ТабЗначений = ПостроительОтчета.Результат.Выгрузить();
	
	Возврат ТабЗначений
	
КонецФункции
 
&НаКлиенте
Процедура ПериодПланированияНачисленияСтрокойПриИзменении()
	
	Если Не ЗначениеЗаполнено(Объект.Дата2) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСтраницKPI Цикл  
		
		ЭлментТекущийГод = Элементы.Найти("ТекущийГод"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментТекущийГод  <> Неопределено Тогда  
			ЭлментТекущийГод.Заголовок = Формат(Объект.Дата2,"ДФ=""гггг"""); 
		КонецЕсли;
		ЭлментГодПлюс1 = Элементы.Найти("ГодПлюс1"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс1  <> Неопределено Тогда  
			ЭлментГодПлюс1.Заголовок = Формат(ДобавитьМесяц(Объект.Дата2,12),"ДФ=""гггг"""); 
		КонецЕсли;
		ЭлментГодПлюс2 = Элементы.Найти("ГодПлюс2"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс2  <> Неопределено Тогда  
			ЭлментГодПлюс2.Заголовок = Формат(ДобавитьМесяц(Объект.Дата2,24),"ДФ=""гггг"""); 
		КонецЕсли;
		ЭлментГодПлюс3 = Элементы.Найти("ГодПлюс3"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс3  <> Неопределено Тогда  
			ЭлментГодПлюс3.Заголовок = Формат(ДобавитьМесяц(Объект.Дата2,36),"ДФ=""гггг"""); 
		КонецЕсли;
		ЭлментГодПлюс4 = Элементы.Найти("ГодПлюс4"+СтрокаТаблицы.ИмяГруппы);
		Если ЭлментГодПлюс4  <> Неопределено Тогда  
			ЭлментГодПлюс4.Заголовок = Формат(ДобавитьМесяц(Объект.Дата2,48),"ДФ=""гггг"""); 
		КонецЕсли;
	
	КонецЦикла;
	
 КонецПроцедуры


 Функция ПолучитьПериод(Период)
	Возврат Формат(Период,"ДФ=""ММММ""");	
КонецФункции	

&НаСервере
Функция ПроверитьЭлементыНижнегоУровня(ТекСсылка,ТипСправочника)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+ТипСправочника+" КАК Спр
	|ГДЕ
	|	Спр.Родитель = &Родитель";
	запрос.УстановитьПараметр("Родитель",ТекСсылка);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() тогда
		Возврат	Истина;
	КонецЕсли;	
	Возврат	Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЭталон(ТекДанные,ИмяКолонки,ТипСправочника)
	Если ПроверитьЭлементыНижнегоУровня(ТекДанные[ИмяКолонки],ТипСправочника) Тогда
		Сообщить("У выбранного эталона существуют элементы нижнего уровня. Необходимо выбирать элементы нижнего уровня. Поле очищено");
		ТекДанные[ИмяКолонки] = "";
	Конецесли;	
КонецПроцедуры	

Процедура ПересчетИтоговДерева(НаимДерева)
	НаимКолонки = "Значение_"; 
	Дерево = РеквизитФормыВЗначение(НаимДерева);
	Для каждого Кол Из Дерево.Колонки Цикл
		
		Ном = 1;
		НайденноеИмяЗначение 	= Найти(Кол.Имя,НаимКолонки);
		НайденноеИмяСальдо 		= Найти(Кол.Имя,"СальдоНаНачало");
		Если НайденноеИмяЗначение>0 или НайденноеИмяСальдо>0 Тогда
			ИтСумма = 0;
			Для Каждого стр из Дерево.Строки Цикл
				ИтСумма = ИтСумма + стр[Кол.Имя];
			КонецЦикла;	
			Элементы[НаимДерева+Кол.Имя].ТекстПодвала = ИтСумма;
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПечатьKPIНаСервере(ТабДок,ИмяТЧ,ВидОтчета)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	авКлючевыеПоказателиДеятельности.Ссылка КАК Ссылка,
	               |	авКлючевыеПоказателиДеятельности.Родитель КАК Родитель,
	               |	авКлючевыеПоказателиДеятельности.Код КАК Код,
	               |	авКлючевыеПоказателиДеятельности.КодСправочника КАК КодСправочника,
	               |	авКлючевыеПоказателиДеятельности.ЕдиницаИзмерения
	               |ИЗ
	               |	Справочник.КлючевыеПоказателиДеятельности КАК авКлючевыеПоказателиДеятельности
	               |ГДЕ
	               |	авКлючевыеПоказателиДеятельности.Организация = &Организация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	авКлючевыеПоказателиДеятельности.Код ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Код",ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("Статья",Новый ОписаниеТипов("СправочникСсылка.КлючевыеПоказателиДеятельности"));
	ДеревоЗн.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмеренияKPI"));
	ДеревоЗн.Колонки.Добавить("Январь",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Февраль",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Март",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Апрель",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Май",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Июнь",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Июль",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Август",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Сентябрь",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Октябрь",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Ноябрь",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("Декабрь",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ТекущийГод",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ГодПлюс1",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ГодПлюс2",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ГодПлюс3",ОписаниеЧисло);
	ДеревоЗн.Колонки.Добавить("ГодПлюс4",ОписаниеЧисло);
	
	
	ТЗ = Объект.ДанныеКПД.Выгрузить();
	//ТЗ.Свернуть("Код,КлючевойПоказатель,ЕдиницаИзмерения");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ТекЭлемент					= ДеревоЗн.Строки.Добавить();
			ТекЭлемент.Статья			= Выборка.Ссылка;
			ТекЭлемент.Код				= Выборка.КодСправочника;
			ТекЭлемент.ЕдиницаИзмерения	= Выборка.ЕдиницаИзмерения;
		Иначе
			Пока ТекЭлемент.Статья<>Выборка.Родитель Цикл
				ТекЭлемент=ТекЭлемент.Родитель;
			КонецЦикла;
			ТекЭлемент					= ТекЭлемент.Строки.Добавить();
			ТекЭлемент.Статья			= Выборка.Ссылка;
			ТекЭлемент.Код				= Выборка.КодСправочника;
			ТекЭлемент.ЕдиницаИзмерения	= Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		
		НайденныеСтроки  = ТЗ.НайтиСтроки(Новый Структура("КлючевойПоказатель",ТекЭлемент.Статья));
		если НайденныеСтроки.Количество()>0 тогда
			ТекЭлемент.Январь	= НайденныеСтроки[0].Январь;
			ТекЭлемент.Февраль	= НайденныеСтроки[0].Февраль;
			ТекЭлемент.Март		= НайденныеСтроки[0].Март;
			ТекЭлемент.Апрель	= НайденныеСтроки[0].Апрель;
			ТекЭлемент.Май		= НайденныеСтроки[0].Май;
			ТекЭлемент.Июнь		= НайденныеСтроки[0].Июнь;
			ТекЭлемент.Июль		= НайденныеСтроки[0].Июль;
			ТекЭлемент.Август	= НайденныеСтроки[0].Август;
			ТекЭлемент.Сентябрь	= НайденныеСтроки[0].Сентябрь;
			ТекЭлемент.Октябрь	= НайденныеСтроки[0].Октябрь;
			ТекЭлемент.Ноябрь	= НайденныеСтроки[0].Ноябрь;
			ТекЭлемент.Декабрь	= НайденныеСтроки[0].Декабрь;
			ТекЭлемент.ТекущийГод= НайденныеСтроки[0].ТекущийГод;
			ТекЭлемент.ГодПлюс1	= НайденныеСтроки[0].ГодПлюс1;
			ТекЭлемент.ГодПлюс2	= НайденныеСтроки[0].ГодПлюс2;
			ТекЭлемент.ГодПлюс3	= НайденныеСтроки[0].ГодПлюс3;
			ТекЭлемент.ГодПлюс4	= НайденныеСтроки[0].ГодПлюс4;
		КонецЕсли;
		
	КонецЦикла;	
	
	Макет = Документы.ПлановыеДанныеOLD.ПолучитьМакет("KPI");
	ШапкаН = Макет.ПолучитьОбласть("Шапка");
	ШапкаН.Параметры.Период 		= Формат(Объект.Дата1,"ДЛФ=DD")+" - "+Формат(КонецДня(Объект.Дата2),"ДЛФ=DD");
	ШапкаН.Параметры.Организация 	= Объект.Организация;
	ШапкаН.Параметры.ВидОтчета 		= ВидОтчета;
	ШапкаН.Параметры.Версия 		= Объект.Версия;
	
	ШапкаН.Параметры.ТекущийГод	 	= Формат(Объект.Дата1,"ДФ=""гггг""");
	ШапкаН.Параметры.ГодПлюс1		= Формат(ДобавитьМесяц(Объект.Дата1,12),"ДФ=""гггг""");	
	ШапкаН.Параметры.ГодПлюс2		= Формат(ДобавитьМесяц(Объект.Дата1,24),"ДФ=""гггг""");
	ШапкаН.Параметры.ГодПлюс3	    = Формат(ДобавитьМесяц(Объект.Дата1,36),"ДФ=""гггг""");
	ШапкаН.Параметры.ГодПлюс4       = Формат(ДобавитьМесяц(Объект.Дата1,48),"ДФ=""гггг""");
	
	ТабДок.Очистить();
	
	//выводим шапку
	
	ТабДок.Вывести(ШапкаН);
	
	ПечатьДереваKPI(ТабДок,Макет,ДеревоЗн,,ДеревоЗн.Колонки);	
	ТабДок.НачатьАвтогруппировкуСтрок();
	ТабДок.ЗакончитьАвтогруппировкуСтрок(); 
	ТабДок.ФиксацияСверху = 9;
	////ТабДок.ФиксацияСлева = 2;
	
КонецПроцедуры

Процедура ПечатьДереваKPI(ТабДок,Макет,СтрокаДерева,Уровень = 0,Колонки)
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		НаимОблСтрока 		= "Строка";
		
		отступ = "";
		Для н = 1 По Уровень Цикл   
			отступ = отступ + "  ";
		КонецЦикла;
		
		Если стр.Строки.Количество() >0 Тогда
			СтрокаН 		= Макет.ПолучитьОбласть("СтрокаРодитель");
		Иначе
			СтрокаН 		= Макет.ПолучитьОбласть("Строка");
		КонецЕсли;	
		
		//СтрокаН = Макет.ПолучитьОбласть(НаимОблСтрока);
		СтрокаН.Параметры.Заполнить(стр);
		СтрокаН.Параметры.КодСправочника 	= отступ+стр.Код;
		СтрокаН.Параметры.Статья			= отступ+стр.Статья;   
		
		ТабДок.Вывести(СтрокаН,Уровень+1);
		
		Если стр.Строки.Количество() >0 Тогда
			ПечатьДереваKPI(ТабДок,Макет,стр,Уровень+1,Колонки);
		КонецЕсли;
	КонецЦикла;	  
	
КонецПроцедуры

//++ 23.07.2025 Кибернетика Корыткин Заполнение отчетности
&НаСервере
Процедура ЗаполнитьОтчетыНаСервере()
	
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусСверкиОтчетов.ДатаОтчета КАК ДатаОтчета,
	|	СтатусСверкиОтчетов.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусСверкиОтчетов КАК СтатусСверкиОтчетов
	|ГДЕ
	|	СтатусСверкиОтчетов.ДатаОтчета = &ДатаОтчета";
	Запрос.УстановитьПараметр("ДатаОтчета",Объект.ДатаОтчета);
	Рез = Запрос.Выполнить().Выбрать();
	Рез.Следующий();
	Если Рез.Количество() = 0 Тогда
		Сообщить("Отчеты за данный период не сверены "+Формат(Объект.ДатаОтчета, "ДЛФ=Д")+". Необходимо провести сверку отчетности");
		Возврат;
	КонецЕсли;	
	
	Объект.ДанныеBS.Очистить();
	Объект.ДанныеPL.Очистить();
	Объект.ДанныеCFD.Очистить();
	
	ТЗДанныеCFD = Объект.ДанныеCFD.Выгрузить();

	База = УправлениеБазамиСервер.ПолучитьБазуПоОрганизации(Объект.Организация);

	ТЗ = ПолучениеОтчетов.СформироватьОтчет(Объект.Дата1, Объект.Дата2, Строка(База), "", 1);	
	Для Каждого Стр из ТЗ Цикл
		НовСтр = Объект.ДанныеBS.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.Amount = Окр((Стр.Amount + Стр.BalAmount)/1000,0);
		НовСтр.BalAmount = Окр((Стр.BalAmount)/1000,0);
	КонецЦикла;	
	
	ТЗ = ПолучениеОтчетов.СформироватьОтчет(Объект.Дата1, Объект.Дата2, Строка(База), "", 2);
	Для Каждого Стр из ТЗ Цикл
		НовСтр = Объект.ДанныеPL.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.Amount = Окр(НовСтр.Amount/1000,0);
	КонецЦикла;	
	
	ТЗ = ПолучениеОтчетов.СформироватьОтчет(Объект.Дата1, Объект.Дата2, Строка(База), "", 3);
	Для Каждого Стр из ТЗ Цикл
		НовСтр = Объект.ДанныеCFD.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.Amount = Окр(НовСтр.Amount/1000,0);
	КонецЦикла;
	
	ЗаполнитьТабличныйДокумент();

КонецПроцедуры
//-- 23.07.2025

&НаСервере
Процедура УстановитьВидимость()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазыОрганизации.Ссылка.Локальная КАК Локальная,
		|	БазыОрганизации.Ссылка.МаппингВЦентре КАК МаппингВЦентре
		|ИЗ
		|	Справочник.Базы.Организации КАК БазыОрганизации
		|ГДЕ
		|	БазыОрганизации.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи  
		Если ВыборкаДетальныеЗаписи.Локальная ИЛИ ВыборкаДетальныеЗаписи.МаппингВЦентре Тогда
			Элементы.ЗаполнитьОтчеты.Видимость = Истина;  
			Элементы.КомандаЗакрытьПериод.Видимость = Истина;  
			Элементы.СнятьУтверждение.Видимость = 	Объект.Статус = Перечисления.СтатусДокумента.Утвержден;
		Иначе
			Элементы.ЗаполнитьОтчеты.Видимость = Ложь;  
			Элементы.КомандаЗакрытьПериод.Видимость = Ложь;
			Элементы.СнятьУтверждение.Видимость = Ложь;		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


 &НаСервере
 Функция ПроверитьДатаЗакрытия()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФактическиеДанные.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ФактическиеДанные КАК ФактическиеДанные
	               |ГДЕ
	               |	ФактическиеДанные.Ссылка <> &Ссылка
	               |	И ФактическиеДанные.ДатаОтчета = &ДатаОтчета
	               |	И НЕ ФактическиеДанные.ПометкаУдаления"; 
	
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаОтчета",Объект.ДатаОтчета);
	Рез = Запрос.Выполнить().Выбрать();
	Рез.Следующий();
	Если Рез.Количество() <> 0 Тогда
		Сообщить("Для даты закрытия "+Формат(Объект.ДатаОтчета, "ДЛФ=Д")+" уже существует документ");
		Возврат Ложь;
	КонецЕсли;	
	возврат Истина;	
КонецФункции

&НаСервере
Функция КомандаЗакрытьПериодНаСервере()
	
	База = УправлениеБазамиСервер.ПолучитьБазуПоОрганизации(Объект.Организация);	
	
	ТекущаяДатаЗакрытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ДатаЗакрытияПериода", Истина);
	
	Если ТекущаяДатаЗакрытия > Объект.ДатаОтчета тогда
		Возврат "Установка даты не удалась. Дата закрытия " + Строка(Объект.ДатаОтчета)+" меньше установленной даты: " + Строка(ТекущаяДатаЗакрытия);
	КонецЕсли;
		
	НачатьТранзакцию();
	Об = Объект.Организация.ПолучитьОбъект();
	Об.ДатаЗакрытияПериода = Объект.ДатаОтчета;
	Об.Записать();
				
	ДатаЗакрытия = КонецДня(Объект.ДатаОтчета) + 1;
	НаборЗаписей = РегистрыСведений.ЗакрытыйПериодВыгрузки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.База.Установить(База);
	НовЗапись 						= НаборЗаписей.Добавить();
	НовЗапись.База 					= База;
	НовЗапись.Период  				= ТекущаяДатаСеанса();
	НовЗапись.ДатаЗакрытогоПериода = ДатаЗакрытия;
	НовЗапись.ВидЗакрытогоПериода	= Перечисления.ВидыЗакрытогоПериода.ЗакрытиеПериода;
	
	НаборЗаписей.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции  

#КонецОбласти

