Процедура ОтправитьУведомления(ДанныеРассылки, УчетнаяЗапись = Неопределено) Экспорт
	
	Если УчетнаяЗапись = Неопределено Тогда
		ПочтаОтправителя = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("Системная учетная запись");
	КонецЕсли;

	
	Для каждого СтрокаРассылки из ДанныеРассылки Цикл
		
		Если НЕ СтрокаРассылки.Отправлять Тогда Продолжить; КонецЕсли;
		
		АдресаКоторымОтправляемПисьма = СтрокаРассылки.АдресЭлектроннойПочты;
		
				
		Если АдресаКоторымОтправляемПисьма = "" Тогда
			//Сообщить("Не введено ни одного адреса для отправки");
			Возврат;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ПочтаОтправителя) Тогда
			//Сообщить("Не заполнено почта отправителя");
			Возврат;
		КонецЕсли;   
		Если СтрокаРассылки.ТекстПисьма = "" Тогда
			ТекстПисьма =  "<html><body><h1>" + СтрокаРассылки.Событие + "</h1>
			|<p>База: "+ СтрокаРассылки.База +"<br>
			|Дата: " + СтрокаРассылки.Период + "<br>
			|" + ?(СтрокаРассылки.ЕстьОшибки, ", Выполнено с ошибками!", "Выполнено успешно"); 
			
			ТекстПисьма = ТекстПисьма + "</body></html>";  
        Иначе ТекстПисьма = СтрокаРассылки.ТекстПисьма;
		КонецЕсли;
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", АдресаКоторымОтправляемПисьма);
		ПараметрыПисьма.Вставить("УчетнаяЗапись", ПочтаОтправителя);                                                               
		ПараметрыПисьма.Вставить("АдресОтвета", АдресаКоторымОтправляемПисьма);
		ПараметрыПисьма.Вставить("Тема", "Событие: "+СтрокаРассылки.Событие +", База: "+СтрокаРассылки.База+?(СтрокаРассылки.ЕстьОшибки, ", ЕСТЬ ОШИБКИ!", ""));	
		ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
		ПараметрыПисьма.Вставить("ТипТекста", "HTML");
		
		
		
		Попытка	
			РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(ПочтаОтправителя, ПараметрыПисьма);  
			Уведомление = РегистрыСведений.УведомленияОСобытияхБаз.СоздатьМенеджерЗаписи();
			Уведомление.GUID = СтрокаРассылки.GUID; 
			Уведомление.Событие = СтрокаРассылки.Событие; 
			Уведомление.База = СтрокаРассылки.База; 
			Уведомление.Период = Строкарассылки.Период;
			Уведомление.Прочитать(); 
			Если Уведомление.Выбран() Тогда
				Уведомление.Отправлено = Истина;
				Уведомление.ДатаОтправки = ТекущаяДатаСеанса();  
				Уведомление.Записать(Истина);
			КонецЕсли;  
		
		Исключение	
			Сообщить("Не удалось отправить письма по причине " + ОписаниеОшибки());
		КонецПопытки;
        	
		
	КонецЦикла
	
КонецПроцедуры

Функция ВыполнитьРассылкуРезультатовКонтроля(дзДанные, ДанныеРассылки, УчетнаяЗапись = Неопределено) Экспорт 
	
	СтруктураВозврата = Новый Структура("СтатусВозврата, ОписаниеОшибки", "", Новый Структура);
	
	Если УчетнаяЗапись = Неопределено Тогда 
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	
	Для Каждого СтрокаАдреса Из ДанныеРассылки Цикл
		
		СтрокиПисьма = Новый Массив(); 
		СтрокиПисьма.Добавить("<html><body><h1>Список ошибочных событий загрузки данных в SQL:</h1>");   
		СтрокиСобытий = "";
		
		Для Каждого СтрокаБаза Из дзДанные Цикл 
			
			//++ 15.07.2025 Кибернетика Корыткин добавлен фильтр на успешную загрузку
			Если Не ЗначениеЗаполнено(СтрокаБаза.ДатаУспешнойЗагрузки) Тогда
				СтрокиСобытий = СтрокиСобытий + "<p>• ИБ " + СтрокаБаза.База +
				?(СтрокаБаза.ЕстьОшибки, ": загрузка прошла с ошибками", ": загрузка не производилась") + "</p>";
			КонецЕсли;
			//-- 15.07.2025 
			
		КонецЦикла; 
		
		СтрокиПисьма.Добавить(СтрокиСобытий);
		
		СтрокиПисьма.Добавить("</body></html>"); 
					
		Попытка
			ПараметрыОтправки = Новый Структура;
			ПараметрыОтправки.Вставить("Кому", СокрЛП(СтрокаАдреса.EMail));
			ПараметрыОтправки.Вставить("Тема", "Загрузка данных в SQL (данные контроля статистики)");
			ПараметрыОтправки.Вставить("Тело", СтрСоединить(СтрокиПисьма, Символы.ПС)); 
			ПараметрыОтправки.Вставить("ТипТекста", "HTML");	
			РаботаСПочтовымиСообщениямиСлужебный.ОтправитьСообщение(УчетнаяЗапись, ПараметрыОтправки);
		Исключение   
			СтруктураВозврата.СтатусВозврата = "Ошибка";
			СтруктураВозврата.ОписаниеОшибки.Вставить(СтрокаБаза.База, ОписаниеОшибки());
			Прервать;
		КонецПопытки;
				
	КонецЦикла; 
	
	Возврат СтруктураВозврата;
		
КонецФункции  

Функция ВыполнитьРассылкуУведомленийСверкиОСВ(ДеревоСверки) Экспорт
	
	СтруктураВозврата = Новый Структура("СтатусВозврата, ОписаниеОшибки", "", Новый Структура);
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	ТекстУведомления = "";
	
	Для Каждого СтрокадзБаза Из ДеревоСверки.Строки Цикл        
		
		ТекстШапки = "<p> База " + СтрокадзБаза.База;
		ТекстОшибок = "";
		
		Для Каждого СтрокадзПериод Из СтрокадзБаза.Строки Цикл
			
			
			Если СтрокадзПериод.ЕстьОшибки Тогда
				
				ТекстОшибок = ТекстОшибок + "<br>Имеются расхождения по ОСВ за период с " + СтрокадзПериод.ПериодНачало
				+ " по " + СтрокадзПериод.ПериодОкончание;
				
			КонецЕсли;
			
			
		КонецЦикла;       
		
		Если ТекстОшибок <> "" Тогда
			
			ТекстУведомления = ТекстУведомления + ТекстШапки + ТекстОшибок + "</p>";
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Если ТекстУведомления <> "" Тогда
		Адреса = ПолучитьСписокПолучателейРассылкиПоТипу(Перечисления.ТипыУведомлений.УведомленияАдминистраторам);
		
		Для каждого СтрокаАдреса из Адреса Цикл
			СтрокиПисьма = Новый Массив(); 
			СтрокиПисьма.Добавить("<html><body><h1>Список ошибочных событий сверки данных:</h1>");   
			СтрокиСобытий = "";
				
			СтрокиПисьма.Добавить(ТекстУведомления);
				
			СтрокиПисьма.Добавить("</body></html>"); 
							
			Попытка
				ПараметрыОтправки = Новый Структура;
				ПараметрыОтправки.Вставить("Кому", СокрЛП(СтрокаАдреса.EMail));
				ПараметрыОтправки.Вставить("Тема", "Сверка ОСВ");
				ПараметрыОтправки.Вставить("Тело", СтрСоединить(СтрокиПисьма, Символы.ПС)); 
				ПараметрыОтправки.Вставить("ТипТекста", "HTML");	
				РаботаСПочтовымиСообщениямиСлужебный.ОтправитьСообщение(УчетнаяЗапись, ПараметрыОтправки);
			Исключение   
				СтруктураВозврата.СтатусВозврата = "Ошибка";
				СтруктураВозврата.ОписаниеОшибки.Вставить("ОписаниеОшибки", ОписаниеОшибки());
				
			КонецПопытки; 
		КонецЦикла;
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
	
КонецФункции
	
Функция ПолучитьСписокПолучателейРассылкиПоТипу(ТипУведомления) Экспорт 

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПолучателиРассылки.АдресОтправки КАК EMail
	                      |ИЗ
	                      |	РегистрСведений.ПолучателиРассылки КАК ПолучателиРассылки
	                      |ГДЕ
	                      |	ПолучателиРассылки.ТипУведомления = &ТипУведомления
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПолучателиРассылки.АдресОтправки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПолучателиРассылки.АдресОтправки
	                      |АВТОУПОРЯДОЧИВАНИЕ"); 
	Запрос.УстановитьПараметр("ТипУведомления", ТипУведомления);
	
	возврат Запрос.Выполнить().Выгрузить();

КонецФункции
	
	
