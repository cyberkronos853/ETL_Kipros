#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем Ошибки, Соединение, Команда;
Перем ТаймаутСоединения, ТаймаутКоманды;
#КонецОбласти	

#Область ПрограммныйИнтерфейс

// Возвращает массив ошибок, накопленный с момента последнего вызова
// Накопленные ошибки очищаются при каждом вызове функции
// Возвращаемое значение:
// Возвращаемое значение:
//   - Массив - Накопленные ошибки
//
Функция ПолучитьОшибки() Экспорт
	
	ВозвращаемыеОшибки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Ошибки);
	Ошибки.Очистить();
	
	Возврат ВозвращаемыеОшибки;

КонецФункции

// Выполняет произвольный SQL-запрос с параметрами
//
// Параметры:
//   ТекстЗапроса - Строка - Текст SQL запроса с плейсхолдерами (?)
//   ПараметрыЗапроса - Массив - Значения параметров запроса
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Массив - Результат выполнения запроса
//
Функция ВыполнитьПроизвольныйЗапрос(ТекстЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Ошибки.Добавить("Текст запроса не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Команда.CommandText = ТекстЗапроса;
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Prepared = Истина;
		
		СформироватьПараметрыЗапроса(ПараметрыЗапроса);
		
		НаборЗаписей = Команда.Execute();
		
		Пока НЕ НаборЗаписей.EOF Цикл
			Запись = Новый Структура;
			Для Каждого Поле Из НаборЗаписей.Fields Цикл
				Запись.Вставить(Поле.Name, Поле.Value);
			КонецЦикла;
			Результат.Добавить(Запись);
			НаборЗаписей.MoveNext();
		КонецЦикла;
		
		НаборЗаписей.Close();
		
		Возврат СоздатьРезультатОперации(Ложь, Результат);
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут выполнения запроса (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Выполняет произвольный SQL-запрос с параметрами
//
// Параметры:
//   ТекстЗапроса - Строка - Текст SQL запроса с плейсхолдерами (?)
//   ПараметрыЗапроса - Массив - Значения параметров запроса
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Массив - Результат выполнения запроса
//
Функция ВыполнитьПроизвольныйDMLЗапрос(ТекстЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Ошибки.Добавить("Текст запроса не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Команда.CommandText = ТекстЗапроса;
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Prepared = Истина;
		
		СформироватьПараметрыЗапроса(ПараметрыЗапроса);
		
		Команда.Execute();
				
		Возврат СоздатьРезультатОперации(Ложь, Истина);
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут выполнения запроса (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Конструктор структуры, описывающей параметры подключения к СУБД.
//
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Структура - где:
//       ** Сервер - Строка - IP адрес или имя сервера;
//       ** База - Строка - Наименование базы данных;
//       ** Пользователь - Строка - логин пользователя;
//       ** Пароль - Строка - ;
//       ** ТаймаутСоединения - Число - Таймаут соединения в секунда. По умолчанию 30 секунд;
//       ** ТаймаутКоманды - Число - Таймаут ожидания выполнения команды в секундах. По умолчанию 60 секунд;
//
Функция СформироватьПараметрыСоединения() Экспорт

	ПараметрыСоединения = Новый Структура;
	ПараметрыСоединения.Вставить("Сервер", "");
	ПараметрыСоединения.Вставить("База", "");
	ПараметрыСоединения.Вставить("Пользователь", "");
	ПараметрыСоединения.Вставить("Пароль", "");
	ПараметрыСоединения.Вставить("ТаймаутСоединения", ТаймаутСоединения);
	ПараметрыСоединения.Вставить("ТаймаутКоманды", ТаймаутКоманды);
	
	Возврат ПараметрыСоединения;
	
КонецФункции

// Создает новую базу данных
// Параметры:
//   ИмяБазы - Строка - Имя создаваемой базы данных
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Булево - Успешность выполнения
//
Функция СоздатьБазуДанных(ИмяБазы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяБазы) Тогда
		Ошибки.Добавить("Имя базы данных не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Команда.CommandText = "CREATE DATABASE " + ИмяБазы;
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Execute();
		Возврат СоздатьРезультатОперации(Ложь, Истина);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут создания базы данных (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Удаляет базу данных
// Параметры:
//   ИмяБазы - Строка - Имя удаляемой базы данных
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Булево - Успешность выполнения
//
Функция УдалитьБазуДанных(ИмяБазы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяБазы) Тогда
		Ошибки.Добавить("Имя базы данных не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Команда.CommandText = "DROP DATABASE " + ИмяБазы;
		Команда.CommandTimeout = ТаймаутКоманды;  
		Команда.Execute();
		Возврат СоздатьРезультатОперации(Ложь, Истина);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут удаления базы данных (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Получает схему базы данных
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Массив - Список таблиц базы данных
//
Функция ПолучитьСхемуБазыДанных() Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Каталог = Соединение.OpenSchema(20); // adSchemaTables
		Пока НЕ Каталог.EOF Цикл
			ТипОбъекта = Каталог.Fields("TABLE_TYPE").Value;
			Если ТипОбъекта = "TABLE" Тогда
				Результат.Добавить(Каталог.Fields("TABLE_NAME").Value);
			КонецЕсли;
			Каталог.MoveNext();
		КонецЦикла;
		Каталог.Close();
		Возврат СоздатьРезультатОперации(Ложь, Результат);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут получения схемы базы данных (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Получает схему таблицы
// Параметры:
//   ИмяТаблицы - Строка - Имя таблицы
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Массив - Описание полей таблицы
//
Функция ПолучитьСхемуТаблицы(ИмяТаблицы) Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Ошибки.Добавить("Имя таблицы не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Каталог = Соединение.OpenSchema(4); // adSchemaColumns
		Пока НЕ Каталог.EOF Цикл
			Если Каталог.Fields("TABLE_NAME").Value = ИмяТаблицы Тогда
				Поле = Новый Структура;
				Поле.Вставить("Имя", Каталог.Fields("COLUMN_NAME").Value);
				Поле.Вставить("Тип", Каталог.Fields("DATA_TYPE").Value);
				Поле.Вставить("Размер", Каталог.Fields("CHARACTER_MAXIMUM_LENGTH").Value);
				Поле.Вставить("Обязательное", Каталог.Fields("IS_NULLABLE").Value = "NO");
				Результат.Добавить(Поле);
			КонецЕсли;
			Каталог.MoveNext();
		КонецЦикла;
		Каталог.Close();
		Возврат СоздатьРезультатОперации(Ложь, Результат);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут получения схемы таблицы (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

#Область CRUD
// Создает новую таблицу
// Параметры:
//   ИмяТаблицы - Строка - Имя таблицы
//   Поля - Массив - Описание полей таблицы
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Булево - Успешность выполнения
//
Функция СоздатьТаблицу(ИмяТаблицы, Поля) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Ошибки.Добавить("Имя таблицы не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Поля) Тогда
		Ошибки.Добавить("Список полей не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Для Каждого Поле Из Поля Цикл
		Если НЕ Поле.Свойство("Имя") ИЛИ НЕ Поле.Свойство("Тип") Тогда
			Ошибки.Добавить("Поле должно содержать свойства 'Имя' и 'Тип'");
			Возврат СоздатьРезультатОперации(Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		ТекстПолей = "";
		Для Каждого Поле Из Поля Цикл
			ТекстПолей = ТекстПолей + ?(ТекстПолей = "", "", ", ") + Поле.Имя + " " + Поле.Тип;
			Если Поле.Свойство("Размер") И Поле.Размер > 0 Тогда
				ТекстПолей = ТекстПолей + "(" + Формат(Поле.Размер, "ЧГ=0") + ")";
			КонецЕсли;
			Если Поле.Свойство("Обязательное") И Поле.Обязательное Тогда
				ТекстПолей = ТекстПолей + " NOT NULL";
			КонецЕсли;
		КонецЦикла;
		
		Команда.CommandText = "CREATE TABLE " + ИмяТаблицы + " (" + ТекстПолей + ")";
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Execute();
		Возврат СоздатьРезультатОперации(Ложь, Истина);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут создания таблицы (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Удаляет таблицу
// Параметры:
//   ИмяТаблицы - Строка - Имя таблицы
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Булево - Успешность выполнения
//
Функция УдалитьТаблицу(ИмяТаблицы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Ошибки.Добавить("Имя таблицы не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Команда.CommandText = "DROP TABLE " + ИмяТаблицы;
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Execute();
		Возврат СоздатьРезультатОперации(Ложь, Истина);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут удаления таблицы (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Очищает таблицу
// Параметры:
//   ИмяТаблицы - Строка - Имя таблицы
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Булево - Успешность выполнения
//
Функция ОчиститьТаблицу(ИмяТаблицы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Ошибки.Добавить("Имя таблицы не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Команда.CommandText = "TRUNCATE TABLE " + ИмяТаблицы;
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Execute();
		Возврат СоздатьРезультатОперации(Ложь, Истина);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут очистки таблицы (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Добавляет запись в таблицу
// Параметры:
//   ИмяТаблицы - Строка - Имя таблицы
//   Данные - Структура - Данные для вставки
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Булево - Успешность выполнения
//
Функция ДобавитьЗаписьВТаблицу(ИмяТаблицы, Данные) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Ошибки.Добавить("Имя таблицы не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Ошибки.Добавить("Данные для вставки не могут быть пустыми");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	// Валидация данных
	СхемаТаблицыРезультат = ПолучитьСхемуТаблицы(ИмяТаблицы);
	СхемаТаблицы = ?(СхемаТаблицыРезультат.ЕстьОшибки, Новый Массив, СхемаТаблицыРезультат.Данные);
	
	Если СхемаТаблицы.Количество() = 0 Тогда
		Ошибки.Добавить("Не удалось получить схему таблицы " + ИмяТаблицы);
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ПроверитьДанныеПоСхеме(Данные, СхемаТаблицы) Тогда
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Поля = "";
		Плейсхолдеры = "";
		ПараметрыЗапроса = Новый Массив;
		
		Для Каждого Элемент Из Данные Цикл
			Поля = Поля + ?(Поля = "", "", ", ") + Элемент.Ключ;
			Плейсхолдеры = Плейсхолдеры + ?(Плейсхолдеры = "", "", ", ") + "?";
			ПараметрыЗапроса.Добавить(Элемент.Значение);
		КонецЦикла;
		
		Команда.CommandText = "INSERT INTO " + ИмяТаблицы + " (" + Поля + ") VALUES (" + Плейсхолдеры + ")";
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Prepared = Истина;
		
		СформироватьПараметрыЗапроса(ПараметрыЗапроса);
		
		Команда.Execute();
		Возврат СоздатьРезультатОперации(Ложь, Истина);
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут добавления записи (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Удаляет запись из таблицы
// Параметры:
//   ИмяТаблицы - Строка - Имя таблицы
//   Условие - Структура - Условие удаления (ключ - имя поля, значение - значение условия)
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Булево - Успешность выполнения
//
Функция УдалитьЗаписьИзТаблицы(ИмяТаблицы, Условие) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Ошибки.Добавить("Имя таблицы не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Условие) Тогда
		Ошибки.Добавить("Условие удаления не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	// Валидация условий
	СхемаТаблицыРезультат = ПолучитьСхемуТаблицы(ИмяТаблицы);
	СхемаТаблицы = ?(СхемаТаблицыРезультат.ЕстьОшибки, Новый Массив, СхемаТаблицыРезультат.Данные);
	
	Если СхемаТаблицы.Количество() = 0 Тогда
		Ошибки.Добавить("Не удалось получить схему таблицы " + ИмяТаблицы);
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ПроверитьДанныеПоСхеме(Условие, СхемаТаблицы) Тогда
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		ТекстУсловия = "";
		ПараметрыЗапроса = Новый Массив;
		
		Для Каждого Элемент Из Условие Цикл
			ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = "", "", " AND ") + Элемент.Ключ + " = ?";
			ПараметрыЗапроса.Добавить(Элемент.Значение);
		КонецЦикла;
		
		Команда.CommandText = "DELETE FROM " + ИмяТаблицы + " WHERE " + ТекстУсловия;
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Prepared = Истина;
		
		СформироватьПараметрыЗапроса(ПараметрыЗапроса);
		
		Команда.Execute();
		Возврат СоздатьРезультатОперации(Ложь, Истина);
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут удаления записи (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Получает запись из таблицы
// Параметры:
//   ИмяТаблицы - Строка - Имя таблицы
//   Условие - Структура - Условие выборки (ключ - имя поля, значение - значение условия)
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Структура - Данные записи
//
Функция ПолучитьЗаписьТаблицы(ИмяТаблицы, Условие) Экспорт
	
	Результат = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Ошибки.Добавить("Имя таблицы не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Условие) Тогда
		Ошибки.Добавить("Условие выборки не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	// Валидация условий
	СхемаТаблицыРезультат = ПолучитьСхемуТаблицы(ИмяТаблицы);
	СхемаТаблицы = ?(СхемаТаблицыРезультат.ЕстьОшибки, Новый Массив, СхемаТаблицыРезультат.Данные);
	
	Если СхемаТаблицы.Количество() = 0 Тогда
		Ошибки.Добавить("Не удалось получить схему таблицы " + ИмяТаблицы);
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ПроверитьДанныеПоСхеме(Условие, СхемаТаблицы) Тогда
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		ТекстУсловия = "";
		ПараметрыЗапроса = Новый Массив;
		
		Для Каждого Элемент Из Условие Цикл
			ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = "", "", " AND ") + Элемент.Ключ + " = ?";
			ПараметрыЗапроса.Добавить(Элемент.Значение);
		КонецЦикла;
		
		Команда.CommandText = "SELECT * FROM " + ИмяТаблицы + " WHERE " + ТекстУсловия;
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Prepared = Истина;
		
		СформироватьПараметрыЗапроса(ПараметрыЗапроса);
		
		НаборЗаписей = Команда.Execute();
		
		Если НЕ НаборЗаписей.EOF Тогда
			Для Каждого Поле Из НаборЗаписей.Fields Цикл
				Результат.Вставить(Поле.Name, Поле.Value);
			КонецЦикла;
		КонецЕсли;
		
		НаборЗаписей.Close();
		Возврат СоздатьРезультатОперации(Ложь, Результат);
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут получения записи (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

// Обновляет данные записи в таблице
// Параметры:
//   ИмяТаблицы - Строка - Имя таблицы
//   Данные - Структура - Новые данные
//   Условие - Структура - Условие обновления (ключ - имя поля, значение - значение условия)
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево - Признак наличия ошибок
//     * Данные - Булево - Успешность выполнения
//
Функция ОбновитьДанныеЗаписиВТаблице(ИмяТаблицы, Данные, Условие) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Ошибки.Добавить("Имя таблицы не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Ошибки.Добавить("Данные для обновления не могут быть пустыми");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Условие) Тогда
		Ошибки.Добавить("Условие обновления не может быть пустым");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ СоединениеАктивно() Тогда
		Ошибки.Добавить("Соединение с базой данных не установлено");
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	// Валидация данных и условий
	СхемаТаблицыРезультат = ПолучитьСхемуТаблицы(ИмяТаблицы);
	СхемаТаблицы = ?(СхемаТаблицыРезультат.ЕстьОшибки, Новый Массив, СхемаТаблицыРезультат.Данные);
	
	Если СхемаТаблицы.Количество() = 0 Тогда
		Ошибки.Добавить("Не удалось получить схему таблицы " + ИмяТаблицы);
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ПроверитьДанныеПоСхеме(Данные, СхемаТаблицы) Тогда
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Если НЕ ПроверитьДанныеПоСхеме(Условие, СхемаТаблицы) Тогда
		Возврат СоздатьРезультатОперации(Истина);
	КонецЕсли;
	
	Попытка
		Обновления = "";
		ТекстУсловия = "";
		ПараметрыЗапроса = Новый Массив;
		
		// Формирование SET
		Для Каждого Элемент Из Данные Цикл
			Обновления = Обновления + ?(Обновления = "", "", ", ") + Элемент.Ключ + " = ?";
			ПараметрыЗапроса.Добавить(Элемент.Значение);
		КонецЦикла;
		
		// Формирование WHERE
		Для Каждого Элемент Из Условие Цикл
			ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = "", "", " AND ") + Элемент.Ключ + " = ?";
			ПараметрыЗапроса.Добавить(Элемент.Значение);
		КонецЦикла;
		
		Команда.CommandText = "UPDATE " + ИмяТаблицы + " SET " + Обновления + " WHERE " + ТекстУсловия;
		Команда.CommandTimeout = ТаймаутКоманды;
		Команда.Prepared = Истина;
		
		СформироватьПараметрыЗапроса(ПараметрыЗапроса);
		
		Команда.Execute();
		Возврат СоздатьРезультатОперации(Ложь, Истина);
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут обновления записи (" + ТаймаутКоманды + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Возврат СоздатьРезультатОперации(Истина);
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗакрытьСоединение() Экспорт
	
	Попытка
		Если Соединение <> Неопределено И Соединение.State = 1 Тогда
			Соединение.Close();
		КонецЕсли;
		Соединение = Неопределено;
		Команда = Неопределено;
		ТаймаутСоединения = 0;
		ТаймаутКоманды = 0;
	Исключение
		Ошибки.Добавить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры


// Создает новое соединение с базой данных
// Параметры:
//   ПараметрыСоединения - Структура - Параметры соединения (см. СформироватьПараметрыСоединения)
//
Процедура КонструкторСоединения(ПараметрыСоединения) Экспорт
	
	Попытка
		// Инициализация объектов соединения и команды
		Соединение = Новый COMОбъект("ADODB.Connection");
		Команда = Новый COMОбъект("ADODB.Command");
		
		// Установка таймаутов по умолчанию
		ТаймаутСоединения = 30; // 30 секунд для соединения
		ТаймаутКоманды = 60;   // 60 секунд для выполнения команд
		
		// Переопределение таймаутов из параметров, если указаны
		Если ПараметрыСоединения.Свойство("ТаймаутСоединения") И ЗначениеЗаполнено(ПараметрыСоединения.ТаймаутСоединения) Тогда
			ТаймаутСоединения = ПараметрыСоединения.ТаймаутСоединения;
		КонецЕсли;
		
		Если ПараметрыСоединения.Свойство("ТаймаутКоманды") И ЗначениеЗаполнено(ПараметрыСоединения.ТаймаутКоманды) Тогда
			ТаймаутКоманды = ПараметрыСоединения.ТаймаутКоманды;
		КонецЕсли;
		
		Соединение.ConnectionTimeout = ТаймаутСоединения;
		Команда.CommandTimeout = ТаймаутКоманды;
		
		// Формирование строки соединения
		СтрокаСоединения = СтрШаблон("Provider=SQLOLEDB;
									|Server=%1;
									|Database=%2;
									|Uid=%3;
									|Pwd=%4;",
									ПараметрыСоединения.Сервер,
									ПараметрыСоединения.База,
									ПараметрыСоединения.Пользователь,
									ПараметрыСоединения.Пароль);
		
		
		Соединение.ConnectionString = СтрокаСоединения;
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Если СтрНайти(НРег(ИнфоОбОшибке.Описание), "timeout") > 0 Тогда
			Ошибки.Добавить("Превышен таймаут подключения к базе данных (" + ТаймаутСоединения + " сек)");
		Иначе
			Ошибки.Добавить(ОписаниеОшибки());
		КонецЕсли;
		Соединение = Неопределено;
		Команда = Неопределено;
	КонецПопытки;
	
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает структуру результата операции
// Параметры:
//   ЕстьОшибки - Булево - Признак наличия ошибок
//   Данные - Произвольный - Результат операции
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьОшибки - Булево
//     * Данные - Произвольный
//
Функция СоздатьРезультатОперации(ЕстьОшибки, Данные = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", ЕстьОшибки);
	Результат.Вставить("Данные", Данные);
	
	Возврат Результат;
	
КонецФункции

// Проверяет, активно ли соединение
// Возвращаемое значение:
//   Булево - Истина, если соединение активно
//
Функция СоединениеАктивно()
	
	Возврат Соединение <> Неопределено И Команда <> Неопределено И Соединение.State = 1;
	
КонецФункции

Процедура СформироватьПараметрыЗапроса(ПараметрыЗапроса)

	// Очистка предыдущих параметров
	Пока Команда.Parameters.Count > 0 Цикл
		Команда.Parameters.Delete(0);
	КонецЦикла;
	
	// Добавление параметров, если они есть
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Индекс = 0 По ПараметрыЗапроса.ВГраница() Цикл
			Значение = ПараметрыЗапроса[Индекс];
			ТипПараметра = ПолучитьТипПараметраADO(Значение);
			Параметр = Команда.CreateParameter("Param" + Формат(Индекс, "ЧГ=0"), ТипПараметра, 1, СтрДлина(Значение), Значение);
			Команда.Parameters.Append(Параметр);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

  #Область Валидация

// Проверяет данные на соответствие схеме таблицы
// Параметры:
//   Данные - Структура - Проверяемые данные
//   СхемаТаблицы - Массив - Схема таблицы
// Возвращаемое значение:
//   Булево - Результат проверки
//
Функция ПроверитьДанныеПоСхеме(Данные, СхемаТаблицы)
	
	Для Каждого ПолеСхемы Из СхемаТаблицы Цикл
		ИмяПоля = ПолеСхемы.Имя;
		
		// Проверка обязательных полей
		Если ПолеСхемы.Обязательное И НЕ Данные.Свойство(ИмяПоля) Тогда
			Ошибки.Добавить("Отсутствует обязательное поле: " + ИмяПоля);
			Возврат Ложь;
		КонецЕсли;
		
		Если Данные.Свойство(ИмяПоля) Тогда
			Значение = Данные[ИмяПоля];
			
			// Проверка типа данных
			Если НЕ ПроверитьТипЗначения(Значение, ПолеСхемы.Тип) Тогда
				Ошибки.Добавить(
					СтрШаблон("Недопустимый тип данных для поля %1: ожидается тип, соответствующий %2",
						ИмяПоля,
						ПолеСхемы.Тип));
				Возврат Ложь;
			КонецЕсли;
			
			// Проверка размера строки
			Если ПолеСхемы.Размер > 0 И ТипЗнч(Значение) = Тип("Строка") Тогда
				Если СтрДлина(Значение) > ПолеСхемы.Размер Тогда
					Ошибки.Добавить(
						СтрШаблон("Длина строки в поле %1 превышает допустимый размер (%2)",
						ИмяПоля,
						ПолеСхемы.Размер));
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка на наличие лишних полей
	Для Каждого Элемент Из Данные Цикл
		НайденноеПоле = Неопределено;
		Для Каждого ПолеСхемы Из СхемаТаблицы Цикл
			Если ПолеСхемы.Имя = Элемент.Ключ Тогда
				НайденноеПоле = ПолеСхемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НайденноеПоле = Неопределено Тогда
			Ошибки.Добавить(
				СтрШаблон("Поле %1 отсутствует в схеме таблицы", Элемент.Ключ));
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет соответствие значения типу данных SQL
// Параметры:
//   Значение - Произвольный - Проверяемое значение
//   ТипSQL - Число - Код типа данных ADO
// Возвращаемое значение:
//   Булево - Результат проверки
//
Функция ПроверитьТипЗначения(Значение, ТипSQL)
	
	// Соответствие типов ADO основным типам 1С
	// Примеры типов: 
	// 3 - int, 6 - money, 7 - datetime, 129 - char, 130 - nchar, 200 - varchar, 202 - nvarchar
	Если ТипSQL = 3 ИЛИ ТипSQL = 6 Тогда // Целые числа или деньги
		Возврат ТипЗнч(Значение) = Тип("Число");
	ИначеЕсли ТипSQL = 7 Тогда // Дата и время
		Возврат ТипЗнч(Значение) = Тип("Дата");
	ИначеЕсли ТипSQL = 129 ИЛИ ТипSQL = 130 ИЛИ ТипSQL = 200 ИЛИ ТипSQL = 202 Тогда // Строки
		Возврат ТипЗнч(Значение) = Тип("Строка");
	Иначе
		// Для других типов допускаем любые значения
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Получает тип параметра ADO на основе значения
// Параметры:
//   Значение - Произвольный - Значение параметра
// Возвращаемое значение:
//   Число - Код типа ADO
//
Функция ПолучитьТипПараметраADO(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат 200; // adVarChar
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат 3;   // adInteger
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат 7;   // adDate
	ИначеЕсли Значение = NULL Тогда
		Возврат 1;   // adEmpty
	Иначе
		Возврат 12;  // adVariant
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область Инициализация

Ошибки = Новый Массив;

#КонецОбласти

#КонецЕсли