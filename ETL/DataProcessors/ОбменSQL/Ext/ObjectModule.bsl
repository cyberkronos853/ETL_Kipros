//********************************************************************************************************
Функция ПолучитьСтрокуКомманды(Настройки, ВходящийФайл, ИмяКаталога, ИмяАрхива) Экспорт
	
	ИмяОбъекта = ИмяКаталога; 
	СозданКонструктором = Ложь;
	
	Если Лев(ИмяКаталога, 2) = "к_" Или Лев(ИмяКаталога, 2) = "k_" Тогда
		ИмяОбъекта = Сред(ИмяКаталога, 3); 
		СозданКонструктором = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыБазКВыгрузке.ОбъектЕдиногоФормата.Наименование КАК НаименованиеТаблицыSQL,
		|	ОбъектыБазКВыгрузке.Наименование КАК Наименование,
		|	ОбъектыБазКВыгрузке.ОбъектЕдиногоФормата.ЕстьВременнаяТаблица КАК ЕстьВременнаяТаблица,
		|	ОбъектыБазКВыгрузке.ОбъектЕдиногоФормата.ОсновнаяТаблица КАК ОсновнаяТаблица,
		|	ЕСТЬNULL(ОбъектыБазКВыгрузке.ОбъектЕдиногоФормата.ОсновнаяТаблица.Наименование, """") КАК ОсновнаяТаблицаНаименование
		|ИЗ
		|	Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
		|ГДЕ
		|	(ОбъектыБазКВыгрузке.Наименование ПОДОБНО &Наименование
		|			ИЛИ ОбъектыБазКВыгрузке.НаименованиеЛатиница ПОДОБНО &Наименование)
		|	И ОбъектыБазКВыгрузке.Владелец = &База
		|	И &СозданКонструктором
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыКВыгрузке.НаименованиеТаблицыSQL,
		|	ОбъектыКВыгрузке.Наименование,
		|	ЛОЖЬ,
		|	"""",
		|	""""
		|ИЗ
		|	Справочник.ОбъектыКВыгрузке КАК ОбъектыКВыгрузке
		|ГДЕ
		|	ОбъектыКВыгрузке.Наименование ПОДОБНО &Наименование
		|	И НЕ &СозданКонструктором
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
	
	Запрос.УстановитьПараметр("Наименование", ИмяОбъекта);	
	Запрос.УстановитьПараметр("База", База); 
	Запрос.УстановитьПараметр("СозданКонструктором", СозданКонструктором);
	
		
	//Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	//                      |	ОбъектыКВыгрузке.НаименованиеТаблицыSQL КАК НаименованиеТаблицыSQL
	//                      |ИЗ
	//                      |	Справочник.ОбъектыКВыгрузке КАК ОбъектыКВыгрузке
	//                      |ГДЕ
	//                      |	ОбъектыКВыгрузке.Наименование = &Наименование");	
	//Запрос.УстановитьПараметр("Наименование", ИмяОбъекта);	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 		
		ЗаписьЖурналаРегистрации("Обмен SQL", УровеньЖурналаРегистрации.Ошибка,,, "Не найдено соответсвие типа объекта для объекта - " + ИмяОбъекта);	
		Возврат "";		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();	
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.НаименованиеТаблицыSQL) Тогда 		
		ЗаписьЖурналаРегистрации("Обмен SQL", УровеньЖурналаРегистрации.Ошибка,,, "Нет таблицы для загрузки таблицы - " + ИмяОбъекта);	
		Возврат "";		
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(Выборка.ОсновнаяТаблица) Тогда
		 НаименованиеТаблицыSQL = СокрЛП(Выборка.ОсновнаяТаблицаНаименование) + "_" + СокрЛП(Выборка.НаименованиеТаблицыSQL);
	Иначе
		 НаименованиеТаблицыSQL =  СокрЛП(Выборка.НаименованиеТаблицыSQL);
	КонецЕсли;
	
	Если Выборка.ЕстьВременнаяТаблица Тогда
		НаименованиеТаблицыSQL = НаименованиеТаблицыSQL + "_tmp";
	Иначе 
		НаименованиеТаблицыSQL = НаименованиеТаблицыSQL;	
	КонецЕсли; 
	
	Возврат """" + СокрЛП(Настройки.bcpSQL) + """ " + СокрЛП(Настройки.БазаДанныхSQL) + ".dbo." + СокрЛП(НаименованиеТаблицыSQL) 
		+ " in """ + СокрЛП(ВходящийФайл.ПолноеИмя) + """ -S " + СокрЛП(Настройки.ИнстансSQL) + " -U " + СокрЛП(Настройки.ЛогинSQL) 
		+ " -P " + СокрЛП(Настройки.ПарольSQL) + " -c -C 65001 -e """ + СокрЛП(Настройки.КаталогОшибокSQL + "\log_" + ИмяАрхива + "_" + ВходящийФайл.ИмяБезРасширения + "_(" 
		+ Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс") + ").txt""");

КонецФункции
//********************************************************************************************************
Процедура ВыполнитьОбмен(СтрокаКоманды) Экспорт
	
	ИмяТемпФайлаBat = ПолучитьИмяВременногоФайла(".bat"); 

	ТекстовыйФайл = Новый ТекстовыйДокумент;
	
	ТекстовыйФайл.ДобавитьСтроку(СтрокаКоманды);
	
	ТекстовыйФайл.Записать(ИмяТемпФайлаBat, "cp866");
		
	Shell = Новый COMОбъект("Wscript.Shell");
	
	Shell.run(ИмяТемпФайлаBat, 2, -1);

КонецПроцедуры
//********************************************************************************************************
Функция Соединение() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();

	Попытка
		
        Команда     = Новый COMОбъект("ADODB.Command");
        Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");
		
		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 600;
        Соединение.ConnectionTimeout = 180;

		Соединение.Open();
		
        Команда.ActiveConnection = Соединение;
		

	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());

		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Команда;
	
КонецФункции
//********************************************************************************************************
Функция Выборка(НаименованиеЗапроса, Параметры = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();

	Попытка
		
		Команда.CommandText = ПолучитЗапрос(НаименованиеЗапроса, Параметры);
		
		Выборка = Команда.Execute();
		
		Если НЕ Выборка.BOF Тогда

			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				ИмяСтолбца = Выборка.Fields.Item(А).Name;  
				
				Таблица.Колонки.Добавить(ИмяСтолбца);

			КонецЦикла;
			
			Выборка.MoveFirst();
			
			Пока НЕ Выборка.EOF Цикл
				
				НоваяСтрока = Таблица.Добавить();
				
				Для А = 0 По Выборка.Fields.Count - 1 Цикл
					
					НоваяСтрока.Установить(А, Выборка.Fields(А).Value);

				КонецЦикла;

				Выборка.MoveNext();
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());

	КонецПопытки;
	
	Возврат Таблица;
	
КонецФункции	
//********************************************************************************************************
Функция ПолучитЗапрос(НаименованиеЗапроса, Параметры)
	
	Если НаименованиеЗапроса = 1 Тогда 
		
		Возврат Запрос1(Параметры);
		
	ИначеЕсли НаименованиеЗапроса = 2 Тогда 
		
		Возврат Запрос2(Параметры);
		
	Иначе 	
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции
//********************************************************************************************************
Функция Запрос1(Параметры)
	
	Возврат "SELECT UNICODE(s1), UNICODE(s2), UNICODE(s3) FROM Table_1";
	
КонецФункции
//********************************************************************************************************
Функция Запрос2(Параметры)
	
	Возврат "SELECT UNICODE(s1), UNICODE(s2), UNICODE(s3) FROM Table_1";
	
КонецФункции
//********************************************************************************************************
Функция ВыполнитьКоманду(НаименованиеПроцедурыSQL, ТекстКоманды) Экспорт
	
	Команда = Соединение();
	Команда.CommandType = 1;
	Команда.CommandTimeout = 28800;
	Команда.CommandText = ТекстКоманды;
	
	ОшибкаХП = "";
	КлючСтатистики = Новый УникальныйИдентификатор;
	
	Попытка
		ДатаНачала = ТекущаяДатаСеанса();
		ЗаписатьЛогВыполнения(КлючСтатистики, НаименованиеПроцедурыSQL, ДатаНачала, "", "", "Выполняется", "");
		
		Выборка = Команда.Execute();
		ДатаОкончания = ТекущаяДатаСеанса();
		
		// Проверка наличия возвращаемых данных   
		//++ Кибернетика Корыткин добавлено условие для работы с процедурами из справочника Процедуры SQL, не возвращающими результат
		Если Выборка.Fields.Count > 0 Тогда
			КодВозврата = Выборка.Fields(0).Value;
			Если КодВозврата = 0 Тогда
				КодВозврата = "Выполнено успешно";
			Иначе
				ОшибкаХП = "Код возврата SQL: " + КодВозврата;
				КодВозврата = "Ошибка";
			КонецЕсли;
		Иначе
			КодВозврата = "Выполнено успешно";
		КонецЕсли;
		
	Исключение
		ОшибкаХП = ОписаниеОшибки();
		ДатаОкончания = ТекущаяДатаСеанса();
		КодВозврата = "Ошибка";
	КонецПопытки;
	
	Длительность = ВычислитьДлительность(ДатаНачала, ДатаОкончания);
	ЗаписатьЛогВыполнения(КлючСтатистики, НаименованиеПроцедурыSQL, ДатаНачала, ДатаОкончания, Длительность, КодВозврата, ОшибкаХП);
	
	Возврат КодВозврата <> "Ошибка";	
КонецФункции

Функция ВызовПроцедурSQL() Экспорт
				
	ЗапросСпискаПроцедур = Новый Запрос();
	ЗапросСпискаПроцедур.Текст =	"ВЫБРАТЬ
	|	СписокХранимыхПроцедурSQL.Порядок КАК Порядок,
	|	СписокХранимыхПроцедурSQL.НаименованиеПроцедурыSQL КАК НаименованиеПроцедурыSQL
	|ИЗ
	|	РегистрСведений.СписокХранимыхПроцедурSQL КАК СписокХранимыхПроцедурSQL
	|ГДЕ
	|	СписокХранимыхПроцедурSQL.Активировать = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";	
	
	РезультатЗапроса = ЗапросСпискаПроцедур.Выполнить().Выбрать();	
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Команда = "DECLARE	@return_value int
		|EXEC	@return_value ="+РезультатЗапроса.НаименованиеПроцедурыSQL+"
		|SELECT	@return_value";		
		Если НЕ ВыполнитьКоманду(РезультатЗапроса.НаименованиеПроцедурыSQL, Команда) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
				
КонецФункции

Функция ВыполнитьСценарий(Сценарий) Экспорт
				
	ЗапросСпискаПроцедур = Новый Запрос();
	ЗапросСпискаПроцедур.Текст = "ВЫБРАТЬ
	|	СценарииВыполненияПроцедурSQLПроцедурыSQL.ПроцедураSQL.Наименование КАК Наименование,
	|	СценарииВыполненияПроцедурSQLПроцедурыSQL.ПроцедураSQL.ТекстКоманды КАК ТекстКоманды,
	|	СценарииВыполненияПроцедурSQLПроцедурыSQL.ПроцедураSQL.ХранимаяПроцедура ХранимаяПроцедура
	|ИЗ
	|	Справочник.СценарииВыполненияПроцедурSQL.ПроцедурыSQL КАК СценарииВыполненияПроцедурSQLПроцедурыSQL
	|ГДЕ
	|	СценарииВыполненияПроцедурSQLПроцедурыSQL.Активна
	|	И СценарииВыполненияПроцедурSQLПроцедурыSQL.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СценарииВыполненияПроцедурSQLПроцедурыSQL.НомерСтроки";	  
	
	ЗапросСпискаПроцедур.УстановитьПараметр("Ссылка", Сценарий);
	
	РезультатЗапроса = ЗапросСпискаПроцедур.Выполнить().Выбрать();	
	
	Пока РезультатЗапроса.Следующий() Цикл
		Если РезультатЗапроса.ХранимаяПроцедура Тогда
			Команда = "DECLARE	@return_value int
			|EXEC	@return_value ="+РезультатЗапроса.Наименование+"
			|SELECT	@return_value";		
			Если НЕ ВыполнитьКоманду(РезультатЗапроса.Наименование, Команда) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе 
			Если НЕ	ВыполнитьКоманду(РезультатЗапроса.Наименование, РезультатЗапроса.ТекстКоманды) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
				
КонецФункции


Функция ОчисткаВременныхТаблиц() Экспорт
	
	Команда = "DECLARE	@return_value int
		|EXEC	@return_value =etl_TruncateTempTables
		|SELECT	@return_value";
	
	Если НЕ ВыполнитьКоманду("etl_TruncateTempTables", Команда) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;	
	
КонецФункции
//********************************************************************************************************
Процедура ЗаписатьЛогВыполнения(ГУИД,ИмяХП,ДатаНач,ДатаКон,Длит,КодВозврата,ОшибкаХП)
	
	Менеджер = РегистрыСведений.СтатусВыполненияПроцедурSQL.СоздатьМенеджерЗаписи();
	Менеджер.GUID = ГУИД;
	Менеджер.Прочитать();
	Менеджер.Период = ДатаНач; 
	Менеджер.ИмяХранимойПроцедуры = ИмяХП;
	Менеджер.Длительность = Длит;
	Менеджер.Статус = КодВозврата;						
	Менеджер.ОписаниеОшибки = ОшибкаХП; 
	//++ 08.01.2024 Кибернетика Корыткин А.А.
	Менеджер.ДатаЗавершения = ?(ЗначениеЗаполнено(ДатаКон), ДатаКон, Дата(1, 1, 1));
	//-- 08.01.2024
	Менеджер.Записать();

КонецПроцедуры
//********************************************************************************************************
Функция ВычислитьДлительность(Начало,Конец)
	
	ДлитВСек = Конец-Начало;
	Длит=Дата(1,1,1,0,0,0) + ДлитВСек;
	Длит = Формат(Длит,"ДФ=ЧЧ:мм:сс");
	Возврат Длит;
	
КонецФункции



//++ 11.12.2024 Кибернетика Корыткин Функции и процедуры для сверки

Процедура ПодсчитатьКоличествоЗагруженныхЗаписей() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Базы.Наименование КАК БазаНаименование,
	|	Базы.Ссылка КАК База,
	|	ОбъектыБазКВыгрузке.СтруктураТаблицы.Наименование КАК ТаблицаSQL,
	|	ОбъектыБазКВыгрузке.Ссылка КАК ОбъектБазыКВыгрузке,
	|	ОбъектыБазКВыгрузке.СтруктураТаблицы.ВидТаблицы КАК ВидТаблицы,
	|	ОбъектыБазКВыгрузке.СтруктураТаблицы КАК СтруктураТаблицы,
	|	ОбъектыБазКВыгрузке.Наименование КАК ОбъектНаименование,
	|	ОбъектыБазКВыгрузке.СтруктураТаблицы.ОсновнаяТаблица.Наименование КАК ОсновнаяТаблицаSQL,
	|	ОбъектыБазКВыгрузке.СтруктураТаблицы.ЕстьВременнаяТаблица КАК ЕстьВременнаяТаблица,
	|	ОбъектыБазКВыгрузке.СтруктураТаблицы.ЭтоВременнаяТаблица КАК ЭтоВременнаяТаблица
	|ИЗ
	|	Справочник.Базы КАК Базы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
	|		ПО (ОбъектыБазКВыгрузке.Владелец = Базы.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Базы.Наименование,
	|	Базы.Ссылка,
	|	ОбъектыКВыгрузке.СтруктураТаблицы.Наименование,
	|	ОбъектыКВыгрузке.Ссылка,
	|	ОбъектыКВыгрузке.СтруктураТаблицы.ВидТаблицы,
	|	ОбъектыКВыгрузке.СтруктураТаблицы,
	|	ОбъектыКВыгрузке.Наименование,
	|	ОбъектыКВыгрузке.СтруктураТаблицы.ОсновнаяТаблица.Наименование,
	|	ОбъектыКВыгрузке.СтруктураТаблицы.ЕстьВременнаяТаблица,
	|	ОбъектыКВыгрузке.СтруктураТаблицы.ЭтоВременнаяТаблица
	|ИЗ
	|	Справочник.Базы КАК Базы,
	|	Справочник.ОбъектыКВыгрузке КАК ОбъектыКВыгрузке
	|ГДЕ
	|	НЕ ОбъектыКВыгрузке.СтруктураТаблицы.Наименование ЕСТЬ NULL
	|	И НЕ Базы.ПометкаУдаления
	|ИТОГИ ПО
	|	СтруктураТаблицы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаТаблицы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицы.Следующий() Цикл
		
		Если ВыборкаТаблицы.ВидТаблицы = Перечисления.ВидыТаблицSQL.Перечисление Тогда
			
			ТекстЗапроса = "SET NOCOUNT ON
			|SELECT COUNT(*) as Num
			|FROM " + ВыборкаТаблицы.ТаблицаSQL + ?(ВыборкаТаблицы.ЭтоВременнаяТаблица, "" , "_tmp");
		//++ 25.04.2024 Кибернетика Корыткин А.А. подсчет записей табличных частей	
		ИначеЕсли ВыборкаТаблицы.ВидТаблицы = Перечисления.ВидыТаблицSQL.ТабличнаяЧасть Тогда	
			ТекстЗапроса = "SET NOCOUNT ON
			|SELECT Base, COUNT(*) as Num
			|FROM " + ВыборкаТаблицы.ОсновнаяТаблицаSQL + "_" + ВыборкаТаблицы.ТаблицаSQL + ?(ВыборкаТаблицы.ЭтоВременнаяТаблица, "" , "_tmp") + "
            |GROUP BY Base" 
		//-- 25.04.2024	
		Иначе
			
			ТекстЗапроса = "SET NOCOUNT ON
			|SELECT Base, COUNT(*) as Num
			|FROM " + ВыборкаТаблицы.ТаблицаSQL + ?(ВыборкаТаблицы.ЭтоВременнаяТаблица, "" , "_tmp") + "
			|GROUP BY Base";
					
		КонецЕсли;	
		
		Попытка	  
			КомандаSQL = Соединение(); 

			КомандаSQL.CommandText = ТекстЗапроса;
			Выборка = КомандаSQL.Execute();  
			
			Если КомандаSQL.ActiveConnection.Errors.Count > 0 Тогда 
				ОписаниеОшибки = "";	
				Для Каждого Ошибка из КомандаSQL.ActiveConnection.Errors Цикл 
					ОписаниеОшибки = ОписаниеОшибки + "Код: " + Ошибка.Number + ". " + Ошибка.Description + Символы.ПС; 
					ЗаписьЖурналаРегистрации("Ошибка подсчета записей ", УровеньЖурналаРегистрации.Предупреждение,,, ОписаниеОшибки);
					
				КонецЦикла;   
				
			КонецЕсли;  
			
			ТаблицаРезультата = Новый ТаблицаЗначений;
			ТаблицаРезультата.Колонки.Добавить("Base");
			ТаблицаРезультата.Колонки.Добавить("Num");
			
			СтруктураРезультата = Новый Структура;  
			Пока НЕ Выборка.EOF Цикл  
				СчетчикПолейРезультата = 0;
				
				СтрокаТЗ = ТаблицаРезультата.Добавить();
				Пока СчетчикПолейРезультата < Выборка.Fields.Count Цикл	
					СтрокаТЗ[Выборка.Fields.Item(СчетчикПолейРезультата).Name] = Выборка.Fields(Выборка.Fields.Item(СчетчикПолейРезультата).Name).Value;  
					СчетчикПолейРезультата = СчетчикПолейРезультата + 1;
				КонецЦикла;
				
				Выборка.MoveNext();
			КонецЦикла; 
			
			
		Исключение 
			ОписаниеОшибки =  ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Ошибка подсчета записей ", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);			
			
		КонецПопытки;
				
		Если ТаблицаРезультата.Количество() <> 0 Тогда 
			
		    ВыборкаЗаписи = ВыборкаТаблицы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаЗаписи.Следующий() Цикл  
				
				Если ВыборкаТаблицы.ВидТаблицы = Перечисления.ВидыТаблицSQL.Перечисление Тогда
					
					Если ТаблицаРезультата[0].Num <> 0 Тогда
						ЗаписьЖурнала = РегистрыСведений.ЖурналЗагрузкиДанных.СоздатьМенеджерЗаписи();
						ЗаписьЖурнала.Период = ТекущаяДатаСеанса();
						ЗаписьЖурнала.База = ВыборкаЗаписи.База;
						ЗаписьЖурнала.ОбъектКВыгрузке = ВыборкаЗаписи.ОбъектБазыКВыгрузке; 
						ЗаписьЖурнала.ИмяТаблицыSQL = ВыборкаЗаписи.ТаблицаSQL;
						ЗаписьЖурнала.ОбъектСтрокой = ВыборкаЗаписи.ОбъектНаименование;
						ЗаписьЖурнала.Количество = ТаблицаРезультата[0].Num;
						ЗаписьЖурнала.Записать();
					КонецЕсли;
					
				Иначе
										
					СтрокаТЗ = ТаблицаРезультата.Найти(ВыборкаЗаписи.БазаНаименование, "Base");
					Если СтрокаТЗ <> Неопределено Тогда 
						Если СтрокаТЗ.Num <> 0 Тогда
							ЗаписьЖурнала = РегистрыСведений.ЖурналЗагрузкиДанных.СоздатьМенеджерЗаписи();
							ЗаписьЖурнала.Период = ТекущаяДатаСеанса();
							ЗаписьЖурнала.База = ВыборкаЗаписи.База;
							ЗаписьЖурнала.ОбъектКВыгрузке = ВыборкаЗаписи.ОбъектБазыКВыгрузке; 
							Если ВыборкаТаблицы.ВидТаблицы = Перечисления.ВидыТаблицSQL.ТабличнаяЧасть Тогда
								ЗаписьЖурнала.ИмяТаблицыSQL = ВыборкаЗаписи.ОсновнаяТаблицаSQL + "_" + ВыборкаЗаписи.ТаблицаSQL;	
							Иначе
								ЗаписьЖурнала.ИмяТаблицыSQL = ВыборкаЗаписи.ТаблицаSQL;
							КонецЕсли;
							ЗаписьЖурнала.ОбъектСтрокой = ВыборкаЗаписи.ОбъектНаименование;
							ЗаписьЖурнала.Количество = ТаблицаРезультата[0].Num;
							ЗаписьЖурнала.Записать();
						КонецЕсли;
						
					КонецЕсли;					
				КонецЕсли;	
			
			КонецЦикла;
			
	    КонецЕсли;
	
КонецЦикла;


КонецПроцедуры  

//Параметры:
//ИмяБазы - ИмяБазы
//Таблица - Имя таблицы SQL
//Тип - 1 - ссылочные типы, 2 - регистры с регистратором, 3 - регистры без регистратора 4 - регистры бухгалтерии
//Параметры - структура отборов, которая может содержать "Период" (Структура (датаНачала, ДатаКонца, ИмяПоля), 
//СтруктураКлюча - Для регистров без регистратора, массив структур с описанием измерений, для остальных - пустой массив
//"КонтрольныеРеквизиты" (массив структур (ИмяПоля, ИмяПоляSQL, Тип), "Отбор" - массив ГУИДОВ или структуру ключей
Функция ПолучитьЧислоЗаписей(База, ОбъектСверки, Тип, вхПараметры, СтруктураКлюча) Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Попытка
		Параметры = ВхПараметры.ПОлучить();
	Исключение      
		возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Неверный формат входящих параметров. Возможно, используется устаревшая версия сверки");
		
	КОнецПопытки;
	
	Если Параметры = Неопределено Тогда
		возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Неверный формат входящих параметров.");
	КонецЕсли; 
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыКВыгрузке.НаименованиеТаблицыSQL КАК НаименованиеТаблицыSQL
		|ИЗ
		|	Справочник.ОбъектыКВыгрузке КАК ОбъектыКВыгрузке
		|ГДЕ
		|	ОбъектыКВыгрузке.Наименование = &Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыБазКВыгрузке.ОбъектЕдиногоФормата.Наименование
		|ИЗ
		|	Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
		|ГДЕ
		|	ОбъектыБазКВыгрузке.Наименование = &Наименование
		|	И ОбъектыБазКВыгрузке.Владелец = &База";
	
	Запрос.УстановитьПараметр("Наименование", ОбъектСверки);  
	Запрос.УстановитьПараметр("База", Обмен.ПолучитьБазуПоНаименованию(База));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда  
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НаименованиеТаблицыSQL) Тогда
			Таблица= СтрЗаменить(ВыборкаДетальныеЗаписи.НаименованиеТаблицыSQL, "_tmp", "");
		Иначе 
			возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Не задано имя таблицы SQL.");

		КонецЕсли;
	Иначе
		Если Параметры = Неопределено Тогда
			возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Объект выгрузки отсутствует в схеме данных для выгрузки.");
		КонецЕсли; 
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КаталогХраненияФайловСравнения = НастройкиОбмена.ПутьККаталогуХраненияФайловОбмена;
	КаталогХраненияФайловСравнения = КаталогХраненияФайловСравнения + ?(Прав(КаталогХраненияФайловСравнения, 1) = "\", "", "\" );
	
	ЕстьПериод = Ложь;
	ЕстьКР = Ложь;  
	ЕстьОтбор = Ложь; 
	УдалитьФайл = Ложь;
	
	Если Параметры.Свойство("БазаSQL") Тогда
		БазаSQL = Параметры.БазаSQL
	Иначе	
		БазаSQL = "";
	КонецЕсли;
	
	//++ 01.07.2025 Кибернетика Корыткин
    Если Параметры.Свойство("Организация") Тогда
		ОтборПоОрганизации = Истина;
	Иначе	
		ОтборПоОрганизации = Ложь;
	КонецЕсли;
	//-- 01.07.2025

	
	Если Параметры.Свойство("Отбор") Тогда 
		//++ 25.04.2024 Кибернетика Корыткин А.А. Для произвольного алгоритма ставим Истину всегда
		Если Параметры.Отбор.Количество() <> 0 Тогда
			ЕстьОтбор = Истина;	
		КонецЕсли;
	КонецЕсли;  
	
	Если Параметры.Свойство("Период") Тогда
		ЕстьПериод = Истина;
		ДатаНачалаВыборки = Параметры.Период.ДатаНачала;
		ДатаКонцаВыборки = Параметры.Период.ДатаКонца;
		ПолеПериода = Параметры.Период.ИмяПоля;
	КонецЕсли;   
	
	Если Параметры.Свойство("КонтрольныеРеквизиты") Тогда
		МассивКР = Новый Массив;
		Для каждого КР из Параметры.КонтрольныеРеквизиты Цикл
			ЕстьКР = Истина; 
			СтруктураКР = Новый Структура;
			СтруктураКР.Вставить("Тип", КР.Тип);
			СтруктураКР.Вставить("ИмяПоля", КР.ИмяSQL);
			СтруктураКР.Вставить("Имя1C", КР.Имя);
			
			МассивКР.Добавить(СтруктураКР);
			
		КонецЦикла; 	
	КонецЕсли;
	
	//++ Корыткин А.А. 01.04.2024
	Если Параметры.Свойство("ТипПериода") Тогда
		ТипПериода = Параметры.ТипПериода;
	Иначе
		ТипПериода = 0;
	КонецЕсли;
	//-- Корыткин А.А. 01.04.2024

	
	//Создадим текст запроса	
	
	ТекстЗапросаПредНачало = "SET NOCOUNT ON" + Символы.ПС;
	ТекстСозданияВТ = "";
	ТекстВыборкиЗарегЗаписей = "";	
	ТекстУдаленияВТ = ""; 
	ТекстЗапросаНачало = "";  
	ТекстЗапросаКонец = "";  
	ТекстСвязиВТ = "";
			
	Если Тип = 1 Тогда
		//Справочники, Документы и прочие объекты с ссылками
		
		Если ЕстьОтбор Тогда
			//без учета регистрации
			
			УИД = XMLСтрока(Новый УникальныйИдентификатор); 
			ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
			
			ТекстСозданияВТ = "create table " + ИмяВТ + "
			| (GUID nvarchar(36))" + Символы.ПС;  
			
			
			УдалитьФайл = Истина;
			
			ИмяФайла = КаталогХраненияФайловСравнения + "data_count" + СтрЗаменить(УИД, "-", "") + ".csv";
			ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
			
			Для каждого GUID из Параметры.Отбор Цикл  
				СтрокаЗаписиВТ = Строка(GUID);
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);		
			КонецЦикла;  
			
			ФайлНаДиске = Новый Файл(ИмяФайла);
			
			ЗаписьТекста.Закрыть(); 
			
			КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
			
			ТекстВыборкиЗарегЗаписей = " AND Params.GUID IS NULL" + Символы.ПС;
			
			ТекстСвязиВТ = "LEFT JOIN "+ ИмяВТ + " AS Params ON Objects.GUID = Params.GUID" + Символы.ПС;				
			
			ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;
		КонецЕсли;
		
	ИначеЕсли Тип = 2 Тогда
		//Регистры, подчиненные регистратору
		
		Если ЕстьОтбор <> 0 Тогда
			//без учета регистрации 
			
			
			УИД = XMLСтрока(Новый УникальныйИдентификатор); 
			ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
			
			ТекстСозданияВТ = "create table " + ИмяВТ + "
			| (RegistratorGUID nvarchar(36))"; 			
			
			УдалитьФайл = Истина;
			
			ИмяФайла = КаталогХраненияФайловСравнения + "data_count" + СтрЗаменить(УИД, "-", "") + ".csv";
			ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
			
			Для каждого ГУИД из Параметры.Отбор Цикл  
				СтрокаЗаписиВТ = Строка(ГУИД);
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);		
			КонецЦикла;  
			
			
			ФайлНаДиске = Новый Файл(ИмяФайла);
			
			ЗаписьТекста.Закрыть(); 
			
			КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
			
			ТекстВыборкиЗарегЗаписей = " AND Params.RegistratorGUID IS NULL" + Символы.ПС;
			
			ТекстСвязиВТ = "LEFT JOIN "+ ИмяВТ + " AS Params ON Objects.RegistratorGUID = Params.RegistratorGUID" + Символы.ПС;
			
			ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ; 
			
			
		КонецЕсли;
		
		
	ИначеЕсли Тип = 3 Тогда
		//Регистры, не подчиненные регистраторы
		
		Если ЕстьОтбор Тогда
			//без учета регистрации
			
			
			УИД = XMLСтрока(Новый УникальныйИдентификатор); 
			ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
			
			ТекстСозданияВТ = "create table "+ ИмяВТ + "				
			| (";
			
			МассивКлючей = Новый Массив;
			Для каждого Ключ из СтруктураКлюча Цикл
				
				Если Ключ.ГУИД Тогда  
					//20.03.2024 Корыткин А.А. Исправлено создание временной таблицы
					Если Лев(Ключ.Тип, 7) = "Строка(" Тогда	
						МассивКлючей.Добавить(Ключ.Имя + " nvarchar" + Прав(Ключ.Тип, СтрДлина(Ключ.Тип) - 6));			
					Иначе
						МассивКлючей.Добавить(Ключ.Имя + " nvarchar(36)");		
					КонецЕсли;
					
				ИначеЕсли Ключ.Тип = "Дата" Тогда
					МассивКлючей.Добавить(Ключ.Имя + " datetime2");
				ИначеЕсли Лев(Ключ.Тип, 5) = "Число" Тогда
					МассивКлючей.Добавить(Ключ.Имя + " " + ПолучитьТипЧислаSQL(Ключ.Тип));
				ИначеЕсли Лев(Ключ.Тип, 6) = "Строка" Тогда
					МассивКлючей.Добавить(Ключ.Имя + " " + СтрЗаменить(Ключ.Тип, "Строка", "nvarchar"));
				Иначе
					МассивКлючей.Добавить(Ключ.Имя + " nvarchar(100)");
				КонецЕсли;
			КонецЦикла;
			
			ТекстСозданияВТ = ТекстСозданияВТ + СтрСоединить(МассивКлючей, ", ") + ")" + Символы.ПС;
			
			
			УдалитьФайл = Истина;
			
			
			ИмяФайла = КаталогХраненияФайловСравнения + "data_count" + СтрЗаменить(УИД, "-", "") + ".csv";
			ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
			
			//20.03.2024 Корыткин А.А. Исправлено заполнение временной таблицы
			Для каждого КлючОтбора из Параметры.Отбор Цикл
				
				МассивЗначенийКлючей = Новый Массив;
				
				Для каждого Ключ из КлючОтбора  Цикл
					
					Если ТипЗнч(Ключ.Значение) = Тип("Число") Тогда
						МассивЗначенийКлючей.Добавить(Формат(Ключ.Значение,"ЧРД=.; ЧГ=0; ЧН=0"));
					ИначеЕсли ТипЗнч(Ключ.Значение) = Тип("Дата") Тогда
						МассивЗначенийКлючей.Добавить(?(Ключ.Значение = Дата(1, 1, 1, 0, 0, 0), "1900-01-01 00:00:00.0000000", Формат(Ключ.Значение, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""")));
					Иначе 
						МассивЗначенийКлючей.Добавить(Ключ.Значение);
						
					КонецЕсли;
				КонецЦикла;   
				
				СтрокаЗаписиВТ = СтрСоединить(МассивЗначенийКлючей, Символы.Таб);
				
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ); 
				
			КонецЦикла;    
			
			ФайлНаДиске = Новый Файл(ИмяФайла);
			
			ЗаписьТекста.Закрыть(); 
			
			КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
					
			
			ТекстВыборкиЗарегЗаписей = ""; 
			
				МассивСоединения = Новый Массив;
			Для каждого Ключ из СтруктураКлюча Цикл  
				//++28.03.2024 Кибернетика Корыткин NULL в запросе для соединения нужно менять на некое пустое значение
				Если Ключ.ГУИД Тогда
					ПустоеЗначение = "'NULL'";
				ИначеЕсли СтрНайти(Ключ.Тип, "Число") = 1 Тогда
					ПустоеЗначение = "666";
				ИначеЕсли Ключ.Тип = "Дата" Тогда
					ПустоеЗначение = "'1900-01-01 00:00:00.0000000'";
				Иначе
					ПустоеЗначение = "'NULL'";
				КонецЕсли;   	
				
				Если Ключ.Тип = "Дата" Тогда
					МассивСоединения.Добавить("COALESCE(Cast(Params."+ Ключ.Имя + " as datetime2), " + ПустоеЗначение + ") = COALESCE(Objects." + Ключ.Имя +", " + ПустоеЗначение + ")");
				Иначе	
					МассивСоединения.Добавить("COALESCE(Params."+ Ключ.Имя + ", " + ПустоеЗначение + ") = COALESCE(Objects." + Ключ.Имя +", " + ПустоеЗначение + ")");
				КонецЕсли;
				//--	
				
				
				ТекстВыборкиЗарегЗаписей = ТекстВыборкиЗарегЗаписей + " AND " + "Params." + Ключ.Имя + " IS NULL "; 
			КонецЦикла;
			
			
			ТекстСвязиВТ = "LEFT JOIN "+ ИмяВТ + " AS Params ON " + СтрСоединить(МассивСоединения, " AND "); //28.03.2024 Кибернетика Корыткин
						
			ТекстВыборкиЗарегЗаписей = ТекстВыборкиЗарегЗаписей + Символы.ПС;
			
			ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ; 				
		КонецЕсли;
		
		
	ИначеЕсли Тип = 4 Тогда	
		
		Если ЕстьОтбор <> 0 Тогда
			//без учета регистрации  
			
			
			УИД = XMLСтрока(Новый УникальныйИдентификатор); 
			ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
			ТекстСозданияВТ = "create table " + ИмяВТ + "
			| (RegistratorGUID nvarchar(36))"; 
			
			УдалитьФайл = Истина;
						            			
			ИмяФайла = КаталогХраненияФайловСравнения + "data_count" + СтрЗаменить(УИД, "-", "") + ".csv";
			ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
			
			Для каждого ГУИД из Параметры.Отбор Цикл
				ЗаписьТекста.ЗаписатьСтроку(ГУИД);		
			КонецЦикла;  
			
			ФайлНаДиске = Новый Файл(ИмяФайла);
			
			ЗаписьТекста.Закрыть(); 
			
			КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
			
			
			ТекстВыборкиЗарегЗаписей = " AND Params.RegistratorGUID IS NULL" + Символы.ПС;
			//				ТекстВыборкиЗарегЗаписей = Символы.ПС + " AND RecorderGUID NOT IN (SELECT RegistratorGUID FROM " + ИмяВТ + ")" + Символы.ПС;
			
			ТекстСвязиВТ = "LEFT JOIN "+ ИмяВТ + " AS Params ON ObjectsG.RecorderGUID = Params.RegistratorGUID";
			
			ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	//подсчет записей
		ТекстЗапросаНачало = "select ";
		
		Если ЕстьКР Тогда
			Для Каждого КР из МассивКР Цикл
				Если Лев(КР.Тип, 5) = "Число" Тогда
					ТекстЗапросаНачало = ТекстЗапросаНачало + "SUM(Objects." + КР.ИмяПоля + ") as " + КР.ИмяПоля + "," + Символы.ПС;
					//ИначеЕсли КР.Тип = "ГУИД" Тогда                
					//ТекстЗапросаНачало = ТекстЗапросаНачало + "COUNT(DISTINCT ISNULL(" + КР.ИмяПоля + ", '00000000-0000-0000-0000-000000000000')) as " + КР.ИмяПоля + "," + Символы.ПС;
				ИначеЕсли КР.Тип = "Дата" Тогда                
					ТекстЗапросаНачало = ТекстЗапросаНачало + "COUNT(DISTINCT ISNULL(cast (Objects." + КР.ИмяПоля + " as date), '0001-01-01')) as " + КР.ИмяПоля + "," + Символы.ПС;	
				Иначе
					ТекстЗапросаНачало = ТекстЗапросаНачало + "COUNT(DISTINCT Objects." + КР.ИмяПоля + ") as " + КР.ИмяПоля + "," + Символы.ПС;	
					
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		
		
		
		Если Тип = 4 Тогда 
			//Проводки суммируем по RegulatedAmountNew и берем только записи где Period = TurnoverPeriod
			ТекстЗапросаНачало = ТекстЗапросаНачало + "count(*) AS RegNum FROM (SELECT max(RegulatedAmountNew) as RegulatedAmount, RecorderGUID, LineNumber  FROM." + Таблица + " AS ObjectsG " + ТекстСвязиВТ + " WHERE Base = '" + База + "' AND Period = TurnoverPeriod ";	
		Иначе
			ТекстЗапросаНачало = ТекстЗапросаНачало + "count(*) AS RegNum FROM dbo." + Таблица + " AS Objects " + ТекстСвязиВТ + " WHERE Base = '" + База + "' AND id > 0 " ;
			
		КонецЕсли;
		
		Если ЕстьПериод Тогда 
			//++ 01.04.2024 Корыткин А.А.
			
			Если ТипПериода = 1 Тогда  
				
				Если Не ЗначениеЗаполнено(ДатаНачалаВыборки) Тогда
					ДатаНачалаВыборки = "'1900-01-01 00:00:00.0000000'";    
				Иначе
					ДатаНачалаВыборки = "'" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'";
				КонецЕсли;
				
				Если Тип=4 Тогда
					
					ТекстОтбора = Символы.ПС + " AND ObjectsG." + ПолеПериода + " = " + ДатаНачалаВыборки + Символы.ПС;	
				Иначе
					
					ТекстОтбора = Символы.ПС + " AND Objects." + ПолеПериода + " = " + ДатаНачалаВыборки + Символы.ПС;
					
				Конецесли;	
			Иначе
				Если Тип=4 Тогда
					
					ТекстОтбора = Символы.ПС + " AND ObjectsG." + ПолеПериода + " BETWEEN '" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "' AND '" + Формат(ДатаКонцаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'" + Символы.ПС;	
				Иначе
					
					ТекстОтбора = Символы.ПС + " AND Objects." + ПолеПериода + " BETWEEN '" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "' AND '" + Формат(ДатаКонцаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'" + Символы.ПС;
					
				Конецесли; 
			КонецЕсли;	
			//--
		КонецЕсли;	
		
		//++ 01.07.2025 Кибернетика Корыткин 
		
		Если Тип = 4 И ОтборПоОрганизации Тогда
		
			 ТекстОтбора = ТекстОтбора + Символы.ПС + " AND Organization = '" + Параметры.Организация + "'";
		
		КонецЕсли;
		
		
		
		Если Тип = 4 Тогда
			ТекстЗапросаКонец = "GROUP BY RecorderGUID, LineNumber) AS Objects";
		Иначе 
			ТекстЗапросаКонец = ""; 
		КонецЕсли;
		
				
		ТекстЗапроса = ТекстЗапросаПредНачало + ТекстЗапросаНачало + ТекстОтбора + ТекстВыборкиЗарегЗаписей + ТекстЗапросаКонец + ТекстУдаленияВТ;
		
		
	Данные = "";
	Попытка
		Если БазаSQL = "" Тогда
			КомандаSQL = Соединение(); 
			
		КонецЕсли; 
		
		//++Корыткин А.А. 04.04.2024 всегда через BCP работаем
		Если ЕстьОтбор  Тогда 
			КомандаSQL.CommandText = ТекстСозданияВТ;
			КомандаSQL.Execute();
			ВыполнитьОбмен(КомандаЗапускаBCP);
			УдалитьФайлы(ИмяФайла); 
			
			//++27.01.2025 Удаление пустых логов 
			ФайлыОшибок = НайтиФайлы(НастройкиОбмена.КаталогОшибокSQL, "data_count*error_log.txt");
			ФайлыНаУдаление = Новый Массив;
			Для Каждого ФайлОшибок Из ФайлыОшибок Цикл 	
				Если ФайлОшибок.ЭтоФайл() Тогда
					Если ФайлОшибок.Размер() = 0 Тогда
						УдалитьФайлы(ФайлОшибок.ПолноеИмя);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
            //--27.01.2025
					
		КонецЕсли;
		
		КомандаSQL.CommandText = ТекстЗапроса;
		Выборка = КомандаSQL.Execute(); 
		Если КомандаSQL.ActiveConnection.Errors.Count > 0 Тогда 
			ОписаниеОшибки = "";	
			Для Каждого Ошибка из КомандаSQL.ActiveConnection.Errors Цикл 
				ОписаниеОшибки = ОписаниеОшибки + "Код: " + Ошибка.Number + ". " + Ошибка.Description + Символы.ПС;     
			КонецЦикла;   
			
			Возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		КонецЕсли;  
		
		
		СтруктураРезультата = Новый Структура;  
		//Учитываем, что у нас одна единственная строка результата. Если будет что-то другое - вставить цикл
		Если НЕ Выборка.EOF Тогда  
			СчетчикПолейРезультата = 0;
			
			Пока СчетчикПолейРезультата < Выборка.Fields.Count Цикл				
				СтруктураРезультата.Вставить(Выборка.Fields.Item(СчетчикПолейРезультата).Name, Выборка.Fields(Выборка.Fields.Item(СчетчикПолейРезультата).Name).Value);  
				СчетчикПолейРезультата = СчетчикПолейРезультата + 1;
			КонецЦикла;
			//Данные = Данные + Строка(Выборка.Fields(Выборка.Fields.Item(0).Name).Value) + Символы.ПС;	
			
		КонецЕсли;  
		
		
	Исключение 
		ОписаниеОшибки =  ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка веб-сервиса", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		
		
		Если УдалитьФайл Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
		
		Возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		
		
		
	КонецПопытки;
	
	
	Возврат Новый Структура("Результат, Данные", Истина, СтруктураРезультата);
	
КонецФункции

Функция ПолучитьРазницуЗаписей(База, ОбъектСверки, Тип, ВхПараметры) Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Попытка
		Параметры = ВхПараметры.ПОлучить();
	Исключение      
		возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Неверный формат входящих параметров. Возможно, используется устаревшая версия сверки");
		
	КОнецПопытки;
	
	Если Параметры = Неопределено Тогда
		возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Неверный формат входящих параметров.");
	КонецЕсли; 
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыКВыгрузке.НаименованиеТаблицыSQL КАК НаименованиеТаблицыSQL
		|ИЗ
		|	Справочник.ОбъектыКВыгрузке КАК ОбъектыКВыгрузке
		|ГДЕ
		|	ОбъектыКВыгрузке.Наименование = &Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыБазКВыгрузке.ОбъектЕдиногоФормата.Наименование
		|ИЗ
		|	Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
		|ГДЕ
		|	ОбъектыБазКВыгрузке.Наименование = &Наименование
		|	И ОбъектыБазКВыгрузке.Владелец = &База";
	
	Запрос.УстановитьПараметр("Наименование", ОбъектСверки);  
	Запрос.УстановитьПараметр("База", Обмен.ПолучитьБазуПоНаименованию(База));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда  
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НаименованиеТаблицыSQL) Тогда
			Таблица= СтрЗаменить(ВыборкаДетальныеЗаписи.НаименованиеТаблицыSQL, "_tmp", "");
		Иначе 
			возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Не задано имя таблицы SQL.");
			
		КонецЕсли;
	Иначе
		Если Параметры = Неопределено Тогда
			возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Объект выгрузки отсутствует в схеме данных для выгрузки.");
		КонецЕсли; 
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	КаталогХраненияФайловСравнения = НастройкиОбмена.ПутьККаталогуХраненияФайловОбмена;
	КаталогХраненияФайловСравнения = КаталогХраненияФайловСравнения + ?(Прав(КаталогХраненияФайловСравнения, 1) = "\", "", "\" );
	
	
	
	//Определимся с наличием доп.отборов	
	ЕстьПериод = Ложь;
	ЕстьЗаписи = Ложь;
	ЕстьКР = Ложь;   
	
	Если Параметры.Свойство("БазаSQL") Тогда
		БазаSQL = Параметры.БазаSQL
	Иначе	
		БазаSQL = "";
	КонецЕсли;
	
	Если Параметры.Свойство("Записи") Тогда
		Если Параметры.Записи.Количество() <> 0 Тогда
			ЕстьЗаписи = Истина;	
		КонецЕсли;
	КонецЕсли;  
	
	//++ 01.07.2025 Кибернетика Корыткин
    Если Параметры.Свойство("Организация") Тогда
		ОтборПоОрганизации = Истина;
	Иначе	
		ОтборПоОрганизации = Ложь;
	КонецЕсли;
	//-- 01.07.2025

	//++ 02.07.2024 Кибернетика Корыткин Сравнение с учетом счетов (для совместимости со старыми версиями сверки)
	
	Если Параметры.Свойство("СравнениеПоСчетам") Тогда
		СравнениеПоСчетам = Истина;
	Иначе
		СравнениеПоСчетам = Ложь;
	КонецЕсли;
	//--
	
	//++ 17.03.2025 Кибернетика Корыткин Сравнение по субконто
	
	Если Тип = 5 Тогда
		Если Параметры.Свойство("ВидСубконто") И ЗначениеЗаполнено(Параметры.ВидСубконто) Тогда
			ВидСубконто = Параметры.ВидСубконто;
		Иначе
			Возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Не задан вид субконто.");
		КонецЕсли;

	КонецЕсли;
	//--
	
	Если Параметры.Свойство("Период") Тогда
		ЕстьПериод = Истина;
		ДатаНачалаВыборки = Параметры.Период.ДатаНачала;
		ДатаКонцаВыборки = Параметры.Период.ДатаКонца;
		ПолеПериода = Параметры.Период.ИмяПоля;
	КонецЕсли;   
	
	Если Параметры.Свойство("КонтрольныеРеквизиты") Тогда
		МассивКР = Новый Массив;
		Для каждого КР из Параметры.КонтрольныеРеквизиты Цикл
			ЕстьКР = Истина; 
			СтруктураКР = Новый Структура;
			СтруктураКР.Вставить("Тип", КР.Тип);
			СтруктураКР.Вставить("ИмяПоля", КР.ИмяSQL);
			СтруктураКР.Вставить("Имя1C", КР.Имя);
			
			МассивКР.Добавить(СтруктураКР);
			
		КонецЦикла; 	
	КонецЕсли;
	
	//++ Корыткин А.А. 01.04.2024
	Если Параметры.Свойство("ТипПериода") Тогда
		ТипПериода = Параметры.ТипПериода;
	Иначе
		ТипПериода = 0;
	КонецЕсли;
	//-- Корыткин А.А. 01.04.2024
	
	
	//Общие принципы:
	//Создаем временную таблицу, куда записываем все записи из входящего параметра Записи
	//Для регистров с регистратором там есть поля регистратор, представление регистратора и контрольные реквизиты
	//делаем выборку из таблицы SQL, группируя по регистратору. Контрольные реквизиты сумммируем или подсчитываем различные
	//соединяем выборку с временной таблицей по регистратору и контрольным реквизитам
	//оставляем только разницу
	
	//Создадим текст запроса	
	
	ТекстЗапросаПредНачало = "SET NOCOUNT ON" + Символы.ПС;
	ТекстСозданияВТ = "";
	ТекстУдаленияВТ = ""; 
	ТекстСоединения = "";  
	
	УдалитьФайл = Ложь;
	
	Если Тип = 5 Тогда
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		ТекстСозданияВТ = "create table " + ИмяВТ + "
		| (GUID nvarchar(36),
		| Presentation nvarchar(150),
		| Summa decimal(18,2),
		| Account nvarchar(20),
		| Subconto nvarchar(36))";	
		
		УдалитьФайл = Истина;
		
		
		ИмяФайла = КаталогХраненияФайловСравнения + "data_compare" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		Если ЕстьЗаписи Тогда
			
			Для каждого Запись из Параметры.Записи Цикл  
				
				СтрокаЗаписиВТ = Строка(Запись.ГУИД) + Символы.Таб + Строка(Запись.Представление) + Символы.Таб + Формат(Запись.Сумма,"ЧРД=.; ЧГ=0; ЧН=0")
				+ Символы.Таб + СокрЛП(Запись.Счет) + Символы.Таб + СокрЛП(Запись.Субконто); 
				
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);
				
			КонецЦикла;  
			
		КонецЕсли;						
		
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
		
		
		
		ТекстСоединения = Символы.ПС + "
		|SELECT 
		|	GUID,
		|	Presentation,
		|	Summa,
		|	Account,
		|	Subconto,
		|	Recorder,
		|	RecorderGUID,
		|	RegulatedAmount,
		|	Acc,
		|	Cut
		|FROM " + ИмяВт + "
		|	FULL JOIN (
		|	SELECT 
		|		Recorder,
		|		RecorderGUID,
		|		C.Code AS Acc,
		|" + ВидСубконто + " AS Cut,
		|		SUM(Case When TypeOfTurnovers = 'Дт' THEN RegulatedAmountNew
		|		ELSE -RegulatedAmountNew END) AS RegulatedAmount
		|	FROM dbo." + Таблица + " T 
		|	INNER JOIN ChartOfAccounts C ON C.GUID = T.Account and C.Base = T.Base AND (
		|		C.TypeOfCut1 = '" + ВидСубконто + "' OR C.TypeOfCut2 = '" + ВидСубконто + "' OR C.TypeOfCut3 = '" + ВидСубконто + "') 
		|	WHERE T.Base = '" + База + "' AND Period = TurnoverPeriod
		|";
		
		
		
		Если ЕстьПериод Тогда 
			
			ТекстСоединения = ТекстСоединения + Символы.ПС + " AND " + ПолеПериода + " BETWEEN '" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "' AND '" + Формат(ДатаКонцаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'";
			
		КонецЕсли; 
		
		//++ 01.07.2025 Кибернетика Корыткин
		Если ОтборПоОрганизации Тогда
		
			ТекстСоединения = ТекстСоединения + Символы.ПС + " AND Organization = '" + Параметры.Организация + "'";
            	
		КонецЕсли;
		//-- 01.07.2025 
		
		ТекстСоединения = ТекстСоединения + "
		|GROUP BY Recorder,RecorderGUID, C.Code, " + ВидСубконто + ") SQLBase
		|ON SQLBase.RecorderGUID = GUID
		|	AND SQLBase.RegulatedAmount = Summa
		|	AND Account = SQLbase.Acc
		|	AND ISNULL(Subconto, '00000000-0000-0000-0000-000000000000') = ISNULL(SQLBase.Cut, '00000000-0000-0000-0000-000000000000')
		|WHERE ((Guid is NULL AND RegulatedAmount <> 0) or (RecorderGUID IS NULL AND Summa <> 0))" + Символы.ПС;			
		
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;
		
	ИначеЕсли Тип = 6 Тогда
		//сверка оборотов консолидации
			
		Таблица = "map_turnovers";
			
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		
		ТекстСозданияВТ = "CREATE TABLE " + ИмяВТ + "
		| (GUID nvarchar(36),
		| Presentation nvarchar(150),
		| Summa decimal(18,2),
		| Etalon nvarchar(36),
		| CorEtalon nvarchar(36))";
		
		УдалитьФайл = Истина;
		
		
		ИмяФайла = КаталогХраненияФайловСравнения + "data_compare" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		Если ЕстьЗаписи Тогда
			
			Для каждого Запись из Параметры.Записи Цикл  
				
				
				СтрокаЗаписиВТ = Строка(Запись.ГУИД) + Символы.Таб + Строка(Запись.Представление) + Символы.Таб + Формат(Запись.Сумма,"ЧРД=.; ЧГ=0; ЧН=0")
				+ Символы.Таб + СокрЛП(Запись.Счет) + Символы.Таб + СокрЛП(Запись.КорСчет);
								
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);
				
			КонецЦикла;  
			
		КонецЕсли;						
		
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
		
		
		ТекстСоединения = Символы.ПС + "SELECT 
			|	DataC.GUID,
			|	DataC.Presentation,
			|	DataC.Summa,
			|	RecorderGUID,
			|	RegulatedAmount,
			|	(SELECT Top 1 Code FROM map_ChartOfAccounts Where map_ChartOfAccounts.id = DataC.Account) AS Account,
			|	(SELECT Top 1 Code FROM map_ChartOfAccounts Where map_ChartOfAccounts.id = DWH.AccountDt) AS AccountDt,
			|	(SELECT Top 1 Code FROM map_ChartOfAccounts Where map_ChartOfAccounts.id = DataC.CorAccount) AS CorAccount,
			|	(SELECT Top 1 Code FROM map_ChartOfAccounts Where map_ChartOfAccounts.id = DWH.AccountKt) AS AccountKt 
			|FROM (SELECT 
			|			TT.GUID,
			|      		TT.Presentation,
			|			TT.Summa,
			|			ISNULL(Mch1.id, -2) AS Account,
			|			ISNULL(Mch2.id, -2) AS CorAccount
			|		FROM " + ИмяВТ + " TT
			|		LEFT JOIN Map_ChartOfAccounts Mch1 ON TT.Etalon = Mch1.GUID
			|		LEFT JOIN Map_ChartOfAccounts Mch2 ON TT.CorEtalon = Mch2.GUID) DataC
			|FULL JOIN (
			|		SELECT 
			|		Account AS AccountDT,
			|		CorAccount  AS AccountKT,
			|		RecorderGUID,	
			|		SUM(RegulatedAmountNew) as RegulatedAmount
			|	FROM " + Таблица + " WHERE Base = '" + База + "' AND Period = TurnoverPeriod 
			|	AND typeofturnovers = 'Дт'
			|";
			
		
		
		Если ЕстьПериод Тогда 
			
			ТекстСоединения = ТекстСоединения + Символы.ПС + " AND " + ПолеПериода + " BETWEEN '" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "' AND '" + Формат(ДатаКонцаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'";
			
		КонецЕсли; 
		
		ТекстСоединения = ТекстСоединения + "		
		//|GROUP BY 
		//|	RecorderGUID,
		//|	Base,
		//|	CASE WHEN typeofturnovers = 'Дт' THEN Account ELSE CorAccount END,
		//|	CASE WHEN typeofturnovers = 'Кт' THEN Account ELSE CorAccount END) AS Records
		|GROUP BY RecorderGUID, Account, CorAccount) AS DWH 
		|ON DWH.RecorderGUID = GUID
		|AND DWH.RegulatedAmount = Summa
		|AND DataC.Account = DWH.AccountDt
		|AND DataC.CorAccount = DWH.AccountKt
		|WHERE (GUID is NULL or RecorderGUID IS NULL)
		|ORDER BY GUID, RecorderGUID" + Символы.ПС;
			
				
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;
		
	ИначеЕсли Тип = 7 Тогда 
		//Сверка остатков консолидации
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		ТекстСозданияВТ = "CREATE TABLE " + ИмяВТ + "
		| (GUID nvarchar(36),
		| Summa decimal(18,2))";	
		
		УдалитьФайл = Истина;
		
		
		ИмяФайла = КаталогХраненияФайловСравнения + "data_compare" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		Если ЕстьЗаписи Тогда
			
			Для каждого Запись из Параметры.Записи Цикл  
				
				СтрокаЗаписиВТ = Строка(Запись.Счет) + Символы.Таб + Формат(Запись.Сумма,"ЧРД=.; ЧГ=0; ЧН=0"); 
				
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);
				
			КонецЦикла;  
			
		КонецЕсли;						
		
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
		
		
		
		ТекстСоединения = Символы.ПС + "SELECT
			|	(SELECT Code FROM map_ChartOfAccounts WHERE id = DWH.Account) AS Acc,
			|	DWH.RegulatedAmount,
			|	(SELECT Code FROM map_ChartOfAccounts WHERE id = DataC.Account) AS Account,
			|	DataC.Summa
			|FROM
			|	(SELECT
			|		Account,
			|    	SUM(RegulatedAmount) AS RegulatedAmount
			|	 FROM map_Balances
			|  	 WHERE Base = '" + База + "'
			|    GROUP BY Account 
			|	HAVING SUM(RegulatedAmount) <> 0) DWH
			|	FULL JOIN (SELECT ISNULL(Mch.id, -2) as Account,
			|			TT.Summa FROM " + ИмяВТ + " TT
			|			LEFT JOIN map_ChartOfAccounts Mch ON TT.GUID  = Mch.GUID) DataC
			|	ON DataC.Account = DWH.Account    
			|WHERE DWH.Account IS NULL OR DataC.Account IS NULL	";
		
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;

		

	ИначеЕсли Тип = 4 Тогда
		//Проводки
		
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		
		ТекстСозданияВТ = "create table " + ИмяВТ + "
		| (GUID nvarchar(36),
		| Presentation nvarchar(150),
		| Summa decimal(18,2),
		| LinesCount integer, 
		| AccDt nvarchar(20),
		| AccKt nvarchar(20))";
		
		УдалитьФайл = Истина;
		
		
		ИмяФайла = КаталогХраненияФайловСравнения + "data_compare" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		Если ЕстьЗаписи Тогда
			
			Для каждого Запись из Параметры.Записи Цикл  
				
				
				СтрокаЗаписиВТ = Строка(Запись.ГУИД) + Символы.Таб + Строка(Запись.Представление) + Символы.Таб + Формат(Запись.Сумма,"ЧРД=.; ЧГ=0; ЧН=0")
				+ Символы.Таб + Формат(Запись.КоличествоСтрок,"ЧДЦ=0; ЧРД=.; ЧН=0; ЧГ=0"); 
				
				Если СравнениеПоСчетам Тогда					
					СтрокаЗаписиВТ = СтрокаЗаписиВТ + Символы.Таб + СокрЛП(Запись.СчетДт) + Символы.Таб + СокрЛП(Запись.СчетКт);
				КонецЕсли;
				
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);
				
			КонецЦикла;  
			
		КонецЕсли;						
		
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
		
		
		//++ 02.07.2024 Кибернетика Корыткин Сравнение с учетом счетов
		Если СравнениеПоСчетам Тогда
			ТекстСоединения = Символы.ПС + "SELECT 
			|GUID,
			|Presentation,
			|Summa,
			|Recorder,
			|RecorderGUID,
			|regulatedAmount,
			|linesCount,
			|lineNumber,
			|AccDt,
			|AccountDt,
			|AccKt,
			|AccountKt 
			|from " + ИмяВТ + "
			|FULL JOIN (
			|select 
			|Recorder,
			|RecorderGUID,
			|SUM(RegulatedAmount) AS RegulatedAmount,
			|Count(LineNumber) as lineNumber,
			|cd.code as AccountDt,
			|ck.code as AccountKt FROM (
			|SELECT Recorder, base,
			|case when typeofturnovers = 'Дт' then Account Else CorAccount END as AccountDT,
			|case when typeofturnovers = 'Кт' then Account Else CorAccount END as AccountKT,
			|RecorderGUID,
			|LineNumber,
			|max(RegulatedAmountNew) as RegulatedAmount
			|FROM dbo." + Таблица + " WHERE Base = '" + База + "' AND Period = TurnoverPeriod
			|";
		Иначе
			ТекстСоединения = Символы.ПС + "
			|	SELECT GUID, Presentation, Summa, Recorder, RecorderGUID, regulatedAmount, linesCount, lineNumber from " + ИмяВТ + "
			|	FULL JOIN (select Recorder, RecorderGUID, SUM(RegulatedAmount) AS RegulatedAmount, Count(LineNumber) as lineNumber FROM (
			|	SELECT Recorder,
			|	RecorderGUID,
			|	LineNumber,
			| 	Max(RegulatedAmount) as RegulatedAmount
			| 	FROM dbo." + Таблица + " WHERE Base = '" + База + "' AND Period = TurnoverPeriod 
			|";
		КонецЕсли;
		//-- 02.07.2024
		
		
		Если ЕстьПериод Тогда 
			
			ТекстСоединения = ТекстСоединения + Символы.ПС + " AND " + ПолеПериода + " BETWEEN '" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "' AND '" + Формат(ДатаКонцаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'";
			
		КонецЕсли; 
		
				//++ 01.07.2025 Кибернетика Корыткин
		Если ОтборПоОрганизации Тогда
		
			ТекстСоединения = ТекстСоединения + Символы.ПС + " AND Organization = '" + Параметры.Организация + "'";
            	
		КонецЕсли;
		//-- 01.07.2025 
		//++ 02.07.2024 Кибернетика Корыткин Сравнение с учетом счетов
		Если СравнениеПоСчетам Тогда
			ТекстСоединения = ТекстСоединения + "		
			|GROUP BY 
			|LineNumber,
			|Recorder,
			|RecorderGUID,
			|base,
			|(case when typeofturnovers = 'Дт' then Account Else CorAccount END),
			|(case when typeofturnovers = 'Кт' then Account Else CorAccount END)) AS Records
			|left join ChartOfAccounts as cd on Records.AccountDT = cd.GUID and Records.base = cd.Base
			|left join ChartOfAccounts as ck on Records.AccountKT = ck.GUID and Records.base = ck.Base
			|GROUP BY Recorder, RecorderGUID, cd.code, ck.code) as SQLBase 
			|ON SQLBase.RecorderGUID = GUID
			|AND SQLBase.RegulatedAmount = Summa
			|AND linesCount = lineNumber
			|AND AccDt = SQLbase.AccountDt
			|AND AccKt = SQLBase.AccountKt
			|WHERE (Guid is NULL or RecorderGUID IS NULL)" + Символы.ПС;
			
		Иначе
			ТекстСоединения = ТекстСоединения + "
			|	GROUP BY LineNumber, Recorder, RecorderGUID) AS Records
			|	GROUP BY Recorder, RecorderGUID) as SQLBase 
			| 	ON SQLBase.RecorderGUID = GUID
			| 	AND SQLBase.RegulatedAmount = Summa  AND linesCount = lineNumber
			| 	WHERE (Guid is NULL or RecorderGUID IS NULL)" + Символы.ПС;
		КонецЕсли;
		//-- 02.07.2024
		
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;
		
		
	ИначеЕсли Тип = 3 Тогда   
		
		СтруктураДанных = Параметры.СтруктураДанных;
		//Если ЕстьЗаписи Тогда
		
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		ТекстСозданияВТ = "create table "+ ИмяВТ + "				
		| (";
		
		МассивРеквизитов = Новый Массив;
		Для каждого Реквизит из СтруктураДанных Цикл
			Если Реквизит.ГУИД Тогда
				Если Лев(Реквизит.Тип, 7) = "Строка(" Тогда	
					МассивРеквизитов.Добавить(Реквизит.Имя + " nvarchar" + Прав(Реквизит.Тип, СтрДлина(Реквизит.Тип) - 6));			
				Иначе
					МассивРеквизитов.Добавить(Реквизит.Имя + " nvarchar(36)");  		
				КонецЕсли;
				МассивРеквизитов.Добавить(Реквизит.Имя + "_Table nvarchar(100)");
				
			ИначеЕсли Лев(Реквизит.Тип, 5) = "Число" Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя + " " + ПолучитьТипЧислаSQL(Реквизит.Тип));
				
			ИначеЕсли Реквизит.Тип = "Дата" Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя + " char(20)"); 
			ИначеЕсли СтрНайти(Реквизит.Тип, "Строка") = 1 Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя + " " + СтрЗаменить(Реквизит.Тип, "Строка", "nvarchar"));
			Иначе
				МассивРеквизитов.Добавить(Реквизит.Имя + " nvarchar(100)");
			КонецЕсли;   						
		КонецЦикла;
		
		
		ТекстСозданияВТ = ТекстСозданияВТ + СтрСоединить(МассивРеквизитов, ", ") + ")" + Символы.ПС;
		
		УдалитьФайл = Истина;
		
		ИмяФайла = КаталогХраненияФайловСравнения + "data_compare" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		
		
		Если ЕстьЗаписи Тогда
			Для каждого Запись из Параметры.Записи Цикл  
				
				МассивСтроки = Новый Массив;
				Для каждого ЗначениеРеквизита Из Запись Цикл
					
					
					Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
						МассивСтроки.Добавить(Формат(ЗначениеРеквизита, "ЧРД=.; ЧГ=0; ЧН=0"));
					ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
						МассивСтроки.Добавить(Формат(ЗначениеРеквизита, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
					Иначе 
						МассивСтроки.Добавить(ЗначениеРеквизита);
						
					КонецЕсли; 					
					
				КонецЦикла;
				
				СтрокаЗаписиВТ = СтрСоединить(МассивСтроки, Символы.Таб);
				
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);		
			КонецЦикла;  
			
		КонецЕсли;
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
		
		
		ТекстСоединения = Символы.ПС + "
		|	SELECT ";
		
		МассивВыборки = Новый Массив;
		МассивПодзапроса = Новый Массив;
		МассивСоединения = Новый Массив;   
		МассивУсловийTT = Новый Массив;
		МассивУсловийSB = Новый Массив;
		
		Для каждого Реквизит из СтруктураДанных Цикл
			Если Реквизит.ГУИД Тогда
				МассивВыборки.Добавить("TT." + Реквизит.Имя + " AS TT" + Реквизит.Имя+ ", TT." + Реквизит.Имя + "_Table AS TT" + Реквизит.Имя + "_Table, SB." + Реквизит.Имя + " AS SB" + Реквизит.Имя + ", SB." + Реквизит.Имя + "_Table AS SB" + Реквизит.Имя + "_Table");
				МассивПодзапроса.Добавить(Реквизит.Имя + "_Table");
				
			Иначе
				МассивВыборки.Добавить("TT." + Реквизит.Имя + " AS TT" + Реквизит.Имя+ ", SB." + Реквизит.Имя + " AS SB" + Реквизит.Имя);
			КонецЕсли;
			МассивПодзапроса.Добавить(Реквизит.Имя);
			
			//условие связи слишком медлено работает, меняем на другое через coalesce
			//МассивСоединения.Добавить("(TT."+ Реквизит.Имя + " = SB." + Реквизит.Имя + " OR (" + "TT."+ Реквизит.Имя + " IS NULL AND SB." + Реквизит.Имя + " IS NULL))");
			
			
			Если Реквизит.ГУИД Тогда
				ПустоеЗначение = "'NULL'";
			ИначеЕсли СтрНайти(Реквизит.Тип, "Число") = 1 Тогда
				ПустоеЗначение = "666";
			ИначеЕсли Реквизит.Тип = "Дата" Тогда
				ПустоеЗначение = "'1900-01-01 00:00:00.0000000'";
			Иначе
				ПустоеЗначение = "'NULL'";
			КонецЕсли;   	
			
			Если Реквизит.Тип = "Дата" Тогда
				МассивСоединения.Добавить("COALESCE(Cast(TT."+ Реквизит.Имя + " as datetime2), " + ПустоеЗначение + ") = COALESCE(SB." + Реквизит.Имя +", " + ПустоеЗначение + ")");
			Иначе	
				МассивСоединения.Добавить("COALESCE(TT."+ Реквизит.Имя + ", " + ПустоеЗначение + ") = COALESCE(SB." + Реквизит.Имя +", " + ПустоеЗначение + ")");
			КонецЕсли;
			МассивУсловийTT.Добавить("TT." + Реквизит.Имя + " IS NULL");	
			МассивУсловийSB.Добавить("SB." + Реквизит.Имя + " IS NULL");	
		КонецЦикла;
		
		ТекстСоединения = ТекстСоединения + СтрСоединить(МассивВыборки, ", ") + " FROM " + ИмяВТ + " AS TT
		|	FULL JOIN (SELECT " + СтрСоединить(МассивПодзапроса, ", ") + " FROM dbo." + Таблица + " WHERE Base = '" + База + "'";
		
		Если ЕстьПериод Тогда 
			//++ Корыткин А.А. 01.04.2024
			Если ТипПериода = 1 Тогда
				Если Не ЗначениеЗаполнено(ДатаНачалаВыборки) Тогда
					ДатаНачалаВыборки = "'1900-01-01 00:00:00.0000000'";;
				Иначе
					ДатаНачалаВыборки = "'" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'"; //08.04.2024 добавлены кавычки
				КонецЕсли;
				ТекстСоединения = ТекстСоединения + Символы.ПС + " AND " + ПолеПериода + " = " + ДатаНачалаВыборки;
				
			Иначе	
				
				ТекстСоединения = ТекстСоединения + Символы.ПС + " AND " + ПолеПериода + " BETWEEN '" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "' AND '" + Формат(ДатаКонцаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'";
			КонецЕсли;
			//-- Корыткин А.А. 01.04.2024
		КонецЕсли; 
		ТекстСоединения = ТекстСоединения + ") AS SB
		|ON " + СТрСоединить(МассивСоединения, " AND ")	+"
		//
		| 	WHERE " + СтрСоединить(МассивУсловийTT, " AND ") + " OR " + СтрСоединить(МассивУсловийSB, " AND ") + Символы.ПС;
		
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;
		//КонецЕсли;
		
		
		
	ИначеЕсли Тип = 2 Тогда
		
		
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		ТекстСозданияВТ = "create table " + ИмяВТ + "
		| (GUID nvarchar(36), Presentation nvarchar(150)";
		
		Если ЕстьКР Тогда
			Для каждого КР из МассивКР Цикл
				
				Если Лев(КР.Тип,5) = "Число" Тогда    
					
					ТекстСозданияВТ = ТекстСозданияВТ + ", " + КР.ИмяПоля + " " + ПолучитьТипЧислаSQL(КР.Тип);
					
				Иначе
					ТекстСозданияВТ = ТекстСозданияВТ + ", " + КР.ИмяПоля + " " + "decimal (15,0)";	
				КонецЕсли
				
			КонецЦикла
			
		КонецЕсли;	
		ТекстСозданияВТ = ТекстСозданияВТ + ")" + Символы.ПС;
		
		УдалитьФайл = Истина;
		
		ИмяФайла = КаталогХраненияФайловСравнения + "data_compare" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		Если ЕстьЗаписи Тогда
			
			Для каждого Запись из Параметры.Записи Цикл  
				СтрокаЗаписиВТ = Строка(Запись.ГУИД) + Символы.Таб + Строка(Запись.Представление);
				Если ЕстьКР Тогда
					Для каждого КР из МассивКР Цикл 
						СтрокаЗаписиВТ = СтрокаЗаписиВТ + Символы.Таб + Формат(Запись[КР.Имя1C],"ЧРД=.; ЧН=0; ЧГ=0");		
					КонецЦикла
					
				КонецЕсли;
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);		
			КонецЦикла; 
			
		КонецЕсли;					
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
		
		ТекстСоединения = Символы.ПС + "
		| SELECT TT.GUID,
		| TT.Presentation,
		| SB.Registrator, 
		| SB.RegistratorGUID";
		
		Если ЕстьКР Тогда
			
			Для каждого КР из МассивКР Цикл 
				ТекстСоединения = ТекстСоединения + ", " + "TT." + Кр.ИмяПоля + " AS TT"+ Кр.ИмяПоля + ", SB." + Кр.ИмяПоля + " AS SB"+ Кр.ИмяПоля + Символы.ПС;		
			КонецЦикла
			
		КонецЕсли;
		
		ТекстСоединения = ТекстСоединения + Символы.ПС + "FROM " + ИмяВТ + " AS TT
		|FULL JOIN (
		|SELECT Registrator,
		|RegistratorGUID";
		
		Если ЕстьКР Тогда
			
			Для каждого КР из МассивКР Цикл
				
				Если КР.ИмяПоля = "countTotal" Тогда
					ТекстСоединения = ТекстСоединения + ", COUNT(*) AS countTotal" + Символы.ПС;		
				Иначе	
					ТекстСоединения = ТекстСоединения + ", " + ?(Лев(Кр.Тип, 5) = "Число", "SUM(" + Кр.ИмяПоля + ") AS " + Кр.ИмяПоля, "COUNT(DISTINCT " + Кр.ИмяПоля + ") AS " + Кр.ИмяПоля)  + Символы.ПС;		
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстСоединения = ТекстСоединения + "
		| 	FROM dbo." + Таблица + " WHERE Base = '" + База + "'";
		
		Если ЕстьПериод Тогда 
			
			ТекстСоединения = ТекстСоединения + Символы.ПС + " AND " + ПолеПериода + " BETWEEN '" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "' AND '" + Формат(ДатаКонцаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'";
			
		КонецЕсли; 
		
		ТекстСоединения = ТекстСоединения + "
		|	GROUP BY Registrator, RegistratorGUID) as SB 
		| 	ON SB.RegistratorGUID = TT.GUID";
		
		
		Если ЕстьКР Тогда
			
			Для каждого КР из МассивКР Цикл 
				ТекстСоединения = ТекстСоединения + Символы.ПС + "AND TT." + Кр.ИмяПоля + " = SB." + Кр.ИмяПоля  + Символы.ПС;		
			КонецЦикла
			
		КонецЕсли;
		
		ТекстСоединения = ТекстСоединения + "
		| 	WHERE (TT.Guid is NULL or SB.RegistratorGUID IS NULL)" + Символы.ПС;
		
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;
	ИначеЕсли Тип = 1 Тогда
		//Справочники, документы и т.п.
		
		
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		ТекстСозданияВТ = "create table " + ИмяВТ + "
		| (GUID nvarchar(36))"; 
		
		УдалитьФайл = Истина;
		
		ИмяФайла = КаталогХраненияФайловСравнения + "data_compare" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		Если ЕстьЗаписи Тогда	
			Для каждого Запись из Параметры.Записи Цикл
				ЗаписьТекста.ЗаписатьСтроку(Запись.ГУИД);		
			КонецЦикла;  
		КонецЕсли;
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
		
		
		ТекстСоединения = "
		|	SELECT TT.GUID AS TTGUID, SB.GUID as SBGUID";
		
		//++ Корыткин А.А. 01.04.2024
		Если ЕстьПериод Тогда
			Если ТипПериода = 1 Тогда
				Если Не ЗначениеЗаполнено(ДатаНачалаВыборки) Тогда
					ДатаНачалаВыборки = "'1900-01-01 00:00:00.0000000'";;
				Иначе
					ДатаНачалаВыборки = "'" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'";
				КонецЕсли;
				ТекстПериода = " AND " + ПолеПериода + " = " + ДатаНачалаВыборки;
				
			Иначе	
				
				ТекстПериода = " AND " + ПолеПериода + " BETWEEN '" + Формат(ДатаНачалаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "' AND '" + Формат(ДатаКонцаВыборки, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс""") + "'";
			КонецЕсли;
		КонецЕсли;	
		//-- Корыткин А.А. 01.04.2024		
		
		ТекстСоединения = ТекстСоединения + Символы.ПС + "FROM " + ИмяВТ + " AS TT
		| FULL JOIN 
		| (SELECT GUID FROM dbo." + Таблица + "
		| WHERE Id > 0 AND Base = '" + База + "'" + ТекстПериода + ") AS SB
		| ON TT.GUID = SB.GUID
		| WHERE (TT.GUID is NULL or SB.GUID IS NULL)" + Символы.ПС;  
		
		
		
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;		
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаПредНачало + ТекстСоединения + ТекстУдаленияВТ;
	
	
	Данные = "";
	Попытка
		
		Если БазаSQL = "" Тогда
			КомандаSQL = Соединение(); 
		КонецЕсли;
		//для BCP сначала запускает создание временной таблицы, потом загружаем данные в эту таблицу
		
		КомандаSQL.CommandText = ТекстСозданияВТ;
		КомандаSQL.Execute();
		ВыполнитьОбмен(КомандаЗапускаBCP);
		УдалитьФайлы(ИмяФайла); 
		//++27.01.2025 Удаление пустых логов 
		ФайлыОшибок = НайтиФайлы(НастройкиОбмена.КаталогОшибокSQL, "data_compare*error_log.txt");
		ФайлыНаУдаление = Новый Массив;
		Для Каждого ФайлОшибок Из ФайлыОшибок Цикл 	
			Если ФайлОшибок.ЭтоФайл() Тогда
				Если ФайлОшибок.Размер() = 0 Тогда
					УдалитьФайлы(ФайлОшибок.ПолноеИмя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		//--27.01.2025
		
		
		КомандаSQL.CommandText = ТекстЗапроса;
		Выборка = КомандаSQL.Execute(); 
		
		Если КомандаSQL.ActiveConnection.Errors.Count > 0 Тогда 
			ОписаниеОшибки = "";	
			Для Каждого Ошибка из КомандаSQL.ActiveConnection.Errors Цикл 
				ОписаниеОшибки = ОписаниеОшибки + "Код: " + Ошибка.Number + ". " + Ошибка.Description + Символы.ПС;     
			КонецЦикла;   
			
			Возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		КонецЕсли;  
		
		
		Результат = Новый Массив;
		
		
		Пока НЕ Выборка.EOF Цикл  
			СчетчикПолейРезультата = 0;
			СтруктураРезультата = Новый Структура;
			Пока СчетчикПолейРезультата < Выборка.Fields.Count Цикл				
				СтруктураРезультата.Вставить(Выборка.Fields.Item(СчетчикПолейРезультата).Name, Выборка.Fields(Выборка.Fields.Item(СчетчикПолейРезультата).Name).Value);  
				СчетчикПолейРезультата = СчетчикПолейРезультата + 1;
			КонецЦикла;
			Результат.Добавить(СтруктураРезультата);	
			Выборка.MoveNext();
		КонецЦикла;  
		
		
	Исключение
		ОписаниеОшибки =  ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка веб-сервиса", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		
		
		Если УдалитьФайл Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
		
		Возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		
	КонецПопытки;
	
	Попытка
		Если УдалитьФайл Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	Исключение  
		ЗаписьЖурналаРегистрации("Ошибка удаления файла с данными", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	ХЗ = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат Новый Структура("Результат, Данные", Истина, ХЗ);
	
КонецФункции

Функция УдалитьЗаписи(База, ОбъектУдаления, Тип, ВхПараметры) Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Попытка
		Параметры = ВхПараметры.ПОлучить();
	Исключение      
		возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Неверный формат входящих параметров. Возможно, используется устаревшая версия сверки");
		
	КОнецПопытки;
	
	Если Параметры = Неопределено Тогда
		возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Неверный формат входящих параметров.");
	КонецЕсли; 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыКВыгрузке.НаименованиеТаблицыSQL КАК НаименованиеТаблицыSQL
		|ИЗ
		|	Справочник.ОбъектыКВыгрузке КАК ОбъектыКВыгрузке
		|ГДЕ
		|	ОбъектыКВыгрузке.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ОбъектУдаления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда  
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НаименованиеТаблицыSQL) Тогда
			Таблица= СтрЗаменить(ВыборкаДетальныеЗаписи.НаименованиеТаблицыSQL, "_tmp", "");
		Иначе 
			возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Не задано имя таблицы SQL.");

		КонецЕсли;
	Иначе
		Если Параметры = Неопределено Тогда
			возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, "Объект выгрузки отсутствует в схеме данных для выгрузки.");
		КонецЕсли; 
	КонецЕсли;

	
	ЕстьЗаписи = Ложь;
	
	Если Параметры.Свойство("БазаSQL") Тогда
		БазаSQL = Параметры.БазаSQL
	Иначе	
		БазаSQL = "";
	КонецЕсли;
	
	Если Параметры.Свойство("Записи") Тогда
		Если Параметры.Записи.Количество() <> 0 Тогда
			ЕстьЗаписи = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	КаталогХраненияФайловУдаления = НастройкиОбмена.ПутьККаталогуХраненияФайловОбмена;
	КаталогХраненияФайловУдаления = КаталогХраненияФайловУдаления + ?(Прав(КаталогХраненияФайловУдаления, 1) = "\", "", "\" );
	
	
	//Общие принципы:
	//Создаем временную таблицу, куда записываем все записи из входящего параметра Записи
	
	//Создадим текст запроса	
	
	ТекстЗапросаПредНачало = "SET NOCOUNT ON" + Символы.ПС;
	ТекстСозданияВТ = "";
	ТекстУдаленияВТ = ""; 
	ТекстСоединения = "";  
	ТекстУдаленияИзИерархии = "";
	
	УдалитьФайл = Ложь;
	
	Если Тип = 4 Тогда //регистры бухгалтерии
		
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		ТекстСозданияВТ = "create table " + ИмяВТ + "
		| (	[Base] [nvarchar](50) NULL,
		|	[RecorderGUID] nvarchar(36))" + Символы.ПС;  	
		УдалитьФайл = Истина;
		
		ИмяФайла = КаталогХраненияФайловУдаления + "data_delete" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		Если ЕстьЗаписи Тогда
			
			Для каждого Запись из Параметры.Записи Цикл  
				СтрокаЗаписиВТ = Строка(Запись.RecorderGUID);
				ЗаписьТекста.ЗаписатьСтроку(СокрЛП(База) + Символы.Таб + СтрокаЗаписиВТ);	 //09.02.2024
				
			КонецЦикла;  
			
		КонецЕсли;						
		
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
		
		ТекстУдаления = "DELETE FROM " + Таблица + " WHERE EXISTS (SELECT 1 FROM " + ИмяВт + " WHERE " + Таблица + ".[RecorderGUID] = " + ИмяВТ + ".[RecorderGUID] AND " + Таблица + ".[Base] = " + ИмяВт + ".[Base])";
		
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ; 
		
		
	ИначеЕсли Тип = 3 Тогда //Регистры сведений без регистраторов 
		
		СтруктураДанных = Параметры.СтруктураДанных;
		
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		ТекстСозданияВТ = "create table "+ ИмяВТ + "				
		| ([Base] [nvarchar](50) NULL,";
		
		МассивРеквизитов = Новый Массив;
		Для каждого Реквизит из СтруктураДанных Цикл
			Если Реквизит.ГУИД Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя + " nvarchar(36)"); 
			ИначеЕсли Лев(Реквизит.Тип, 5) = "Число" Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя + " " + ПолучитьТипЧислаSQL(Реквизит.Тип));				
			ИначеЕсли Реквизит.Тип = "Дата" Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя + " char(20)"); 
			ИначеЕсли СтрНайти(Реквизит.Тип, "Строка") = 1 Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя + " " + СтрЗаменить(Реквизит.Тип, "Строка", "nvarchar"));
			Иначе
				МассивРеквизитов.Добавить(Реквизит.Имя + " nvarchar(100)");
			КонецЕсли;   						
		КонецЦикла;
		
		
		ТекстСозданияВТ = ТекстСозданияВТ + СтрСоединить(МассивРеквизитов, ", ") + ")" + Символы.ПС;
		
		УдалитьФайл = Истина;
		
		
		ИмяФайла = КаталогХраненияФайловУдаления + "data_delete" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		
		
		Если ЕстьЗаписи Тогда
			Для каждого Запись из Параметры.Записи Цикл  
				
				МассивСтроки = Новый Массив; 
				МассивСтроки.Добавить(СокрЛП(База));
				Для каждого ЗначениеРеквизита Из Запись Цикл
					
					Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
						МассивСтроки.Добавить(Формат(ЗначениеРеквизита, "ЧРД=.; ЧГ=0; ЧН=0"));
					ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
						МассивСтроки.Добавить(Формат(ЗначениеРеквизита, "ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
					Иначе 
						МассивСтроки.Добавить(ЗначениеРеквизита);						
					КонецЕсли; 					
					
				КонецЦикла;
				
				СтрокаЗаписиВТ = СтрСоединить(МассивСтроки, Символы.Таб);
				
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);		
			КонецЦикла;  
			
		КонецЕсли; 
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);
		
		ТекстУдаления = "
		|MERGE [dbo].[" + Таблица + "] B
		|	USING [dbo].[" + ИмяВТ + "] D
		|	ON B.Base = D.Base";  
		
		
		Для каждого Реквизит из СтруктураДанных Цикл
			
			//++ 16.04.2024 Кибернетика Корыткин А.А. Учитываем, что NULL не равно NULL 
			ТекстУдаления = ТекстУдаления + " AND COALESCE(B." + Реквизит.Имя + ", 'NULL') = COALESCE(D." + Реквизит.Имя + ",'NULL')";
			//--
			
		КонецЦикла;	
		
		ТекстУдаления = ТекстУдаления + " 
		|WHEN MATCHED THEN
		|	DELETE
		|;";  	 
		
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ; 
		
		
	ИначеЕсли Тип = 2 Тогда  //Регистры с регистраторами
		
		
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		ТекстСозданияВТ = "create table " + ИмяВТ + "
		| ([Base] [nvarchar](50) NULL,
		|  [RegistratorGUID] nvarchar(36)";
		
		ТекстСозданияВТ = ТекстСозданияВТ + ")" + Символы.ПС;
		
		УдалитьФайл = Истина;
		
		ИмяФайла = КаталогХраненияФайловУдаления + "data_delete" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		Если ЕстьЗаписи Тогда
			
			Для каждого Запись из Параметры.Записи Цикл  
				СтрокаЗаписиВТ = Строка(СокрЛП(База) + Символы.Таб + Запись.registratorGUID);
				
				ЗаписьТекста.ЗаписатьСтроку(СтрокаЗаписиВТ);		
			КонецЦикла; 
			
		КонецЕсли;					
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);			
		
		ТекстУдаления = "DELETE FROM " + Таблица + " WHERE EXISTS (SELECT 1 FROM " + ИмяВт + " WHERE " + Таблица + ".[RegistratorGUID] = " + ИмяВТ + ".[RegistratorGUID] AND " + Таблица + ".[Base] = " + ИмяВт + ".[Base])";
		
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ; 
		
	ИначеЕсли Тип = 1 Тогда //Объекты
		
		
		УИД = XMLСтрока(Новый УникальныйИдентификатор); 
		ИмяВТ = "TempTable" + СтрЗаменить(УИД, "-", ""); 
		
		ТекстСозданияВТ = "create table " + ИмяВТ + "
		| (	[Base] [nvarchar](50) NULL,
		| [GUID] nvarchar(36))";
		//--
		УдалитьФайл = Истина;
		
		
		ИмяФайла = КаталогХраненияФайловУдаления + "data_delete" + СтрЗаменить(УИД, "-", "") + ".csv";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF16);
		
		Если ЕстьЗаписи Тогда	
			Для каждого Запись из Параметры.Записи Цикл
				ЗаписьТекста.ЗаписатьСтроку(СокрЛП(База) + Символы.Таб + Запись.GUID);		
			КонецЦикла;  
		КонецЕсли;
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		ЗаписьТекста.Закрыть(); 
		
		КомандаЗапускаBCP = ПолучитьСтрокуКомандыСозданияВТ(НастройкиОбмена, ФайлНаДиске, ИмяВТ, БазаSQL);  
		
		ТекстУдаления = "
		|MERGE [dbo].[" + Таблица + "] B
		|	USING [dbo].[" + ИмяВТ + "] D
		|	ON B.Base = D.Base AND B.GUID = D.GUID
		|WHEN MATCHED THEN
		|	DELETE
		|;";  	 
		
		ТекстУдаленияИзИерархии = "
		|IF EXISTS (SELECT * FROM sys.objects where object_id = OBJECT_ID(N'[dbo].[" + Таблица + "_h]') AND type in (N'U'))
		|BEGIN
		|MERGE [dbo].[" + Таблица + "_h] B
		|	USING [dbo].[" + ИмяВТ + "] D
		|	ON B.Base = D.Base AND B.GUID = D.GUID
		|WHEN MATCHED THEN
		|	DELETE
		|;
		|END";
		ТекстУдаленияВТ = Символы.ПС + "DROP table " + ИмяВТ;
		
		
	КонецЕсли;
	
	
	
	ТекстЗапроса = ТекстЗапросаПредНачало + ТекстУдаления + ТекстУдаленияИзИерархии + ТекстУдаленияВТ;
	//
	
	Данные = "";
	Попытка
		
		Если БазаSQL = "" Тогда
			КомандаSQL = Соединение(); 
		КонецЕсли;
		//для BCP сначала запускает создание временной таблицы, потом загружаем данные в эту таблицу
		
		КомандаSQL.CommandText = ТекстСозданияВТ;
		КомандаSQL.Execute();
		ВыполнитьОбмен(КомандаЗапускаBCP);
		
		КомандаSQL.CommandText = ТекстЗапроса;
		КомандаSQL.Execute(); 
		
		Если КомандаSQL.ActiveConnection.Errors.Count > 0 Тогда 
			ОписаниеОшибки = "";	
			Для Каждого Ошибка из КомандаSQL.ActiveConnection.Errors Цикл 
				ОписаниеОшибки = ОписаниеОшибки + "Код: " + Ошибка.Number + ". " + Ошибка.Description + Символы.ПС;     
			КонецЦикла;   
			
			Возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		КонецЕсли;  
		
	Исключение
		ОписаниеОшибки =  ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка подключения к SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);		
		
		Если УдалитьФайл Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
		
		Возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		
	КонецПопытки;
	
	Попытка
		Если УдалитьФайл Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	Исключение  
		ЗаписьЖурналаРегистрации("Ошибка удаления файла с данными", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;                                
	
	Возврат Новый Структура("Результат", Истина);	
	
КонецФункции

Функция ПолучитьСтрокуКомандыСозданияВТ(Настройки, ВходящийФайл, ИмяТаблицы, БазаSQL = "") Экспорт
		
	//Если Настройки.АвторизацияWindows Тогда
	//	СтрокаАвторизации = " -T ";
	//Иначе
		СтрокаАвторизации = " -U " + СокрЛП(Настройки.ЛогинSQL) + " -P " + СокрЛП(Настройки.ПарольSQL);	 
	//КонецЕсли; 
	
	НаименованиеТаблицыSQL = ИмяТаблицы;
	
	СтрокаЗапроса = """" + СокрЛП(Настройки.bcpSQL) + """ " + СокрЛП(?(БазаSQL = "", Настройки.БазаДанныхSQL, БазаSQL)) + ".dbo." + СокрЛП(ИмяТаблицы) 
		+ " in """ + СокрЛП(ВходящийФайл.ПолноеИмя) + """ -S " + СокрЛП(Настройки.ИнстансSQL) + СтрокаАвторизации
		+ " -w -e """ + СокрЛП(Настройки.КаталогОшибокSQL + ВходящийФайл.ИмяБезРасширения + "_error_log.txt""");
 
				  
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "%", "%%");  
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "<", "^<");
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, ">", "^>"); 
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "|", "^|");
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "&", "^&");
		
	Возврат СтрокаЗапроса;

КонецФункции

Функция ПолучитьТипЧислаSQL(ЧисловойТипСтрокой);

	ЧислоИкс = Прав(ЧисловойТипСтрокой, СтрДлина(ЧисловойТипСтрокой) - 6);
	ЧислоИкс = Лев(ЧислоИкс, СтрДлина(ЧислоИкс) -1);
	Целая = Лев(ЧислоИкс, СтрНайти(ЧислоИкс, ",") - 1);
	Дробная = Прав(ЧислоИкс, СтрДлина(ЧислоИкс) - СтрНайти(ЧислоИкс, ","));  
	возврат "decimal("+ Целая + "," + Дробная + ")";
КонецФункции

//-- 11.12.2024  

//++ 09.03.2025 Кибернетика Корыткин

Функция ПолучитьДанныеОбъекта(СтруктураПараметров) Экспорт
	
	ИмяТаблицыSQL = РаботаСЭталонамиСервер.ПолучитьТаблицуSQL(СтруктураПараметров.Источник);
	GUID  = СтруктураПараметров.GUID;
	База = СтруктураПараметров.База;
	Источник = СтруктураПараметров.Источник;

	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();


	Если ИмяТаблицыSQL = "" Тогда
		возврат "Не удалось определить таблицу SQL";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураТаблицSQLСтруктураТаблицыSQL.ИмяПоляSQL КАК ИмяПоляSQL,
	               |	СтруктураТаблицSQLСтруктураТаблицыSQL.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Справочник.СтруктураТаблицSQL.СтруктураТаблицыSQL КАК СтруктураТаблицSQLСтруктураТаблицыSQL
	               |ГДЕ
	               |	СтруктураТаблицSQLСтруктураТаблицыSQL.Ссылка = &СтруктураТаблицы
	               |	И СтруктураТаблицSQLСтруктураТаблицыSQL.ИмяПоляSQL <> """"
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";


	Запрос.УстановитьПараметр("СтруктураТаблицы", Источник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		возврат ("Необходимо проверить имена полей SQL в структуре таблиц");	
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	
	ЗапросБД = "SELECT "; 
		
	МассивПолей = Новый Массив;      
	
	ТЗСоответствий = Новый ТаблицаЗначений;
	
		
	//МассивПолей.Добавить("S.GUID AS GUID");
	//МассивПолей.Добавить("S.Name AS Name");

	
	Пока Выборка.Следующий() Цикл
		
		МассивПолей.Добавить("S." + Выборка.ИмяПоляSQL + " AS " + Выборка.ИмяПоляSQL);
		ТЗСоответствий.Колонки.Добавить(Выборка.ИмяПоляSQL);
	КонецЦикла;    
	
	//МассивПолей.Добавить("D.DestGUID AS DestGUID");
	
	ЗапросБД = ЗапросБД + СтрСоединить(МассивПолей, ",") + " FROM [dbo].[" + ИмяТаблицыSQL + "] AS S
	|";
	
	
	ЗапросБД = ЗапросБД +  "WHERE S.GUID = '" +СокрЛП(GUID) + "' AND S.base = '" + СокрЛП(База) + "'";    
		
	

	Попытка
		
		КомандаSQL = Соединение();
		
		КомандаSQL.CommandText = ЗапросБД;
		Выборка = КомандаSQL.Execute(); 
				
		Если КомандаSQL.ActiveConnection.Errors.Count > 0 Тогда 
			ОписаниеОшибки = "";	
			Для Каждого Ошибка из КомандаSQL.ActiveConnection.Errors Цикл 
				ОписаниеОшибки = ОписаниеОшибки + "Код: " + Ошибка.Number + ". " + Ошибка.Description + Символы.ПС;     
			КонецЦикла;   
			
			Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
		КонецЕсли;  
		
		
		Результат = Новый Массив;
		  
		
		Пока НЕ Выборка.EOF Цикл  
			СчетчикПолейРезультата = 0;
			СтруктураРезультата = Новый Структура;  
			
			Пока СчетчикПолейРезультата < Выборка.Fields.Count Цикл				
				СтруктураРезультата.Вставить(Выборка.Fields.Item(СчетчикПолейРезультата).Name, Выборка.Fields(Выборка.Fields.Item(СчетчикПолейРезультата).Name).Value);  
								
				СчетчикПолейРезультата = СчетчикПолейРезультата + 1; 	
			КонецЦикла;  
			
			Результат.Добавить(СтруктураРезультата);	
			Выборка.MoveNext();
		КонецЦикла;  
		
		Возврат результат;
	Исключение
		ОписаниеОшибки =  ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка веб-сервиса", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		
		возврат ОписаниеОшибки;
	КонецПопытки;




КонецФункции

//-- 09.03.2025
