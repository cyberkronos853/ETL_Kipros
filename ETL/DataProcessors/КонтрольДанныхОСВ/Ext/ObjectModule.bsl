Перем дзДанныеОСВ;

Функция SQLQueryBalancesMonth(РеференсИБ, ДатаНачала, ДатаОкончания)  
	
	 ТекстЗапроса = "SET NOCOUNT ON;
		|DECLARE @Base nvarchar(50), @StartPeriod date, @EndPeriod date;
        |
		|SET @Base = '%1';
		|SET @StartPeriod = '%2';
		|SET @EndPeriod = '%3';
        |
		|SELECT 
		|	Organisation As Organisation,
		|	Code As Code,
		|	SUM(Case When IsNull(StartBalance,0) >= 0 Then IsNull(StartBalance,0) End) As StartBalanceDt,
		|	SUM(Case When IsNull(StartBalance,0) <= 0 Then -1 * IsNull(StartBalance,0) End) As StartBalanceKt,
		|	SUM(IsNull(Dt,0)) As Dt,
		|	SUM(IsNull(Kt,0)) As Kt,
		|	SUM(Case When IsNull(EndBalance,0) >= 0 Then IsNull(EndBalance,0) End) As EndBalanceDt,
		|	SUM(Case When IsNull(EndBalance,0) <= 0 Then -1 * IsNull(EndBalance,0) End) As EndBalanceKt
		|FROM
		|(
		|	SELECT
		|		O.Name As Organisation
		|		,C.Code As Code 
		|		,SUM([RegulatedAmount]) As StartBalance
		|		,SUM(0) As Dt
		|		,SUM(0) As Kt
		|		,SUM(0) As EndBalance
		|	FROM [dbo].[BalancesMonth_s] B
		|		Left Join ChartOfAccounts C
		|		ON B.[Account] = C.GUID and B.Base = C.Base
		|		Left Join Organizations O
		|		ON B.Organization = O.GUID and B.Base = O.Base
		|	WHERE Period = @StartPeriod AND B.[Base] = @Base 
		|	GROUP BY O.Name, C.Code
        |
		|	UNION
		|
		|SELECT 
		|		O.Name
		|		,C.Code
		|		,SUM(0) 
		|		,SUM(0) 
		|		,SUM(0) 
		|		,SUM([RegulatedAmount])
		|	FROM [dbo].[BalancesMonth_s] B
		|		Left Join ChartOfAccounts C
		|		ON B.[Account] = C.GUID and B.Base = C.Base
		|		Left Join Organizations O
		|		ON B.Organization = O.GUID and B.Base = O.Base
		|	WHERE Period = DATEADD(month, DATEDIFF(month, 0, @EndPeriod) + 1, 0) AND B.[Base] = @Base
		|	GROUP BY O.Name, C.Code
		|	
		|	UNION
		|	
		|	SELECT
		|		O.Name
		|		,C.Code
		|		,SUM(0) 
		|		,SUM(Case When [TypeOfTurnovers] = 'Дт' TheN [RegulatedAmount] End) 
		|		,SUM(Case When [TypeOfTurnovers] = 'Кт' TheN [RegulatedAmount] End) 
		|		,SUM(0) 
		|	FROM [dbo].[Turnovers] T
		|		Left Join ChartOfAccounts C
		|		ON T.Base = C.Base AND T.Account = C.GUID
		|		Left Join Organizations O
		|		ON T.Base = O.Base AND T.Organization = O.GUID
		|	WHERE Period >= @StartPeriod AND Period <= @EndPeriod AND T.[Base] = @Base
		|	GROUP BY O.Name, C.Code) D
		|WHERE Code Is Not Null AND (IsNull(StartBalance,0) <> 0 Or IsNull(Dt,0) <> 0 Or IsNull(Kt,0) <> 0 Or IsNull(EndBalance,0) <> 0)
		|GROUP BY Organisation, Code
		|Order By Organisation, Code"; 
		
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, РеференсИБ, Формат(ДатаНачала, "ДФ=yyyy-MM-dd"), Формат(ДатаОкончания, "ДФ=yyyy-MM-dd"));
	
	Возврат ТекстЗапроса; 
		
КонецФункции 

Функция ПолучитьДанныеОСВЗаПериод(знач ДатаНачала, знач ДатаОкончания, знач МассивФайлов = Неопределено, РегламентноеЗадание = Ложь) Экспорт 
	
		
	СтруктураВозврата = Новый Структура("СтатусВозврата, Данные, ОписаниеОшибки", "", Неопределено, ""); 
	
	ДатаНачала = НачалоДня(?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, Дата("19000101")));
	ДатаОкончания = КонецДня(?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, Дата("29991231")));
	
	дзДанныеОСВ = Новый ДеревоЗначений; 
	дзДанныеОСВ.Колонки.Добавить("База", Новый ОписаниеТипов("СправочникСсылка.Базы"));
	дзДанныеОСВ.Колонки.Добавить("ПериодНачало", Новый ОписаниеТипов("Дата"));
	дзДанныеОСВ.Колонки.Добавить("ПериодОкончание", Новый ОписаниеТипов("Дата"));
	дзДанныеОСВ.Колонки.Добавить("Данные"); 
	дзДанныеОСВ.Колонки.Добавить("ЕстьОшибки"); 
	 
	

	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();  
	
	Если МассивФайлов = Неопределено Тогда
		
		
		ПутьККаталогуОтчётов = СокрЛП(НастройкиОбмена.ПутьККаталогуОтчётов);
		Если ПустаяСтрока(ПутьККаталогуОтчётов) Тогда
			СтруктураВозврата.СтатусВозврата = "Ошибка";
			СтруктураВозврата.ОписаниеОшибки = "не установлено значение поля 'ПутьККаталогуОтчётов' в константе основных настроек обмена.";
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		МассивФайлов = НайтиФайлы(ПутьККаталогуОтчётов, "*.xls");  
		
	КонецЕсли;
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		ИмяФайла = Файл.ИмяБезРасширения; 
		
		ПозицияСимволаТекстОСВ 	= СтрНайти(ИмяФайла, "ОСВ ");
		ПозицияСимволаТекстТире = СтрНайти(ИмяФайла, "-");
		
		Если НЕ (ПозицияСимволаТекстОСВ = 0 ИЛИ ПозицияСимволаТекстТире = 0) Тогда  
			
			РеференсИБ = СокрЛП(Лев(ИмяФайла, ПозицияСимволаТекстОСВ - 2));
			парамБазаСсылка = ПолучитьДанныеСправочникаБазы(РеференсИБ);
			
			Если Не ЗначениеЗаполнено(парамБазаСсылка) Тогда 
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("База " + РеференсИБ + " не найдена!");
				Продолжить;
			КонецЕсли;
			
			ДатаНачалаСтрокой = Сред(ИмяФайла, ПозицияСимволаТекстОСВ + 4, 8); 
			ДатаОкончанияСтрокой = Сред(ИмяФайла, ПозицияСимволаТекстТире + 1, 8);
			
			Попытка
				ПериодНачало 		= НачалоДня(Дата(Сред(ДатаНачалаСтрокой, 1, 4) + Сред(ДатаНачалаСтрокой, 5, 2) + Сред(ДатаНачалаСтрокой, 7, 2)));
				ПериодОкончание 	= КонецДня(Дата(Сред(ДатаОкончанияСтрокой, 1, 4) + Сред(ДатаОкончанияСтрокой, 5, 2) + Сред(ДатаОкончанияСтрокой, 7, 2)));
			Исключение  
				СтруктураВозврата.СтатусВозврата = "Ошибка";
				СтруктураВозврата.ОписаниеОшибки = "не удалось преобразовать часть имени файла '" + СокрЛП(ИмяФайла) + "' каталога отчетов в значение типа 'дата' (" + ОписаниеОшибки() + ").";
				Возврат СтруктураВозврата;
			КонецПопытки;  
			
			Если НЕ (ПериодНачало >= ДатаНачала
				И ПериодОкончание <= ДатаОкончания) Тогда 
				Продолжить; 
			КонецЕсли;
				
		Иначе
			Продолжить;
		КонецЕсли;
				
		РезультатОбработки = ПолучитьДанныеОСВXLS(Файл);  
		Если РезультатОбработки.СтатусВозврата = "Ошибка" Тогда 
			СтруктураВозврата.СтатусВозврата = РезультатОбработки.СтатусВозврата;
			СтруктураВозврата.ОписаниеОшибки = "не удалось прочитать данные XLS (" + СокрЛП(РезультатОбработки.ОписаниеОшибки) + ").";
			Возврат СтруктураВозврата;
		КонецЕсли; 
		
		Если РегламентноеЗадание Тогда
			ПереместитьФайл(Файл.ПолноеИмя, НастройкиОбмена.ПутьККаталогуАрхива + ?(Прав(НастройкиОбмена.ПутьККаталогуАрхива, 1) = "\", "", "\" ) + Файл.Имя);
        КонецЕсли;
		
		вртзДанные = РезультатОбработки.Данные.Скопировать(); 
		
		Если ТипЗапросаПериода = 1 Тогда 
						
			РезультатОбработки = ПолучитьДанныеОСВSQL(парамБазаСсылка, ПериодНачало, ПериодОкончание);  
			Если РезультатОбработки.СтатусВозврата = "Ошибка" Тогда 
				СтруктураВозврата.СтатусВозврата = РезультатОбработки.СтатусВозврата;
				СтруктураВозврата.ОписаниеОшибки = "не удалось прочитать данные SQL (" + СокрЛП(РезультатОбработки.ОписаниеОшибки) + ").";
				Возврат СтруктураВозврата;
			КонецЕсли; 
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатОбработки.Данные, вртзДанные);   
			
		КонецЕсли;   
		
		ДобавитьДанныеВдзОСВ(парамБазаСсылка, ?(ТипЗапросаПериода = 0, ДатаНачала, ПериодНачало), ?(ТипЗапросаПериода = 0, ДатаОкончания, ПериодОкончание), вртзДанные);
			
	КонецЦикла;
	
	Если ТипЗапросаПериода = 0 И ЗначениеЗаполнено(вртзДанные) Тогда
				
		РезультатОбработки = ПолучитьДанныеОСВSQL(БазаСсылка, ДатаНачала, ДатаОкончания);  
		
		Если РезультатОбработки.СтатусВозврата = "Ошибка" Тогда 
			СтруктураВозврата.СтатусВозврата = РезультатОбработки.СтатусВозврата;
			СтруктураВозврата.ОписаниеОшибки = "не удалось прочитать данные SQL (" + СокрЛП(РезультатОбработки.ОписаниеОшибки) + ").";
			Возврат СтруктураВозврата;
		КонецЕсли; 
		
		ДобавитьДанныеВдзОСВ(БазаСсылка, ДатаНачала, ДатаОкончания, РезультатОбработки.Данные);
		
	КонецЕсли;
	
	УстановитьКонтрольныеФлагидзОСВ();
	
	Если ЗаписыватьРезультатыСверки Тогда
		
		Для Каждого СтрокадзБаза Из дзДанныеОСВ.Строки Цикл 
			
			Для Каждого СтрокадзПериод Из СтрокадзБаза.Строки Цикл 
				
				ЕстьОшибкиСверки = Ложь;
				вртзДанные = СтрокадзПериод.Данные.Скопировать();
				
				Для Каждого ЗначениеПериодичности Из ПолучитьСписокПериодичности() Цикл
					
					ПериодичностьКонтроля = ЗначениеПериодичности.Значение;
					
					Для Каждого ЗначениеНаправленияКорреспонденцииСчетов Из ПолучитьСписокНаправленийКорреспонденцииСчетов() Цикл
						
						Направление = ЗначениеНаправленияКорреспонденцииСчетов.Значение;
						
						ЕстьОшибкиСверки = ЗначениеЗаполнено(вртзДанные.НайтиСтроки(Новый Структура("Контроль" + ПериодичностьКонтроля + Направление, Ложь)));
						Если ЕстьОшибкиСверки Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;   
				
				ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
				
				МенеджерЗаписи = РегистрыСведений.РезультатыСверки.СоздатьМенеджерЗаписи();  
				
				МенеджерЗаписи.Период = ТекущаяДатаСеанса() + ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 59);
				МенеджерЗаписи.База = СтрокадзБаза.База;
				МенеджерЗаписи.Результат = НЕ ЕстьОшибкиСверки;
				МенеджерЗаписи.Данные = Новый ХранилищеЗначения(вртзДанные); 
				МенеджерЗаписи.ДатаНачалаСтрокой = СтрокадзПериод.ПериодНачало; 
				МенеджерЗаписи.ДатаОкончанияСтрокой = СтрокадзПериод.ПериодОкончание;   
				
				МенеджерЗаписи.Записать();  
				
				
				СтрокадзПериод.ЕстьОшибки = ЕстьОшибкиСверки;
				
			КонецЦикла;  
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата.Данные = дзДанныеОСВ;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура УстановитьКонтрольныеФлагидзОСВ()
		
	Для Каждого СтрокадзБаза Из дзДанныеОСВ.Строки Цикл 
		
		Для Каждого СтрокадзПериод Из СтрокадзБаза.Строки Цикл 
			
			вртзДанные = СтрокадзПериод.Данные.Скопировать();
			вртзДанныеДляЗаполнения = вртзДанные.СкопироватьКолонки();
			
			ОбъектИтерации = вртзДанные.Скопировать();
			ОбъектИтерации.Свернуть("ОписаниеИсточника");
			МассивОписанийИсточника = ОбъектИтерации.ВыгрузитьКолонку("ОписаниеИсточника"); 
						
			ОбъектИтерации = вртзДанные.Скопировать();
			ОбъектИтерации.Свернуть("Счет");
			МассивСчетов = ОбъектИтерации.ВыгрузитьКолонку("Счет");
			
			Для Каждого Счет Из МассивСчетов Цикл
				
				МассивУдаляемых = Новый Массив;
				вртзДанные = СтрокадзПериод.Данные.Скопировать(СтрокадзПериод.Данные.НайтиСтроки(Новый Структура("Счет", Счет)));
				
				Для Каждого ЗначениеПериодичности Из ПолучитьСписокПериодичности() Цикл
					
					ПериодичностьКонтроля = ЗначениеПериодичности.Значение;
					
					Для Каждого ЗначениеНаправленияКорреспонденцииСчетов Из ПолучитьСписокНаправленийКорреспонденцииСчетов() Цикл
						
						Направление = ЗначениеНаправленияКорреспонденцииСчетов.Значение;
						
						ДанныеПоКорреспонденцииВалидны = Истина;
						СтрокаИсполнения = "ДанныеПоКорреспонденцииВалидны";
						Для Каждого ЗначениеМассива из МассивОписанийИсточника Цикл
							
							СтрокаИсполнения = СтрокаИсполнения + " = вртзДанные.Скопировать(вртзДанные.НайтиСтроки(Новый Структура(""Счет, ОписаниеИсточника"",""" + Счет + """, """ + ЗначениеМассива + """))).Итог(""" + ПериодичностьКонтроля + Направление + """)";
							
						КонецЦикла;   
						
						Выполнить(СтрокаИсполнения);
												
						вртзДанные.ЗаполнитьЗначения(ДанныеПоКорреспонденцииВалидны, "Контроль" + ПериодичностьКонтроля + Направление); 
						
					КонецЦикла;
					
				КонецЦикла; 
				
				Если ТолькоОшибочные Тогда  
					
					Для Каждого СтрокатзДанные Из вртзДанные Цикл
						
						ДанныеПоКорреспонденцииВалидны = Истина; 
						
						Для Каждого ЗначениеПериодичности Из ПолучитьСписокПериодичности() Цикл
							
							ПериодичностьКонтроля = ЗначениеПериодичности.Значение;
							
							Для Каждого ЗначениеНаправленияКорреспонденцииСчетов Из ПолучитьСписокНаправленийКорреспонденцииСчетов() Цикл
								
								Направление = ЗначениеНаправленияКорреспонденцииСчетов.Значение;
								
								Если НЕ СтрокатзДанные["Контроль" + ПериодичностьКонтроля + Направление] Тогда
									ДанныеПоКорреспонденцииВалидны = Ложь;
									Прервать;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЦикла; 
						
						Если ДанныеПоКорреспонденцииВалидны Тогда
							МассивУдаляемых.Добавить(СтрокатзДанные);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Для Каждого ЗначениеМассива Из МассивУдаляемых Цикл
					вртзДанные.Удалить(ЗначениеМассива); 
				КонецЦикла;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(вртзДанные, вртзДанныеДляЗаполнения);   
				
			КонецЦикла;
			
			СтрокадзПериод.Данные = вртзДанныеДляЗаполнения;
			
		КонецЦикла;  
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеВдзОСВ(БазаСсылка, ДатаНачала, ДатаОкончания, Данные)
	
	СтрокаКолонкиГруппировок = "";
	СтрокаКолонкиСуммирования = "";
	
	СтрокаДереваДанных = ПолучитьДанныеТекущейСтрокидзОСВ(БазаСсылка, ДатаНачала, ДатаОкончания);
	
	вртзДанные = СтрокаДереваДанных.Данные;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Данные, вртзДанные);
	
	Для Каждого Колонка Из вртзДанные.Колонки Цикл
		
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			СтрокаКолонкиСуммирования = СтрокаКолонкиСуммирования + ?(НЕ ПустаяСтрока(СтрокаКолонкиСуммирования), ",", "") + Колонка.Имя;
			Продолжить;
		КонецЕсли; 
		
		СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ?(НЕ ПустаяСтрока(СтрокаКолонкиГруппировок), ",", "") + Колонка.Имя;
		
	КонецЦикла;
	
	вртзДанные.Свернуть(СтрокаКолонкиГруппировок, СтрокаКолонкиСуммирования);
	вртзДанные.Сортировать("Организация, Счет, ОписаниеИсточника УБЫВ");  
	
КонецПроцедуры

Функция ПолучитьДанныеТекущейСтрокидзОСВ(БазаСсылка, ПериодНачало, ПериодОкончание);

	СтруктураПоиска = Новый Структура("База", БазаСсылка);
	МассивНайденныхСтрокБаза = дзДанныеОСВ.Строки.НайтиСтроки(СтруктураПоиска);
	
	Если НЕ ЗначениеЗаполнено(МассивНайденныхСтрокБаза) Тогда 
		
		СтрокадзБаза = дзДанныеОСВ.Строки.Добавить();
		СтрокадзБаза.База = БазаСсылка;
		
	КонецЕсли;  
	
	Для Каждого СтрокадзБаза Из дзДанныеОСВ.Строки.НайтиСтроки(СтруктураПоиска) Цикл
		
		СтруктураПоиска = Новый Структура("ПериодНачало, ПериодОкончание", ПериодНачало, ПериодОкончание);
		МассивНайденныхСтрокПериод = СтрокадзБаза.Строки.НайтиСтроки(СтруктураПоиска);
		
		Если НЕ ЗначениеЗаполнено(МассивНайденныхСтрокПериод) Тогда 
			
			СтрокадзПериод = СтрокадзБаза.Строки.Добавить();
			СтрокадзПериод.ПериодНачало = ПериодНачало;
			СтрокадзПериод.ПериодОкончание = ПериодОкончание;
			СтрокадзПериод.Данные = ПолучитьПустуюТаблицуДляОбработкиДанных();
			
		КонецЕсли;  
		
		Для Каждого СтрокадзПериод Из СтрокадзБаза.Строки.НайтиСтроки(СтруктураПоиска) Цикл
			
			Возврат СтрокадзПериод;	
						
		КонецЦикла;	
				
	КонецЦикла;	
	
КонецФункции

Функция ПолучитьДанныеОСВXLS(Файл) 
	
	СтруктураВозврата = Новый Структура("СтатусВозврата, Данные, ОписаниеОшибки", "", ПолучитьПустуюТаблицуДляОбработкиДанных(), "");
	
	Попытка 
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(Файл.ПолноеИмя);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;   
		ПоложениеСтрокиЗаголовка = 0;  
		ЕстьДанныеВалют = Ложь;
		
		Для СчетчикСтрок = 1 По КоличествоСтрок Цикл 
			
			Текст = Строка(ТабДок.ПолучитьОбласть("R" + Формат(СчетчикСтрок, "ЧГ=0;") + "C1").ТекущаяОбласть.Текст);  
			
			Если Текст = "Организация" Тогда 
				
				ПоложениеСтрокиЗаголовка = СчетчикСтрок; 
				
				Для СчетчикКолонок = 2 По ТабДок.ШиринаТаблицы Цикл
					Текст = Строка(ТабДок.ПолучитьОбласть("R" + Формат(ПоложениеСтрокиЗаголовка, "ЧГ=0;") + "C" + Формат(СчетчикКолонок, "ЧГ=0;")).ТекущаяОбласть.Текст);	 
					Если Текст = "Валюта" Тогда
						ЕстьДанныеВалют = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла; 
				
				Прервать;  
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ПоложениеСтрокиЗаголовка = 0 Тогда
			Возврат СтруктураВозврата;
		//	Продолжить;
		КонецЕсли;
		
	Исключение
		СтруктураВозврата.СтатусВозврата = "Ошибка";
		СтруктураВозврата.ОписаниеОшибки = "не удалось прочитать данные файла '" + СокрЛП(Файл.ИмяБезРасширения) + "' каталога отчетов (" + ОписаниеОшибки() + ").";
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	СоответствиеКолонок = Новый Соответствие;
	СоответствиеКолонок.Вставить("Организация", 		1);
	СоответствиеКолонок.Вставить("Счет", 				2);
	СоответствиеКолонок.Вставить("НачальныйОстатокДт", 	3 + ?(ЕстьДанныеВалют, 1, 0));
	СоответствиеКолонок.Вставить("НачальныйОстатокКт", 	4 + ?(ЕстьДанныеВалют, 1, 0));
	СоответствиеКолонок.Вставить("ОборотДт", 			5 + ?(ЕстьДанныеВалют, 1, 0));
	СоответствиеКолонок.Вставить("ОборотКт", 			6 + ?(ЕстьДанныеВалют, 1, 0));
	СоответствиеКолонок.Вставить("КонечныйОстатокДт", 	7 + ?(ЕстьДанныеВалют, 1, 0));
	СоответствиеКолонок.Вставить("КонечныйОстатокКт", 	8 + ?(ЕстьДанныеВалют, 1, 0)); 
					
	Для СчетчикСтрок = ПоложениеСтрокиЗаголовка + 1 По КоличествоСтрок Цикл 
		
		СтрокатзДанные = СтруктураВозврата.Данные.Добавить(); 
		
		Для Каждого КлючИЗначение Из СоответствиеКолонок Цикл
			
			ИмяКолонки = КлючИЗначение.Ключ;
			ЗначениеКолонки = СокрЛП(ТабДок.ПолучитьОбласть("R" + Формат(СчетчикСтрок, "ЧГ=0;") + "C" + Строка(КлючИЗначение.Значение)).ТекущаяОбласть.Текст);
			
			Если ЗначениеЗаполнено(ЗначениеКолонки)
				И НЕ СтрНачинаетсяС(ИмяКолонки, "Счет")
				И ТолькоЦифрыИЗапятаяВСтроке(ЗначениеКолонки) Тогда
					ЗначениеКолонки = Число(ЗначениеКолонки);
			КонецЕсли;
			
			СтрокатзДанные[ИмяКолонки] = ЗначениеКолонки;   
			
			СтрокатзДанные.НачальныйОстаток= СтрокатзДанные.НачальныйОстатокДт- СтрокатзДанные.НачальныйОстатокКт; 
			СтрокатзДанные.КонечныйОстаток= СтрокатзДанные.КонечныйОстатокДт- СтрокатзДанные.КонечныйОстатокКт;  
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураВозврата.Данные.Свернуть("Организация, Счет, ОписаниеИсточника", "НачальныйОстатокДт, НачальныйОстатокКт, ОборотДт, ОборотКт, КонечныйОстатокДт, КонечныйОстатокКт");  
	СтруктураВозврата.Данные.ЗаполнитьЗначения("1С", "ОписаниеИсточника");
		
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьДанныеОСВSQL(РеференсИБ, ДатаНачала, ДатаОкончания)  
	
	СтруктураВозврата = Новый Структура("СтатусВозврата, Данные, ОписаниеОшибки", "", ПолучитьПустуюТаблицуДляОбработкиДанных(), "");   
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	Команда = ОбменSQL.Соединение(); 
	
	Если Команда = Неопределено Тогда 
			СтруктураВозврата.СтатусВозврата = "Ошибка";
			СтруктураВозврата.ОписаниеОшибки = "не удалось установить соединение с ИБ SQL по установленному референсу '" + РеференсИБ + "'.";
			Возврат СтруктураВозврата;
	КонецЕсли;
			
	Попытка	
		
		Команда.CommandTimeout = 30;
		Команда.CommandText = SQLQueryBalancesMonth(РеференсИБ, ДатаНачала, ДатаОкончания);	  
		
		СоответствиеКолонок = Новый Соответствие;
		СоответствиеКолонок.Вставить("Организация", 		0);
		СоответствиеКолонок.Вставить("Счет", 				1);
		СоответствиеКолонок.Вставить("НачальныйОстатокДт", 	2);
		СоответствиеКолонок.Вставить("НачальныйОстатокКт", 	3);
		СоответствиеКолонок.Вставить("ОборотДт", 			4);
		СоответствиеКолонок.Вставить("ОборотКт", 			5);
		СоответствиеКолонок.Вставить("КонечныйОстатокДт", 	6);
		СоответствиеКолонок.Вставить("КонечныйОстатокКт", 	7); 
		
		ВыборкаSQL = Команда.Execute();
		
		Пока НЕ ВыборкаSQL.EOF Цикл
			
			СтрокатзДанные = СтруктураВозврата.Данные.Добавить(); 
			
			Для Каждого КлючИЗначение Из СоответствиеКолонок Цикл
				
				НаименованиеКолонки = КлючИЗначение.Ключ;
				ЗначениеКолонки = СокрЛП(ВыборкаSQL.Fields(КлючИЗначение.Значение).Value);
				
				Если НЕ ПустаяСтрока(ЗначениеКолонки)
					И НЕ СтрНачинаетсяС(НаименованиеКолонки, "Счет")
					И ТолькоЦифрыИЗапятаяВСтроке(ЗначениеКолонки) Тогда
						ЗначениеКолонки = Число(ЗначениеКолонки);
				КонецЕсли;
				
				СтрокатзДанные[НаименованиеКолонки] = ЗначениеКолонки;   
				
				СтрокатзДанные.НачальныйОстаток= СтрокатзДанные.НачальныйОстатокДт- СтрокатзДанные.НачальныйОстатокКт; 
				СтрокатзДанные.КонечныйОстаток= СтрокатзДанные.КонечныйОстатокДт- СтрокатзДанные.КонечныйОстатокКт;  
				
			КонецЦикла;
						
			ВыборкаSQL.MoveNext();
			
		КонецЦикла;
		
		СтруктураВозврата.Данные.Свернуть("Организация, Счет, ОписаниеИсточника", "НачальныйОстатокДт, НачальныйОстатокКт, ОборотДт, ОборотКт, КонечныйОстатокДт, КонечныйОстатокКт");  
		СтруктураВозврата.Данные.ЗаполнитьЗначения("SQL", "ОписаниеИсточника");
		
	Исключение  
		СтруктураВозврата.СтатусВозврата = "Ошибка";
		СтруктураВозврата.ОписаниеОшибки = "не удалось выполнить скрипт запроса по установленному референсу SQL (" + ОписаниеОшибки() + ").";
	КонецПопытки;  
			
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьДанныеСправочникаБазы(РеференсИБ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Базы.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Базы КАК Базы
	                      |ГДЕ
	                      |	Базы.Наименование ПОДОБНО ""%1""");
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "%" + РеференсИБ + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.Базы.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьСписокНаправленийКорреспонденцииСчетов()
	СписокКорреспонденции = Новый СписокЗначений;
	СписокКорреспонденции.Добавить("Дт");
	СписокКорреспонденции.Добавить("Кт");  
	
	Возврат СписокКорреспонденции
КонецФункции 

Функция ПолучитьСписокПериодичности() 
	СписокКорреспонденции = Новый СписокЗначений;
	СписокКорреспонденции.Добавить("НачальныйОстаток");
	СписокКорреспонденции.Добавить("Оборот");  
	СписокКорреспонденции.Добавить("КонечныйОстаток");  
	
	Возврат СписокКорреспонденции
КонецФункции

Функция ПолучитьПустуюТаблицуДляОбработкиДанных()
		
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Организация", 			Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Счет", 				Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ОписаниеИсточника", 	Новый ОписаниеТипов("Строка"));  
	
	Для Каждого ЗначениеПериодичности Из ПолучитьСписокПериодичности() Цикл 
		
		ПериодичностьКонтроля = ЗначениеПериодичности.Значение;
		ТЗ.Колонки.Добавить(ПериодичностьКонтроля, 	Новый ОписаниеТипов("Число"));  
		
		Для Каждого ЗначениеСписка Из ПолучитьСписокНаправленийКорреспонденцииСчетов() Цикл  
			
			Направление = ЗначениеСписка.Значение;
			ТЗ.Колонки.Добавить(ПериодичностьКонтроля + Направление, 				Новый ОписаниеТипов("Число")); 
			ТЗ.Колонки.Добавить("Контроль" + ПериодичностьКонтроля + Направление,	Новый ОписаниеТипов("Булево"));
			
		КонецЦикла;
		
	КонецЦикла;	
		
    Возврат ТЗ
	
КонецФункции 

Функция ТолькоЦифрыИЗапятаяВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если Сред(СтрокаПроверки, 1, 1) = "-" Тогда
		СтрокаПроверки = Сред(СтрокаПроверки, 2, СтрДлина(СтрокаПроверки));
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку
		Пока Сред(СтрокаПроверки, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы
	Возврат СтрДлина(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	СтрокаПроверки, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", ""), ",", "")
	) = 0;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипЗапросаПериода = 0
		И НЕ ЗначениеЗаполнено(БазаСсылка) Тогда
			ПроверяемыеРеквизиты.Добавить("БазаСсылка");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРегламентноеЗадание() Экспорт
	
	ТипЗапросаПериода = 1; 
	ЗаписыватьРезультатыСверки = Истина;
	ТекстУведомления = "";
	Результат = ПолучитьДанныеОСВЗаПериод(Дата("00010101"), Дата("00010101"), , Истина);

	Обработки.РассылкаУведомленийОСобытияхБаз.ВыполнитьРассылкуУведомленийСверкиОСВ(Результат.Данные);
КонецПроцедуры