
&НаСервереБезКонтекста
Процедура ДобавитьВСтруктуруСубконто(Структура)
	
	Структура.Вставить("Подразделения", "Подразделения");
	Структура.Вставить("БанковскиеСчета", "БанковскиеСчета");
	Структура.Вставить("Кассы", "Кассы");
	Структура.Вставить("Доходы", "Доходы");  
	Структура.Вставить("ДоходыБудущихПериодов", "ДоходыБудущихПериодов");  
	Структура.Вставить("НематериальныеАктивы", "НематериальныеАктивы"); 
	Структура.Вставить("ОсновныеСредства", "ОсновныеСредства"); 
	Структура.Вставить("ОбъектыСтроительства", "ОбъектыСтроительства");
	Структура.Вставить("ЦенныеБумаги", "ЦенныеБумаги");
	Структура.Вставить("Номенклатура", "Номенклатура"); 
	Структура.Вставить("НоменклатурныеГруппы", "НоменклатурныеГруппы");
	Структура.Вставить("Контрагенты", "Контрагенты");  
	Структура.Вставить("Договоры", "Договоры");
	Структура.Вставить("СтатьиДвиженияДенежныхСредств", "СтатьиДвиженияДенежныхСредств"); 
	Структура.Вставить("СтатьиЗатрат", "СтатьиЗатрат"); 
	Структура.Вставить("РасходыБудущихПериодов", "РасходыБудущихПериодов");
	Структура.Вставить("ВидыПлатежейВБюджетИФонды", "ВидыПлатежейВБюджетИФонды"); 
	Структура.Вставить("ТипыНалогов", "ТипыНалогов");  
	Структура.Вставить("Резервы", "Резервы");
	Структура.Вставить("ВидыАктивовИОбязательств", "ВидыАктивовИОбязательств");   
	Структура.Вставить("РаботникиОрганизаций", "РаботникиОрганизаций");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОборотов()
	
	Структура = Новый Структура;
	Структура.Вставить("ПризнакУдаления");
	Структура.Вставить("Период");
	Структура.Вставить("ПризнакЗакрытогоПериода");
	Структура.Вставить("ПериодНовойПроводки");
	Структура.Вставить("Регистратор");
	Структура.Вставить("РегистраторGUID");
	Структура.Вставить("НомерСтроки");
	Структура.Вставить("СчетGUID");	
	Структура.Вставить("КорСчетGUID");
	Структура.Вставить("ВидДвиженияGUID");
	Структура.Вставить("ИмяБазы");
	Структура.Вставить("ОрганизацияGUID");
	Структура.Вставить("ГоловнаяОрганизацияGUID");
	Структура.Вставить("НаправлениеДеятельностиGUID");
	Структура.Вставить("Количество");
	Структура.Вставить("СуммаРегл");
	Структура.Вставить("СуммаВВалюте");
	Структура.Вставить("СуммаВУпрУчете");
	Структура.Вставить("Валюта");
	Структура.Вставить("СтруктурноеПодразделениеGUID");
	ДобавитьВСтруктуруСубконто(Структура);
	Структура.Вставить("Ид");
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОстатков()
	
	Структура = Новый Структура;
	Структура.Вставить("Период");
	Структура.Вставить("СчетGUID");	
	Структура.Вставить("ИмяБазы");
	Структура.Вставить("ОрганизацияGUID");
	Структура.Вставить("ГоловнаяОрганизацияGUID");
	Структура.Вставить("НаправлениеДеятельностиGUID");
	Структура.Вставить("Количество");
	Структура.Вставить("СуммаРегл");
	Структура.Вставить("СуммаВВалюте");
	Структура.Вставить("СуммаВУпрУчете");
	Структура.Вставить("Валюта");
	Структура.Вставить("СтруктурноеПодразделениеGUID");
	ДобавитьВСтруктуруСубконто(Структура);	
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОбъекта(ИмяОбъекта)
	
	Структура = Новый Структура;
	Структура.Вставить("СсылкаGUID");
	Структура.Вставить("ИмяБазы");
	Структура.Вставить("Наименование"); 
	
	ПолучитьДопПоляОбъекта(Структура, ИмяОбъекта);		
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьДопПоляОбъекта(Структура, ИмяОбъекта)
	//Авитим {Требуется доработка: проверить субконто, подразделение, ОС
	//Литвинов С.В. от 28.07.2019
	Если ИмяОбъекта = "Типовой" Тогда
		Структура.Вставить("Код");
		Структура.Вставить("РодительGUID");
		Структура.Вставить("ВидСубконто1");
		Структура.Вставить("ВидСубконто2");
		Структура.Вставить("ВидСубконто3");
		Структура.Вставить("ВидСубконто4");
		Структура.Вставить("ВидСубконто5");
		Структура.Вставить("ВидСубконто6");
		Структура.Вставить("Забалансовый");	
		Структура.Вставить("КодГруппы");
	ИначеЕсли ИмяОбъекта = "БанковскиеСчета"  Тогда
		Структура.Вставить("Код", "&ПустойКод");
		Структура.Вставить("ОрганизацияGUID", "Выбор Когда Объект.Владелец Ссылка Справочник.Организации Тогда Объект.Владелец Иначе &ПустойКод Конец");
		Структура.Вставить("Банк", "Объект.Банк.Наименование");
		Структура.Вставить("Валюта", "Объект.ВалютаДенежныхСредств.Наименование");	
		Структура.Вставить("НомерСчета");
		Структура.Вставить("БИКБанка", "Объект.Банк.БИК");
	ИначеЕсли ИмяОбъекта = "ДоговорыКонтрагентов" Тогда
		Структура.Вставить("Код", "&ПустойКод");
		Структура.Вставить("ОрганизацияGUID");
		Структура.Вставить("КонтрагентGUID", "Объект.Владелец");
	ИначеЕсли ИмяОбъекта = "Кассы" Тогда
		Структура.Вставить("Код", "&ПустойКод");
		Структура.Вставить("ОрганизацияGUID", "Объект.Владелец");
		Структура.Вставить("Валюта", "");
	ИначеЕсли ИмяОбъекта = "Контрагенты" Тогда
		Структура.Вставить("Код", "&ПустойКод");
		Структура.Вставить("РодительGUID", "ВЫБОР КОГДА Объект.ГоловнойКонтрагент = Объект.Ссылка ТОГДА &ПустаяСсылка ИНАЧЕ Объект.ГоловнойКонтрагент КОНЕЦ");
		Структура.Вставить("ИНН", "Объект.ИдентификационныйКодЛичности");
	ИначеЕсли ИмяОбъекта = "НематериальныеАктивы" Тогда     
		Структура.Вставить("Код");
		Структура.Вставить("ОрганизацияGUID");
		Структура.Вставить("ПодразделениеGUID");
		Структура.Вставить("МОЛGUID");
		Структура.Вставить("БалансоваяСтоимость");	
		Структура.Вставить("НакопленныйИзнос");	
		Структура.Вставить("ВидНМАGUID");
	ИначеЕсли ИмяОбъекта = "Номенклатура" Тогда
		Структура.Вставить("Код");
		Структура.Вставить("РодительGUID");
		Структура.Вставить("ЭтоГруппа");
		Структура.Вставить("Услуга");
		Структура.Вставить("ЕдиницаИзмерения", "Объект.БазоваяЕдиницаИзмерения.Наименование");
	ИначеЕсли ИмяОбъекта = "ОсновныеСредства" Тогда
		Структура.Вставить("Код");
		Структура.Вставить("ОрганизацияGUID");
		Структура.Вставить("ПодразделениеGUID");
		Структура.Вставить("МОЛGUID");
		Структура.Вставить("БалансоваяСтоимость");	
		Структура.Вставить("НакопленныйИзнос");
		Структура.Вставить("ГруппыОС");
	ИначеЕсли ИмяОбъекта = "ОбъектыСтроительства" Тогда
		Структура.Вставить("Код");	
		Структура.Вставить("ОрганизацияGUID", "&ПустаяСсылка");
	ИначеЕсли ИмяОбъекта = "Организации" Тогда
		Структура.Вставить("Код", "&ПустойКод");
		Структура.Вставить("ИНН", "Объект.ИдентификационныйНомер");
		Структура.Вставить("ГоловнаяОрганизацияGUID", "ВЫБОР КОГДА Объект.ГоловнаяОрганизация = Объект.Ссылка ТОГДА &ПустаяСсылка ИНАЧЕ Объект.ГоловнаяОрганизация КОНЕЦ");
	ИначеЕсли ИмяОбъекта = "ПодразделенияОрганизаций" Тогда
		Структура.Вставить("Код");
		Структура.Вставить("РодительGUID");
		Структура.Вставить("ОрганизацияGUID", "Объект.Владелец");//
	ИначеЕсли ИмяОбъекта = "ФизическиеЛица" Тогда
		Структура.Вставить("Код");
		Структура.Вставить("ИНН");
		Структура.Вставить("Ид");
		Структура.Вставить("ДатаПриема");
		Структура.Вставить("ДатаУвольнения");
		Структура.Вставить("Должность");
		Структура.Вставить("Подразделение");
	ИначеЕсли ИмяОбъекта = "СтатьиДвиженияДенежныхСредств" 
		ИЛИ ИмяОбъекта = "Доходы" 
		ИЛИ ИмяОбъекта = "СтатьиЗатрат" Тогда     
		Структура.Вставить("Код");
		Структура.Вставить("РодительGUID");
		Структура.Вставить("ЭтоГруппа");
	ИначеЕсли ИмяОбъекта = "Склады"  Тогда
		Структура.Вставить("Код", "&ПустойКод");
		Структура.Вставить("РодительGUID");
		Структура.Вставить("ЭтоГруппа");
	ИначеЕсли ИмяОбъекта = "ДоходыБудущихПериодов" 
		ИЛИ ИмяОбъекта = "Резервы" 
		ИЛИ ИмяОбъекта = "ЦенныеБумаги" 
		ИЛИ ИмяОбъекта = "РасходыБудущихПериодов" 
		ИЛИ ИмяОбъекта = "НоменклатурныеГруппы" Тогда
		Структура.Вставить("Код");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьОбороты(ПапкаДляВыгрузки, База, Организация, ДатаНачала, ДатаОкончания)
	
	СтруктураТаблицы = ПолучитьСтруктуру("Turnovers_tmp"); 
	
	Если СтруктураТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = Дата(2017,1,1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецГода(ТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ПризнакУдаления,
	|	Обороты.Период КАК Период,
	|	ЛОЖЬ КАК ПризнакЗакрытогоПериода,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодНовойПроводки,
	|	Обороты.Регистратор КАК Регистратор,
	|	Обороты.НомерСтроки КАК НомерСтроки,
	|	Обороты.Счет КАК Счет,
	|	Обороты.ТипОборота КАК ТипОборота,
	|	Обороты.База КАК База,
	|	Обороты.Организация КАК Организация,
	|	Обороты.Валюта КАК Валюта,
	|	Обороты.Подразделения КАК Подразделения,
	|	Обороты.Кассы КАК Кассы,
	|	Обороты.БанковскиеСчета КАК БанковскиеСчета,
	|	Обороты.Контрагенты КАК Контрагенты,
	|	Обороты.Договоры КАК Договоры,
	|	Обороты.Номенклатура КАК Номенклатура,
	|	Обороты.Склады КАК Склады,
	|	Обороты.ЦенныеБумаги КАК ЦенныеБумаги,
	|	Обороты.РасходыБудущихПериодов КАК РасходыБудущихПериодов,
	|	Обороты.ДоходыБудущихПериодов КАК ДоходыБудущихПериодов,
	|	Обороты.СтатьиДоходов КАК СтатьиДоходов,
	|	Обороты.СтатьиЗатрат КАК СтатьиЗатрат,
	|	Обороты.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств,
	|	Обороты.ОсновныеСредства КАК ОсновныеСредства,
	|	Обороты.НематериальныеАктивы КАК НематериальныеАктивы,
	|	Обороты.ОбъектыСтроительства КАК ОбъектыСтроительства,
	|	Обороты.НоменклатурныеГруппы КАК НоменклатурныеГруппы,
	|	ВЫБОР
	|		КОГДА Обороты.Сумма < 0
	|			ТОГДА -Обороты.Сумма
	|		ИНАЧЕ Обороты.Сумма
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Обороты.СуммаВал < 0
	|			ТОГДА -Обороты.СуммаВал
	|		ИНАЧЕ Обороты.СуммаВал
	|	КОНЕЦ КАК СуммаВВалюте,
	|	ВЫБОР
	|		КОГДА Обороты.СуммаУпр < 0
	|			ТОГДА -Обороты.СуммаУпр
	|		ИНАЧЕ Обороты.СуммаУпр
	|	КОНЕЦ КАК СуммаВУпрУчете,
	|	Обороты.Количество КАК Количество,
	|	Обороты.Регистратор.Дата КАК РегистраторДата
	|ИЗ
	|	РегистрСведений.Обороты КАК Обороты
	|ГДЕ
	|	Обороты.Организация = &Организация
	|	И Обороты.База = &База
	|	И Обороты.Регистратор.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ДатаКон", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("База", База);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Сч = 0;
		Н = 1;
		
		ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "РегистрБухгалтерии_Типовой" + "\";
		СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
		Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "Типовой", ПреобразоватьОбъектВЗначение(Н));	
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл			
			СтрокаВыгрузки = "";
			Для Каждого Элемент Из СтруктураТаблицы Цикл		
				Значение = "";	
				Попытка 
					Если Прав(Элемент.Ключ, 4) = "GUID" Тогда
						Значение = ПреобразоватьОбъектВЗначение(ВыборкаДетальныеЗаписи[Лев(Элемент.Ключ, СтрДлина(Элемент.Ключ) - 4)], Истина); 
					Иначе
						Значение = ПреобразоватьОбъектВЗначение(ВыборкаДетальныеЗаписи[Элемент.Ключ]);
					КонецЕсли;
				Исключение
				КонецПопытки;
				СтрокаВыгрузки = СтрокаВыгрузки + Значение + Символы.Таб;
			КонецЦикла;
			Файл.WriteLine(СтрокаВыгрузки);
			Сч = Сч + 1;
			Если Сч = 100000 Тогда
				Файл.Close();
				Сч = 0;
				Н = Н + 1;
				Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "Типовой", ПреобразоватьОбъектВЗначение(Н));
			КонецЕсли;
		КонецЦикла;	
		
		Файл.Close();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыгрузитьОстатки(ПапкаДляВыгрузки, База, Организация)
	
	СтруктураТаблицы = ПолучитьСтруктуру("Balances_tmp"); 
	
	Если СтруктураТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачальныйОстаток.Период КАК Период,
	|	НачальныйОстаток.База КАК База,
	|	НачальныйОстаток.Счет КАК Счет,
	|	НачальныйОстаток.Организация КАК Организация,
	|	НачальныйОстаток.Валюта КАК Валюта,
	|	НачальныйОстаток.Подразделения КАК Подразделения,
	|	НачальныйОстаток.Кассы КАК Кассы,
	|	НачальныйОстаток.БанковскиеСчета КАК БанковскиеСчета,
	|	НачальныйОстаток.Контрагенты КАК Контрагенты,
	|	НачальныйОстаток.Договоры КАК Договоры,
	|	НачальныйОстаток.Номенклатура КАК Номенклатура,
	|	НачальныйОстаток.Склады КАК Склады,
	|	НачальныйОстаток.ЦенныеБумаги КАК ЦенныеБумаги,
	|	НачальныйОстаток.РасходыБудущихПериодов КАК РасходыБудущихПериодов,
	|	НачальныйОстаток.ДоходыБудущихПериодов КАК ДоходыБудущихПериодов,
	|	НачальныйОстаток.СтатьиДоходов КАК СтатьиДоходов,
	|	НачальныйОстаток.СтатьиЗатрат КАК СтатьиЗатрат,
	|	НачальныйОстаток.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств,
	|	НачальныйОстаток.ОсновныеСредства КАК ОсновныеСредства,
	|	НачальныйОстаток.НематериальныеАктивы КАК НематериальныеАктивы,
	|	НачальныйОстаток.ОбъектыСтроительства КАК ОбъектыСтроительства,
	|	НачальныйОстаток.НоменклатурныеГруппы КАК НоменклатурныеГруппы,
	|	НачальныйОстаток.Сумма КАК СуммаРегл,
	|	НачальныйОстаток.СуммаВал КАК СуммаВВалюте,
	|	НачальныйОстаток.СуммаУпр КАК СуммаВУпрУчете,
	|	НачальныйОстаток.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.НачальныйОстаток КАК НачальныйОстаток
	|ГДЕ
	|	НачальныйОстаток.Организация = &Организация
	|	И НачальныйОстаток.База = &База";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("База", База);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "РегистрБухгалтерии_Остатки" + "\";
		СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
		Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "Остатки");	
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл			
			СтрокаВыгрузки = "";
			Для Каждого Элемент Из СтруктураТаблицы Цикл		
				Значение = "";	
				Попытка 
					Если Прав(Элемент.Ключ, 4) = "GUID" Тогда
						Значение = ПреобразоватьОбъектВЗначение(ВыборкаДетальныеЗаписи[Лев(Элемент.Ключ, СтрДлина(Элемент.Ключ) - 4)], Истина); 
					Иначе
						Значение = ПреобразоватьОбъектВЗначение(ВыборкаДетальныеЗаписи[Элемент.Ключ]);
					КонецЕсли;
				Исключение
				КонецПопытки;
				СтрокаВыгрузки = СтрокаВыгрузки + Значение + Символы.Таб;
			КонецЦикла;
			Файл.WriteLine(СтрокаВыгрузки);
		КонецЦикла;	
		
		Файл.Close();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСправочники(ПапкаДляВыгрузки, База, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникиСтороннихСистем.Ссылка КАК Ссылка,
	|	СправочникиСтороннихСистем.БИН КАК ИИН,
	|	СправочникиСтороннихСистем.БазиснаяЕдиница КАК ЕдиницаИзмерения,
	|	СправочникиСтороннихСистем.ВходящийКод КАК Код,
	|	СправочникиСтороннихСистем.КонтрагентВладелец КАК Контрагент,
	|	СправочникиСтороннихСистем.Наименование КАК Наименование,
	|	СправочникиСтороннихСистем.ТипСправочника КАК ТипСправочника,
	|	СправочникиСтороннихСистем.Владелец КАК ИмяБазы
	|ИЗ
	|	Справочник.СправочникиСтороннихСистем КАК СправочникиСтороннихСистем
	|ГДЕ
	|	СправочникиСтороннихСистем.Владелец = &Владелец
	|ИТОГИ ПО
	|	ТипСправочника";
	
	Запрос.УстановитьПараметр("Владелец", База);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаТипСправочника = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипСправочника.Следующий() Цикл					
		СтруктураТаблицы = ПолучитьСтруктуру(ВыборкаТипСправочника.ТипСправочника.НаименованиеТаблицыSQL); 			
		Если СтруктураТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПапки = СтрЗаменить(ВыборкаТипСправочника.ТипСправочника.Наименование, ".", "_");
		ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + ИмяПапки + "\";
		СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
		Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, ИмяПапки);
		
		ВыборкаДетальныеЗаписи = ВыборкаТипСправочника.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл			
			СтрокаВыгрузки = "";
			Для Каждого Элемент Из СтруктураТаблицы Цикл		
				Значение = "";	
				Попытка 
					Если Прав(Элемент.Ключ, 4) = "GUID" Тогда
						Значение = ПреобразоватьОбъектВЗначение(ВыборкаДетальныеЗаписи[Лев(Элемент.Ключ, СтрДлина(Элемент.Ключ) - 4)], Истина); 
					Иначе
						Значение = ПреобразоватьОбъектВЗначение(ВыборкаДетальныеЗаписи[Элемент.Ключ]);
					КонецЕсли;
				Исключение
				КонецПопытки;
				СтрокаВыгрузки = СтрокаВыгрузки + Значение + Символы.Таб;
			КонецЦикла;
			Файл.WriteLine(СтрокаВыгрузки);
		КонецЦикла;		
		Файл.Close();
		
	КонецЦикла;
	
	СтруктураТаблицы = ПолучитьСтруктуру("Organizations_tmp"); 			
	Если СтруктураТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ИмяПапки = "Справочник_Организации";
	ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + ИмяПапки + "\";
	СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
	Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, ИмяПапки);
	
	СтрокаВыгрузки = "";
	ОрганизацияОбъект = Организация.ПолучитьОбъект();
	Для Каждого Элемент Из СтруктураТаблицы Цикл		
		Значение = "";	
		Попытка 
			Если Элемент.Ключ = "ИмяБазы" Тогда
				Значение = ПреобразоватьОбъектВЗначение(База);	
			ИначеЕсли Прав(Элемент.Ключ, 4) = "GUID" Тогда
				Значение = ПреобразоватьОбъектВЗначение(ОрганизацияОбъект[Лев(Элемент.Ключ, СтрДлина(Элемент.Ключ) - 4)], Истина); 
			ИначеЕсли Элемент.Ключ = "ИИН" Тогда
				Значение = ПреобразоватьОбъектВЗначение(ОрганизацияОбъект.БИН); 
			Иначе
				Значение = ПреобразоватьОбъектВЗначение(ОрганизацияОбъект[Элемент.Ключ]);
			КонецЕсли;
		Исключение
		КонецПопытки;
		СтрокаВыгрузки = СтрокаВыгрузки + Значение + Символы.Таб;
	КонецЦикла;	
	Файл.WriteLine(СтрокаВыгрузки);
	Файл.Close();
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСчета(ПапкаДляВыгрузки, База)
	
	СтруктураТаблицы = ПолучитьСтруктуру("ChartOfAccounts_tmp"); 
	
	Если СтруктураТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетУчета.Ссылка КАК Ссылка,
	|	СчетУчета.Наименование КАК Наименование,
	|	СчетУчета.База КАК База,
	|	СчетУчета.Код КАК Код,
	|	СчетУчета.Родитель КАК Родитель,
	|	ЛОЖЬ КАК Забалансовый,
	|	СчетУчета.Субконто.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ИмяСубконто КАК ИмяСубконто
	|	) КАК Субконто,
	|	ПОДСТРОКА(СчетУчета.Код, 1, 2) КАК КодГруппы
	|ИЗ
	|	Справочник.СчетУчета КАК СчетУчета
	|ГДЕ
	|	СчетУчета.База = &База";
	
	Запрос.УстановитьПараметр("База", База);	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "ПланСчетов_Типовой" + "\";
		СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
		Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "Типовой");		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл			
			ВыборкаСубконто = ВыборкаДетальныеЗаписи.Субконто.Выбрать();
			ВидыСубконто = Новый Структура;
			Пока ВыборкаСубконто.Следующий() Цикл
				ВидыСубконто.Вставить("ВидСубконто" + Строка(ВыборкаСубконто.НомерСтроки), ВыборкаСубконто.ИмяСубконто);
			КонецЦикла;
			СтрокаВыгрузки = "";
			Для Каждого Элемент Из СтруктураТаблицы Цикл		
				Значение = "";	
				Попытка 
					Если Лев(Элемент.Ключ, 11) = "ВидСубконто" Тогда
						Значение = ВидыСубконто[Элемент.Ключ];
					ИначеЕсли Прав(Элемент.Ключ, 4) = "GUID" Тогда
						Значение = ПреобразоватьОбъектВЗначение(ВыборкаДетальныеЗаписи[Лев(Элемент.Ключ, СтрДлина(Элемент.Ключ) - 4)], Истина); 
					Иначе
						Значение = ПреобразоватьОбъектВЗначение(ВыборкаДетальныеЗаписи[Элемент.Ключ]);
					КонецЕсли;
				Исключение
				КонецПопытки;
				СтрокаВыгрузки = СтрокаВыгрузки + Значение + Символы.Таб;
			КонецЦикла;
			Файл.WriteLine(СтрокаВыгрузки);
		КонецЦикла;		
		Файл.Close();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуру(ТаблицаSQL)
	
	Структура = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураТаблицSQLСтруктураТаблицыSQL.ИмяПоля КАК ИмяПоля
	|ИЗ
	|	Справочник.СтруктураТаблицSQL.СтруктураТаблицыSQL КАК СтруктураТаблицSQLСтруктураТаблицыSQL
	|ГДЕ
	|	СтруктураТаблицSQLСтруктураТаблицыSQL.Ссылка.Наименование = &ТаблицаSQL
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураТаблицSQLСтруктураТаблицыSQL.НомерСтроки";
	Запрос.УстановитьПараметр("ТаблицаSQL", ТаблицаSQL);	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Структура = Новый Структура;
		Пока Выборка.Следующий() Цикл
			Структура.Вставить(Выборка.ИмяПоля);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ПреобразоватьОбъектВЗначение(ОбъектПреобразования, ЭтоGUID = Ложь)
	
	ТипЗначения = ТипЗнч(ОбъектПреобразования);
	Если ТипЗначения = Тип("Дата") Тогда
		Значение = Формат(ОбъектПреобразования, "ДФ = гггг-ММ-дд");
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Значение = Формат(ОбъектПреобразования, "ЧГ=0;ЧН=0;ЧРД=.;ЧДЦ=2");
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Если ОбъектПреобразования = Истина Тогда
			Значение = "1";
		Иначе
			Значение = "0";
		КонецЕсли;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Значение = УбратьЛишниеСимволы(ОбъектПреобразования);	
	ИначеЕсли ЭтоGUID Тогда
		Значение = XMLСтрока(ОбъектПреобразования);
	Иначе 
		Значение = УбратьЛишниеСимволы(Строка(ОбъектПреобразования));
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция СоздатьПапкуДляВыгрузки(База)
	
	ПутьВыгрузки = константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	Если Прав(ПутьВыгрузки,1) <> "\" Тогда
		ПутьВыгрузки = ПутьВыгрузки + "\";
	КонецЕсли;
	
	ПапкаДляВыгрузки = ПутьВыгрузки + База.Наименование + "\";
	СоздатьКаталог(ПапкаДляВыгрузки);
	Возврат ПапкаДляВыгрузки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьНаСервере()
	
	ПутьВыгрузки = константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	Если ПутьВыгрузки = "" Тогда
		Сообщить("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	ПапкаДляВыгрузки = СоздатьПапкуДляВыгрузки(Объект.База);
	ВыгрузитьСчета(ПапкаДляВыгрузки, Объект.База);
	ВыгрузитьСправочники(ПапкаДляВыгрузки, Объект.База, Объект.Организация);
	ВыгрузитьОбороты(ПапкаДляВыгрузки, Объект.База, Объект.Организация, Объект.ДатаНачала, Объект.ДатаОкончания);
	Если Объект.ВыгружатьОстатки Тогда
		ВыгрузитьОстатки(ПапкаДляВыгрузки, Объект.База, Объект.Организация);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Не заполнена Организация");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) ИЛИ Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Сообщить("Укажите правильный период!");
	КонецЕсли;
	
	ВыгрузитьНаСервере();
	
КонецПроцедуры

&НаСервере
Функция УбратьЛишниеСимволы(Строка)
	
	Рез = СтрЗаменить(Строка, Символы.Таб, " ");
	Рез = СтрЗаменить(Рез, Символы.ПС, " ");
	Рез = СокрЛП(Рез);
	Пока СтрНайти(Рез, "  ") > 0 Цикл
		Рез = СтрЗаменить(Рез, "  ", " ");
	КонецЦикла;
	Возврат Рез;
	
КонецФункции

&НаСервере
Функция ПолучитьФайлФСО(ПапкаДляВыгрузки, ИмяФайла, ПриставкаКНаименованию = "", Расширение = ".csv")
	
	FSO = Новый COMОбъект("Scripting.FileSystemObject");  
	ИмяФайлаФСО = ИмяФайла + ?(ЗначениеЗаполнено(ПриставкаКНаименованию), "_" + ПриставкаКНаименованию, "") + Расширение;
	
	Возврат FSO.CreateTextFile(ПапкаДляВыгрузки + ИмяФайлаФСО, -1, -1);
	
КонецФункции

&НаСервере
Функция ПолучитьПапкуДляВыгрузки(НастройкаОбмена = Неопределено) 
	
	ПапкаДляВыгрузки = Константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	
	Возврат ПапкаДляВыгрузки;
	
КонецФункции

&НаСервере
Функция ПустаяСсылка()
	
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОбъектыМетаданных(ПараметрыВыгрузки)
	
	Соответствие = Новый Соответствие;
	СоответствиеСиноним = Новый Соответствие;
	
	Для Каждого Строка Из Метаданные.Документы Цикл
		Соответствие.Вставить(Тип("ДокументСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
		СоответствиеСиноним.Вставить(Тип("ДокументСсылка." + Строка.Имя), Строка.Синоним);
	КонецЦикла;
	Для Каждого Строка Из Метаданные.Справочники Цикл
		Соответствие.Вставить(Тип("СправочникСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
	КонецЦикла;
	Для Каждого Строка Из Метаданные.ПланыВидовХарактеристик Цикл
		Соответствие.Вставить(Тип("ПланВидовХарактеристикСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
	КонецЦикла;	
	Для Каждого Строка Из Метаданные.ПланыСчетов Цикл
		Соответствие.Вставить(Тип("ПланСчетовСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
	КонецЦикла;
	Для Каждого Строка Из Метаданные.Перечисления Цикл
		Соответствие.Вставить(Тип("ПеречислениеСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
	КонецЦикла;
	
	ПараметрыВыгрузки.Вставить("ОбъектыМетаданных", Соответствие);
	ПараметрыВыгрузки.Вставить("ОбъектыМетаданныхСиноним", СоответствиеСиноним);
	
КонецПроцедуры
