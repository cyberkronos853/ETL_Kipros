////ОБЩИЕ ПРОЦЕДУРЫ

//// Сценарий обмена
//Процедура ВыполнитьСценарийОбмена() Экспорт
//		
//	КлючСтатистики = Новый Структура;
//	КлючСтатистики.Вставить("ИдентификаторСеанса", XMLСтрока(Новый УникальныйИдентификатор()));
//	КлючСтатистики.Вставить("ИмяЗадания", "Выполнение сценария обмена данными");
//	
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется);
//	
//	ПутьКБазе = СтрокаСоединенияИнформационнойБазы();	
//	авПутьКБазе = Константы.авПутьКБазе.Получить();

//	Если ЗначениеЗаполнено(авПутьКБазе) Тогда
//		Если ПутьКБазе <> авПутьКБазе Тогда
//			авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Проверка пути", "Путь к базе не совпадает с сохраненным. Возможно ИБ перемещена или является копией!", КлючСтатистики);
//			Возврат;
//		КонецЕсли;
//	Иначе
//		Константы.авПутьКБазе.Установить(ПутьКБазе);
//	КонецЕсли;
//	
//	ПараметрыВыгрузки = Новый Структура;	
//	ПараметрыВыгрузки.Вставить("ИдентификаторСеанса", КлючСтатистики.ИдентификаторСеанса);
//	ПараметрыВыгрузки.Вставить("Разделитель", Символы.Таб);
//	ПараметрыВыгрузки.Вставить("Узел", авКонсолидацияПовтИсп.ПолучитьУзелКонсолидации());
//	ПараметрыВыгрузки.Вставить("КлючСтатистики", КлючСтатистики);
//	
//	ИмяБазы = Константы.авИмяБазы.Получить();
//	Если НЕ ЗначениеЗаполнено(ИмяБазы) Тогда
//		ИмяБазы = "Consolidation" + XMLСтрока(Новый УникальныйИдентификатор());
//	КонецЕсли;
//	ПараметрыВыгрузки.Вставить("ИмяБазы", ИмяБазы);
//	
//	ВерсияОбработки = авКонсолидацияПривилегированный.ПолучитьВерсиюОбработки(Справочники.авОбработки.Основная);
//	ВерсияОбработкиСервис = ПолучитьАктуальнуюВерсиюОбработки(ПараметрыВыгрузки);
//	Если ЗначениеЗаполнено(ВерсияОбработкиСервис) И ВерсияОбработки <> ВерсияОбработкиСервис Тогда
//		ОбновитьОбработкуИзСервиса(ПараметрыВыгрузки, ВерсияОбработкиСервис);
//		авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Завершено, "Запуск процедуры обновленной обработки!");
//		авКонсолидацияПривилегированный.авЗапускОбменаКонсолидации();
//		Возврат;
//	КонецЕсли;
//			
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Чтение настроек обмена");
//	НастройкаОбмена = Константы.авНастройкаОбмена.Получить();
//	Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
//		ДатаНачалаВыгрузки = НастройкаОбмена.ДатаНачалаВыгрузки;
//		ПодключениеFTP = НастройкаОбмена.Подключение;
//		ПапкаДляВыгрузки = ПолучитьПапкуДляВыгрузки(НастройкаОбмена);
//		КоличествоСтрокДокумента = ?(НастройкаОбмена.КоличествоСтрокВФайле = 0, 50000, НастройкаОбмена.КоличествоСтрокВФайле); 
//		КоличествоПотоков = ?(НастройкаОбмена.КоличествоПотоков = 0, 3, НастройкаОбмена.КоличествоПотоков);
//		СрокХраненияИстории = НастройкаОбмена.СрокХраненияИстории;
//	Иначе
//		ДатаНачалаВыгрузки = НачалоГода(НачалоГода(ТекущаяДата())-1);
//		ПодключениеFTP = Неопределено;
//		ПапкаДляВыгрузки = ПолучитьПапкуДляВыгрузки();
//		КоличествоСтрокДокумента = 50000;
//		КоличествоПотоков = 3;
//		СрокХраненияИстории = 14;
//		НастройкаОбмена = Неопределено;
//	КонецЕсли;
//	
//	ПараметрыВыгрузки.Вставить("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);	
//	ПараметрыВыгрузки.Вставить("ПодключениеFTP", ПодключениеFTP);
//	ПараметрыВыгрузки.Вставить("ПапкаДляВыгрузки", ПапкаДляВыгрузки + ИмяБазы + "\");
//	ПараметрыВыгрузки.Вставить("КорневаяПапкаДляВыгрузки", ПапкаДляВыгрузки);
//	ПараметрыВыгрузки.Вставить("КоличествоСтрокДокумента", КоличествоСтрокДокумента);
//	ПараметрыВыгрузки.Вставить("КоличествоПотоков", КоличествоПотоков);
//	ПараметрыВыгрузки.Вставить("ИмяПланаСчетов", ПолучитьИмяПланаСчетов());
//	ПараметрыВыгрузки.Вставить("ДатаЗакрытогоПериода", ПолучитьДатуЗакрытогоПериода(ПараметрыВыгрузки));
//	
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Очистка папки обмена");
//	Попытка
//		УдалитьФайлы(ПараметрыВыгрузки.ПапкаДляВыгрузки);
//	Исключение
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Очистка папки обмена", ОписаниеОшибки(), КлючСтатистики);
//		Возврат;	
//	КонецПопытки;
//	
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Удаление регистрации данных, принятых сервером");	
//	Попытка
//		НомерПринятого = ПолучитьНомерПоследнегоПринятого(ПараметрыВыгрузки);
//		Если НомерПринятого = 0 Тогда
//			ПараметрыВыгрузки.Вставить("ПолнаяВыгрузка", Истина);
//		Иначе
//			ПараметрыВыгрузки.Вставить("ПолнаяВыгрузка", Ложь);
//		КонецЕсли;
//		авКонсолидацияПривилегированный.УдалитьРегистрациюПоНомеруСообщения(НомерПринятого);
//		НомерСообщения = авКонсолидацияПривилегированный.ПолучитьУвеличитьНомерСообщенияУзлаОбмена();
//		Если НомерСообщения = 0 Тогда
//			НомерСообщения = авКонсолидацияПривилегированный.ПолучитьУвеличитьНомерСообщенияУзлаОбмена();
//		КонецЕсли;
//		ПараметрыВыгрузки.Вставить("НомерСообщения", НомерСообщения);
//	Исключение
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Удаление регистрации выгруженных данных", ОписаниеОшибки(), КлючСтатистики);
//		Возврат;	
//	КонецПопытки;
//	
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Обновление объектов к выгрузке");
//	Попытка	
//		ОбновитьЗагрузитьОбъектыКВыгрузке(ПараметрыВыгрузки);
//	Исключение
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Обновление объектов к выгрузке", ОписаниеОшибки(), КлючСтатистики);
//		Возврат;
//	КонецПопытки;
//	
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Заполнение справочной информации");
//	Попытка
//		ЗаполнитьОбъектыМетаданных(ПараметрыВыгрузки);
//		ЗаполнитьСоответствияСубконто(ПараметрыВыгрузки);
//		ЗаполнитьСтруктурныеПодразделения(ПараметрыВыгрузки);
//		ЗаполнитьОбъектыКВыгрузке(ПараметрыВыгрузки);
//		ПараметрыВыгрузки.Вставить("ПустаяСсылка", ПустаяСсылка());
//	Исключение
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Заполнение справочной информации", ОписаниеОшибки(), КлючСтатистики);
//		Возврат;	
//	КонецПопытки;
//		
//	ПолучитьОбъектыПовторнойВыгрузки(ПараметрыВыгрузки);
//	
//	Если авКонсолидацияПовтИсп.ЭтоФайловаяИБ() Тогда
//		ПараметрыВыгрузки.Вставить("ПотоковаяВыгрузка", Ложь);	
//	Иначе
//		Если ПараметрыВыгрузки.КоличествоПотоков < 2 Тогда
//			ПараметрыВыгрузки.Вставить("ПотоковаяВыгрузка", Ложь);	
//		Иначе
//			ПараметрыВыгрузки.Вставить("ПотоковаяВыгрузка", Истина);
//		КонецЕсли;
//		авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Завершение зависших заданий");
//		Попытка	
//			ОтменитьЗависшиеЗадания();
//		Исключение
//			авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Завершение зависших заданий", ОписаниеОшибки(), КлючСтатистики);
//			Возврат;
//		КонецПопытки;
//	КонецЕсли;	
//	
//	НаборЗаписей = РегистрыСведений.авЗаданияДляВыгрузкиОбъектов.СоздатьНаборЗаписей();
//	НаборЗаписей.Записать();
//	
//	ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(ПараметрыВыгрузки.Узел, ПараметрыВыгрузки.НомерСообщения); 
//	ВыборкаДанных = Неопределено;
//	
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Выгрузка отчетов");
//	Попытка
//		ВыгрузитьОтчеты(ПараметрыВыгрузки);
//	Исключение
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Выгрузка отчетов", ОписаниеОшибки(), КлючСтатистики);
//		Возврат;	
//	КонецПопытки;

//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Выгрузка данных");
//	Попытка
//		ВыгрузитьОбъекты(ПараметрыВыгрузки); 
//	Исключение
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Выгрузка данных", ОписаниеОшибки(), КлючСтатистики);
//		Возврат;	
//	КонецПопытки; 
//	
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Выгрузка разницы по проводкам");
//	Попытка
//		ВыгрузитьРазницуПоПроводкам(ПараметрыВыгрузки);
//	Исключение
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Выгрузка разницы по проводкам", ОписаниеОшибки(), КлючСтатистики);
//		Возврат;	
//	КонецПопытки;
//	
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Сохранение файла Манифеста");
//	Попытка
//		ЗаписатьМанифест(ПараметрыВыгрузки);
//	Исключение
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Сохранение файла Манифеста", ОписаниеОшибки(), КлючСтатистики);
//		Возврат;	
//	КонецПопытки;
//	
//	авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Выполняется, "Выгрузка архива на ftp");
//	ВыгруженоНаFTP = ЗагрузитьДанныеНаFTP(ПараметрыВыгрузки);
//	
//	ОбъектыВыгружены = ОчискаРегистров(СрокХраненияИстории);
//	
//	//ОбновитьРассписание(ПараметрыВыгрузки);
//	
//	Если ОбъектыВыгружены И ВыгруженоНаFTP Тогда
//		авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.Завершено, "Выполнены все этапы");
//	Иначе
//		авКонсолидацияПривилегированный.ЗаписатьСтатистикуВыполненияЗадания(КлючСтатистики, Перечисления.авСостояниеВыполненияЗадания.ЗавершеноСОшибкой, "Выполнены все этапы");
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция ОчискаРегистров(СрокХраненияИстории)
//	
//	Если СрокХраненияИстории > 0 Тогда
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		               |	авЛогОшибок.Период,
//		               |	авЛогОшибок.ВидСобытия
//		               |ИЗ
//		               |	РегистрСведений.авЛогОшибок КАК авЛогОшибок
//		               |ГДЕ
//		               |	авЛогОшибок.Период <= &Период";
//		Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()) - СрокХраненияИстории * 86400);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			НаборЗаписей = РегистрыСведений.авЛогОшибок.СоздатьНаборЗаписей();
//			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
//			НаборЗаписей.Отбор.ВидСобытия.Установить(Выборка.ВидСобытия);
//			НаборЗаписей.Записать();
//		КонецЦикла;		
//		Запрос.Текст = "ВЫБРАТЬ
//		               |	авСтатусыВыполненияЗаданий.ИдентификаторСеанса,
//		               |	авСтатусыВыполненияЗаданий.Задание
//		               |ИЗ
//		               |	РегистрСведений.авСтатусыВыполненияЗаданий КАК авСтатусыВыполненияЗаданий
//		               |ГДЕ
//		               |	авСтатусыВыполненияЗаданий.ВремяНачала <= &Период";
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			НаборЗаписей = РегистрыСведений.авСтатусыВыполненияЗаданий.СоздатьНаборЗаписей();
//			НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(Выборка.ИдентификаторСеанса);
//			НаборЗаписей.Отбор.Задание.Установить(Выборка.Задание);
//			НаборЗаписей.Записать();
//		КонецЦикла;
//	КонецЕсли;
//	
//	ОбъектыВыгружены = Истина;
//	
//	Запрос = Новый Запрос;	
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	авЗаданияДляВыгрузкиОбъектов.ИдентификаторЗадания
//	               |ИЗ
//	               |	РегистрСведений.авЗаданияДляВыгрузкиОбъектов КАК авЗаданияДляВыгрузкиОбъектов
//	               |ГДЕ
//	               |	авЗаданияДляВыгрузкиОбъектов.СтатусЗадания = &СтатусЗадания";
//	Запрос.УстановитьПараметр("СтатусЗадания", Строка(СостояниеФоновогоЗадания.Завершено));
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		НаборЗаписей = РегистрыСведений.авЗаданияДляВыгрузкиОбъектов.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.ИдентификаторЗадания.Установить(Выборка.ИдентификаторЗадания);
//		НаборЗаписей.Записать();
//	КонецЦикла;
//		
//	Возврат ОбъектыВыгружены;
//	
//КонецФункции

//Процедура ЗаполнитьОбъектыКВыгрузке(ПараметрыВыгрузки)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	авОбъектыКВыгрузке.ИмяОбъектаМетаданных,
//	               |	авОбъектыКВыгрузке.НачалоПериода,
//	               |	авОбъектыКВыгрузке.КонецПериода
//	               |ИЗ
//	               |	РегистрСведений.авОбъектыКВыгрузке КАК авОбъектыКВыгрузке
//	               |ГДЕ
//	               |	авОбъектыКВыгрузке.Статус = Значение(Перечисление.авСтатусыОбъектовКВыгрузке.Успех)";
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		НаборЗаписей = РегистрыСведений.авОбъектыКВыгрузке.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.ИмяОбъектаМетаданных.Установить(Выборка.ИмяОбъектаМетаданных);
//		НаборЗаписей.Отбор.НачалоПериода.Установить(Выборка.НачалоПериода);
//		НаборЗаписей.Отбор.КонецПериода.Установить(Выборка.КонецПериода);
//		НаборЗаписей.Записать();
//	КонецЦикла;
//	
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	авОбъектыКВыгрузке.Ссылка КАК Ссылка,
//	               |	авОбъектыКВыгрузке.Наименование КАК ИмяОбъекта
//	               |ИЗ
//	               |	Справочник.авОбъектыКВыгрузке КАК авОбъектыКВыгрузке
//	               |ГДЕ
//	               |	НЕ авОбъектыКВыгрузке.ПометкаУдаления";
//	           
//	Если НЕ ПараметрыВыгрузки.ПолнаяВыгрузка Тогда
//		Запрос.Текст = Запрос.Текст + "	И авОбъектыКВыгрузке.Выгружать";	
//	КонецЕсли;
//		
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		МенеджерЗаписи = РегистрыСведений.авОбъектыКВыгрузке.СоздатьМенеджерЗаписи();
//		МенеджерЗаписи.ИмяОбъектаМетаданных = Выборка.ИмяОбъекта;
//		МенеджерЗаписи.Прочитать();
//		МенеджерЗаписи.ИмяОбъектаМетаданных = Выборка.ИмяОбъекта;
//		МенеджерЗаписи.Изменения = НЕ ПараметрыВыгрузки.ПолнаяВыгрузка;
//		МенеджерЗаписи.Статус = Перечисления.авСтатусыОбъектовКВыгрузке.Ожидание;
//		МенеджерЗаписи.Записать();
//	КонецЦикла;	
//	
//КонецПроцедуры

////FTP
//Функция ЗагрузитьДанныеНаFTP(ПараметрыВыгрузки)
//	
//	ПодключениеFTP = ПараметрыВыгрузки.ПодключениеFTP;
//	Если НЕ ЗначениеЗаполнено(ПодключениеFTP) Тогда
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Выгрузка FTP", "Настройка подключения к FTP не задана!", ПараметрыВыгрузки.КлючСтатистики);
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Попытка
//		FTPСоединение = Новый FTPСоединение(ПодключениеFTP.Адрес, ПодключениеFTP.Порт, ПодключениеFTP.Логин, ПодключениеFTP.Пароль,, Истина);
//		FTPСоединение.УстановитьТекущийКаталог("/" + ?(ЗначениеЗаполнено(ПодключениеFTP.ПапкаFTP), ПодключениеFTP.ПапкаFTP + "/", ""));
//	
//		ИмяАрхива = ПараметрыВыгрузки.КорневаяПапкаДляВыгрузки + ПараметрыВыгрузки.ИмяБазы + ".zip";	
//		НовыйАрхив = Новый ЗаписьZipФайла(ИмяАрхива);
//	    НовыйАрхив.Добавить(
//	        ПараметрыВыгрузки.ПапкаДляВыгрузки + "*.*", 
//			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
//	        РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно
//	    );
//	    НовыйАрхив.Записать();
//	
//		FTPСоединение.Записать(ИмяАрхива, ПараметрыВыгрузки.ИмяБазы + " " + Формат(ТекущаяДата(), "ДФ = ггггММддЧЧммсс") + ".zip");	
//		
//		Результат = Истина;		
//	Исключение
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Выгрузка FTP", ОписаниеОшибки(), ПараметрыВыгрузки.КлючСтатистики);
//		Результат = Ложь;
//	КонецПопытки;
//	
//	Попытка
//		УдалитьФайлы(ИмяАрхива);
//	Исключение
//	КонецПопытки;
//		
//	Возврат Результат;
//	
//КонецФункции

//Процедура ЗаписатьМанифест(ПараметрыВыгрузки)
//	
//	Структура = Новый Структура;
//	Структура.Вставить("ИмяБазы", ПараметрыВыгрузки.ИмяБазы);
//	Структура.Вставить("НомерСообщения", ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыВыгрузки.НомерСообщения));
//	Структура.Вставить("ОбъектыПовторнойВыгрузки", ПараметрыВыгрузки.ОбъектыПовторнойВыгрузки);
//	Структура.Вставить("Отчеты", ПараметрыВыгрузки.Отчеты);
//	
//	ПараметрыФайла = Новый Структура;
//	ПараметрыФайла.Вставить("ИмяОбъекта", "Manifest");
//	ПараметрыФайла.Вставить("ВидОбъекта", "");
//	ПараметрыФайла.Вставить("ПапкаДляВыгрузкиManifest", ПараметрыВыгрузки.ПапкаДляВыгрузки);

//	Файл = ПолучитьФайлФСО(ПараметрыФайла,, ".txt");	
//	Файл.WriteLine(ЗначениеВСтрокуВнутр(Структура));
//	Файл.Close();	
//	
//КонецПроцедуры

//// Веб Сервисы
//Процедура ОбновитьЗагрузитьОбъектыКВыгрузке(ПараметрыВыгрузки)
//	
//	Прокси = ПолучитьПрокси(ПараметрыВыгрузки);
//	Если Прокси = Неопределено Тогда
//		Возврат;
//	КонецЕсли;	
//	
//	СписокОбъектов = ЗначениеИзСтрокиВнутр(Прокси.GetObjectsForUpload(ПараметрыВыгрузки.ИмяБазы));
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	авОбъектыКВыгрузке.Ссылка КАК Ссылка,
//	               |	авОбъектыКВыгрузке.Наименование КАК Наименование,
//	               |	авОбъектыКВыгрузке.Выгружать КАК Выгружать,
//	               |	авОбъектыКВыгрузке.ПометкаУдаления КАК ПометкаУдаления,
//	               |	ЛОЖЬ КАК Присутствует
//	               |ИЗ
//	               |	Справочник.авОбъектыКВыгрузке КАК авОбъектыКВыгрузке";
//	
//	ТЗОбъекты = Запрос.Выполнить().Выгрузить();
//	
//	Для Каждого Строка Из СписокОбъектов Цикл
//	
//		Если НЕ ЗначениеЗаполнено(Строка.Представление) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ИмяОбъекта = СокрЛП(Строка.Представление);
//		
//		Отбор = Новый Структура;
//		Отбор.Вставить("Наименование", ИмяОбъекта);		
//		МассивСтрок = ТЗОбъекты.НайтиСтроки(Отбор);
//		
//		Если МассивСтрок.Количество() = 0 Тогда

//			Объект = Справочники.авОбъектыКВыгрузке.СоздатьЭлемент();
//			Объект.Наименование = ИмяОбъекта;
//			Объект.УстановитьНовыйКод();
//			Объект.Выгружать = Строка.Значение;
//			Объект.Записать();	
//			
//		Иначе
//			
//			ТекСтрока = МассивСтрок[0];	
//			Если ТекСтрока.Выгружать <> Строка.Значение 
//				ИЛИ ТекСтрока.ПометкаУдаления Тогда
//				Объект = ТекСтрока.Ссылка.ПолучитьОбъект();
//				Объект.Выгружать = Строка.Значение; 
//				Объект.УстановитьПометкуУдаления(Ложь);
//				Объект.Записать();
//			КонецЕсли;
//			ТекСтрока.Присутствует = Истина;
//			
//		КонецЕсли;	
//		
//	КонецЦикла;	
//	
//	Отбор = Новый Структура;
//	Отбор.Вставить("Присутствует", Ложь);
//	МассивСтрок = ТЗОбъекты.НайтиСтроки(Отбор);
//	Для Каждого Строка Из МассивСтрок Цикл
//		Объект = Строка.Ссылка.ПолучитьОбъект();	
//		Объект.УстановитьПометкуУдаления(Истина);
//		Объект.Записать();
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция ПолучитьАктуальнуюВерсиюОбработки(ПараметрыВыгрузки)
//	
//	Прокси = ПолучитьПрокси(ПараметрыВыгрузки);
//	Если Прокси = Неопределено Тогда
//		Возврат авКонсолидацияПривилегированный.ПолучитьВерсиюОбработки(Справочники.авОбработки.Основная);
//	КонецЕсли;
//	
//	Возврат Прокси.GetTheLatestProcessingVersion(ПараметрыВыгрузки.ИмяБазы);
//		
//КонецФункции

//Процедура ОбновитьОбработкуИзСервиса(ПараметрыВыгрузки, ВерсияОбработки)
//	
//	Прокси = ПолучитьПрокси(ПараметрыВыгрузки);
//	Если Прокси = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СтрокаОбработка = Прокси.GetProcessing(ПараметрыВыгрузки.ИмяБазы);
//	Если СтрокаОбработка <> "" Тогда
//		ДвоичныеДанныеОбработки = Base64Значение(СтрокаОбработка);  
//	Иначе
//		ДвоичныеДанныеОбработки = Неопределено;
//	КонецЕсли;
//	
//	ТекОбъект = Справочники.авОбработки.Основная.ПолучитьОбъект(); 
//	ТекОбъект.Хранилище = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки);
//	ТекОбъект.ВерсияОбработки = ВерсияОбработки;
//	ТекОбъект.Загружена = Истина;
//	ТекОбъект.Записать();
//	
//КонецПроцедуры

//Функция ПолучитьНомерПоследнегоПринятого(ПараметрыВыгрузки)
//		
//	Прокси = ПолучитьПрокси(ПараметрыВыгрузки);
//	Если Прокси = Неопределено Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	Возврат Прокси.GetTheNumberOfAccepted(ПараметрыВыгрузки.ИмяБазы);
//	
//КонецФункции

//Процедура ПолучитьОбъектыПовторнойВыгрузки(ПараметрыВыгрузки)
//	
//	//Авитим {Требуется доработка: Проработать выгрузку документов

//	Прокси = ПолучитьПрокси(ПараметрыВыгрузки);
//	Если Прокси = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТЗ = ЗначениеИзСтрокиВнутр(Прокси.GetObjectsForReloading(ПараметрыВыгрузки.ИмяБазы));
//	
//	Для Каждого Строка Из ТЗ Цикл
//		Если ЗначениеЗаполнено(Строка.ОбъектКВыгрузке) Тогда
//			Запрос = Новый Запрос;
//			Запрос.Текст = "ВЫБРАТЬ
//			               |	авОбъектыКВыгрузке.Ссылка
//			               |ИЗ
//			               |	Справочник.авОбъектыКВыгрузке КАК авОбъектыКВыгрузке
//			               |ГДЕ
//			               |	авОбъектыКВыгрузке.Наименование = &Наименование";
//			Запрос.УстановитьПараметр("Наименование", Строка.ОбъектКВыгрузке);
//			Выборка = Запрос.Выполнить().Выбрать();
//			Если Выборка.Следующий() Тогда
//				Если Лев(Строка.ОбъектКВыгрузке, 18) = "РегистрБухгалтерии" Тогда
//					Если ЗначениеЗаполнено(Строка.ДатаНачала) Тогда
//						ДатаНачала = Строка.ДатаНачала;
//					Иначе
//						ДатаНачала = ПараметрыВыгрузки.ДатаНачалаВыгрузки;
//					КонецЕсли;
//					Если ЗначениеЗаполнено(Строка.ДатаОкончания) Тогда
//						ДатаОкончания = Строка.ДатаОкончания;
//					Иначе
//						ДатаОкончания = КонецГода(ТекущаяДата());
//					КонецЕсли;
//					Если ЗначениеЗаполнено(Строка.Счет) Тогда      
//						Счет = ПланыСчетов[ПараметрыВыгрузки.ИмяПланаСчетов].НайтиПоКоду(Строка.Счет);
//					Иначе
//						Счет = ПланыСчетов[ПараметрыВыгрузки.ИмяПланаСчетов].ПустаяСсылка();
//					КонецЕсли;
//					ПоСчету = ЗначениеЗаполнено(Счет);
//					Если (ДатаНачала = ПараметрыВыгрузки.ДатаНачалаВыгрузки) И (ДатаОкончания = КонецГода(ТекущаяДата())) И НЕ ПоСчету Тогда
//						МенеджерЗаписи = РегистрыСведений.авОбъектыКВыгрузке.СоздатьМенеджерЗаписи();
//						МенеджерЗаписи.ИмяОбъектаМетаданных = Строка.ОбъектКВыгрузке;
//						МенеджерЗаписи.Изменения = Ложь;
//						МенеджерЗаписи.Статус = Перечисления.авСтатусыОбъектовКВыгрузке.Ожидание;
//						МенеджерЗаписи.Записать();	
//					Иначе
//						ЗарегестрироватьИзмененияРегистраБухгалтерии(ПараметрыВыгрузки, ДатаНачала, ДатаОкончания, Счет);   
//						НаборЗаписей = РегистрыСведений.авОбъектыКВыгрузке.СоздатьНаборЗаписей();
//						НаборЗаписей.Отбор.ИмяОбъектаМетаданных.Установить(Строка.ОбъектКВыгрузке);
//						НаборЗаписей.Прочитать();
//						Если НаборЗаписей.Количество() = 0 Тогда
//							МенеджерЗаписи = РегистрыСведений.авОбъектыКВыгрузке.СоздатьМенеджерЗаписи();
//							МенеджерЗаписи.ИмяОбъектаМетаданных = Строка.ОбъектКВыгрузке;
//							МенеджерЗаписи.Изменения = Истина;
//							МенеджерЗаписи.Статус = Перечисления.авСтатусыОбъектовКВыгрузке.Ожидание;
//							МенеджерЗаписи.Записать();
//						КонецЕсли;
//					КонецЕсли;
//				Иначе
//					МенеджерЗаписи = РегистрыСведений.авОбъектыКВыгрузке.СоздатьМенеджерЗаписи();
//					МенеджерЗаписи.ИмяОбъектаМетаданных = Строка.ОбъектКВыгрузке;
//					МенеджерЗаписи.Прочитать();
//					МенеджерЗаписи.ИмяОбъектаМетаданных = Строка.ОбъектКВыгрузке;
//					МенеджерЗаписи.Изменения = Ложь;
//					МенеджерЗаписи.Статус = Перечисления.авСтатусыОбъектовКВыгрузке.Ожидание;
//					МенеджерЗаписи.Записать();	
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;	
//	КонецЦикла;
//	
//	ПараметрыВыгрузки.Вставить("ОбъектыПовторнойВыгрузки", ТЗ);
//		
//КонецПроцедуры

//Процедура ЗарегестрироватьИзмененияРегистраБухгалтерии(ПараметрыВыгрузки, НачалоПериода, КонецПериода, Счет)
//	
//	Узел = авКонсолидацияПривилегированный.ПолучитьУзелКонсолидации();
//	
//	Запрос = Новый Запрос;  
//	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//	               |	ОборотыИзменения.Регистратор
//	               |ПОМЕСТИТЬ ВтРегистраторы
//	               |ИЗ
//	               |	РегистрБухгалтерии." + ПараметрыВыгрузки.ИмяПланаСчетов + ".Изменения КАК ОборотыИзменения
//	               |ГДЕ
//	               |	ОборотыИзменения.Узел = &Узел
//	               |	И ЕСТЬNULL(ОборотыИзменения.НомерСообщения, 0) = 0
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
//	               |	ВложенныйЗапрос.Регистратор
//	               |ИЗ
//	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
//	               |		Обороты.Регистратор КАК Регистратор
//	               |	ИЗ
//	               |		РегистрБухгалтерии." + ПараметрыВыгрузки.ИмяПланаСчетов + " КАК Обороты
//	               |	ГДЕ
//	               |		Обороты.Период МЕЖДУ &НачалоПериода И &КонецПериода
//	               |		И ВЫБОР
//	               |				КОГДА &ПоСчету
//	               |					ТОГДА Обороты.СчетДт = &Счет
//	               |				ИНАЧЕ ИСТИНА
//	               |			КОНЕЦ
//	               |	
//	               |	ОБЪЕДИНИТЬ ВСЕ
//	               |	
//	               |	ВЫБРАТЬ РАЗЛИЧНЫЕ
//	               |		Обороты.Регистратор
//	               |	ИЗ
//	               |		РегистрБухгалтерии." + ПараметрыВыгрузки.ИмяПланаСчетов + " КАК Обороты
//	               |	ГДЕ
//	               |		Обороты.Период МЕЖДУ &НачалоПериода И &КонецПериода
//	               |		И ВЫБОР
//	               |				КОГДА &ПоСчету
//	               |					ТОГДА Обороты.СчетКт = &Счет
//	               |			КОНЕЦ) КАК ВложенныйЗапрос
//	               |ГДЕ
//	               |	НЕ ВложенныйЗапрос.Регистратор В
//	               |				(ВЫБРАТЬ
//	               |					Вт.Регистратор
//	               |				ИЗ
//	               |					ВтРегистраторы КАК Вт)";
//	
//	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода); 
//	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
//	Запрос.УстановитьПараметр("Счет", Счет);
//	Запрос.УстановитьПараметр("ПоСчету", ЗначениеЗаполнено(Счет));
//	Запрос.УстановитьПараметр("Узел", Узел); 	
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		НаборЗаписей = РегистрыБухгалтерии[ПараметрыВыгрузки.ИмяПланаСчетов].СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);	
//		ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей); 
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция ПолучитьОтчетыДляВыгрузки(ПараметрыВыгрузки)
//		
//	Прокси = ПолучитьПрокси(ПараметрыВыгрузки);
//	Если Прокси = Неопределено Тогда
//		Возврат Новый ТаблицаЗначений;
//	КонецЕсли;
//	
//	Возврат ЗначениеИзСтрокиВнутр(Прокси.GetReportsToUpload(ПараметрыВыгрузки.ИмяБазы));
//	
//КонецФункции

//Функция ПолучитьДатуЗакрытогоПериода(ПараметрыВыгрузки)
//	
//	Прокси = ПолучитьПрокси(ПараметрыВыгрузки);
//	Если Прокси = Неопределено Тогда
//		Возврат Дата(1,1,1);
//	КонецЕсли;
//	
//	ДатаЗакрытогоПериодаСтрока = Прокси.GetClosedPeriodDate(ПараметрыВыгрузки.ИмяБазы);
//	ДатаЗакрытогоПериода = Дата(Сред(ДатаЗакрытогоПериодаСтрока, 1, 4), Сред(ДатаЗакрытогоПериодаСтрока, 5, 2), Сред(ДатаЗакрытогоПериодаСтрока, 7, 2));  
//	Возврат ДатаЗакрытогоПериода;
//		
//КонецФункции

//Процедура ОбновитьРассписание(ПараметрыВыгрузки)
//	
//	НастройкаОбмена = Константы.авНастройкаОбмена.Получить();
//	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Прокси = ПолучитьПрокси(ПараметрыВыгрузки);
//	Если Прокси = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Рассписание = ЗначениеИзСтрокиВнутр(Прокси.GetScheduleUpload(Константы.авИмяБазы.Получить()));
//	
//	Если Рассписание.Количество() <> 0 Тогда
//		ОбъектНастройкаОбмена = НастройкаОбмена.ПолучитьОбъект();
//		ОбъектНастройкаОбмена.РасписаниеОбмена.Очистить();
//		Для Каждого Строка Из Рассписание Цикл
//			НовСтрока = ОбъектНастройкаОбмена.РасписаниеОбмена.Добавить();
//			НовСтрока.День = Перечисления.авДниНедели.Получить(Строка.ДеньНедели); 
//			НовСтрока.ВремяНачала = Строка.ВремяВыгрузки;
//		КонецЦикла;
//		ОбъектНастройкаОбмена.Записать();
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция ПолучитьПрокси(ПараметрыВыгрузки)
//		
//	ПодключениеВебСервис = Константы.авПодключениеВебСервис.Получить();	
//	Если НЕ ЗначениеЗаполнено(ПодключениеВебСервис) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	СсылкаСервис = ПодключениеВебСервис.Адрес;
//	ИмяПользователя = ПодключениеВебСервис.Логин;
//	Пароль = ПодключениеВебСервис.Пароль;
//	
//	ПространствоИмен = "http://ConsEx";
//	ИмяСервиса = "ConsEx";
//	ИмяТочкиПодключения = "ConsExSoap12";
//	
//	Попытка
//		Определение = Новый WSОпределения(СсылкаСервис, ИмяПользователя, Пароль);
//		Прокси = Новый WSПрокси(Определение, ПространствоИмен, ИмяСервиса, ИмяТочкиПодключения);
//		Прокси.Пользователь = ИмяПользователя;
//		Прокси.Пароль = Пароль;
//	Исключение
//		Ошибка = ОписаниеОшибки(); 
//		Попытка 
//			WshNetwork = Новый COMОбъект("WScript.Network");
//			ИмяПользователя = WshNetwork.UserName;	
//		Исключение
//			ИмяПользователя = "";
//		КонецПопытки;
//		ТекстОшибки = ИмяКомпьютера() + Символы.ПС + ИмяПользователя + Символы.ПС + Ошибка;
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Подключение к веб-сервису", ТекстОшибки, ПараметрыВыгрузки.КлючСтатистики);	
//		Возврат Неопределено;
//	КонецПопытки;
//	
//	Возврат Прокси;
//	
//КонецФункции

//// Работа с фоновыми заданиями
//Процедура ПотоковаяВыгрузка(ПараметрыВыгрузки, ПараметрыЗадания, ИмяМетода, ОбновлятьОбъекты = Истина)
//	
//	Если ПараметрыВыгрузки.ПотоковаяВыгрузка Тогда
//		ЗапуститьФоновоеЗадание(ПараметрыВыгрузки, ПараметрыЗадания, ИмяМетода, ОбновлятьОбъекты); 
//	Иначе	
//		ДобавитьЗадание(ПараметрыВыгрузки, ПараметрыЗадания);
//		Выполнить(ИмяМетода + "(ПараметрыЗадания.ИдентификаторЗадания)"); 
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ДобавитьЗадание(ПараметрыВыгрузки, ПараметрыЗадания)
//		
//	МенеджерЗаписи = РегистрыСведений.авЗаданияДляВыгрузкиОбъектов.СоздатьМенеджерЗаписи();
//	МенеджерЗаписи.ИдентификаторЗадания = ПараметрыЗадания.ИдентификаторЗадания;
//	МенеджерЗаписи.ПараметрыВыгрузки = Новый ХранилищеЗначения(ПараметрыВыгрузки);
//	МенеджерЗаписи.ПараметрыЗадания = Новый ХранилищеЗначения(ПараметрыЗадания);
//	МенеджерЗаписи.СтатусЗадания = Строка(СостояниеФоновогоЗадания.Активно);
//	МенеджерЗаписи.ИмяОбъектаМетаданных = ПараметрыЗадания.ИмяОбъектаМетаданных; 
//	МенеджерЗаписи.НачалоПериода = ПараметрыЗадания.НачалоПериода;
//	МенеджерЗаписи.КонецПериода = ПараметрыЗадания.КонецПериода;
//	МенеджерЗаписи.ВремяНачала = ТекущаяДата();	
//	МенеджерЗаписи.Записать();
//	
//КонецПроцедуры

//Процедура ЗапуститьФоновоеЗадание(ПараметрыВыгрузки, ПараметрыЗадания, ИмяМетода, ОбновлятьОбъекты)
//	
//	Отбор = Новый Структура;
//	Отбор.Вставить("ИмяМетода", "авКонсолидацияПривилегированный.ВыполнитьМетодОбработки");
//	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
//	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
//	Пока МассивЗаданий.Количество() >= ПараметрыВыгрузки.КоличествоПотоков Цикл
//		Попытка
//			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий, 10);
//		Исключение
//		КонецПопытки;
//		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
//	КонецЦикла;
//	ДобавитьЗадание(ПараметрыВыгрузки, ПараметрыЗадания);
//	ПараметрыФоновогоЗадания = Новый Массив;
//	ПараметрыФоновогоЗадания.Добавить(ИмяМетода); 
//	ПараметрыФоновогоЗадания.Добавить(ПараметрыЗадания.ИдентификаторЗадания);
//	ФоновыеЗадания.Выполнить("авКонсолидацияПривилегированный.ВыполнитьМетодОбработки", ПараметрыФоновогоЗадания, ПараметрыЗадания.ИдентификаторЗадания, "Выгрузка " + ПараметрыЗадания.ИмяОбъектаМетаданных);	
//                     
//КонецПроцедуры

//Процедура ОжидатьЗавершенияЗаданийПоМассиву(ПараметрыВыгрузки, МассивИдентификаторов)
//		
//	Если ПараметрыВыгрузки.ПотоковаяВыгрузка Тогда
//		Если МассивИдентификаторов.Количество() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//		МассивПроверяемых = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(МассивИдентификаторов));
//		Пока МассивПроверяемых.Количество() > 0 Цикл
//			МассивУдаляемых = Новый Массив;
//			Для Каждого Идентификатор Из МассивПроверяемых Цикл
//				Отбор = Новый Структура;
//				Отбор.Вставить("ИмяМетода", "авКонсолидацияПривилегированный.ВыполнитьМетодОбработки");
//				Отбор.Вставить("Ключ", Идентификатор);
//				Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
//				МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
//				Если МассивЗаданий.Количество() = 0 Тогда
//					МассивУдаляемых.Добавить(Идентификатор);
//				Иначе
//					Попытка
//						ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий, 10);
//						МассивУдаляемых.Добавить(Идентификатор);
//					Исключение
//					КонецПопытки;	
//				КонецЕсли;
//			КонецЦикла;
//			Для Каждого Идентификатор Из МассивУдаляемых Цикл
//				МассивПроверяемых.Удалить(МассивПроверяемых.Найти(Идентификатор));		
//			КонецЦикла;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ОтменитьЗависшиеЗадания()
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	авЗаданияДляВыгрузкиОбъектов.ИдентификаторЗадания
//	               |ИЗ
//	               |	РегистрСведений.авЗаданияДляВыгрузкиОбъектов КАК авЗаданияДляВыгрузкиОбъектов
//	               |ГДЕ
//	               |	авЗаданияДляВыгрузкиОбъектов.ИдентификаторЗадания = &ИдентификаторЗадания";
//		
//	Отбор = Новый Структура;
//	Отбор.Вставить("ИмяМетода", "авКонсолидацияПривилегированный.ВыполнитьМетодОбработки");
//	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
//	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
//	Для Каждого Задание Из МассивЗаданий Цикл
//		Запрос.УстановитьПараметр("ИдентификаторЗадания", Задание.Ключ);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда 
//			Задание.Отменить();	
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

////Выгруpка данных
//Процедура ВыгрузитьОбъекты(ПараметрыВыгрузки)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	авОбъектыКВыгрузке.ИмяОбъектаМетаданных,
//	               |	авОбъектыКВыгрузке.НачалоПериода,
//	               |	авОбъектыКВыгрузке.КонецПериода,
//	               |	авОбъектыКВыгрузке.Изменения
//	               |ИЗ
//	               |	РегистрСведений.авОбъектыКВыгрузке КАК авОбъектыКВыгрузке
//	               |ГДЕ
//	               |	авОбъектыКВыгрузке.Статус = ЗНАЧЕНИЕ(Перечисление.авСтатусыОбъектовКВыгрузке.Ожидание)";
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	МассивИдентификаторов = Новый Массив();
//	Пока Выборка.Следующий() Цикл
//		ИдентификаторЗадания = Новый УникальныйИдентификатор();
//		ПараметрыЗадания = Новый Структура;
//		ПараметрыЗадания.Вставить("ИмяОбъектаМетаданных", Выборка.ИмяОбъектаМетаданных); 
//		ПараметрыЗадания.Вставить("НачалоПериода", Выборка.НачалоПериода);
//		ПараметрыЗадания.Вставить("КонецПериода", Выборка.КонецПериода);
//		ПараметрыЗадания.Вставить("Изменения", Выборка.Изменения);
//		ПараметрыЗадания.Вставить("ИдентификаторЗадания", XMLСтрока(ИдентификаторЗадания));
//		МассивИдентификаторов.Добавить(ПараметрыЗадания.ИдентификаторЗадания);
//		ПотоковаяВыгрузка(ПараметрыВыгрузки, ПараметрыЗадания, "ВыгрузитьОбъект"); 
//	КонецЦикла;
//	
//	ОжидатьЗавершенияЗаданийПоМассиву(ПараметрыВыгрузки, МассивИдентификаторов);
//	
//КонецПроцедуры

//Процедура ВыгрузитьОбъект(ИдентификаторЗадания) Экспорт
//	
//	МенеджерЗаписи = РегистрыСведений.авЗаданияДляВыгрузкиОбъектов.СоздатьМенеджерЗаписи();
//	МенеджерЗаписи.ИдентификаторЗадания = ИдентификаторЗадания;
//	МенеджерЗаписи.Прочитать();
//	
//	ПараметрыВыгрузки = МенеджерЗаписи.ПараметрыВыгрузки.Получить();
//	ПараметрыЗадания = МенеджерЗаписи.ПараметрыЗадания.Получить();
//	ПолноеИмяОбъекта = ПараметрыЗадания.ИмяОбъектаМетаданных;
//	
//	МенеджерЗаписиОбъекта = РегистрыСведений.авОбъектыКВыгрузке.СоздатьМенеджерЗаписи();
//	МенеджерЗаписиОбъекта.ИмяОбъектаМетаданных = ПараметрыЗадания.ИмяОбъектаМетаданных;
//	МенеджерЗаписиОбъекта.НачалоПериода = ПараметрыЗадания.НачалоПериода;
//	МенеджерЗаписиОбъекта.КонецПериода = ПараметрыЗадания.КонецПериода;
//	МенеджерЗаписиОбъекта.Прочитать();
//		
//	ПараметрыЗадания.Вставить("ИмяОбъекта", Прав(ПолноеИмяОбъекта, СтрДлина(ПолноеИмяОбъекта) - СтрНайти(ПолноеИмяОбъекта, ".")));
//	ПараметрыЗадания.Вставить("ВидОбъекта", ?(СтрНайти(ПолноеИмяОбъекта, ".") = 0, "Объект", Лев(ПолноеИмяОбъекта, СтрНайти(ПолноеИмяОбъекта, ".") - 1)));
//		
//	Каталог = ПараметрыВыгрузки.ПапкаДляВыгрузки + ПараметрыЗадания.ВидОбъекта + "_" + ПараметрыЗадания.ИмяОбъекта + "\";
//	СоздатьКаталог(Каталог);
//	ПараметрыЗадания.Вставить("ПапкаДляВыгрузки" + ПараметрыЗадания.ВидОбъекта + ПараметрыЗадания.ИмяОбъекта, Каталог); 
//	
//	ВыгруженоСтрок = 0;
//	
//	Попытка
//		Если ПараметрыЗадания.ВидОбъекта = "Перечисление" Тогда
//			ВыгруженоСтрок = ОбработатьПеречисление(ПараметрыВыгрузки, ПараметрыЗадания);	
//		ИначеЕсли ПараметрыЗадания.ВидОбъекта = "РегистрБухгалтерии" Тогда
//			Если ПараметрыЗадания.ИмяОбъекта = "Остатки" Тогда
//				ВыгруженоСтрок = ОбработатьОстатки(ПараметрыВыгрузки, ПараметрыЗадания);	
//			Иначе
//				ВыгруженоСтрок = ОбработатьРегистрБухгалтерии(ПараметрыВыгрузки, ПараметрыЗадания);
//			КонецЕсли;
//		Иначе
//			ВыгруженоСтрок = ОбработатьОбъект(ПараметрыВыгрузки, ПараметрыЗадания);
//		КонецЕсли;
//		МенеджерЗаписи.СтатусЗадания = Строка(СостояниеФоновогоЗадания.Завершено);
//		МенеджерЗаписи.ВыгруженоСтрок = ВыгруженоСтрок;
//		МенеджерЗаписиОбъекта.ВыгруженоСтрок = ВыгруженоСтрок;
//		МенеджерЗаписиОбъекта.Статус = Перечисления.авСтатусыОбъектовКВыгрузке.Успех;
//	Исключение
//		МенеджерЗаписи.СтатусЗадания = Строка(СостояниеФоновогоЗадания.ЗавершеноАварийно);
//		МенеджерЗаписиОбъекта.Статус = Перечисления.авСтатусыОбъектовКВыгрузке.Провал;
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Ошибка выгрузки объекта " + ПолноеИмяОбъекта, ОписаниеОшибки());	
//	КонецПопытки;
//	
//	МенеджерЗаписи.ВремяОкончания = ТекущаяДата();
//	МенеджерЗаписи.Записать();
//	МенеджерЗаписиОбъекта.Записать();
//	
//КонецПроцедуры

//Процедура ВыгрузитьОтчеты(ПараметрыВыгрузки)
//	
//	ТЗОтчеты = ПолучитьОтчетыДляВыгрузки(ПараметрыВыгрузки);
//	
//	Для Каждого Строка Из ТЗОтчеты Цикл
//		Попытка
//			ВыгрузитьОтчет(ПараметрыВыгрузки, Строка.ТипОтчета, Строка.ДатаНачала, Строка.ДатаОкончания, Строка.Счет);
//		Исключение
//			авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Ошибка выгрузки отчета", "Отчет " + Строка.ТипОтчета + " за период " + Строка(Строка.ДатаНачала)
//				+ " - " + Строка(Строка.ДатаОкончания) + ?(ЗначениеЗаполнено(Строка.Счет)," по счету " + Строка.Счет,"") + Символы.ПС + ОписаниеОшибки());	
//		КонецПопытки;		
//	КонецЦикла;
//	
//	ПараметрыВыгрузки.Вставить("Отчеты", ТЗОтчеты);
//	
//КонецПроцедуры

//Процедура ВыгрузитьОтчет(ПараметрыВыгрузки, ТипОтчета, ДатаНачала = Неопределено, ДатаОкончания = Неопределено, Счет = "")
//	
//	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
//		ДатаНач = ПараметрыВыгрузки.ДатаНачалаВыгрузки;
//	Иначе
//		ДатаНач = ДатаНачала;
//	КонецЕсли;
//	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
//		ДатаКон = КонецГода(ТекущаяДата());
//	Иначе
//		ДатаКон = КонецДня(ДатаОкончания);
//	КонецЕсли;
//	
//	СчетСсылка = ПланыСчетов[ПараметрыВыгрузки.ИмяПланаСчетов].НайтиПоКоду(Счет);
//	
//	Если ТипОтчета = "ОСВ" Тогда
//		СхемаКомпоновкиДанных = ПолучитьМакет("СКД_ОСВ");
//	ИначеЕсли ТипОтчета = "ОСВСчет" Тогда
//		СхемаКомпоновкиДанных = ПолучитьМакет("СКД_ОСВ_Счет");
//	ИначеЕсли ТипОтчета = "Карточка" Тогда 
//		СхемаКомпоновкиДанных = ПолучитьМакет("СКД_Карточка_Счет");
//	Иначе
//		ВызватьИсключение "Неопознаный тип отчета";
//	КонецЕсли;
//		
//	ТабДок = Новый ТабличныйДокумент;
//	
//	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
//    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
//    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
//	
//	Настройки = КомпоновщикНастроек.Настройки;
//	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", ДатаНач);
//	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", ДатаКон);
//	Если ТипОтчета <> "ОСВ" Тогда
//		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Счет", СчетСсылка);
//	КонецЕсли;
//	
//    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
//    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

//    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

//    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
//    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
//	
//    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
//    ПроцессорВывода.УстановитьДокумент(ТабДок);
//    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
//	
//	Область = ТабДок.Область();
//	Область.СоздатьФорматСтрок();
//	
//	ИмяПапки = ПараметрыВыгрузки.ПапкаДляВыгрузки + "Отчеты\";
//	СоздатьКаталог(ИмяПапки);
//    ИмяФайла = ИмяПапки + ТипОтчета + ?(ЗначениеЗаполнено(Счет), " " + Счет + " ", " ") + Формат(ДатаНач, "ДФ = ггггММддЧЧммсс") + "-" + Формат(ДатаКон, "ДФ = ггггММддЧЧммсс") + ".xls";
//    
//    ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS97);
//		
//КонецПроцедуры

//Процедура ВыгрузитьРазницуПоПроводкам(ПараметрыВыгрузки)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ОборотыИзменения.Регистратор
//	               |ИЗ
//	               |	РегистрБухгалтерии." + ПараметрыВыгрузки.ИмяПланаСчетов + ".Изменения КАК ОборотыИзменения
//	               |ГДЕ                                          
//	               |	ОборотыИзменения.Узел = &Узел
//	               |	И ЕСТЬNULL(ОборотыИзменения.НомерСообщения, 0) = 0";
//	Запрос.УстановитьПараметр("Узел", ПараметрыВыгрузки.Узел);
//	Результат = Запрос.Выполнить();
//	
//	Если НЕ Результат.Пустой() Тогда
//		
//		Выгрузка = Результат.Выгрузить();
//		
//		ТабДок = Новый ТабличныйДокумент;		
//		Построитель = Новый ПостроительОтчета();

//	    Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(Выгрузка);
//	    Построитель.ВыводитьЗаголовокОтчета = Ложь;
//	    Построитель.Вывести(ТабДок);
//		
//		ИмяПапки = ПараметрыВыгрузки.ПапкаДляВыгрузки + "Отчеты\";
//		СоздатьКаталог(ИмяПапки);
//	    ИмяФайла = ИмяПапки + "Разница по документам " + Формат(ТекущаяДата(), "ДФ = ггггММддЧЧммсс") + ".xls";
//		
//		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS97);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

////Обработка данных для выгрузки
//Функция ОбработатьПеречисление(ПараметрыВыгрузки, ПараметрыЗадания)
//	
//	Если ПараметрыЗадания.Изменения Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	ВсегоСтрок = 0;
//	Файл = ПолучитьФайлФСО(ПараметрыЗадания);	
//	Для Каждого Строка Из Перечисления[ПараметрыЗадания.ИмяОбъекта] Цикл
//		Файл.WriteLine(XMLСтрока(Строка) + ПараметрыВыгрузки.Разделитель);
//		ВсегоСтрок = ВсегоСтрок + 1;
//	КонецЦикла;		
//	Файл.Close();
//	Возврат ВсегоСтрок;
//		
//КонецФункции

//Функция ОбработатьОстатки(ПараметрыВыгрузки, ПараметрыЗадания) 
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст = ПолучитьТекстЗапросаОстатки(); 
//	
//	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(ПараметрыЗадания.НачалоПериода), ПараметрыЗадания.НачалоПериода, ПараметрыВыгрузки.ДатаНачалаВыгрузки));
//	Запрос.УстановитьПараметр("ПустаяСсылка", ПараметрыВыгрузки.ПустаяСсылка);
//	Запрос.УстановитьПараметр("KZT", Константы.ВалютаРегламентированногоУчета.Получить());
//	
//	Выборка = Запрос.Выполнить().Выбрать();	
//	
//	ВсегоСтрок = 0;
//	Файл = ПолучитьФайлФСО(ПараметрыЗадания);	
//	Пока Выборка.Следующий() Цикл
//		Файл.WriteLine(ПреобразоватьРегистрБухгалтерииВСтрокуCSV(Выборка, ПараметрыВыгрузки, ПараметрыЗадания.ИмяОбъекта,,, 3, Истина));
//		ВсегоСтрок = ВсегоСтрок + 1;
//	КонецЦикла;	
//	Файл.Close();
//	
//	Возврат ВсегоСтрок;
//	
//КонецФункции

//Функция ОбработатьОбъект(ПараметрыВыгрузки, ПараметрыЗадания)
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст = ПолучитьТекстЗапроса(ПараметрыЗадания.ВидОбъекта, ПараметрыЗадания.ИмяОбъекта);
//	Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка());
//	Запрос.УстановитьПараметр("ПустойКод", "");	
//	Запрос.УстановитьПараметр("Узел", ПараметрыВыгрузки.Узел);   
//	Запрос.УстановитьПараметр("ПоИзменениям", ПараметрыЗадания.Изменения);
//	Результат = Запрос.Выполнить();	
//	ВсегоСтрок = ВыгрузитьОбъект_ОбработатьРезультатЗапроса(Результат, ПараметрыВыгрузки, ПараметрыЗадания);
//	Возврат ВсегоСтрок;
//	
//КонецФункции

//Функция ОбработатьРегистрБухгалтерии(ПараметрыВыгрузки, ПараметрыЗадания)
//	
//	ПараметрыВыгрузкиВнутр = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ПараметрыВыгрузки));
//	ПараметрыВыгрузкиВнутр.КоличествоПотоков = ПараметрыВыгрузкиВнутр.КоличествоПотоков + 1;
//	ДатаНач = ?(ЗначениеЗаполнено(ПараметрыЗадания.НачалоПериода), ПараметрыЗадания.НачалоПериода, ПараметрыВыгрузки.ДатаНачалаВыгрузки);
//	ДатаКон = ?(ЗначениеЗаполнено(ПараметрыЗадания.КонецПериода), ПараметрыЗадания.КонецПериода, КонецГода(ТекущаяДата()));
//		
//	Если ПараметрыЗадания.Изменения Тогда   
//		
//		Запрос = Новый Запрос;   
//		Запрос.Текст = "ВЫБРАТЬ
//		               |	ОбъектВыгрузкиИзменения.Регистратор,
//		               |	ОбъектВыгрузкиИзменения.Регистратор.Дата
//		               |ПОМЕСТИТЬ ВтИзменения
//		               |ИЗ
//		               |	РегистрБухгалтерии." + ПараметрыЗадания.ИмяОбъекта + ".Изменения КАК ОбъектВыгрузкиИзменения
//		               |ГДЕ
//		               |	ОбъектВыгрузкиИзменения.Узел = &Узел
//		               |	И ЕСТЬNULL(ОбъектВыгрузкиИзменения.НомерСообщения, 0) <> 0
//		               |
//		               |СГРУППИРОВАТЬ ПО
//		               |	ОбъектВыгрузкиИзменения.Регистратор,
//		               |	ОбъектВыгрузкиИзменения.Регистратор.Дата
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ
//		               |	МАКСИМУМ(ВЫБОР
//		               |			КОГДА ЕСТЬNULL(Проводки.Активность, ЛОЖЬ)
//		               |				ТОГДА Проводки.НомерСтроки
//		               |			ИНАЧЕ 0
//		               |		КОНЕЦ) КАК КоличествоПроводок,
//		               |	Проводки.Регистратор
//		               |ПОМЕСТИТЬ ВтКоличествоПроводок
//		               |ИЗ
//		               |	РегистрБухгалтерии." + ПараметрыЗадания.ИмяОбъекта + " КАК Проводки
//		               |ГДЕ
//		               |	Проводки.Регистратор В
//		               |			(ВЫБРАТЬ
//		               |				Т.Регистратор
//		               |			ИЗ
//		               |				ВтИзменения КАК Т)
//		               |	И Проводки.Период >= &НачалоПериода
//		               |	И (Проводки.Сумма <> 0
//		               |			ИЛИ Проводки.КоличествоКт <> 0
//		               |			ИЛИ Проводки.КоличествоДт <> 0
//		               |			ИЛИ Проводки.ВалютнаяСуммаДт <> 0
//		               |			ИЛИ Проводки.ВалютнаяСуммаКт <> 0)
//		               |
//		               |СГРУППИРОВАТЬ ПО
//		               |	Проводки.Регистратор
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ
//		               |	ВтИзменения.Регистратор,
//		               |	ЕСТЬNULL(ВтКоличествоПроводок.КоличествоПроводок, 0) КАК КоличествоПроводок,
//		               |	ВтИзменения.РегистраторДата КАК Период
//		               |ИЗ
//		               |	ВтИзменения КАК ВтИзменения
//		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоличествоПроводок КАК ВтКоличествоПроводок
//		               |		ПО ВтИзменения.Регистратор = ВтКоличествоПроводок.Регистратор";  
//		
//		
//		Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
//		Запрос.УстановитьПараметр("Узел", ПараметрыВыгрузки.Узел);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		
//		ТЗРегистраторов = ПолучитьТЗРегистраторов();
//		ТЗУдаляемых = ПолучитьТЗРегистраторов();
//		КоличествоПроводок = 0;	
//		НомерЗадания = 1;
//		
//		МассивИдентификаторов = Новый Массив();
//		Пока Выборка.Следующий() Цикл
//			Если Выборка.КоличествоПроводок = 0 Тогда
//				НовСтрока = ТЗУдаляемых.Добавить();
//				НовСтрока.Регистратор = Выборка.Регистратор;	
//				НовСтрока.Период = Выборка.Период;
//			Иначе
//				НовСтрока = ТЗРегистраторов.Добавить();
//				НовСтрока.Регистратор = Выборка.Регистратор;
//				КоличествоПроводок = КоличествоПроводок + Выборка.КоличествоПроводок * 2;	
//			КонецЕсли;
//			Если КоличествоПроводок >= ПараметрыВыгрузки.КоличествоСтрокДокумента Тогда
//				ИдентификаторЗадания = Новый УникальныйИдентификатор();
//				НовПараметрыЗадания = Новый Структура;
//				Для Каждого ЭлементСтруктуры Из ПараметрыЗадания Цикл
//					НовПараметрыЗадания.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
//				КонецЦикла;
//				НовПараметрыЗадания.Вставить("НачалоПериода", ДатаНач);
//				НовПараметрыЗадания.Вставить("КонецПериода", ДатаКон);
//				НовПараметрыЗадания.Вставить("ИдентификаторЗадания", XMLСтрока(ИдентификаторЗадания));
//				НовПараметрыЗадания.Вставить("НомерЗаданияВыгрузки", НомерЗадания);
//				НовПараметрыЗадания.Вставить("ТЗРегистраторов", ТЗРегистраторов);
//				НовПараметрыЗадания.Вставить("НомерЗадания", 1);
//				МассивИдентификаторов.Добавить(НовПараметрыЗадания.ИдентификаторЗадания);
//				ПотоковаяВыгрузка(ПараметрыВыгрузкиВнутр, НовПараметрыЗадания, "ВыгрузитьРегистрБухгалтерииПоРегистраторам", Ложь);
//				ТЗРегистраторов = ПолучитьТЗРегистраторов();
//				НомерЗадания = НомерЗадания + 1;
//				КоличествоПроводок = 0;
//			КонецЕсли;
//		КонецЦикла;	
//		
//		Если ТЗРегистраторов.Количество() > 0 Тогда
//			ИдентификаторЗадания = Новый УникальныйИдентификатор();
//			НовПараметрыЗадания = Новый Структура;
//			Для Каждого ЭлементСтруктуры Из ПараметрыЗадания Цикл
//				НовПараметрыЗадания.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
//			КонецЦикла;
//			НовПараметрыЗадания.Вставить("НачалоПериода", ДатаНач);
//			НовПараметрыЗадания.Вставить("КонецПериода", ДатаКон);
//			НовПараметрыЗадания.Вставить("ИдентификаторЗадания", XMLСтрока(ИдентификаторЗадания));
//			НовПараметрыЗадания.Вставить("НомерЗаданияВыгрузки", НомерЗадания);
//			НовПараметрыЗадания.Вставить("ТЗРегистраторов", ТЗРегистраторов);
//			НовПараметрыЗадания.Вставить("НомерЗадания", 1);
//			МассивИдентификаторов.Добавить(НовПараметрыЗадания.ИдентификаторЗадания);
//			ПотоковаяВыгрузка(ПараметрыВыгрузкиВнутр, НовПараметрыЗадания, "ВыгрузитьРегистрБухгалтерииПоРегистраторам", Ложь);
//			НомерЗадания = НомерЗадания + 1;
//		КонецЕсли;
//		
//		Если ТЗУдаляемых.Количество() > 0 Тогда
//			ИдентификаторЗадания = Новый УникальныйИдентификатор();
//			НовПараметрыЗадания = Новый Структура;
//			Для Каждого ЭлементСтруктуры Из ПараметрыЗадания Цикл
//				НовПараметрыЗадания.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
//			КонецЦикла;
//			НовПараметрыЗадания.Вставить("ИдентификаторЗадания", XMLСтрока(ИдентификаторЗадания));
//			НовПараметрыЗадания.Вставить("НомерЗаданияВыгрузки", НомерЗадания);
//			НовПараметрыЗадания.Вставить("ТЗРегистраторов", ТЗУдаляемых);
//			НовПараметрыЗадания.Вставить("НомерЗадания", 1);
//			МассивИдентификаторов.Добавить(НовПараметрыЗадания.ИдентификаторЗадания);
//			ПотоковаяВыгрузка(ПараметрыВыгрузкиВнутр, НовПараметрыЗадания, "ВыгрузитьРегистрБухгалтерииПоУдаляемым", Ложь);
//		КонецЕсли;	
//		
//	Иначе
//			
//		ТЗПериоды = Новый ТаблицаЗначений;
//		ТЗПериоды.Колонки.Добавить("НачалоПериода");
//		ТЗПериоды.Колонки.Добавить("КонецПериода");
//		
//		ТекДата = НачалоДня(ДатаНач);
//		Пока ТекДата <= ДатаКон Цикл		
//			ТекДатаКон = ТекДата + 7 * 86400 - 1;
//			Если ТекДатаКон > ДатаКон Тогда
//				ТекДатаКон = ДатаКон;
//			КонецЕсли;
//			НовСтрока = ТЗПериоды.Добавить();
//			НовСтрока.НачалоПериода = ТекДата;
//			НовСтрока.КонецПериода = ТекДатаКон;
//			ТекДата = ТекДата + 7 * 86400;      
//		КонецЦикла;
//		
//		НомерЗадания = 1;
//		
//		МассивИдентификаторов = Новый Массив();
//		Для Каждого Строка Из ТЗПериоды Цикл
//			ИдентификаторЗадания = Новый УникальныйИдентификатор();
//			НовПараметрыЗадания = Новый Структура;
//			Для Каждого ЭлементСтруктуры Из ПараметрыЗадания Цикл
//	  			НовПараметрыЗадания.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
//			КонецЦикла;
//			НовПараметрыЗадания.Вставить("НачалоПериода", Строка.НачалоПериода);
//			НовПараметрыЗадания.Вставить("КонецПериода", Строка.КонецПериода);
//			НовПараметрыЗадания.Вставить("ИдентификаторЗадания", XMLСтрока(ИдентификаторЗадания));
//			НовПараметрыЗадания.Вставить("НомерЗадания", НомерЗадания);
//			НомерЗадания = НомерЗадания + 1;
//			МассивИдентификаторов.Добавить(НовПараметрыЗадания.ИдентификаторЗадания);
//			ПотоковаяВыгрузка(ПараметрыВыгрузкиВнутр, НовПараметрыЗадания, "ОбработатьРегистрБухгалтерииПоПериоду", Ложь); 
//		КонецЦикла;	
//		
//	КонецЕсли;
//	
//	ОжидатьЗавершенияЗаданийПоМассиву(ПараметрыВыгрузки, МассивИдентификаторов);
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	СУММА(авЗаданияДляВыгрузкиОбъектов.ВыгруженоСтрок) КАК ВыгруженоСтрок
//	|ИЗ
//	|	РегистрСведений.авЗаданияДляВыгрузкиОбъектов КАК авЗаданияДляВыгрузкиОбъектов
//	|ГДЕ
//	|	авЗаданияДляВыгрузкиОбъектов.ИдентификаторЗадания В (&ИдентификаторыЗадания)";
//	Запрос.УстановитьПараметр("ИдентификаторыЗадания", МассивИдентификаторов);	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.ВыгруженоСтрок;
//	Иначе
//		Возврат 0;
//	КонецЕсли;
//		
//КонецФункции

//Функция ОбработатьРегистрБухгалтерииПоПериоду(ИдентификаторЗадания) Экспорт
//	
//	МенеджерЗаписи = РегистрыСведений.авЗаданияДляВыгрузкиОбъектов.СоздатьМенеджерЗаписи();
//	МенеджерЗаписи.ИдентификаторЗадания = ИдентификаторЗадания;
//	МенеджерЗаписи.Прочитать();
//	
//	ПараметрыВыгрузки = МенеджерЗаписи.ПараметрыВыгрузки.Получить();
//	ПараметрыЗадания = МенеджерЗаписи.ПараметрыЗадания.Получить();
//	
//	ПараметрыВыгрузкиВнутр = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ПараметрыВыгрузки));
//	ПараметрыВыгрузкиВнутр.КоличествоПотоков = ПараметрыВыгрузкиВнутр.КоличествоПотоков + 1;
//	
//	Попытка	
//		Запрос = Новый Запрос;    
//		Запрос.Текст = "ВЫБРАТЬ
//		               |	Проводки.Регистратор КАК Регистратор,
//		               |	МАКСИМУМ(ВЫБОР
//		               |			КОГДА ЕСТЬNULL(Проводки.Активность, ЛОЖЬ)
//		               |				ТОГДА Проводки.НомерСтроки
//		               |			ИНАЧЕ 0
//		               |		КОНЕЦ) КАК КоличествоПроводок
//		               |ИЗ
//		               |	РегистрБухгалтерии." + ПараметрыЗадания.ИмяОбъекта + " КАК Проводки
//		               |ГДЕ
//		               |	Проводки.Период МЕЖДУ &НачалоПериода И &КонецПериода
//		               |
//		               |СГРУППИРОВАТЬ ПО
//		               |	Проводки.Регистратор
//		               |
//		               |ОБЪЕДИНИТЬ ВСЕ
//		               |
//		               |ВЫБРАТЬ
//		               |	ПроводкиИзменения.Регистратор,
//		               |	0
//		               |ИЗ
//		               |	РегистрБухгалтерии." + ПараметрыЗадания.ИмяОбъекта + ".Изменения КАК ПроводкиИзменения
//		               |ГДЕ
//		               |	ПроводкиИзменения.Узел = &Узел
//		               |
//		               |СГРУППИРОВАТЬ ПО
//		               |	ПроводкиИзменения.Регистратор";   

//		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗадания.НачалоПериода);
//		Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыЗадания.КонецПериода));
//		Запрос.УстановитьПараметр("Узел", ПараметрыВыгрузки.Узел);
//		Выборка = Запрос.Выполнить().Выбрать();
//		
//		ТЗРегистраторов = ПолучитьТЗРегистраторов();
//		ТЗУдаляемых = ПолучитьТЗРегистраторов();
//		КоличествоПроводок = 0;	
//		НомерЗадания = 1;
//		
//		МассивИдентификаторов = Новый Массив();
//		Пока Выборка.Следующий() Цикл
//			Если Выборка.КоличествоПроводок = 0 Тогда
//				НовСтрока = ТЗУдаляемых.Добавить();
//				НовСтрока.Регистратор = Выборка.Регистратор;	
//			Иначе
//				НовСтрока = ТЗРегистраторов.Добавить();
//				НовСтрока.Регистратор = Выборка.Регистратор;
//				КоличествоПроводок = КоличествоПроводок + Выборка.КоличествоПроводок * 2;	
//			КонецЕсли;	
//			Если КоличествоПроводок >= ПараметрыВыгрузки.КоличествоСтрокДокумента Тогда
//				ИдентификаторЗадания = Новый УникальныйИдентификатор();
//				НовПараметрыЗадания = Новый Структура;
//				Для Каждого ЭлементСтруктуры Из ПараметрыЗадания Цикл
//		  			НовПараметрыЗадания.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
//				КонецЦикла;
//				НовПараметрыЗадания.Вставить("ИдентификаторЗадания", XMLСтрока(ИдентификаторЗадания));
//				НовПараметрыЗадания.Вставить("НомерЗаданияВыгрузки", НомерЗадания);
//				НовПараметрыЗадания.Вставить("ТЗРегистраторов", ТЗРегистраторов);
//				МассивИдентификаторов.Добавить(НовПараметрыЗадания.ИдентификаторЗадания);
//				ПотоковаяВыгрузка(ПараметрыВыгрузкиВнутр, НовПараметрыЗадания, "ВыгрузитьРегистрБухгалтерииПоРегистраторам", Ложь);
//				ТЗРегистраторов = ПолучитьТЗРегистраторов();
//				НомерЗадания = НомерЗадания + 1;
//				КоличествоПроводок = 0;
//			КонецЕсли;
//		КонецЦикла;	
//		
//		Если ТЗРегистраторов.Количество() > 0 Тогда
//			ИдентификаторЗадания = Новый УникальныйИдентификатор();
//			НовПараметрыЗадания = Новый Структура;
//			Для Каждого ЭлементСтруктуры Из ПараметрыЗадания Цикл
//				НовПараметрыЗадания.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
//			КонецЦикла;
//			НовПараметрыЗадания.Вставить("ИдентификаторЗадания", XMLСтрока(ИдентификаторЗадания));
//			НовПараметрыЗадания.Вставить("НомерЗаданияВыгрузки", НомерЗадания);
//			НовПараметрыЗадания.Вставить("ТЗРегистраторов", ТЗРегистраторов);
//			МассивИдентификаторов.Добавить(НовПараметрыЗадания.ИдентификаторЗадания);
//			ПотоковаяВыгрузка(ПараметрыВыгрузкиВнутр, НовПараметрыЗадания, "ВыгрузитьРегистрБухгалтерииПоРегистраторам", Ложь);
//			НомерЗадания = НомерЗадания + 1;
//		КонецЕсли;
//		
//		Если ТЗУдаляемых.Количество() > 0 Тогда
//			ИдентификаторЗадания = Новый УникальныйИдентификатор();
//			НовПараметрыЗадания = Новый Структура;
//			Для Каждого ЭлементСтруктуры Из ПараметрыЗадания Цикл
//				НовПараметрыЗадания.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
//			КонецЦикла;
//			НовПараметрыЗадания.Вставить("ИдентификаторЗадания", XMLСтрока(ИдентификаторЗадания));
//			НовПараметрыЗадания.Вставить("НомерЗаданияВыгрузки", НомерЗадания);
//			НовПараметрыЗадания.Вставить("ТЗРегистраторов", ТЗУдаляемых);
//			МассивИдентификаторов.Добавить(НовПараметрыЗадания.ИдентификаторЗадания);
//			ПотоковаяВыгрузка(ПараметрыВыгрузкиВнутр, НовПараметрыЗадания, "ВыгрузитьРегистрБухгалтерииПоУдаляемым", Ложь);
//		КонецЕсли;
//		
//		ОжидатьЗавершенияЗаданийПоМассиву(ПараметрыВыгрузки, МассивИдентификаторов);
//	
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		               |	СУММА(авЗаданияДляВыгрузкиОбъектов.ВыгруженоСтрок) КАК ВыгруженоСтрок
//		               |ИЗ
//		               |	РегистрСведений.авЗаданияДляВыгрузкиОбъектов КАК авЗаданияДляВыгрузкиОбъектов
//		               |ГДЕ
//		               |	авЗаданияДляВыгрузкиОбъектов.ИдентификаторЗадания В (&ИдентификаторыЗадания)";
//		Запрос.УстановитьПараметр("ИдентификаторыЗадания", МассивИдентификаторов);	
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			ВыгруженоСтрок =  Выборка.ВыгруженоСтрок;
//		Иначе
//			ВыгруженоСтрок = 0;
//		КонецЕсли;
//		
//		МенеджерЗаписи.СтатусЗадания = Строка(СостояниеФоновогоЗадания.Завершено);
//		МенеджерЗаписи.ВыгруженоСтрок = ВыгруженоСтрок;
//	Исключение
//		МенеджерЗаписи.СтатусЗадания = Строка(СостояниеФоновогоЗадания.ЗавершеноАварийно);
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Ошибка выгрузки объекта " + ПараметрыЗадания.ИмяОбъектаМетаданных, ОписаниеОшибки());	
//	КонецПопытки;
//	
//	МенеджерЗаписи.ВремяОкончания = ТекущаяДата();	
//	МенеджерЗаписи.Записать();	
//			
//КонецФункции

//Процедура ВыгрузитьРегистрБухгалтерииПоРегистраторам(ИдентификаторЗадания) Экспорт
//	
//	МенеджерЗаписи = РегистрыСведений.авЗаданияДляВыгрузкиОбъектов.СоздатьМенеджерЗаписи();
//	МенеджерЗаписи.ИдентификаторЗадания = ИдентификаторЗадания;
//	МенеджерЗаписи.Прочитать();
//	
//	ПараметрыВыгрузки = МенеджерЗаписи.ПараметрыВыгрузки.Получить();
//	ПараметрыЗадания = МенеджерЗаписи.ПараметрыЗадания.Получить();

//	Попытка
//		Запрос = Новый Запрос();
//		Запрос.Текст = ПолучитьТекстЗапросаВыгрузкиПоРегистраторам();
//			
//		Запрос.УстановитьПараметр("ТЗРегистраторов", ПараметрыЗадания.ТЗРегистраторов);
//		Запрос.УстановитьПараметр("ПустаяСсылка", ПараметрыВыгрузки.ПустаяСсылка);
//		Запрос.УстановитьПараметр("KZT", Константы.ВалютаРегламентированногоУчета.Получить());
//		Запрос.УстановитьПараметр("ОборотДт", Перечисления.авВидыОборотов.Дт);
//		Запрос.УстановитьПараметр("ОборотКт", Перечисления.авВидыОборотов.Кт);
//		Запрос.УстановитьПараметр("СчетСебестоимость", ПланыСчетов[ПараметрыЗадания.ИмяОбъекта].СебестоимостьРеализованнойПродукцииИОказанныхУслуг);
//		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗадания.НачалоПериода);
//		Запрос.УстановитьПараметр("КонецПериода", ПараметрыЗадания.КонецПериода);	
//		
//		Выборка = Запрос.Выполнить().Выбрать();	
//		
//		ТекКоличество = 0;	
//		ВыгруженоСтрок = 0;
//		ИдентификаторФайла = 1;
//		Всего = Выборка.Количество();
//		СоответсвиеРегистраторов = Новый Соответствие();
//			
//		Файл = ПолучитьФайлФСО(ПараметрыЗадания, ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыЗадания.НомерЗадания) + "_" 
//			+  ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыЗадания.НомерЗаданияВыгрузки) + "_" + ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ИдентификаторФайла));
//		
//		Пока Выборка.Следующий() Цикл
//			Если Выборка.Счет = ПланыСчетов[ПараметрыЗадания.ИмяОбъекта].ПустаяСсылка() Тогда
//				Всего = Всего - 1;
//				Продолжить;
//			КонецЕсли;
//			Файл.WriteLine(ПреобразоватьРегистрБухгалтерииВСтрокуCSV(Выборка, ПараметрыВыгрузки, ПараметрыЗадания.ИмяОбъектаМетаданных, СоответсвиеРегистраторов,,,,
//				?(ПараметрыВыгрузки.ПолнаяВыгрузка, Ложь, Выборка.Период < ПараметрыВыгрузки.ДатаЗакрытогоПериода)));
//			ВыгруженоСтрок = ВыгруженоСтрок + 1;
//			ТекКоличество = ТекКоличество + 1;
//			Если ТекКоличество = ПараметрыВыгрузки.КоличествоСтрокДокумента Тогда
//				Файл.Close();
//				ТекКоличество = 0;
//				Если ВыгруженоСтрок < Всего Тогда
//					ИдентификаторФайла = ИдентификаторФайла + 1;
//					Файл = ПолучитьФайлФСО(ПараметрыЗадания, ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыЗадания.НомерЗадания) + "_" 
//						+  ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыЗадания.НомерЗаданияВыгрузки) + "_" + ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ИдентификаторФайла));
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		
//		Если ТекКоличество <> 0 Тогда
//			Файл.Close();
//		КонецЕсли;
//		
//		МенеджерЗаписи.СтатусЗадания = Строка(СостояниеФоновогоЗадания.Завершено);
//		МенеджерЗаписи.ВыгруженоСтрок = ВыгруженоСтрок;
//	Исключение
//		МенеджерЗаписи.СтатусЗадания = Строка(СостояниеФоновогоЗадания.ЗавершеноАварийно);
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Ошибка выгрузки объекта " + ПараметрыЗадания.ИмяОбъектаМетаданных, ОписаниеОшибки());	
//	КонецПопытки;
//	
//	МенеджерЗаписи.ВремяОкончания = ТекущаяДата();	
//	МенеджерЗаписи.Записать();
//			
//КонецПроцедуры

//Процедура ВыгрузитьРегистрБухгалтерииПоУдаляемым(ИдентификаторЗадания) Экспорт
//	
//	МенеджерЗаписи = РегистрыСведений.авЗаданияДляВыгрузкиОбъектов.СоздатьМенеджерЗаписи();
//	МенеджерЗаписи.ИдентификаторЗадания = ИдентификаторЗадания;
//	МенеджерЗаписи.Прочитать();
//	
//	ПараметрыВыгрузки = МенеджерЗаписи.ПараметрыВыгрузки.Получить();
//	ПараметрыЗадания = МенеджерЗаписи.ПараметрыЗадания.Получить();
//	
//	ТекКоличество = 0;
//	ВыгруженоСтрок = 0;
//	ИдентификаторФайла = 1;
//	
//	Попытка		
//		Всего = ПараметрыЗадания.ТЗРегистраторов.Количество();				
//		Файл = ПолучитьФайлФСО(ПараметрыЗадания, ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыЗадания.НомерЗадания) + "_" 
//			+  ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыЗадания.НомерЗаданияВыгрузки) + "_" + ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ИдентификаторФайла));
//		
//		Для Каждого Строка Из ПараметрыЗадания.ТЗРегистраторов Цикл
//			Файл.WriteLine(ПреобразоватьРегистрБухгалтерииВСтрокуCSV(Строка, ПараметрыВыгрузки, ПараметрыЗадания.ИмяОбъектаМетаданных,, Истина,,,
//				?(ПараметрыВыгрузки.ПолнаяВыгрузка, Ложь, ЗначениеЗаполнено(Строка.Период) И Строка.Период < ПараметрыВыгрузки.ДатаЗакрытогоПериода)));
//			ВыгруженоСтрок = ВыгруженоСтрок + 1;
//			ТекКоличество = ТекКоличество + 1;
//			Если ТекКоличество = ПараметрыВыгрузки.КоличествоСтрокДокумента Тогда
//				Файл.Close();
//				ТекКоличество = 0;
//				Если ВыгруженоСтрок < Всего Тогда
//					ИдентификаторФайла = ИдентификаторФайла + 1;
//					Файл = ПолучитьФайлФСО(ПараметрыЗадания, ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыЗадания.НомерЗадания) + "_" 
//						+  ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыЗадания.НомерЗаданияВыгрузки) + "_" + ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ИдентификаторФайла));
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		
//		Если ТекКоличество <> 0 Тогда
//			Файл.Close();
//		КонецЕсли;
//		
//		МенеджерЗаписи.СтатусЗадания = Строка(СостояниеФоновогоЗадания.Завершено);
//		МенеджерЗаписи.ВыгруженоСтрок = ВыгруженоСтрок;
//	Исключение
//		МенеджерЗаписи.СтатусЗадания = Строка(СостояниеФоновогоЗадания.ЗавершеноАварийно);
//		авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Ошибка выгрузки объекта " + ПараметрыЗадания.ИмяОбъектаМетаданных, ОписаниеОшибки());	
//	КонецПопытки;
//	
//	МенеджерЗаписи.ВремяОкончания = ТекущаяДата();	
//	МенеджерЗаписи.Записать();
//	
//КонецПроцедуры

////Обработка результатов запросов
//Функция ВыгрузитьОбъект_ОбработатьРезультатЗапроса(Результат, ПараметрыВыгрузки, ПараметрыЗадания)
//	
//	Если Результат.Пустой() Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	ВсегоЭлементов = 0;	
//	Выборка = Результат.Выбрать();	
//	Файл = ПолучитьФайлФСО(ПараметрыЗадания);		
//	Пока Выборка.Следующий() Цикл
//		Файл.WriteLine(ВыгрузитьОбъект_ПреобразоватьВCSV(Выборка, ПараметрыВыгрузки, ПараметрыЗадания.ИмяОбъекта));	
//		ВсегоЭлементов = ВсегоЭлементов + 1; 
//	КонецЦикла;	
//	Файл.Close();
//	
//	Возврат ВсегоЭлементов;
//	
//КонецФункции

////Преобразование в CSV
//Функция ПреобразоватьРегистрБухгалтерииВСтрокуCSV(Выборка, ПараметрыВыгрузки, ИмяОбъекта, СоответсвиеРегистраторов = Неопределено, ПризнакУдаления = Ложь, ВсегоСубконто = 8, ЭтоОстатки = Ложь, ЗакрытыйПериод = Ложь)
//	
//	СтрокаCSV = "";	
//	
//	Если ЭтоОстатки Тогда
//		СтруктураОбороты = ПолучитьСтруктуруОстатков();
//	Иначе
//		СтруктураОбороты = ПолучитьСтруктуруОборотов();
//	КонецЕсли;
//	
//	Если НЕ ПризнакУдаления Тогда
//		
//		СтруктураСубконто = Новый Структура;
//		
//		Если ЭтоОстатки Тогда
//			ВидыСубконто = ПараметрыВыгрузки.СоответствиеВидыСубконтоОстатки.Получить(Выборка.Счет); 
//			Если ВидыСубконто <> Неопределено Тогда
//				ДобавитьСубконто(Выборка, ВидыСубконто, 3, 0, СтруктураСубконто);   
//			КонецЕсли;		
//		Иначе
//			Если Выборка.ВидДвижения = Перечисления.авВидыОборотов.Дт Тогда
//				ВидыСубконто = ПараметрыВыгрузки.СоответствиеВидыСубконтоОбороты.Получить(Выборка.Счет);
//				ВидыКорСубконто = ПараметрыВыгрузки.СоответствиеВидыСубконтоОбороты.Получить(Выборка.КорСчет);
//				ВидыДопСубконто = ПараметрыВыгрузки.СоответствиеДругиеСубконто.Получить(Выборка.Счет);
//				Если ВидыДопСубконто <> Неопределено Тогда
//					ДобавитьСубконто(Выборка, ВидыДопСубконто, ВсегоСубконто-6, 6, СтруктураСубконто);   
//				КонецЕсли;
//				Если ВидыКорСубконто <> Неопределено Тогда
//					ДобавитьСубконто(Выборка, ВидыКорСубконто, 3, 3, СтруктураСубконто);   
//				КонецЕсли;
//				Если ВидыСубконто <> Неопределено Тогда
//					ДобавитьСубконто(Выборка, ВидыСубконто, 3, 0, СтруктураСубконто);   
//				КонецЕсли;
//			Иначе
//				ВидыСубконто = ПараметрыВыгрузки.СоответствиеВидыСубконтоОбороты.Получить(Выборка.КорСчет);
//				ВидыКорСубконто = ПараметрыВыгрузки.СоответствиеВидыСубконтоОбороты.Получить(Выборка.Счет);
//				ВидыДопСубконто = ПараметрыВыгрузки.СоответствиеДругиеСубконто.Получить(Выборка.КорСчет);
//				Если ВидыДопСубконто <> Неопределено Тогда
//					ДобавитьСубконто(Выборка, ВидыДопСубконто, ВсегоСубконто-6, 6, СтруктураСубконто);   
//				КонецЕсли;
//				Если ВидыСубконто <> Неопределено Тогда
//					ДобавитьСубконто(Выборка, ВидыСубконто, 3, 0, СтруктураСубконто);   
//				КонецЕсли;
//				Если ВидыКорСубконто <> Неопределено Тогда
//					ДобавитьСубконто(Выборка, ВидыКорСубконто, 3, 3, СтруктураСубконто);   
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Для Каждого Элемент Из СтруктураОбороты Цикл
//		Значение = "";
//		Попытка
//			Если Элемент.Ключ = "ПризнакЗакрытогоПериода" Тогда  
//				Если ЗакрытыйПериод Тогда
//					Значение = "1";
//				Иначе
//					Значение = "0";
//				КонецЕсли;
//			ИначеЕсли Элемент.Ключ = "ПериодНовойПроводки" Тогда   
//				Если ЗакрытыйПериод Тогда
//					Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыВыгрузки.ДатаЗакрытогоПериода, Ложь);
//				Иначе
//					Значение = "0001-01-01";
//				КонецЕсли;
//			ИначеЕсли Элемент.Ключ = "ИмяБазы" Тогда
//				Значение = ПараметрыВыгрузки.ИмяБазы;
//			ИначеЕсли Элемент.Ключ = "ПризнакУдаления" Тогда
//				Если ПризнакУдаления Тогда
//					Значение = "1";
//				Иначе
//					Значение = "0";
//				КонецЕсли;
//			ИначеЕсли Элемент.Ключ = "Ид" Тогда
//				Значение = "";
//			ИначеЕсли Элемент.Ключ = "СтруктурноеПодразделениеGUID" Тогда
//				Если НЕ ПризнакУдаления Тогда
//					Если ПараметрыВыгрузки.СоответствиеСтруктурныеПодразделения.Получить(Выборка.Подразделение) <> Неопределено Тогда
//						Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, Выборка.Подразделение, Истина);	
//					Иначе
//						Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ПараметрыВыгрузки.ПустаяСсылка, Истина);
//					КонецЕсли;
//				КонецЕсли;
//			Иначе
//				Если ПризнакУдаления Тогда
//					Если Элемент.Ключ = "РегистраторGUID" Тогда
//						Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, Выборка.Регистратор, Истина);	
//					ИначеЕсли Элемент.Ключ = "Регистратор" Тогда
//						Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, Выборка.Регистратор, Ложь, СоответсвиеРегистраторов);	
//					КонецЕсли;				
//				Иначе
//					Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
//						ПозGUID = СтрНайти(Элемент.Ключ, "GUID"); 
//						Если ПозGUID = 0 Тогда
//							Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, Выборка[Элемент.Ключ], Ложь, СоответсвиеРегистраторов);
//						Иначе
//							Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, Выборка[Лев(Элемент.Ключ, ПозGUID-1)], Истина);
//						КонецЕсли;
//					Иначе			
//						Для Каждого Субконто Из СтруктураСубконто Цикл
//							Если  Элемент.Ключ = Субконто.Ключ Тогда	
//								Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, Субконто.Значение, Истина);
//								Прервать;
//							КонецЕсли;
//						КонецЦикла;
//					КонецЕсли;	
//				КонецЕсли;
//			КонецЕсли;
//		Исключение
//			авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Выгрузка " + ИмяОбъекта, ОписаниеОшибки());
//		КонецПопытки;
//		СтрокаCSV = СтрокаCSV + Значение + ПараметрыВыгрузки.Разделитель;
//	КонецЦикла;
//	
//	Возврат СтрокаCSV;
//	
//КонецФункции

//Функция ВыгрузитьОбъект_ПреобразоватьВCSV(Выборка, ПараметрыВыгрузки, ИмяОбъекта)
//	
//	СтрокаCSV = "";	
//	СтруктураОбъекта = ПолучитьСтруктуруОбъекта(ИмяОбъекта);
//	
//	ПодразделениеНеУстановлено = ИмяОбъекта = "Хозрасчетный";
//	
//	Для Каждого Элемент Из СтруктураОбъекта Цикл
//		Значение = "";
//		Попытка
//			Если Элемент.Ключ = "ИмяБазы" Тогда
//				Значение = ПараметрыВыгрузки.ИмяБазы;
//			ИначеЕсли Лев(Элемент.Ключ, 11)  = "ВидСубконто" Тогда
//				Значение = СоответстиеВидовСубконто().Получить(Выборка[Элемент.Ключ]);
//				Если Значение = Неопределено Тогда
//					Если ПодразделениеНеУстановлено Тогда
//						Значение = "Unit";
//						ПодразделениеНеУстановлено = Ложь;
//					Иначе
//						Значение = "";
//					КонецЕсли;
//				КонецЕсли;
//			Иначе
//				ПозGUID = СтрНайти(Элемент.Ключ, "GUID"); 
//				Если ПозGUID = 0 Тогда
//					Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, Выборка[Элемент.Ключ]);
//				Иначе
//					Значение = ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, Выборка[Лев(Элемент.Ключ, ПозGUID-1)], Истина);
//				КонецЕсли;
//			КонецЕсли;
//		Исключение
//			авКонсолидацияПривилегированный.ЗаписатьЛогОшибки("Выгрузка " + ИмяОбъекта, ОписаниеОшибки());	
//		КонецПопытки;
//		СтрокаCSV = СтрокаCSV + Значение + ПараметрыВыгрузки.Разделитель;  
//	КонецЦикла;
//	
//	Возврат СтрокаCSV;
//	
//КонецФункции

////Служебные
//Процедура ДобавитьСубконто(Выборка, СоответствиеВидовСубконто, КоличествоСубконто, СдвигНомеров, СтруктураСубконто)
//	
//	Для Н = 1 По КоличествоСубконто Цикл
//		ВидСубконто = СоответствиеВидовСубконто.Получить("ВидСубконто" + Строка(Н));
//		Если ВидСубконто = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;	
//		Если ЗначениеЗаполнено(Выборка["Субконто" + Строка(Н + СдвигНомеров)]) Тогда
//			СтруктураСубконто.Вставить(ВидСубконто, Выборка["Субконто" + Строка(Н + СдвигНомеров)]);
//		Иначе
//			СтруктураСубконто.Вставить(ВидСубконто, ПустаяСсылка());	
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция ПолучитьТЗРегистраторов()
//	
//	ТЗ = Новый ТаблицаЗначений;
//	ТЗ.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки()); 
//	ТЗ.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
//	Возврат ТЗ;
//	
//КонецФункции

//Функция ПреобразоватьОбъектВЗначение(ПараметрыВыгрузки, ОбъектПреобразования, ЭтоGUID = Ложь, СоответсвиеРегистраторов = Неопределено)
//	
//	ТипЗначения = ТипЗнч(ОбъектПреобразования);
//	Если ТипЗначения = Тип("Дата") Тогда
//		Значение = Формат(ОбъектПреобразования, "ДФ = гггг-ММ-дд");
//	ИначеЕсли ТипЗначения = Тип("Число") Тогда
//		Значение = Формат(ОбъектПреобразования, "ЧГ=0;ЧН=0;ЧРД=.;ЧДЦ=2");
//	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
//		Если ОбъектПреобразования = Истина Тогда
//			Значение = "1";
//		Иначе
//			Значение = "0";
//		КонецЕсли;
//	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
//		Значение = УбратьЛишниеСимволы(ОбъектПреобразования);	
//	ИначеЕсли ЭтоGUID Тогда
//		Значение = XMLСтрока(ОбъектПреобразования);
//	Иначе 
//		ИмяМетаданных = ПараметрыВыгрузки.ОбъектыМетаданных.Получить(ТипЗначения);
//		Если ИмяМетаданных = Неопределено Тогда
//			Значение = XMLСтрока(ОбъектПреобразования);
//		ИначеЕсли Лев(ИмяМетаданных, 8) = "Документ" Тогда
//			Если СоответсвиеРегистраторов = Неопределено Тогда
//				Значение = ПолучитьЗначениеДокумента(ПараметрыВыгрузки, ОбъектПреобразования, ТипЗначения);	
//			Иначе
//				Значение = СоответсвиеРегистраторов.Получить(ОбъектПреобразования);
//				Если Значение = Неопределено Тогда
//					Значение = ПолучитьЗначениеДокумента(ПараметрыВыгрузки, ОбъектПреобразования, ТипЗначения);
//					СоответсвиеРегистраторов = Новый Соответствие;
//					СоответсвиеРегистраторов.Вставить(ОбъектПреобразования, Значение);
//				КонецЕсли;
//			КонецЕсли;
//		Иначе
//			Значение = ПолучитьЗначение(ПараметрыВыгрузки, ОбъектПреобразования, ИмяМетаданных);		
//		КонецЕсли;
//	КонецЕсли;
//		
//	Возврат Значение;
//	
//КонецФункции

//Функция ПолучитьЗначениеДокумента(ПараметрыВыгрузки, Ссылка, ТипЗначения)
//	
//	Значение = УбратьЛишниеСимволы(ПараметрыВыгрузки.ОбъектыМетаданныхСиноним.Получить(ТипЗначения) + " " + Ссылка.Номер + " от " + Формат(Ссылка.Дата, "ДФ = дд.ММ.гггг"));
//	Возврат Значение;
//	
//КонецФункции

//Функция ПолучитьЗначение(ПараметрыВыгрузки, Ссылка, ИмяМетаданных)
//	
//	Если Лев(ИмяМетаданных, 10) = "ПланСчетов" Тогда
//		Значение = УбратьЛишниеСимволы(Ссылка.Код);
//	ИначеЕсли Лев(ИмяМетаданных, 12) = "Перечисление" Тогда
//		Значение = XMLСтрока(Ссылка);
//	Иначе
//		Значение = УбратьЛишниеСимволы(Ссылка.Наименование);
//	КонецЕсли;
//	Возврат Значение;
//	
//КонецФункции

//Функция УбратьЛишниеСимволы(Строка)
//	
//	Рез = СтрЗаменить(Строка, Символы.Таб, " ");
//	Рез = СтрЗаменить(Рез, Символы.ПС, " ");
//	Рез = СокрЛП(Рез);
//	Пока СтрНайти(Рез, "  ") > 0 Цикл
//		Рез = СтрЗаменить(Рез, "  ", " ");
//	КонецЦикла;
//	Возврат Рез;

//КонецФункции

//Функция ПолучитьФайлФСО(ПараметрыЗадания, ПриставкаКНаименованию = "", Расширение = ".csv")
//	
//	FSO = Новый COMОбъект("Scripting.FileSystemObject");  
//	ИмяФайла = ПараметрыЗадания.ИмяОбъекта + ?(ЗначениеЗаполнено(ПриставкаКНаименованию), "_" + ПриставкаКНаименованию, "") + Расширение;
//	
//	Возврат FSO.CreateTextFile(ПараметрыЗадания["ПапкаДляВыгрузки" + ПараметрыЗадания.ВидОбъекта + ПараметрыЗадания.ИмяОбъекта] + ИмяФайла, -1, -1);
//	
//КонецФункции

//Функция ПолучитьПапкуДляВыгрузки(НастройкаОбмена = Неопределено) 
//		
//	Если ЗначениеЗаполнено(НастройкаОбмена) 
//		И ЗначениеЗаполнено(НастройкаОбмена.ПутьККаталогу) Тогда
//		ПапкаДляВыгрузки = НастройкаОбмена.ПутьККаталогу;	
//	Иначе
//		ПапкаДляВыгрузки = КаталогВременныхФайлов();
//	КонецЕсли;
//	
//	Возврат ПапкаДляВыгрузки;
//	
//КонецФункции

//Функция ПустаяСсылка()
//	
//	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");	
//	
//КонецФункции

//Процедура ЗаполнитьОбъектыМетаданных(ПараметрыВыгрузки)
//	
//	Соответствие = Новый Соответствие;
//	СоответствиеСиноним = Новый Соответствие;

//	Для Каждого Строка Из Метаданные.Документы Цикл
//		Соответствие.Вставить(Тип("ДокументСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
//		СоответствиеСиноним.Вставить(Тип("ДокументСсылка." + Строка.Имя), Строка.Синоним);
//	КонецЦикла;
//	Для Каждого Строка Из Метаданные.Справочники Цикл
//		Соответствие.Вставить(Тип("СправочникСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
//	КонецЦикла;
//	Для Каждого Строка Из Метаданные.ПланыВидовХарактеристик Цикл
//		Соответствие.Вставить(Тип("ПланВидовХарактеристикСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
//	КонецЦикла;	
//	Для Каждого Строка Из Метаданные.ПланыСчетов Цикл
//		Соответствие.Вставить(Тип("ПланСчетовСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
//	КонецЦикла;
//	Для Каждого Строка Из Метаданные.Перечисления Цикл
//		Соответствие.Вставить(Тип("ПеречислениеСсылка." + Строка.Имя), СтрЗаменить(Строка.ПолноеИмя(),".","_"));	
//	КонецЦикла;
//	
//	ПараметрыВыгрузки.Вставить("ОбъектыМетаданных", Соответствие);
//	ПараметрыВыгрузки.Вставить("ОбъектыМетаданныхСиноним", СоответствиеСиноним);
//	
//КонецПроцедуры

////--------------------------------------------------------------------------------------

////СПЕЦИАЛЬНЫЕ ФУНКЦИИ

////Функция СтрНайти(Строка, Подстрока)
////	
////	Возврат Найти(Строка, Подстрока);
////	
////КонецФункции

////--------------------------------------------------------------------------------------

////ИЗМЕНЯЕМЫЕ ДАННЫЕ

////Структура таблиц
////Обороты
//Функция ПолучитьСтруктуруОборотов()
//	
//	Структура = Новый Структура;
//	Структура.Вставить("ПризнакУдаления");
//	Структура.Вставить("Период");
//	Структура.Вставить("ПризнакЗакрытогоПериода");
//	Структура.Вставить("ПериодНовойПроводки");
//	Структура.Вставить("Регистратор");
//	Структура.Вставить("РегистраторGUID");
//	Структура.Вставить("НомерСтроки");
//	Структура.Вставить("СчетGUID");	
//	Структура.Вставить("КорСчетGUID");
//	Структура.Вставить("ВидДвиженияGUID");
//	Структура.Вставить("ИмяБазы");
//	Структура.Вставить("ОрганизацияGUID");
//	Структура.Вставить("ГоловнаяОрганизацияGUID");
//	Структура.Вставить("НаправлениеДеятельностиGUID");
//	Структура.Вставить("Количество");
//	Структура.Вставить("СуммаРегл");
//	Структура.Вставить("СуммаВВалюте");
//	Структура.Вставить("СуммаВУпрУчете");
//	Структура.Вставить("Валюта");
//	Структура.Вставить("СтруктурноеПодразделениеGUID");
//	ДобавитьВСтруктуруСубконто(Структура);
//	Структура.Вставить("Ид");
//	
//	Возврат Структура;
//	
//КонецФункции

//Функция ПолучитьСтруктуруОстатков()
//	
//	Структура = Новый Структура;
//	Структура.Вставить("Период");
//	Структура.Вставить("СчетGUID");	
//	Структура.Вставить("ИмяБазы");
//	Структура.Вставить("ОрганизацияGUID");
//	Структура.Вставить("ГоловнаяОрганизацияGUID");
//	Структура.Вставить("НаправлениеДеятельностиGUID");
//	Структура.Вставить("Количество");
//	Структура.Вставить("СуммаРегл");
//	Структура.Вставить("СуммаВВалюте");
//	Структура.Вставить("СуммаВУпрУчете");
//	Структура.Вставить("Валюта");
//	Структура.Вставить("СтруктурноеПодразделениеGUID");
//	ДобавитьВСтруктуруСубконто(Структура);	
//	
//	Возврат Структура;
//	
//КонецФункции

//Процедура ДобавитьВСтруктуруСубконто(Структура)
//	
//	Структура.Вставить("Подразделения", "Подразделения");
//	Структура.Вставить("БанковскиеСчета", "БанковскиеСчета");
//	Структура.Вставить("Кассы", "Кассы");
//	Структура.Вставить("Доходы", "Доходы");  
//	Структура.Вставить("ДоходыБудущихПериодов", "ДоходыБудущихПериодов");  
//	Структура.Вставить("НематериальныеАктивы", "НематериальныеАктивы"); 
//	Структура.Вставить("ОсновныеСредства", "ОсновныеСредства"); 
//	Структура.Вставить("ОбъектыСтроительства", "ОбъектыСтроительства");
//	Структура.Вставить("ЦенныеБумаги", "ЦенныеБумаги");
//	Структура.Вставить("Номенклатура", "Номенклатура"); 
//	Структура.Вставить("НоменклатурныеГруппы", "НоменклатурныеГруппы");
//	Структура.Вставить("Склады", "Склады");  
//	Структура.Вставить("Контрагенты", "Контрагенты");  
//	Структура.Вставить("Договоры", "Договоры");
//	Структура.Вставить("СтатьиДвиженияДенежныхСредств", "СтатьиДвиженияДенежныхСредств"); 
//	Структура.Вставить("СтатьиЗатрат", "СтатьиЗатрат"); 
//	Структура.Вставить("РасходыБудущихПериодов", "РасходыБудущихПериодов");
//	Структура.Вставить("ВидыПлатежейВБюджетИФонды", "ВидыПлатежейВБюджетИФонды"); 
//	Структура.Вставить("ТипыНалогов", "ТипыНалогов");  
//	Структура.Вставить("Резервы", "Резервы");
//	Структура.Вставить("ВидыАктивовИОбязательств", "ВидыАктивовИОбязательств");   
//	Структура.Вставить("РаботникиОрганизаций", "РаботникиОрганизаций");
//	
//КонецПроцедуры

////Структура данных
//Функция ПолучитьСтруктуруОбъекта(ИмяОбъекта)
//	
//	Структура = Новый Структура;
//	Структура.Вставить("СсылкаGUID");
//	Структура.Вставить("ИмяБазы");
//	Структура.Вставить("Наименование"); 
//	
//	ПолучитьДопПоляОбъекта(Структура, ИмяОбъекта);		

//	Возврат Структура;
//	
//КонецФункции

//Процедура ПолучитьДопПоляОбъекта(Структура, ИмяОбъекта)
//	//Авитим {Требуется доработка: проверить субконто, подразделение, ОС
//	//Литвинов С.В. от 28.07.2019
//	Если ИмяОбъекта = "Типовой" Тогда
//		Структура.Вставить("Код");
//		Структура.Вставить("РодительGUID");
//		Структура.Вставить("ВидСубконто1");
//		Структура.Вставить("ВидСубконто2");
//		Структура.Вставить("ВидСубконто3");
//		Структура.Вставить("ВидСубконто4");
//		Структура.Вставить("ВидСубконто5");
//		Структура.Вставить("ВидСубконто6");
//		Структура.Вставить("Забалансовый");	
//		Структура.Вставить("КодГруппы");
//	ИначеЕсли ИмяОбъекта = "БанковскиеСчета"  Тогда
//		Структура.Вставить("Код", "&ПустойКод");
//		Структура.Вставить("ОрганизацияGUID", "Выбор Когда Объект.Владелец Ссылка Справочник.Организации Тогда Объект.Владелец Иначе &ПустойКод Конец");
//		Структура.Вставить("Банк", "Объект.Банк.Наименование");
//		Структура.Вставить("Валюта", "Объект.ВалютаДенежныхСредств.Наименование");	
//		Структура.Вставить("НомерСчета");
//		Структура.Вставить("БИКБанка", "Объект.Банк.БИК");
//	ИначеЕсли ИмяОбъекта = "ДоговорыКонтрагентов" Тогда
//		Структура.Вставить("Код", "&ПустойКод");
//		Структура.Вставить("ОрганизацияGUID");
//		Структура.Вставить("КонтрагентGUID", "Объект.Владелец");
//	ИначеЕсли ИмяОбъекта = "Кассы" Тогда
//		Структура.Вставить("Код", "&ПустойКод");
//		Структура.Вставить("ОрганизацияGUID", "Объект.Владелец");
//		Структура.Вставить("Валюта", "Объект.ВалютаДенежныхСредств.Наименование");
//	ИначеЕсли ИмяОбъекта = "Контрагенты" Тогда
//		Структура.Вставить("Код", "&ПустойКод");
//		Структура.Вставить("РодительGUID", "ВЫБОР КОГДА Объект.ГоловнойКонтрагент = Объект.Ссылка ТОГДА &ПустаяСсылка ИНАЧЕ Объект.ГоловнойКонтрагент КОНЕЦ");
//		Структура.Вставить("ИНН", "Объект.ИдентификационныйКодЛичности");
//	ИначеЕсли ИмяОбъекта = "НематериальныеАктивы" Тогда     
//		Структура.Вставить("Код");
//		Структура.Вставить("ОрганизацияGUID");
//		Структура.Вставить("ПодразделениеGUID");
//		Структура.Вставить("МОЛGUID");
//		Структура.Вставить("БалансоваяСтоимость");	
//		Структура.Вставить("НакопленныйИзнос");	
//		Структура.Вставить("ВидНМАGUID");
//	ИначеЕсли ИмяОбъекта = "Номенклатура" Тогда
//		Структура.Вставить("Код");
//		Структура.Вставить("РодительGUID");
//		Структура.Вставить("ЭтоГруппа");
//		Структура.Вставить("Услуга");
//		Структура.Вставить("ЕдиницаИзмерения", "Объект.БазоваяЕдиницаИзмерения.Наименование");
//	ИначеЕсли ИмяОбъекта = "ОсновныеСредства" Тогда
//		Структура.Вставить("Код");
//		Структура.Вставить("ОрганизацияGUID");
//		Структура.Вставить("ПодразделениеGUID");
//		Структура.Вставить("МОЛGUID");
//		Структура.Вставить("БалансоваяСтоимость");	
//		Структура.Вставить("НакопленныйИзнос");
//		Структура.Вставить("ГруппыОС");
//	ИначеЕсли ИмяОбъекта = "ОбъектыСтроительства" Тогда
//		Структура.Вставить("Код");	
//		Структура.Вставить("ОрганизацияGUID", "&ПустаяСсылка");
//	ИначеЕсли ИмяОбъекта = "Организации" Тогда
//		Структура.Вставить("Код", "&ПустойКод");
//		Структура.Вставить("ИНН", "Объект.ИдентификационныйНомер");
//		Структура.Вставить("ГоловнаяОрганизацияGUID", "ВЫБОР КОГДА Объект.ГоловнаяОрганизация = Объект.Ссылка ТОГДА &ПустаяСсылка ИНАЧЕ Объект.ГоловнаяОрганизация КОНЕЦ");
//	ИначеЕсли ИмяОбъекта = "ПодразделенияОрганизаций" Тогда
//		Структура.Вставить("Код");
//		Структура.Вставить("РодительGUID");
//		Структура.Вставить("ОрганизацияGUID", "Объект.Владелец");//
//	ИначеЕсли ИмяОбъекта = "ФизическиеЛица" Тогда
//		Структура.Вставить("Код");
//		Структура.Вставить("ИНН");
//		Структура.Вставить("Ид");
//		Структура.Вставить("ДатаПриема");
//		Структура.Вставить("ДатаУвольнения");
//		Структура.Вставить("Должность");
//		Структура.Вставить("Подразделение");
//	ИначеЕсли ИмяОбъекта = "СтатьиДвиженияДенежныхСредств" 
//		ИЛИ ИмяОбъекта = "Доходы" 
//		ИЛИ ИмяОбъекта = "СтатьиЗатрат" Тогда     
//		Структура.Вставить("Код");
//		Структура.Вставить("РодительGUID");
//		Структура.Вставить("ЭтоГруппа");
//	ИначеЕсли ИмяОбъекта = "Склады"  Тогда
//		Структура.Вставить("Код", "&ПустойКод");
//		Структура.Вставить("РодительGUID");
//		Структура.Вставить("ЭтоГруппа");
//	ИначеЕсли ИмяОбъекта = "ДоходыБудущихПериодов" 
//		ИЛИ ИмяОбъекта = "Резервы" 
//		ИЛИ ИмяОбъекта = "ЦенныеБумаги" 
//		ИЛИ ИмяОбъекта = "РасходыБудущихПериодов" 
//		ИЛИ ИмяОбъекта = "НоменклатурныеГруппы" Тогда
//		Структура.Вставить("Код");	
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция ПолучитьПоляЗапроса(ИмяОбъекта)
//	
//	Структура = Новый Структура;
//	ПолучитьДопПоляОбъекта(Структура, ИмяОбъекта);	
//	Поля = "";
//	Для Каждого Строка Из Структура Цикл
//		ПозGUID = СтрНайти(Строка.Ключ, "GUID"); 
//		Если ПозGUID = 0 Тогда
//			ИмяПоля = Строка.Ключ;
//		Иначе
//			ИмяПоля = Лев(Строка.Ключ, ПозGUID-1);
//		КонецЕсли;	
//		Если ЗначениеЗаполнено(Строка.Значение) Тогда
//			ЗначениеПоля = Строка.Значение;
//		Иначе
//			ЗначениеПоля = "Объект." + ИмяПоля;
//		КонецЕсли;
//		Поля = Поля + ",
//		|	" + ЗначениеПоля + " КАК " + ИмяПоля;
//	КонецЦикла;
//	Возврат Поля; 
//	
//КонецФункции

//Функция ПолучитьУсловиеГруппы(ИмяОбъекта)
//	
//	Текст = "";
//	Если СтрНайти("РасходыБудущихПериодов,НоменклатурныеГруппы,ФизическиеЛица", ИмяОбъекта) <> 0 Тогда
//		Текст = "
//		| 	И НЕ Объект.ЭтоГруппа";
//	КонецЕсли;
//	
//	Возврат Текст;
//	
//КонецФункции

////Запросы
//Функция ПолучитьТекстЗапроса(ВидОбъекта, ИмяОбъекта, Изменения = Ложь)
//		
//	Если ИмяОбъекта = "НематериальныеАктивы" Тогда
//		Текст = "ВЫБРАТЬ
//		        |	ОбъектВыгрузкиИзменения.Ссылка КАК Ссылка
//		        |ПОМЕСТИТЬ ВтИзменения
//		        |ИЗ
//		        |	Справочник.НематериальныеАктивы.Изменения КАК ОбъектВыгрузкиИзменения
//		        |ГДЕ
//		        |	ОбъектВыгрузкиИзменения.Узел = &Узел
//		        |;
//		        |
//		        |////////////////////////////////////////////////////////////////////////////////
//		        |ВЫБРАТЬ
//		        |	НематериальныеАктивы.Ссылка КАК Ссылка,
//		        |	НематериальныеАктивы.Наименование КАК Наименование,
//		        |	НематериальныеАктивы.Код КАК Код,
//		        |	Учет.Организация КАК Организация,
//		        |	"""" КАК Подразделение,
//		        |	"""" КАК МОЛ,
//		        |	НематериальныеАктивы.ВидНМА КАК ВидНМА,
//		        |	БалансАмортизация.БалансоваяСтоимость КАК БалансоваяСтоимость,
//		        |	БалансАмортизация.НакопленныйИзнос КАК НакопленныйИзнос
//		        |ИЗ
//		        |	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
//		        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		        |			ПринятиеКУчетуНМА.НематериальныйАктив КАК НематериальныйАктив,
//		        |			ПринятиеКУчетуНМА.Ссылка.Организация КАК Организация
//		        |		ИЗ
//		        |			Документ.ПринятиеКУчетуНМА.НМА КАК ПринятиеКУчетуНМА
//		        |		ГДЕ
//		        |			ПринятиеКУчетуНМА.Ссылка.Проведен) КАК Учет
//		        |		ПО НематериальныеАктивы.Ссылка = Учет.НематериальныйАктив
//		        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		        |			ВложенныйЗапрос.НМА КАК НМА,
//		        |			СУММА(ВложенныйЗапрос.БалансоваяСтоимость) КАК БалансоваяСтоимость,
//		        |			СУММА(ВложенныйЗапрос.НакопленныйИзнос) КАК НакопленныйИзнос
//		        |		ИЗ
//		        |			(ВЫБРАТЬ
//		        |				ХозрасчетныйОстатки.СуммаОстаток КАК БалансоваяСтоимость,
//		        |				ХозрасчетныйОстатки.Субконто1 КАК НМА,
//		        |				0 КАК НакопленныйИзнос
//		        |			ИЗ
//		        |				РегистрБухгалтерии.Типовой.Остатки(, Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПрочиеНематериальныеАктивы), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы), ) КАК ХозрасчетныйОстатки
//		        |			
//		        |			ОБЪЕДИНИТЬ ВСЕ
//		        |			
//		        |			ВЫБРАТЬ
//		        |				0,
//		        |				ХозрасчетныйОстатки.Субконто1,
//		        |				ХозрасчетныйОстатки.СуммаОстаток
//		        |			ИЗ
//		        |				РегистрБухгалтерии.Типовой.Остатки(, Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы), ) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос
//		        |		
//		        |		СГРУППИРОВАТЬ ПО
//		        |			ВложенныйЗапрос.НМА) КАК БалансАмортизация
//		        |		ПО НематериальныеАктивы.Ссылка = БалансАмортизация.НМА
//		        |ГДЕ
//		        |	НЕ НематериальныеАктивы.ЭтоГруппа
//		        |	И ВЫБОР
//		        |			КОГДА &ПоИзменениям
//		        |				ТОГДА НематериальныеАктивы.Ссылка В
//		        |						(ВЫБРАТЬ
//		        |							ВТ.Ссылка
//		        |						ИЗ
//		        |							ВтИзменения КАК ВТ)
//		        |			ИНАЧЕ ИСТИНА
//		        |		КОНЕЦ";
//	ИначеЕсли ИмяОбъекта = "ОсновныеСредства" Тогда
//		Текст = "ВЫБРАТЬ
//		        |	ОбъектВыгрузкиИзменения.Ссылка
//		        |ПОМЕСТИТЬ ВтИзменения
//		        |ИЗ
//		        |	Справочник.ОсновныеСредства.Изменения КАК ОбъектВыгрузкиИзменения
//		        |ГДЕ
//		        |	ОбъектВыгрузкиИзменения.Узел = &Узел
//		        |;
//		        |
//		        |////////////////////////////////////////////////////////////////////////////////
//		        |ВЫБРАТЬ
//		        |	ОсновныеСредства.Ссылка КАК Ссылка,
//		        |	ОсновныеСредства.Наименование КАК Наименование,
//		        |	ОсновныеСредства.Код КАК Код,
//		        |	БалансАмортизация.БалансоваяСтоимость КАК БалансоваяСтоимость,
//		        |	БалансАмортизация.НакопленныйИзнос КАК НакопленныйИзнос,
//		        |	ПРЕДСТАВЛЕНИЕ(ОсновныеСредства.ГруппаОС) КАК ГруппыОС,
//		        |	Учет.Организация КАК Организация,
//		        |	Учет.Подразделение КАК Подразделение,
//		        |	Учет.МОЛ КАК МОЛ
//		        |ИЗ
//		        |	Справочник.ОсновныеСредства КАК ОсновныеСредства
//		        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		        |			ВложенныйЗапрос.ОС КАК ОС,
//		        |			СУММА(ВложенныйЗапрос.БалансоваяСтоимость) КАК БалансоваяСтоимость,
//		        |			СУММА(ВложенныйЗапрос.НакопленныйИзнос) КАК НакопленныйИзнос
//		        |		ИЗ
//		        |			(ВЫБРАТЬ
//		        |				ХозрасчетныйОстатки.СуммаОстаток КАК БалансоваяСтоимость,
//		        |				ХозрасчетныйОстатки.Субконто1 КАК ОС,
//		        |				0 КАК НакопленныйИзнос
//		        |			ИЗ
//		        |				РегистрБухгалтерии.Типовой.Остатки(, Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновныеСредства), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства), ) КАК ХозрасчетныйОстатки
//		        |			
//		        |			ОБЪЕДИНИТЬ ВСЕ
//		        |			
//		        |			ВЫБРАТЬ
//		        |				0,
//		        |				ХозрасчетныйОстатки.Субконто1,
//		        |				ХозрасчетныйОстатки.СуммаОстаток
//		        |			ИЗ
//		        |				РегистрБухгалтерии.Типовой.Остатки(, Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.АмортизацияОсновныхСредств), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства), ) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос
//		        |		
//		        |		СГРУППИРОВАТЬ ПО
//		        |			ВложенныйЗапрос.ОС) КАК БалансАмортизация
//		        |		ПО ОсновныеСредства.Ссылка = БалансАмортизация.ОС
//		        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		        |			ПринятиеКУчетуОСОС.ОсновноеСредство КАК ОсновноеСредство,
//		        |			ПринятиеКУчетуОСОС.Ссылка.Организация КАК Организация,
//		        |			ПринятиеКУчетуОСОС.ПодразделениеОрганизации КАК Подразделение,
//		        |			ПринятиеКУчетуОСОС.МОЛ КАК МОЛ
//		        |		ИЗ
//		        |			Документ.ПринятиеКУчетуОС.ОС КАК ПринятиеКУчетуОСОС
//		        |		ГДЕ
//		        |			ПринятиеКУчетуОСОС.Ссылка.Проведен) КАК Учет
//		        |		ПО ОсновныеСредства.Ссылка = Учет.ОсновноеСредство
//		        |ГДЕ
//		        |	НЕ ОсновныеСредства.ЭтоГруппа
//				|	И ВЫБОР
//		        |			КОГДА &ПоИзменениям
//		        |				ТОГДА ОсновныеСредства.Ссылка В
//		        |						(ВЫБРАТЬ
//		        |							ВТ.Ссылка
//		        |						ИЗ
//		        |							ВтИзменения КАК ВТ)
//		        |			ИНАЧЕ ИСТИНА
//		        |		КОНЕЦ";	
//	ИначеЕсли ИмяОбъекта = "ФизическиеЛица" Тогда
//		Текст = "ВЫБРАТЬ
//		        |	ОбъектВыгрузкиИзменения.Ссылка КАК Ссылка
//		        |ПОМЕСТИТЬ ВтИзменения
//		        |ИЗ
//		        |	Справочник.ФизическиеЛица.Изменения КАК ОбъектВыгрузкиИзменения
//		        |ГДЕ
//		        |	ОбъектВыгрузкиИзменения.Узел = &Узел
//		        |;
//		        |
//		        |////////////////////////////////////////////////////////////////////////////////
//		        |ВЫБРАТЬ
//		        |	ФизическиеЛица.Ссылка КАК Ссылка,
//		        |	ФизическиеЛица.Наименование КАК Наименование,
//		        |	ФизическиеЛица.Код КАК Код,
//		        |	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
//		        |	"""" КАК Ид
//		        |ПОМЕСТИТЬ ВтФизЛица
//		        |ИЗ
//		        |	Справочник.ФизическиеЛица КАК ФизическиеЛица
//		        |ГДЕ
//		        |	НЕ ФизическиеЛица.ЭтоГруппа
//		        |	И ВЫБОР
//		        |			КОГДА &ПоИзменениям
//		        |				ТОГДА ФизическиеЛица.Ссылка В
//		        |						(ВЫБРАТЬ
//		        |							ВТ.Ссылка
//		        |						ИЗ
//		        |							ВтИзменения КАК ВТ)
//		        |			ИНАЧЕ ИСТИНА
//		        |		КОНЕЦ
//		        |;
//		        |
//		        |////////////////////////////////////////////////////////////////////////////////
//		        |ВЫБРАТЬ
//		        |	ВложенныйЗапрос.Период КАК Период,
//		        |	ВложенныйЗапрос.Физлицо КАК Физлицо,
//		        |	РаботникиОрганизаций.Должность.Наименование КАК Должность,
//		        |	РаботникиОрганизаций.ПодразделениеОрганизации.Наименование КАК Подразделение
//		        |ПОМЕСТИТЬ ВтДатаПриема
//		        |ИЗ
//		        |	(ВЫБРАТЬ
//		        |		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
//		        |		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период) КАК Период,
//		        |		РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
//		        |	ИЗ
//		        |		РегистрСведений.РаботникиОрганизаций.СрезПоследних(, ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
//		        |	ГДЕ
//		        |		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо В
//		        |				(ВЫБРАТЬ
//		        |					ВТ.Ссылка
//		        |				ИЗ
//		        |					ВтФизЛица КАК ВТ)
//		        |	
//		        |	СГРУППИРОВАТЬ ПО
//		        |		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
//		        |		РаботникиОрганизацийСрезПоследних.Сотрудник) КАК ВложенныйЗапрос
//		        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
//		        |		ПО ВложенныйЗапрос.Период = РаботникиОрганизаций.Период
//		        |			И ВложенныйЗапрос.Сотрудник = РаботникиОрганизаций.Сотрудник
//		        |;
//		        |
//		        |////////////////////////////////////////////////////////////////////////////////
//		        |ВЫБРАТЬ
//		        |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
//		        |	МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период) КАК Период
//		        |ПОМЕСТИТЬ ВтДатаУвольнения
//		        |ИЗ
//		        |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
//		        |ГДЕ
//		        |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо В
//		        |			(ВЫБРАТЬ
//		        |				ВТ.Ссылка
//		        |			ИЗ
//		        |				ВтФизЛица КАК ВТ)
//		        |
//		        |СГРУППИРОВАТЬ ПО
//		        |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
//		        |;
//		        |
//		        |////////////////////////////////////////////////////////////////////////////////
//		        |ВЫБРАТЬ
//		        |	ВтФизЛица.Ссылка КАК Ссылка,
//		        |	ВтФизЛица.Наименование КАК Наименование,
//		        |	ВтФизЛица.Код КАК Код,
//		        |	ВтФизЛица.ИдентификационныйКодЛичности КАК ИНН,
//		        |	ВтФизЛица.Ид КАК Ид,
//		        |	ВтДатаПриема.Период КАК ДатаПриема,
//		        |	ВЫБОР
//		        |		КОГДА ЕСТЬNULL(ВтДатаУвольнения.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ВтДатаПриема.Период, ДАТАВРЕМЯ(1, 1, 1))
//		        |			ТОГДА ВтДатаУвольнения.Период
//		        |		ИНАЧЕ """"
//		        |	КОНЕЦ КАК ДатаУвольнения,
//		        |	ВтДатаПриема.Должность КАК Должность,
//		        |	ВтДатаПриема.Подразделение КАК Подразделение
//		        |ИЗ
//		        |	ВтФизЛица КАК ВтФизЛица
//		        |		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатаПриема КАК ВтДатаПриема
//		        |		ПО ВтФизЛица.Ссылка = ВтДатаПриема.Физлицо
//		        |		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатаУвольнения КАК ВтДатаУвольнения
//		        |		ПО ВтФизЛица.Ссылка = ВтДатаУвольнения.Физлицо";
//	ИначеЕсли ИмяОбъекта = "Типовой" Тогда
//		Текст = "ВЫБРАТЬ
//		        |	ОбъектВыгрузкиИзменения.Ссылка КАК Ссылка
//		        |ПОМЕСТИТЬ ВтИзменения
//		        |ИЗ
//		        |	ПланСчетов.Типовой.Изменения КАК ОбъектВыгрузкиИзменения
//		        |ГДЕ
//		        |	ОбъектВыгрузкиИзменения.Узел = &Узел
//		        |;
//		        |
//		        |////////////////////////////////////////////////////////////////////////////////
//		        |ВЫБРАТЬ
//		        |	Хозрасчетный.Ссылка КАК Ссылка,
//		        |	Хозрасчетный.Наименование КАК Наименование,
//		        |	Хозрасчетный.Код КАК Код,
//		        |	ВЫБОР
//		        |		КОГДА Хозрасчетный.Родитель.Код ПОДОБНО ""_""
//		        |			ТОГДА &ПустаяСсылка
//		        |		ИНАЧЕ Хозрасчетный.Родитель
//		        |	КОНЕЦ КАК Родитель,
//		        |	Хозрасчетный.Забалансовый КАК Забалансовый,
//		        |	ВЫБОР
//		        |		КОГДА Хозрасчетный.Забалансовый
//		        |			ТОГДА ""90""
//		        |		ИНАЧЕ ПОДСТРОКА(Хозрасчетный.Код, 1, 2)
//		        |	КОНЕЦ КАК КодГруппы,
//		        |	ВложенныйЗапрос.ВидСубконто1 КАК ВидСубконто1,
//		        |	ВложенныйЗапрос.ВидСубконто2 КАК ВидСубконто2,
//		        |	ВложенныйЗапрос.ВидСубконто3 КАК ВидСубконто3,
//		        |	ВложенныйЗапрос.ВидСубконто4 КАК ВидСубконто4,
//		        |	ВложенныйЗапрос.ВидСубконто5 КАК ВидСубконто5,
//		        |	ВложенныйЗапрос.ВидСубконто6 КАК ВидСубконто6
//		        |ИЗ
//		        |	ПланСчетов.Типовой КАК Хозрасчетный
//		        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		        |			Вложенный.Счет КАК Счет,
//		        |			Вложенный.ВидСубконто1.ИмяПредопределенныхДанных КАК ВидСубконто1,
//		        |			Вложенный.ВидСубконто2.ИмяПредопределенныхДанных КАК ВидСубконто2,
//		        |			Вложенный.ВидСубконто3.ИмяПредопределенныхДанных КАК ВидСубконто3,
//		        |			"""" КАК ВидСубконто4,
//		        |			"""" КАК ВидСубконто5,
//		        |			"""" КАК ВидСубконто6
//		        |		ИЗ
//		        |			(ВЫБРАТЬ
//		        |				ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
//		        |				МАКСИМУМ(ВЫБОР
//		        |						КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1
//		        |							ТОГДА ХозрасчетныйВидыСубконто.ВидСубконто
//		        |						ИНАЧЕ NULL
//		        |					КОНЕЦ) КАК ВидСубконто1,
//		        |				МАКСИМУМ(ВЫБОР
//		        |						КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2
//		        |							ТОГДА ХозрасчетныйВидыСубконто.ВидСубконто
//		        |						ИНАЧЕ NULL
//		        |					КОНЕЦ) КАК ВидСубконто2,
//		        |				МАКСИМУМ(ВЫБОР
//		        |						КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3
//		        |							ТОГДА ХозрасчетныйВидыСубконто.ВидСубконто
//		        |						ИНАЧЕ NULL
//		        |					КОНЕЦ) КАК ВидСубконто3
//		        |			ИЗ
//		        |				ПланСчетов.Типовой.ВидыСубконто КАК ХозрасчетныйВидыСубконто
//		        |			ГДЕ
//		        |				НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты
//		        |			
//		        |			СГРУППИРОВАТЬ ПО
//		        |				ХозрасчетныйВидыСубконто.Ссылка) КАК Вложенный) КАК ВложенныйЗапрос
//		        |		ПО Хозрасчетный.Ссылка = ВложенныйЗапрос.Счет
//		        |ГДЕ
//		        |	НЕ Хозрасчетный.Код ПОДОБНО ""_""
//		        |	И ВЫБОР
//		        |			КОГДА &ПоИзменениям
//		        |				ТОГДА Хозрасчетный.Ссылка В
//		        |						(ВЫБРАТЬ
//		        |							ВТ.Ссылка
//		        |						ИЗ
//		        |							ВтИзменения КАК ВТ)
//		        |			ИНАЧЕ ИСТИНА
//		        |		КОНЕЦ
//		        |
//		        |УПОРЯДОЧИТЬ ПО
//		        |	КодГруппы";
//	Иначе
//		Текст = "ВЫБРАТЬ
//		        |	ОбъектВыгрузкиИзменения.Ссылка
//		        |ПОМЕСТИТЬ ВтИзменения
//		        |ИЗ
//		        |	" + ВидОбъекта + "." + ИмяОбъекта + ".Изменения КАК ОбъектВыгрузкиИзменения
//		        |ГДЕ
//		        |	ОбъектВыгрузкиИзменения.Узел = &Узел
//		        |;
//		        |
//		        |////////////////////////////////////////////////////////////////////////////////
//				|ВЫБРАТЬ
//	            |	Объект.Ссылка КАК Ссылка,
//	            |	Объект.Наименование КАК Наименование" + ПолучитьПоляЗапроса(ИмяОбъекта) + "
//	            |ИЗ
//	            |	" + ВидОбъекта + "." + ИмяОбъекта + " КАК Объект
//				|ГДЕ
//		        |	ВЫБОР
//		        |		КОГДА &ПоИзменениям
//		        |			ТОГДА Объект.Ссылка В
//		        |					(ВЫБРАТЬ
//		        |						ВТ.Ссылка
//		        |					ИЗ
//		        |						ВтИзменения КАК ВТ)
//		        |		ИНАЧЕ ИСТИНА
//		        |	КОНЕЦ" + ПолучитьУсловиеГруппы(ИмяОбъекта);	
//	КонецЕсли;	
//	
//	Возврат Текст;
//		
//КонецФункции

//Функция ПолучитьТекстЗапросаОСВ()
//	
//	Текст = "ВЫБРАТЬ
//	        |	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
//	        |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
//	        |	ХозрасчетныйОстаткиИОбороты.Валюта КАК Валюта,
//	        |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт) КАК НачальныйОстатокДт,
//	        |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт) КАК НачальныйОстатокКт,
//	        |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК ОборотДт,
//	        |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК ОборотКт,
//	        |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт) КАК КонечныйОстатокДт,
//	        |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт) КАК КонечныйОстатокКт
//	        |ИЗ
//	        |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , НЕ Счет.Забалансовый, , ) КАК ХозрасчетныйОстаткиИОбороты
//	        |ГДЕ
//	        |	ВЫБОР
//	        |			КОГДА &ПоСчету
//	        |				ТОГДА ХозрасчетныйОстаткиИОбороты.Счет = &Счет
//	        |			ИНАЧЕ ИСТИНА
//	        |		КОНЕЦ
//	        |
//	        |СГРУППИРОВАТЬ ПО
//	        |	ХозрасчетныйОстаткиИОбороты.Счет,
//	        |	ХозрасчетныйОстаткиИОбороты.Организация,
//	        |	ХозрасчетныйОстаткиИОбороты.Валюта
//	        |
//	        |УПОРЯДОЧИТЬ ПО
//	        |	Организация,
//	        |	ХозрасчетныйОстаткиИОбороты.Счет.Код,
//	        |	Валюта
//	        |ИТОГИ
//	        |	СУММА(НачальныйОстатокДт),
//	        |	СУММА(НачальныйОстатокКт),
//	        |	СУММА(ОборотДт),
//	        |	СУММА(ОборотКт),
//	        |	СУММА(КонечныйОстатокДт),
//	        |	СУММА(КонечныйОстатокКт)
//	        |ПО
//	        |	ОБЩИЕ,
//	        |	Организация,
//	        |	Счет ТОЛЬКО ИЕРАРХИЯ,
//	        |	Валюта";
//	
//	Возврат Текст;
//	
//КонецФункции

//Функция ПолучитьТекстЗапросаКарточкаСчета()
//	
//	Текст = "ВЫБРАТЬ
//	        |	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
//	        |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
//	        |	ХозрасчетныйОстаткиИОбороты.Валюта КАК Валюта,
//	        |	ХозрасчетныйОстаткиИОбороты.Период,
//	        |	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Регистратор,
//	        |	ХозрасчетныйОстаткиИОбороты.Субконто1,
//	        |	ХозрасчетныйОстаткиИОбороты.Субконто2,
//	        |	ХозрасчетныйОстаткиИОбороты.Субконто3,
//	        |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК ОборотДт,
//	        |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК ОборотКт
//	        |ИЗ
//	        |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , НЕ Счет.Забалансовый, , ) КАК ХозрасчетныйОстаткиИОбороты
//	        |ГДЕ
//	        |	ВЫБОР
//	        |			КОГДА &ПоСчету
//	        |				ТОГДА ХозрасчетныйОстаткиИОбороты.Счет = &Счет
//	        |			ИНАЧЕ Ложь
//	        |		КОНЕЦ
//	        |
//	        |СГРУППИРОВАТЬ ПО
//	        |	ХозрасчетныйОстаткиИОбороты.Счет,
//	        |	ХозрасчетныйОстаткиИОбороты.Организация,
//	        |	ХозрасчетныйОстаткиИОбороты.Валюта,
//	        |	ХозрасчетныйОстаткиИОбороты.Регистратор,
//	        |	ХозрасчетныйОстаткиИОбороты.Период,
//	        |	ХозрасчетныйОстаткиИОбороты.Субконто1,
//	        |	ХозрасчетныйОстаткиИОбороты.Субконто3,
//	        |	ХозрасчетныйОстаткиИОбороты.Субконто2
//	        |
//	        |УПОРЯДОЧИТЬ ПО
//	        |	Организация,
//	        |	ХозрасчетныйОстаткиИОбороты.Счет.Код,
//	        |	Валюта
//	        |ИТОГИ
//	        |	СУММА(ОборотДт),
//	        |	СУММА(ОборотКт)
//	        |ПО
//	        |	ОБЩИЕ,
//	        |	Организация,
//	        |	Счет ТОЛЬКО ИЕРАРХИЯ,
//	        |	Валюта,
//	        |	Регистратор";
//	
//	Возврат Текст;
//	
//КонецФункции

//Функция ПолучитьТекстЗапросаОстатки()
//	
//	Текст = "ВЫБРАТЬ
//	        |	&Период КАК Период,
//	        |	ВложенныйЗапрос.Счет КАК Счет,
//	        |	ВложенныйЗапрос.Организация КАК Организация,
//	        |	ВложенныйЗапрос.Субконто1 КАК Субконто1,
//	        |	ВложенныйЗапрос.Субконто2 КАК Субконто2,
//	        |	ВложенныйЗапрос.Субконто3 КАК Субконто3,
//	        |	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК Количество,
//	        |	ВложенныйЗапрос.Валюта КАК Валюта,
//	        |	СУММА(ВложенныйЗапрос.СуммаРегл) КАК СуммаРегл,
//	        |	СУММА(ВложенныйЗапрос.СуммаВВалюте) КАК СуммаВВалюте,
//	        |	СУММА(ВложенныйЗапрос.СуммаВУпрУчете) КАК СуммаВУпрУчете,
//	        |	ВложенныйЗапрос.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
//	        |	"""" КАК НаправлениеДеятельности,
//	        |	ВложенныйЗапрос.СтруктурноеПодразделение КАК Подразделение
//	        |ИЗ
//	        |	(ВЫБРАТЬ
//	        |		ТиповойОстатки.Счет КАК Счет,
//	        |		ТиповойОстатки.Организация КАК Организация,
//	        |		ТиповойОстатки.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
//	        |		ВЫБОР
//	        |			КОГДА НЕ ЕСТЬNULL(ВложенныйЗапрос.Субконто1, ЛОЖЬ)
//	        |				ТОГДА ТиповойОстатки.Субконто1
//	        |		КОНЕЦ КАК Субконто1,
//	        |		ВЫБОР
//	        |			КОГДА НЕ ЕСТЬNULL(ВложенныйЗапрос.Субконто2, ЛОЖЬ)
//	        |				ТОГДА ТиповойОстатки.Субконто2
//	        |		КОНЕЦ КАК Субконто2,
//	        |		ВЫБОР
//	        |			КОГДА НЕ ЕСТЬNULL(ВложенныйЗапрос.Субконто3, ЛОЖЬ)
//	        |				ТОГДА ТиповойОстатки.Субконто3
//	        |		КОНЕЦ КАК Субконто3,
//	        |		ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
//	        |		ЕСТЬNULL(ТиповойОстатки.Валюта.Ссылка, &KZT) КАК Валюта,
//	        |		ЕСТЬNULL(ТиповойОстатки.СуммаОстаток, 0) КАК СуммаРегл,
//	        |		ЕСТЬNULL(ТиповойОстатки.ВалютнаяСуммаОстаток, 0) КАК СуммаВВалюте,
//	        |		0 КАК СуммаВУпрУчете,
//	        |		ЕСТЬNULL(ТиповойОстатки.СтруктурноеПодразделение, &ПустаяСсылка) КАК СтруктурноеПодразделение
//	        |	ИЗ
//	        |		РегистрБухгалтерии.Типовой.Остатки(&Период, , , ) КАК ТиповойОстатки
//	        |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	        |				ТиповойВидыСубконто.Ссылка КАК Счет,
//	        |				МАКСИМУМ(ВЫБОР
//	        |						КОГДА ТиповойВидыСубконто.НомерСтроки = 1
//	        |							ТОГДА ИСТИНА
//	        |						ИНАЧЕ ЛОЖЬ
//	        |					КОНЕЦ) КАК Субконто1,
//	        |				МАКСИМУМ(ВЫБОР
//	        |						КОГДА ТиповойВидыСубконто.НомерСтроки = 2
//	        |							ТОГДА ИСТИНА
//	        |						ИНАЧЕ ЛОЖЬ
//	        |					КОНЕЦ) КАК Субконто2,
//	        |				МАКСИМУМ(ВЫБОР
//	        |						КОГДА ТиповойВидыСубконто.НомерСтроки = 3
//	        |							ТОГДА ИСТИНА
//	        |						ИНАЧЕ ЛОЖЬ
//	        |					КОНЕЦ) КАК Субконто3
//	        |			ИЗ
//	        |				ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
//	        |			ГДЕ
//	        |				ТиповойВидыСубконто.ТолькоОбороты
//	        |			
//	        |			СГРУППИРОВАТЬ ПО
//	        |				ТиповойВидыСубконто.Ссылка) КАК ВложенныйЗапрос
//	        |			ПО ТиповойОстатки.Счет = ВложенныйЗапрос.Счет) КАК ВложенныйЗапрос
//	        |
//	        |СГРУППИРОВАТЬ ПО
//	        |	ВложенныйЗапрос.Субконто3,
//	        |	ВложенныйЗапрос.Организация,
//	        |	ВложенныйЗапрос.Субконто2,
//	        |	ВложенныйЗапрос.Счет,
//	        |	ВложенныйЗапрос.Валюта,
//	        |	ВложенныйЗапрос.Субконто1,
//	        |	ВложенныйЗапрос.ГоловнаяОрганизация,
//	        |	ВложенныйЗапрос.СтруктурноеПодразделение";
//	
//	Возврат Текст;
//	
//КонецФункции

//Функция ПолучитьТекстЗапросаВыгрузкиПоРегистраторам()
//	
//	Текст = "ВЫБРАТЬ
//	|	ТЗРегистраторов.Регистратор КАК Регистратор
//	|ПОМЕСТИТЬ ВрРегистраторы
//	|ИЗ
//	|	&ТЗРегистраторов КАК ТЗРегистраторов
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Регистратор
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТиповойДвиженияССубконто.Период КАК Период,
//	|	ТиповойДвиженияССубконто.Регистратор КАК Регистратор,
//	|	ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки,
//	|	ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
//	|	ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
//	|	ТиповойДвиженияССубконто.Организация КАК Организация,
//	|	ТиповойДвиженияССубконто.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
//	|	ТиповойДвиженияССубконто.СубконтоДт1 КАК Субконто1,
//	|	ТиповойДвиженияССубконто.СубконтоДт2 КАК Субконто2,
//	|	ТиповойДвиженияССубконто.СубконтоДт3 КАК Субконто3,
//	|	ТиповойДвиженияССубконто.СубконтоКт1 КАК Субконто4,
//	|	ТиповойДвиженияССубконто.СубконтоКт2 КАК Субконто5,
//	|	ТиповойДвиженияССубконто.СубконтоКт3 КАК Субконто6,
//	|	ВЫБОР
//	|		КОГДА ТиповойДвиженияССубконто.СчетДт = &СчетСебестоимость
//	|			ТОГДА ВЫБОР
//	|					КОГДА ТиповойДвиженияССубконто.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
//	|						ТОГДА ВЫРАЗИТЬ(ТиповойДвиженияССубконто.Регистратор КАК Документ.РеализацияТоваровУслуг).Контрагент
//	|					КОГДА ТиповойДвиженияССубконто.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
//	|						ТОГДА ВЫРАЗИТЬ(ТиповойДвиженияССубконто.Регистратор КАК Документ.АктОбОказанииПроизводственныхУслуг).Контрагент
//	|					КОГДА ТиповойДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
//	|						ТОГДА ВЫРАЗИТЬ(ТиповойДвиженияССубконто.Регистратор КАК Документ.ВозвратТоваровПоставщику).Контрагент
//	|				КОНЕЦ
//	|	КОНЕЦ КАК Субконто7,
//	|	ВЫБОР
//	|		КОГДА ТиповойДвиженияССубконто.СчетДт = &СчетСебестоимость
//	|			ТОГДА ВЫБОР
//	|					КОГДА ТиповойДвиженияССубконто.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
//	|						ТОГДА ВЫРАЗИТЬ(ТиповойДвиженияССубконто.Регистратор КАК Документ.РеализацияТоваровУслуг).ДоговорКонтрагента
//	|					КОГДА ТиповойДвиженияССубконто.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
//	|						ТОГДА ВЫРАЗИТЬ(ТиповойДвиженияССубконто.Регистратор КАК Документ.АктОбОказанииПроизводственныхУслуг).ДоговорКонтрагента
//	|					КОГДА ТиповойДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
//	|						ТОГДА ВЫРАЗИТЬ(ТиповойДвиженияССубконто.Регистратор КАК Документ.ВозвратТоваровПоставщику).ДоговорКонтрагента
//	|				КОНЕЦ
//	|	КОНЕЦ КАК Субконто8,
//	|	Выразить(ЕСТЬNULL(ТиповойДвиженияССубконто.КоличествоДт, 0) КАК Число(18,4)) КАК КоличествоДт,
//	|	ЕСТЬNULL(ТиповойДвиженияССубконто.ВалютаДт, &KZT) КАК ВалютаДт,
//	|	Выразить(ЕСТЬNULL(ТиповойДвиженияССубконто.КоличествоКт, 0) КАК Число(18,4)) КАК КоличествоКт,
//	|	ЕСТЬNULL(ТиповойДвиженияССубконто.ВалютаКт, &KZT) КАК ВалютаКт,
//	|	ЕСТЬNULL(ТиповойДвиженияССубконто.Сумма, 0) КАК СуммаРегл,
//	|	ЕСТЬNULL(ТиповойДвиженияССубконто.ВалютнаяСуммаДт, 0) КАК СуммаВВалютеДт,
//	|	ЕСТЬNULL(ТиповойДвиженияССубконто.ВалютнаяСуммаКт, 0) КАК СуммаВВалютеКт,
//	|	0 КАК СуммаВУпрУчете,
//	|	ЕСТЬNULL(ТиповойДвиженияССубконто.СтруктурноеПодразделениеДт, &ПустаяСсылка) КАК ПодразделениеДт,
//	|	ЕСТЬNULL(ТиповойДвиженияССубконто.СтруктурноеПодразделениеКт, &ПустаяСсылка) КАК ПодразделениеКт
//	|ПОМЕСТИТЬ ВрДвижения
//	|ИЗ
//	|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(
//	|			&НачалоПериода,
//	|			&КонецПериода,
//	|			Регистратор В
//	|				(ВЫБРАТЬ
//	|					ВрРегистраторы.Регистратор
//	|				ИЗ
//	|					ВрРегистраторы),
//	|			,
//	|			) КАК ТиповойДвиженияССубконто
//	|ГДЕ
//	|	(ТиповойДвиженияССубконто.Сумма <> 0
//	|			ИЛИ ТиповойДвиженияССубконто.КоличествоДт <> 0
//	|			ИЛИ ТиповойДвиженияССубконто.КоличествоКт <> 0)
//	|	И ТиповойДвиженияССубконто.Активность
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВложенныйЗапрос.Период КАК Период,
//	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
//	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
//	|	ВложенныйЗапрос.Счет КАК Счет,
//	|	ВложенныйЗапрос.КорСчет КАК КорСчет,
//	|	ВложенныйЗапрос.Организация КАК Организация,
//	|	ВложенныйЗапрос.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
//	|	ВложенныйЗапрос.Субконто1 КАК Субконто1,
//	|	ВложенныйЗапрос.Субконто2 КАК Субконто2,
//	|	ВложенныйЗапрос.Субконто3 КАК Субконто3,
//	|	ВложенныйЗапрос.Субконто4 КАК Субконто4,
//	|	ВложенныйЗапрос.Субконто5 КАК Субконто5,
//	|	ВложенныйЗапрос.Субконто6 КАК Субконто6,
//	|	ВложенныйЗапрос.Субконто7 КАК Субконто7,
//	|	ВложенныйЗапрос.Субконто8 КАК Субконто8,
//	|	ВложенныйЗапрос.Количество КАК Количество,
//	|	ВложенныйЗапрос.Валюта КАК Валюта,
//	|	ВложенныйЗапрос.СуммаРегл КАК СуммаРегл,
//	|	ВложенныйЗапрос.СуммаВВалюте КАК СуммаВВалюте,
//	|	ВложенныйЗапрос.СуммаВУпрУчете КАК СуммаВУпрУчете,
//	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
//	|	ВложенныйЗапрос.ВидДвижения КАК ВидДвижения,
//	|	"""" КАК НаправлениеДеятельности
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		ВрДвижения.Период КАК Период,
//	|		ВрДвижения.Регистратор КАК Регистратор,
//	|		ВрДвижения.НомерСтроки КАК НомерСтроки,
//	|		ВрДвижения.СчетДт КАК Счет,
//	|		ВрДвижения.СчетКт КАК КорСчет,
//	|		ВрДвижения.Организация КАК Организация,
//	|		ВрДвижения.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
//	|		ВрДвижения.Субконто1 КАК Субконто1,
//	|		ВрДвижения.Субконто2 КАК Субконто2,
//	|		ВрДвижения.Субконто3 КАК Субконто3,
//	|		ВрДвижения.Субконто4 КАК Субконто4,
//	|		ВрДвижения.Субконто5 КАК Субконто5,
//	|		ВрДвижения.Субконто6 КАК Субконто6,
//	|		ВрДвижения.Субконто7 КАК Субконто7,
//	|		ВрДвижения.Субконто8 КАК Субконто8,
//	|		ВрДвижения.КоличествоДт КАК Количество,
//	|		ВрДвижения.ВалютаДт КАК Валюта,
//	|		ВрДвижения.СуммаРегл КАК СуммаРегл,
//	|		ВрДвижения.СуммаВВалютеДт КАК СуммаВВалюте,
//	|		ВрДвижения.СуммаВУпрУчете КАК СуммаВУпрУчете,
//	|		ВрДвижения.ПодразделениеДт КАК Подразделение,
//	|		&ОборотДт КАК ВидДвижения
//	|	ИЗ
//	|		ВрДвижения КАК ВрДвижения
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		ВрДвижения.Период,
//	|		ВрДвижения.Регистратор,
//	|		ВрДвижения.НомерСтроки,
//	|		ВрДвижения.СчетКт,
//	|		ВрДвижения.СчетДт,
//	|		ВрДвижения.Организация,
//	|		ВрДвижения.ГоловнаяОрганизация,
//	|		ВрДвижения.Субконто1,
//	|		ВрДвижения.Субконто2,
//	|		ВрДвижения.Субконто3,
//	|		ВрДвижения.Субконто4,
//	|		ВрДвижения.Субконто5,
//	|		ВрДвижения.Субконто6,
//	|		ВрДвижения.Субконто7,
//	|		ВрДвижения.Субконто8,
//	|		ВрДвижения.КоличествоКт,
//	|		ВрДвижения.ВалютаКт,
//	|		ВрДвижения.СуммаРегл,
//	|		ВрДвижения.СуммаВВалютеКт,
//	|		ВрДвижения.СуммаВУпрУчете,
//	|		ВрДвижения.ПодразделениеКт,
//	|		&ОборотКт
//	|	ИЗ
//	|		ВрДвижения КАК ВрДвижения) КАК ВложенныйЗапрос";
//	
//	Возврат Текст;
//	
//КонецФункции

////Метаданные и соответствия
//Процедура ЗаполнитьСоответствияСубконто(ПараметрыВыгрузки)
//		
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	Типовой.Ссылка КАК Счет,
//	               |	ЕСТЬNULL(ВложенныйЗапрос.ВидСубконто1.ИмяПредопределенныхДанных, """") КАК ВидСубконто1,
//	               |	ЕСТЬNULL(ВложенныйЗапрос.ВидСубконто2.ИмяПредопределенныхДанных, """") КАК ВидСубконто2,
//	               |	ЕСТЬNULL(ВложенныйЗапрос.ВидСубконто3.ИмяПредопределенныхДанных, """") КАК ВидСубконто3,
//	               |	ВложенныйЗапрос.ВидСубконто1ТолькоОбороты КАК ВидСубконто1ТолькоОбороты,
//	               |	ВложенныйЗапрос.ВидСубконто2ТолькоОбороты КАК ВидСубконто2ТолькоОбороты,
//	               |	ВложенныйЗапрос.ВидСубконто3ТолькоОбороты КАК ВидСубконто3ТолькоОбороты
//	               |ИЗ
//	               |	ПланСчетов.Типовой КАК Типовой
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	               |			ТиповойВидыСубконто.Ссылка КАК Счет,
//	               |			МАКСИМУМ(ВЫБОР
//	               |					КОГДА ТиповойВидыСубконто.НомерСтроки = 1
//	               |						ТОГДА ТиповойВидыСубконто.ВидСубконто
//	               |					ИНАЧЕ NULL
//	               |				КОНЕЦ) КАК ВидСубконто1,
//	               |			МАКСИМУМ(ВЫБОР
//	               |					КОГДА ТиповойВидыСубконто.НомерСтроки = 2
//	               |						ТОГДА ТиповойВидыСубконто.ВидСубконто
//	               |					ИНАЧЕ NULL
//	               |				КОНЕЦ) КАК ВидСубконто2,
//	               |			МАКСИМУМ(ВЫБОР
//	               |					КОГДА ТиповойВидыСубконто.НомерСтроки = 3
//	               |						ТОГДА ТиповойВидыСубконто.ВидСубконто
//	               |					ИНАЧЕ NULL
//	               |				КОНЕЦ) КАК ВидСубконто3,
//	               |			МАКСИМУМ(ВЫБОР
//	               |					КОГДА ТиповойВидыСубконто.НомерСтроки = 1
//	               |						ТОГДА ТиповойВидыСубконто.ТолькоОбороты
//	               |					ИНАЧЕ ЛОЖЬ
//	               |				КОНЕЦ) КАК ВидСубконто1ТолькоОбороты,
//	               |			МАКСИМУМ(ВЫБОР
//	               |					КОГДА ТиповойВидыСубконто.НомерСтроки = 2
//	               |						ТОГДА ТиповойВидыСубконто.ТолькоОбороты
//	               |					ИНАЧЕ ЛОЖЬ
//	               |				КОНЕЦ) КАК ВидСубконто2ТолькоОбороты,
//	               |			МАКСИМУМ(ВЫБОР
//	               |					КОГДА ТиповойВидыСубконто.НомерСтроки = 3
//	               |						ТОГДА ТиповойВидыСубконто.ТолькоОбороты
//	               |					ИНАЧЕ ЛОЖЬ
//	               |				КОНЕЦ) КАК ВидСубконто3ТолькоОбороты
//	               |		ИЗ
//	               |			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
//	               |		
//	               |		СГРУППИРОВАТЬ ПО
//	               |			ТиповойВидыСубконто.Ссылка) КАК ВложенныйЗапрос
//	               |		ПО Типовой.Ссылка = ВложенныйЗапрос.Счет";
//	
//	Выборка = Запрос.Выполнить().Выбрать();	
//	СоответствиеВидыОбороты = Новый Соответствие;
//	СоответствиеВидыОстатки = Новый Соответствие;
//	
//	Пока Выборка.Следующий() Цикл
//		ВидыОбороты = Новый Соответствие;
//		ВидыОстатки = Новый Соответствие;
//		Для Н = 1 По 3 Цикл
//			Если ЗначениеЗаполнено(Выборка["ВидСубконто" + Строка(Н)]) Тогда
//				ВидыОбороты.Вставить("ВидСубконто"+ Строка(Н), Выборка["ВидСубконто" + Строка(Н)]);
//				Если Выборка["ВидСубконто" + Строка(Н) + "ТолькоОбороты"] = Ложь Тогда
//					ВидыОстатки.Вставить("ВидСубконто"+ Строка(Н), Выборка["ВидСубконто" + Строка(Н)]);	
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		СоответствиеВидыОбороты.Вставить(Выборка.Счет, ВидыОбороты);
//		СоответствиеВидыОстатки.Вставить(Выборка.Счет, ВидыОстатки);
//	КонецЦикла;
//	
//	СтруктураСебестоимостьРеализованнойПродукцииИОказанныхУслуг = Новый Соответствие;
//	СтруктураСебестоимостьРеализованнойПродукцииИОказанныхУслуг.Вставить("ВидСубконто1", "Контрагенты");
//	СтруктураСебестоимостьРеализованнойПродукцииИОказанныхУслуг.Вставить("ВидСубконто2", "Договоры");
//	
//	СоответствиеДругиеСубконто = Новый Соответствие;
//	СоответствиеДругиеСубконто.Вставить(ПланыСчетов.ТИповой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг, СтруктураСебестоимостьРеализованнойПродукцииИОказанныхУслуг);
//	
//	ПараметрыВыгрузки.Вставить("СоответствиеВидыСубконтоОбороты", СоответствиеВидыОбороты);
//	ПараметрыВыгрузки.Вставить("СоответствиеВидыСубконтоОстатки", СоответствиеВидыОстатки);
//	ПараметрыВыгрузки.Вставить("СоответствиеДругиеСубконто", СоответствиеДругиеСубконто);
//		
//КонецПроцедуры

//Процедура ЗаполнитьСтруктурныеПодразделения(ПараметрыВыгрузки)
//	
//	Запрос = Новый Запрос; 
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ПодразделенияОрганизаций.Ссылка КАК Подразделение
//	               |ИЗ
//	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
//	               |ГДЕ
//	               |	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением";
//	
//	Выборка = Запрос.Выполнить().Выбрать();	
//	Соответствие = Новый Соответствие;	
//	
//	Пока Выборка.Следующий() Цикл
//		Соответствие.Вставить(Выборка.Подразделение);
//	КонецЦикла;
//	
//	ПараметрыВыгрузки.Вставить("СоответствиеСтруктурныеПодразделения", Соответствие);
//		
//КонецПроцедуры

//Функция СоответстиеВидовСубконто()
//	
//	Соответствие = Новый Соответствие;
//	Соответствие.Вставить("Подразделения", "Unit");
//	Соответствие.Вставить("БанковскиеСчета", "BankAccount");
//	Соответствие.Вставить("ДенежныеСредства", "Cashboxe");
//	Соответствие.Вставить("Доходы", "Revenue");  
//	Соответствие.Вставить("ДоходыБудущихПериодов", "RevenuesFuturePeriod");  
//	Соответствие.Вставить("НематериальныеАктивы", "IntangibleAsset"); 
//	Соответствие.Вставить("ОсновныеСредства", "FixedAsset");
//	Соответствие.Вставить("ОбъектыСтроительства", "ConstructionObject");
//	Соответствие.Вставить("ЦенныеБумаги", "Security");
//	Соответствие.Вставить("Номенклатура", "Nomenclature"); 
//	Соответствие.Вставить("НоменклатурныеГруппы", "NomenclatureGroup");
//	Соответствие.Вставить("Склады", "Warehouse");  
//	Соответствие.Вставить("Контрагенты", "Counterparty");  
//	Соответствие.Вставить("Договоры", "Contract");
//	Соответствие.Вставить("СтатьиДвиженияДенежныхСредств", "CashFlowItem"); 
//	Соответствие.Вставить("СтатьиЗатрат", "Expenditure"); 
//	Соответствие.Вставить("РасходыБудущихПериодов", "SpendingFuturePeriod");
//	Соответствие.Вставить("ВидыПлатежейВБюджетИФонды", "TypeOfPayments"); 
//	Соответствие.Вставить("ТипыНалогов", "TypeOfTaxes");  
//	Соответствие.Вставить("Резервы", "Reserve");
//	Соответствие.Вставить("ВидыАктивовИОбязательств", "TypeOfAssetsAndLiabilities");   
//	Соответствие.Вставить("РаботникиОрганизаций", "Individual");
//	Возврат Соответствие;
//	
//КонецФункции

//Функция ПолучитьИмяПланаСчетов()
//	Возврат "Типовой";	
//КонецФункции

////--------------------------------------------------------------------------------------
