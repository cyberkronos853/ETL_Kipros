&НаСервере
Процедура ОбновитьНаСервере()

	Запрос = Новый Запрос ("ВЫБРАТЬ
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка КАК Ссылка,
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка.ОбъектЕдиногоФормата КАК ОбъектЕдиногоФормата,
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.ОбъектСтруктурыМетаданных КАК ОбъектСтруктурыМетаданных,
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.КлючСвязи КАК КлючСвязи
	                       |ПОМЕСТИТЬ втОбъектыБазКВыгрузкеСтруктураФайлаИсточник
	                       |ИЗ
	                       |	Справочник.ОбъектыБазКВыгрузке.СтруктураФайла КАК ОбъектыБазКВыгрузкеСтруктураФайла
	                       |ГДЕ
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка.Владелец = &Источник
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ОбъектыБазКВыгрузке.Ссылка КАК Ссылка,
	                       |	ОбъектыБазКВыгрузке.ОбъектЕдиногоФормата КАК ОбъектЕдиногоФормата
	                       |ПОМЕСТИТЬ втОбъектыБазКВыгрузкеПриемник
	                       |ИЗ
	                       |	Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
	                       |ГДЕ
	                       |	ОбъектыБазКВыгрузке.Владелец = &Приемник
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка КАК Ссылка,
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка.ОбъектЕдиногоФормата КАК ОбъектЕдиногоФормата,
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.ОбъектСтруктурыМетаданных КАК ОбъектСтруктурыМетаданных,
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.КлючСвязи КАК КлючСвязи
	                       |ПОМЕСТИТЬ втОбъектыБазКВыгрузкеСтруктураФайлаПриемник
	                       |ИЗ
	                       |	Справочник.ОбъектыБазКВыгрузке.СтруктураФайла КАК ОбъектыБазКВыгрузкеСтруктураФайла
	                       |ГДЕ
	                       |	ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка.Владелец = &Приемник
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                       |	втОбъектыБазКВыгрузкеСтруктураФайлаИсточник.Ссылка КАК СсылкаИсточник,
	                       |	втОбъектыБазКВыгрузкеСтруктураФайлаИсточник.ОбъектЕдиногоФормата КАК ОбъектЕдиногоФормата,
	                       |	втОбъектыБазКВыгрузкеПриемник.Ссылка КАК СсылкаПриемник
	                       |ПОМЕСТИТЬ втГруппировка1
	                       |ИЗ
	                       |	втОбъектыБазКВыгрузкеСтруктураФайлаИсточник КАК втОбъектыБазКВыгрузкеСтруктураФайлаИсточник
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ втОбъектыБазКВыгрузкеПриемник КАК втОбъектыБазКВыгрузкеПриемник
	                       |		ПО втОбъектыБазКВыгрузкеСтруктураФайлаИсточник.ОбъектЕдиногоФормата = втОбъектыБазКВыгрузкеПриемник.ОбъектЕдиногоФормата
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	втГруппировка1.СсылкаИсточник КАК СсылкаИсточник,
	                       |	втГруппировка1.ОбъектЕдиногоФормата КАК ОбъектЕдиногоФормата,
	                       |	втГруппировка1.СсылкаПриемник КАК СсылкаПриемник,
	                       |	втОбъектыБазКВыгрузкеСтруктураФайлаИсточник.ОбъектСтруктурыМетаданных КАК ОбъектСтруктурыМетаданныхИсточник,
	                       |	втОбъектыБазКВыгрузкеСтруктураФайлаИсточник.КлючСвязи КАК КлючСвязиИсточник,
	                       |	втОбъектыБазКВыгрузкеСтруктураФайлаПриемник.ОбъектСтруктурыМетаданных КАК ОбъектСтруктурыМетаданныхПриемник,
	                       |	втОбъектыБазКВыгрузкеСтруктураФайлаПриемник.КлючСвязи КАК КлючСвязиПриемник,
	                       |	втОбъектыБазКВыгрузкеСтруктураФайлаПриемник.ОбъектСтруктурыМетаданных ЕСТЬ NULL КАК ИспользоватьВОбработке,
	                       |	втОбъектыБазКВыгрузкеСтруктураФайлаПриемник.ОбъектСтруктурыМетаданных ЕСТЬ NULL КАК служДоступенКВыбору
	                       |ИЗ
	                       |	втГруппировка1 КАК втГруппировка1
	                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыБазКВыгрузкеСтруктураФайлаИсточник КАК втОбъектыБазКВыгрузкеСтруктураФайлаИсточник
	                       |			ЛЕВОЕ СОЕДИНЕНИЕ втОбъектыБазКВыгрузкеСтруктураФайлаПриемник КАК втОбъектыБазКВыгрузкеСтруктураФайлаПриемник
	                       |			ПО втОбъектыБазКВыгрузкеСтруктураФайлаИсточник.ОбъектЕдиногоФормата = втОбъектыБазКВыгрузкеСтруктураФайлаПриемник.ОбъектЕдиногоФормата
	                       |				И втОбъектыБазКВыгрузкеСтруктураФайлаИсточник.ОбъектСтруктурыМетаданных.Имя = втОбъектыБазКВыгрузкеСтруктураФайлаПриемник.ОбъектСтруктурыМетаданных.Имя
	                       |		ПО втГруппировка1.СсылкаИсточник = втОбъектыБазКВыгрузкеСтруктураФайлаИсточник.Ссылка
	                       |			И втГруппировка1.ОбъектЕдиногоФормата = втОбъектыБазКВыгрузкеСтруктураФайлаИсточник.ОбъектЕдиногоФормата
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ОбъектЕдиногоФормата,
	                       |	КлючСвязиИсточник
	                       |АВТОУПОРЯДОЧИВАНИЕ"); 
	
	Запрос.УстановитьПараметр("Источник", Объект.База);
	Запрос.УстановитьПараметр("Приемник", БазаПриемник);
	
	тзДанныеСопоставления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить()
	ОбновитьНаСервере();    
	УстановитьОформлениеЭлементовФормы()
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементовФормы()
	
	ДоступностьЭлементаОбработатьДанные = Ложь;
	
	Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы["ГруппаСтраницаВладелец" + ?(НЕ ЗначениеЗаполнено(БазаПриемник), "НеВыбран", "")];
	Элементы.тзДанныеСопоставления.Видимость = ЗначениеЗаполнено(БазаПриемник);
	
	Для Каждого ЭлементКоллекции Из тзДанныеСопоставления Цикл
		
		Если ЭлементКоллекции.ИспользоватьВОбработке Тогда
			ДоступностьЭлементаОбработатьДанные = Истина; 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ФормаОбработатьДанные.Доступность = ЗначениеЗаполнено(БазаПриемник) И ДоступностьЭлементаОбработатьДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура БазаПриемникПриИзменении(Элемент) 
	ОбновитьДанныеВременныхДинамическихРеквизитов();  
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	УстановитьОформлениеЭлементовФормы(); 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	УстановитьУсловноеОформление();  
	
	Объект.База = Параметры.Ключ.База;
	КопироватьДанныеФормы(Параметры.дзСтруктураМетаданных, дзСтруктураМетаданныхИсточник);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементыУсловногоОформления = УсловноеОформление.Элементы;

	#Область служДоступенКВыбору   
	
		ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		ТекущийЭлементОформления.Использование = Истина;
		
		ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("тзДанныеСопоставления.служДоступенКВыбору");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
				
		ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);

		ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("тзДанныеСопоставления");  
		
		//-------------------------------------------------------------
		ПолеОформления.Использование = Истина; 
		ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		ТекущийЭлементОформления.Использование = Истина;
		
		ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("тзДанныеСопоставления.служДоступенКВыбору");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
				
		ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

		ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("тзДанныеСопоставленияИспользоватьВОбработке");
		ПолеОформления.Использование = Истина; 
		
	#КонецОбласти 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВременныхДинамическихРеквизитов() 
	
	Если ЗначениеЗаполнено(Объект.База) Тогда 
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеВременныхДинамическихРеквизитов", ИнтервалОжидания, Истина); 
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуПрогрессаОбработки(ПоказатьПроцессОбработки = Истина)
	
	Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = ?(ПоказатьПроцессОбработки, Элементы.ГруппаСтраницаВладелецОбновление, Элементы["ГруппаСтраницаВладелец" + ?(НЕ ЗначениеЗаполнено(БазаПриемник), "НеВыбран", "")]);		
	Элементы.ГруппаПанельНастроекИОтбора.Доступность = НЕ ПоказатьПроцессОбработки;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьДанныеДляДлительнойОперации(ИмяОбъектаКоллекции = "")  
	
	СтруктураПараметров = Новый Структура("КлючУникальности, СписокОбъектовКоллекции",
											КлючУникальности,
											Новый СписокЗначений); 
											
	Если НЕ ПустаяСтрока(ИмяОбъектаКоллекции) Тогда 
		СтруктураПараметров.СписокОбъектовКоллекции.Добавить(ИмяОбъектаКоллекции);											
	КонецЕсли;
			
	Возврат СтруктураПараметров
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеВременныхДинамическихРеквизитов()
	
    ИДЗадания  = "";
	ПараметрыЗапуска = ПодготовитьДанныеДляДлительнойОперации();
	
	УстановитьСтраницуПрогрессаОбработки();
		
	СтруктураФоновогоЗадания = ВыполнитьФоновоеЗаданиеОбновитьДанныеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИДЗадания =  СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.Интервал = 2; 
	
	//ДополнительныеПараметры = Новый Структура("КлючУникальности", КлючУникальности); 
	ДополнительныеПараметры = Новый Структура(); 
	
	//Ожидать завершения выполнение процедуры в фоновом задании и открыть форму ожидания длительной операции.
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания,
												Новый ОписаниеОповещения("ОбновитьДанныеВременныхДинамическихРеквизитовПроверкаВыполнения", ЭтотОбъект, ДополнительныеПараметры),
												ПараметрыОжидания);	 
		
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеВременныхДинамическихРеквизитов");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыСКД() 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект"); 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("БазаПриемник");
	
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл 
		
		ИмяПараметра = КлючИЗначение.Ключ;
		ЗначениеПараметра = Неопределено;   
		
		Если НЕ ОбработкаОбъект.Метаданные().Реквизиты.Найти(ИмяПараметра) = Неопределено Тогда 
			ЗначениеПараметра = Объект[ИмяПараметра]; 
		Иначе
			ЗначениеПараметра = ЭтаФорма[ИмяПараметра]; 
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("ДанныеФормыКоллекция") Тогда 
				ЗначениеПараметра = РеквизитФормыВЗначение(ИмяПараметра);
			КонецЕсли;
			
		КонецЕсли;  
		
		ИмяПараметра = СтрЗаменить(ИмяПараметра, "Приемник", "");
		СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
		
	КонецЦикла; 
	
	Возврат СтруктураПараметров
			
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхКоллекцийДляФоновогоЗадания(СписокОбъектовКоллекции)
	
	СтруктураДанных = Новый Структура; 
	
	СписокВременныхДинамическихРеквизитов = Новый СписокЗначений;
	СписокВременныхДинамическихРеквизитов.Добавить("дзСтруктураМетаданныхПриемник");
	
	Для Каждого ЗначениеСписка Из СписокВременныхДинамическихРеквизитов Цикл  
		
		ИмяОбъектаКоллекции = ЗначениеСписка.Значение;  
				
		ОбъектКоллекцииПриемник = РеквизитФормыВЗначение(ИмяОбъектаКоллекции);
		Если ТипЗнч(ОбъектКоллекцииПриемник) = Тип("ДеревоЗначений") Тогда 
			ОбъектКоллекцииПриемник.Строки.Очистить(); 
		ИначеЕсли ТипЗнч(ОбъектКоллекцииПриемник) = Тип("ТаблицаЗначений") Тогда 
			ОбъектКоллекцииПриемник.Очистить(); 
		КонецЕсли;
		
		ИмяОбъектаКоллекции = СтрЗаменить(ИмяОбъектаКоллекции, "Приемник", "");
		СтруктураДанных.Вставить(ИмяОбъектаКоллекции, ОбъектКоллекцииПриемник); 
		
	КонецЦикла;
	
	Возврат СтруктураДанных
	
КонецФункции	

&НаСервере
Функция ВыполнитьФоновоеЗаданиеОбновитьДанныеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыВыполнения = Новый Структура; 
	Для Каждого КлючИЗначение Из ПараметрыЗапуска Цикл 
		ПараметрыВыполнения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;   
	ПараметрыВыполнения.Вставить("СтруктураДанныхКоллекций", ПолучитьСтруктуруДанныхКоллекцийДляФоновогоЗадания(ПараметрыЗапуска.СписокОбъектовКоллекции));
	ПараметрыВыполнения.Вставить("ПараметрыСКД", ПолучитьПараметрыСКД());
	 	
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки", 					ОбработкаОбъект.Метаданные().Имя);
	ПараметрыЗадания.Вставить("ИмяМетода", 						"ОбработатьИтерациюОбновленияДанных");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", 			ПараметрыВыполнения);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", 			Ложь);
	//ДополнительнаяОбработкаСсылка =  Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ОбработкаОбъект.Синоним);
	//ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", 	ДополнительнаяОбработкаСсылка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Заголовок;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;
	
КонецФункции  

&НаКлиенте
Процедура ОбновитьДанныеВременныхДинамическихРеквизитовПроверкаВыполнения(Результат, ДополнительныеПараметры) Экспорт   
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ОбновитьДанныеДинамическихРеквизитовНаСервере(Результат);
		Обновить();
		УстановитьОформлениеЭлементовФормы()
	КонецЕсли; 
	
	Если НЕ Результат.Сообщения = Неопределено Тогда 
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			ПроксиСообщение = Новый СообщениеПользователю;
			ПроксиСообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			ПроксиСообщение.Текст = Сообщение.Текст;
			ПроксиСообщение.Сообщить();
		КонецЦикла;	  
	КонецЕсли; 
	
	УстановитьСтраницуПрогрессаОбработки(Ложь); 
	УстановитьОформлениеЭлементовФормы();
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДинамическихРеквизитовНаСервере(Результат)   
	
	Данные = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);  
	
	Для Каждого КлючИЗначение Из Данные Цикл 
		ИмяРеквизита = КлючИЗначение.Ключ;
		
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "дзСтруктураМетаданных", "дзСтруктураМетаданныхПриемник");  
		
		ЗначениеВРеквизитФормы(КлючИЗначение.Значение, ИмяРеквизита);       
	КонецЦикла;
				
КонецПроцедуры

&НаКлиенте
Процедура тзДанныеСопоставленияИспользоватьВОбработкеПриИзменении(Элемент)
	УстановитьОформлениеЭлементовФормы()
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеНаСервере()
	
	ДанныеОшибок = Новый Соответствие; 
	
	КоллекцияСтрокИсточник = РеквизитФормыВЗначение("дзСтруктураМетаданныхИсточник");
	КоллекцияСтрокПриемник = РеквизитФормыВЗначение("дзСтруктураМетаданныхПриемник");
	
	Для Каждого СтрокаТЗ Из тзДанныеСопоставления Цикл
				
		Если НЕ СтрокаТЗ.ИспользоватьВОбработке Тогда
			Продолжить;
		КонецЕсли;
				
		ОбъектБазыКВыгрузке = Справочники.ОбъектыБазКВыгрузке.СоздатьЭлемент();  
		ОбъектБазыКВыгрузке.Владелец = БазаПриемник;    
		
		Если ЗначениеЗаполнено(СтрокаТЗ.СсылкаПриемник) Тогда 
			ОбъектБазыКВыгрузке = СтрокаТЗ.СсылкаПриемник.ПолучитьОбъект();
		КонецЕсли; 
		
		Если ОбъектБазыКВыгрузке.ЭтоНовый() Тогда 
			ЗаполнитьЗначенияСвойств(ОбъектБазыКВыгрузке, СтрокаТЗ.СсылкаИсточник, "Наименование, ПолноеНаименование, НаименованиеЛатиница, Выгружать");  
		КонецЕсли;  
		
		ОбъектБазыКВыгрузке.ОбъектЕдиногоФормата = СтрокаТЗ.ОбъектЕдиногоФормата;
		ОбъектБазыКВыгрузке.Пояснение = "Автоматически обновлен из формы конструктора (трансляция настроек из структуры ИБ '" + СокрЛП(Объект.База) + "'. " + ТекущаяДата() + ")";
		
		СтрокаСтруктураФайла = ОбъектБазыКВыгрузке.СтруктураФайла.Добавить();
		СтруктураОтбора = Новый Структура("ОбъектОписанияМетаданных", СтрокаТЗ.ОбъектСтруктурыМетаданныхИсточник);
		МассивНайденныхСтрокИсточник = КоллекцияСтрокИсточник.Строки.НайтиСтроки(СтруктураОтбора, Истина);  
		
		Для Каждого ЗначениеМассиваИсточник Из МассивНайденныхСтрокИсточник Цикл  
			
			СтруктураОтбора = Новый Структура("служХеш", ЗначениеМассиваИсточник.служХеш);
			МассивНайденныхСтрокПриемник = КоллекцияСтрокПриемник.Строки.НайтиСтроки(СтруктураОтбора, Истина); 
			
			Для Каждого ЗначениеМассиваПриемник Из МассивНайденныхСтрокПриемник Цикл
				СтрокаСтруктураФайла.ОбъектСтруктурыМетаданных = ЗначениеМассиваПриемник.ОбъектОписанияМетаданных;
				СтрокаСтруктураФайла.КлючСвязи = СтрокаТЗ.КлючСвязиИсточник;
			КонецЦикла;
			
		КонецЦикла;
				
		УстановитьПривилегированныйРежим(Истина);  
		
		Попытка
			ОбъектБазыКВыгрузке.Записать();       
		Исключение 
			ДанныеОшибок.Вставить(СтрокаТЗ, ОписаниеОшибки());	
		КонецПопытки;
			
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДанныеОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обработать данные строки: '" + КлючИЗначение.Ключ + "' (" + КлючИЗначение.Значение + ")",,, "тзДанныеСопоставления");		
	КонецЦикла; 
	
	Возврат Новый Структура("ЕстьОшибки", ЗначениеЗаполнено(ДанныеОшибок));
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДанные(Команда)  
	
	РезультатОбработки = ОбработатьДанныеНаСервере();
	Обновить();
	
	ПоказатьОповещениеПользователя(Окно.Заголовок,,"Обработка завершена" + ?(РезультатОбработки.ЕстьОшибки, " с ошибками", ""), БиблиотекаКартинок[?(РезультатОбработки.ЕстьОшибки, "Предупреждение32", "Успешно32")], СтатусОповещенияПользователя.Информация, ЭтаФорма.КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)   
	
	ОбъектИтерации = тзДанныеСопоставления;
		
	Для Каждого ЭлементКоллекции Из ОбъектИтерации Цикл 
		
		Если НЕ ЭлементКоллекции.служДоступенКВыбору Тогда
			Продолжить;
		КонецЕсли;   
		
		УстановитьЗначениеФлажкаЭлементаДерева("ИспользоватьВОбработке", Ложь, ЭлементКоллекции);
	КонецЦикла;
	
	УстановитьОформлениеЭлементовФормы()
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	ОбъектИтерации = тзДанныеСопоставления;
		
	Для Каждого ЭлементКоллекции Из ОбъектИтерации Цикл
		
		Если НЕ ЭлементКоллекции.служДоступенКВыбору Тогда
			Продолжить;
		КонецЕсли;   
		
		УстановитьЗначениеФлажкаЭлементаДерева("ИспользоватьВОбработке", Истина, ЭлементКоллекции);
	КонецЦикла;  
	
	УстановитьОформлениеЭлементовФормы()
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьЗначениеФлажкаЭлементаДерева(ИмяФлажка, ЗначениеФлажка, ЭлементКоллекции)
	
	ЭлементКоллекции[ИмяФлажка] = ЗначениеФлажка;
	
КонецФункции
