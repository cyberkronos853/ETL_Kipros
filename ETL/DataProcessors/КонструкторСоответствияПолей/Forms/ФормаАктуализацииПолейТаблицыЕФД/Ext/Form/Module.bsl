&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОформлениеЭлементовФормы();
	ОбновитьДанныеВременныхДинамическихРеквизитов();  
	
КонецПроцедуры   

&НаКлиенте
Процедура ОбновитьДанныеВременныхДинамическихРеквизитов() 
	
	Если ЗначениеЗаполнено(Объект.База) Тогда 
		Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы.ГруппаСтраницаЦелевойОбъектОбновление;     
		
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.5);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеВременныхДинамическихРеквизитов", ИнтервалОжидания, Истина); 
	КонецЕсли; 
		
КонецПроцедуры  

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеВременныхДинамическихРеквизитов()
	
	Для Каждого ЗначениеСписка Из СписокЗависимыхВременныхДинамическихРеквизитов Цикл 
		ОбновитьДанныеВременнойКоллекцииФормы(ЗначениеСписка.Значение);   
	КонецЦикла; 
	
	УстановитьОформлениеЭлементовФормы();
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "дзСтруктураМетаданных",, Истина); 
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеВременныхДинамическихРеквизитов");
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьДанныеВременнойКоллекцииФормы(ИмяОбъектаКоллекции)
		
	ОбновитьСоставПолей(ИмяОбъектаКоллекции); 
	
	Если ИмяОбъектаКоллекции = "дзСтруктураМетаданных" Тогда 
		
		ОбработатьОбъектКоллекцииПослеПолученияДанных(ИмяОбъектаКоллекции, "ПризнакДоступенКВыбору");
		ОбработатьОбъектКоллекцииПослеПолученияДанных(ИмяОбъектаКоллекции, "Транслит");
		ОбработатьОбъектКоллекцииПослеПолученияДанных(ИмяОбъектаКоллекции, "ПризнакСуществуетВПриемнике");  
		ОбработатьОбъектКоллекцииПослеПолученияДанных(ИмяОбъектаКоллекции, "ПредставлениеТипаПоля");  
		ОбработатьОбъектКоллекцииПослеПолученияДанных(ИмяОбъектаКоллекции, "ТипПоля");  
		
	КонецЕсли;
		
КонецПроцедуры    

&НаСервере 
Функция ЭтоОбъектПеречисления(ОбъектОписанияМетаданных) 
	Возврат ОбъектОписанияМетаданных.Тип = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Перечисление")
КонецФункции

&НаКлиенте
Процедура УстановитьОформлениеЭлементовФормы()
		
	Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы.ГруппаСтраницаЦелевойОбъект;  
	Элементы.ФормаОбработатьДанныеСтрок.Доступность = ЭтоОбъектПеречисления(ОбъектОписанияМетаданных) ИЛИ ГотовностьКОбработке(дзСтруктураМетаданных);
	
	Элементы.ГруппаОбъектЕдиногоФорматаДанных.Заголовок = "Параметры таблицы (" + ?(ЗначениеЗаполнено(ОбъектЕдиногоФорматаДанных), "элемент существует в ИБ", "к созданию") + ")";  
	
	Если ЗначениеЗаполнено(ОбъектЕдиногоФорматаДанных) Тогда 
		Элементы.ГруппаОбъектЕдиногоФорматаДанных.Скрыть();      
		Элементы.ГруппаОбъектЕдиногоФорматаДанных.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ОбъектЕдиногоФорматаДанных.РасширеннаяПодсказка.Заголовок = "Элемент отсутствует в ИБ, подготовлен к созданию";
	КонецЕсли;
	
	Элементы.ОбъектЕдиногоФорматаДанныхРодитель.Видимость = ЗначениеЗаполнено(ОбъектЕдиногоФорматаДанныхРодитель);
	
КонецПроцедуры   

&НаКлиенте
Функция ГотовностьКОбработке(ОбъектИтерации)
	
	ГотовностьКОбработке = Ложь;                                                       
	
	Для Каждого ЭлементКоллекции Из ОбъектИтерации.ПолучитьЭлементы() Цикл
		
		Если НЕ ГотовностьКОбработке Тогда 
			
			Если ЭлементКоллекции.ИспользоватьВОбработке Тогда //И ЗначениеЗаполнено(ЭлементКоллекции.ТипПоля) Тогда 
				Возврат Истина;
			Иначе
				ГотовностьКОбработке = ГотовностьКОбработке(ЭлементКоллекции);
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если ГотовностьКОбработке Тогда  
			Возврат Истина
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГотовностьКОбработке
		
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для Каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИмяРеквизита = Реквизит.Имя;
		
		Если Параметры.Свойство(ИмяРеквизита) Тогда 
			ЭтаФорма[ИмяРеквизита] = Параметры[ИмяРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.База = Параметры.Ключ.База;  
	
	ИнициализироватьСписокЗависимыхВременныхДинамическихРеквизитов();
	
	ИмяОбъектаКоллекции = "дзСтруктураЕдиногоФорматаДанных";
	ИнициализироватьДинамическийРеквизитКоллекцииФормы(ИмяОбъектаКоллекции, Новый ОписаниеТипов("ДеревоЗначений"));  
	
	Если ЗначениеЗаполнено(ОбъектЕдиногоФорматаДанных) Тогда 
		
		Наименование = СокрЛП(ОбъектЕдиногоФорматаДанных.Наименование);	
		Синоним = СокрЛП(ОбъектЕдиногоФорматаДанных.Синоним);	
		Пояснение = СокрЛП(ОбъектЕдиногоФорматаДанных.Пояснение);
		
	Иначе
				
		Синоним = СокрЛП(ОбъектОписанияМетаданных.Синоним);	
		Пояснение = "Создан/обновлен автоматически средствами конструктора соответствия полей (" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + ")";
		
	КонецЕсли;	
	
	УстановитьУсловноеОформление();
		
КонецПроцедуры  

&НаСервере
Процедура ИнициализироватьСписокЗависимыхВременныхДинамическихРеквизитов()
	
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("дзСтруктураЕдиногоФорматаДанных");
	СписокРеквизитов.Добавить("дзСтруктураМетаданных");
	
	СписокЗависимыхВременныхДинамическихРеквизитов = СписокРеквизитов;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементыУсловногоОформления = УсловноеОформление.Элементы;

	#Область ИспользоватьВОбработке   
	
		ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		ТекущийЭлементОформления.Использование = Истина;
		
		ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных.служДоступенКВыбору");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;  
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных.служСуществуетВПриемнике");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
				
		ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

		ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданныхИспользоватьВОбработке");
		ПолеОформления.Использование = Истина; 
		
	#КонецОбласти   
	
	#Область ЦветТекста   
	
		//-
		ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		ТекущийЭлементОформления.Использование = Истина;
		
		ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных.служСуществуетВПриемнике");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);

		ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных");
		ПолеОформления.Использование = Истина;     
		
	#КонецОбласти   
		
	#Область ОтметкаНезаполненного   
	
		//-
		ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		ТекущийЭлементОформления.Использование = Истина;
		
		ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных.служСуществуетВПриемнике");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;   
				
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных.ИспользоватьВОбработке");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных.ТипПоля");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

		ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданныхТипПоля");
		ПолеОформления.Использование = Истина;  
		
	#КонецОбласти 
	
	#Область ТолькоПросмотр   
		
		//-
		ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		ТекущийЭлементОформления.Использование = Истина;
		
		ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных.служСуществуетВПриемнике");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;   
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных.служДоступенКВыбору");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
		ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

		ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданныхГруппаТипПоля");
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданныхИмяПоля");
		//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданныхИмяПоляSQL");
		ПолеОформления.Использование = Истина; 
				
	#КонецОбласти  
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьСоставПолей(ИмяОбъектаКоллекции)
		
	ИмяСКД = СтрЗаменить(ИмяОбъектаКоллекции, "дз", "");
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбъектКоллекцииПриемник = РеквизитФормыВЗначение(ИмяОбъектаКоллекции);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяОбъектаКоллекции", ИмяОбъектаКоллекции);
	СтруктураПараметров.Вставить("ПараметрыСКД", ПолучитьПараметрыСКД());
	СтруктураПараметров.Вставить("ОбъектКоллекцииПриемник", ОбъектКоллекцииПриемник);
	
	ОбработкаОбъект.ПолучитьДанныеВременнойКоллекцииФормы(Новый Структура("ИмяОбъектаКоллекции, ПараметрыСКД, ОбъектКоллекцииПриемник", 
																ИмяОбъектаКоллекции,
																ПолучитьПараметрыСКД(),
																ОбъектКоллекцииПриемник));
		
	Если ИмяОбъектаКоллекции = "дзСтруктураМетаданных" Тогда 
    	ОбработатьОбъектКоллекцииПослеОбновления(ОбъектКоллекцииПриемник);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектКоллекцииПриемник, ИмяОбъектаКоллекции);       
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьОбъектКоллекцииПослеОбновления(ОбъектКоллекции) 
	
	МассивУдаляемых = Новый Массив;
	СтрокаВидСвойстваТЧ = ОбъектКоллекции.Строки.Найти(ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть"), "ОбъектОписанияМетаданных", Истина);
	
	Если НЕ СтрокаВидСвойстваТЧ = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбъектЕдиногоФорматаДанныхРодитель) Тогда
			МассивУдаляемых.Добавить(СтрокаВидСвойстваТЧ);
		Иначе
			Для Каждого СтрокаДерева Из СтрокаВидСвойстваТЧ.Родитель.Строки Цикл  
				
				Если НЕ СтрокаДерева = СтрокаВидСвойстваТЧ Тогда 
					МассивУдаляемых.Добавить(СтрокаДерева);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрокаДерева Из СтрокаВидСвойстваТЧ.Строки Цикл  
				
				Если НЕ СтрокаДерева.ОбъектОписанияМетаданных = ОбъектОписанияМетаданных Тогда 
					МассивУдаляемых.Добавить(СтрокаДерева);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
						
	КонецЕсли; 
	
	Для Каждого ЗначениеМассива Из МассивУдаляемых Цикл 
		ЗначениеМассива.Родитель.Строки.Удалить(ЗначениеМассива);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ОбработатьОбъектКоллекцииПослеПолученияДанных(ИмяОбъектаКоллекции, ИмяМетода) 
	
	ОбъектКоллекции = РеквизитФормыВЗначение(ИмяОбъектаКоллекции);
	
	Выполнить("Заполнить" + ИмяМетода + "(ОбъектКоллекции)"); 
	
	ЗначениеВРеквизитФормы(ОбъектКоллекции, ИмяОбъектаКоллекции);
			
КонецФункции  

&НаСервере
Функция ПолучитьПараметрыСКД() 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("База", Объект.База);
	СтруктураПараметров.Вставить("ОбъектОписанияМетаданных", ОбъектОписанияМетаданныхРодитель);
	СтруктураПараметров.Вставить("ОбъектЕдиногоФорматаДанных", ОбъектЕдиногоФорматаДанных);
	
	Возврат СтруктураПараметров
			
КонецФункции 

&НаСервере
Функция ЗаполнитьТранслит(ОбъектИтерации)
	
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого СтрокаДерева Из ОбъектИтерации.Строки Цикл  
		
		Если СтрокаДерева.служДоступенКВыбору Тогда
			
			ИмяПоля = СокрЛП(СтрокаДерева.ОбъектОписанияМетаданных.Имя);
			
			СтрокаДерева.ИмяПоля = ИмяПоля;
			//СтрокаДерева.ИмяПоляSQL = ОбработкаОбъект.Транслит(ИмяПоля);  
			СтрокаДерева.ИмяПоляSQL = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяПоля)
			
		КонецЕсли;
		
		ЗаполнитьТранслит(СтрокаДерева)	
		
	КонецЦикла;
				
КонецФункции 

&НаСервере
Функция ЗаполнитьПризнакДоступенКВыбору(ОбъектИтерации)
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого СтрокаДерева Из ОбъектИтерации.Строки Цикл
		
		СтрокаДерева.служДоступенКВыбору = СтрокаДерева.Уровень() > 1 
											И ТипЗнч(СтрокаДерева.ОбъектОписанияМетаданных) = Тип("СправочникСсылка.СтруктураМетаданных") И НЕ ОбработкаОбъект.ПолучитьМассивДоступныхВидовКВыбору().Найти(СтрокаДерева.ОбъектОписанияМетаданных.Вид) = Неопределено;
												
		ЗаполнитьПризнакДоступенКВыбору(СтрокаДерева)	
		
	КонецЦикла;
				
КонецФункции   

&НаСервере
Функция ЗаполнитьПризнакСуществуетВПриемнике(ОбъектИтерации)
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого СтрокаДерева Из ОбъектИтерации.Строки Цикл
													
		Если СтрокаДерева.служДоступенКВыбору Тогда
			
			СтрокаСтруктураЕдиногоФорматаДанных = РеквизитФормыВЗначение("дзСтруктураЕдиногоФорматаДанных").Строки.Найти(ОбъектЕдиногоФорматаДанных, "Ссылка");
			
			Если НЕ СтрокаСтруктураЕдиногоФорматаДанных = Неопределено Тогда 
				СтрокаДерева.служСуществуетВПриемнике = ПолеСуществуетВПриемнике(СтрокаДерева.ИмяПоляSQL); 
			КонецЕсли;
			
		КонецЕсли;
	
		ЗаполнитьПризнакСуществуетВПриемнике(СтрокаДерева)	
		
	КонецЦикла;
				
КонецФункции 

&НаСервере
Функция ПолеСуществуетВПриемнике(ИмяПоляSQL)  
	
	СтрокаСтруктураЕдиногоФорматаДанных = РеквизитФормыВЗначение("дзСтруктураЕдиногоФорматаДанных").Строки.Найти(ОбъектЕдиногоФорматаДанных, "Ссылка");
	
	Если НЕ СтрокаСтруктураЕдиногоФорматаДанных = Неопределено Тогда 
		Возврат НЕ СтрокаСтруктураЕдиногоФорматаДанных.Строки.Найти(СокрЛП(ИмяПоляSQL), "ИмяПоляSQL") = Неопределено;	
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

&НаСервере
Функция ЗаполнитьПредставлениеТипаПоля(ОбъектИтерации)
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого СтрокаДерева Из ОбъектИтерации.Строки Цикл
													
		Если СтрокаДерева.служДоступенКВыбору Тогда
			
			ПредставлениеТипаПоля = "";
			
			Для Каждого СтрокаТипа Из СтрокаДерева.ОбъектОписанияМетаданных.Типы Цикл 
				
				Суффикс = "";
				ПредставлениеТипаПоля = СокрЛП(СтрокаТипа.Тип);
				
				Если НЕ ЗначениеЗаполнено(СтрокаТипа.Тип.Тип) Тогда
					Продолжить;
				КонецЕсли;
				
				МетаданныеТипа = СтрокаТипа.Тип.Тип.Метаданные();
				МенеджерМетаданных = Перечисления[МетаданныеТипа.Имя];
				Индекс = МенеджерМетаданных.Индекс(СтрокаТипа.Тип.Тип);
				ИмяТипа = МетаданныеТипа.ЗначенияПеречисления.Получить(Индекс).Имя;
				
				Если СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.Строка Тогда
					//ПредставлениеТипаПоля = ИмяТипа + "(" + ?(СтрокаТипа.Тип.КвалификаторыСтроки_Длина = 0, "Неогр", СокрЛП(СтрокаТипа.Тип.КвалификаторыСтроки_Длина)) + ")"; 
					ПредставлениеТипаПоля = ИмяТипа + "(" + СокрЛП(СтрокаДерева.ОбъектОписанияМетаданных.КвалификаторыСтроки_Длина) + ")"; 
				ИначеЕсли СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.Число Тогда
					ПредставлениеТипаПоля = ИмяТипа + "(" + ?(СтрокаДерева.ОбъектОписанияМетаданных.КвалификаторыЧисла_Длина = 0, "Неогр", СокрЛП(СтрокаДерева.ОбъектОписанияМетаданных.КвалификаторыЧисла_Длина) + "," + СокрЛП(СтрокаДерева.ОбъектОписанияМетаданных.КвалификаторыЧисла_Точность)) + ")"; 
				ИначеЕсли СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.Дата
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.Булево Тогда
						ПредставлениеТипаПоля = ИмяТипа; 
				ИначеЕсли СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.БизнесПроцесс
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.ВидСубконто
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.Документ
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.Задача
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.Календарь
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.Перечисление
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.ПланВидовРасчета
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.ПланВидовХарактеристик
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.ПланОбмена
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.ПланСчетов
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.Справочник
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.ТочкаМаршрутаБизнесПроцесса
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.УникальныйИдентификатор Тогда
						ПредставлениеТипаПоля = "GUID"; 
				ИначеЕсли СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.РегистрБухгалтерии
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.РегистрНакопления
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.РегистрРасчета
					ИЛИ СтрокаТипа.Тип.Тип = Перечисления.ТипыОбъектов.РегистрСведений Тогда
					   	ИмяТипа = СтрЗаменить(ИмяТипа, "Регистр", "");
					
						ПредставлениеТипаПоля = "ЗаписьРегистра" + СокрЛП(ИмяТипа); 
				КонецЕсли;
				
				//Только первый. Пересмотреть подход.
				Прервать;
				
			КонецЦикла;
			
			СтрокаДерева.ПредставлениеТипаПоля = " <" + ПредставлениеТипаПоля + ">";
			
		КонецЕсли;
	
		ЗаполнитьПредставлениеТипаПоля(СтрокаДерева)	
		
	КонецЦикла;
				
КонецФункции 

&НаСервере
Функция ЗаполнитьТипПоля(ОбъектИтерации)
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТипыПолейSQL.Ссылка КАК Ссылка,
	|	ТипыПолейSQL.Наименование КАК Наименование,
	|	ТипыПолейSQL.GUID КАК GUID
	|ИЗ
	|	Справочник.ТипыПолейSQL КАК ТипыПолейSQL");
	
	врТипыПолейSQL = Запрос.Выполнить().Выгрузить();
	врТипыПолейSQL.Индексы.Добавить("Наименование, GUID");
	
	Для Каждого СтрокаДерева Из ОбъектИтерации.Строки Цикл
													
		Если СтрокаДерева.служДоступенКВыбору Тогда
			
			ПредставлениеТипаПоля = СокрЛП(СтрокаДерева.ПредставлениеТипаПоля);
			ПредставлениеТипаПоля = СтрЗаменить(ПредставлениеТипаПоля, "<", "");
			ПредставлениеТипаПоля = СтрЗаменить(ПредставлениеТипаПоля, ">", ""); 
			ПредставлениеТипаПоля = СтрЗаменить(ПредставлениеТипаПоля, "Неогр", "255"); 
			ПредставлениеТипаПоля = СтрЗаменить(ПредставлениеТипаПоля, "GUID", "Строка(36)"); 
			
			МассивНайденных = врТипыПолейSQL.НайтиСтроки(Новый Структура("Наименование, GUID", 
																			СокрЛП(ПредставлениеТипаПоля),
																			НЕ СтрЧислоВхождений(СтрокаДерева.ПредставлениеТипаПоля, "GUID") = 0));
																			
			Для Каждого ЗначениеМассива Из МассивНайденных Цикл 
																				
				СтрокаДерева.ТипПоля = ЗначениеМассива.Ссылка;																	
																				
			КонецЦикла;																			
						
		КонецЕсли;
	
		ЗаполнитьТипПоля(СтрокаДерева)	
		
	КонецЦикла;
				
КонецФункции 

&НаСервере
Процедура ИнициализироватьДинамическийРеквизитКоллекцииФормы(ИмяОбъектаКоллекции, ОписаниеТиповОбъекта)
	
	КоллекцияДанных = ОписаниеТиповОбъекта.ПривестиЗначение();
	ИнициализироватьРеквизитыКоллекцииФормы(ИмяОбъектаКоллекции, КоллекцияДанных);

	Если ИмяОбъектаКоллекции = "дзСтруктураЕдиногоФорматаДанных" Тогда   
		
		КоллекцияДанных.Колонки.Добавить("Ссылка", 								Новый ОписаниеТипов("СправочникСсылка.ЕдиныйФорматДанных"));
		КоллекцияДанных.Колонки.Добавить("ИмяПоля", 							Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
		КоллекцияДанных.Колонки.Добавить("ИмяПоляSQL", 							Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
	ИнициализироватьРеквизитыКоллекцииФормы(ИмяОбъектаКоллекции, КоллекцияДанных);     
	
	ЗначениеВРеквизитФормы(КоллекцияДанных, ИмяОбъектаКоллекции);
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыКоллекцииФормы(ИмяРеквизита, ИнициализируемыеДанные)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	Если НЕ РеквизитСуществует(ИмяРеквизита) Тогда
		МассивДобавляемыхТипов = Новый Массив;
		МассивДобавляемыхТипов.Добавить(ТипЗнч(ИнициализируемыеДанные));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов(МассивДобавляемыхТипов)));
	КонецЕсли;
	
	Для Каждого Колонка Из ИнициализируемыеДанные.Колонки Цикл
		
		Если РеквизитСуществует(Колонка.Имя, ИмяРеквизита) Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяРеквизита));
				
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивДобавляемыхРеквизитов) Тогда 
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция РеквизитСуществует(ИмяРеквизита, ИмяРеквизитаРодителя = "")
	
	РеквизитСуществует = Ложь;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаРодителя) Тогда 
		МассивПодчиненныхРеквизитов = ПолучитьРеквизиты(ИмяРеквизитаРодителя);
	Иначе
		МассивПодчиненныхРеквизитов = ПолучитьРеквизиты();
	КонецЕсли;
	
	Для Каждого ПодчиненныйРеквизит Из МассивПодчиненныхРеквизитов Цикл
		Если ПодчиненныйРеквизит.Имя = ИмяРеквизита Тогда 
			РеквизитСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитСуществует;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеСтрокНаСервере()
	
	МетаданныеПеречисленияВидыТаблицSQL = Метаданные.Перечисления.ВидыТаблицSQL;   
	
	Если НЕ ЗначениеЗаполнено(ОбъектЕдиногоФорматаДанных) Тогда    
		
		ОбъектЕдиногоФорматаДанныхКОбработке = Справочники.ЕдиныйФорматДанных.СоздатьЭлемент(); 
		ОбъектЕдиногоФорматаДанныхКОбработке.Наименование = Наименование;
		ОбъектЕдиногоФорматаДанныхКОбработке.Синоним = Синоним;
		ОбъектЕдиногоФорматаДанныхКОбработке.Пояснение = Пояснение;
		ОбъектЕдиногоФорматаДанныхКОбработке.ЕстьВременнаяТаблица = Истина;

		ИмяПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(?(ЗначениеЗаполнено(ОбъектОписанияМетаданных.Тип), ОбъектОписанияМетаданных.Тип, ОбъектОписанияМетаданных.Вид));
		НайденноеЗначение = МетаданныеПеречисленияВидыТаблицSQL.ЗначенияПеречисления.Найти(ИмяПеречисления); 
		
		Если НЕ НайденноеЗначение = Неопределено Тогда 
			Индекс = МетаданныеПеречисленияВидыТаблицSQL.ЗначенияПеречисления.Индекс(НайденноеЗначение);
			ОбъектЕдиногоФорматаДанныхКОбработке.ВидТаблицы = Перечисления.ВидыТаблицSQL.Получить(Индекс);
		Иначе
			ОбъектЕдиногоФорматаДанныхКОбработке.ВидТаблицы = Перечисления.ВидыТаблицSQL.Справочник;
		КонецЕсли;
		
		ОбъектЕдиногоФорматаДанныхКОбработке.ОсновнаяТаблица = ОбъектЕдиногоФорматаДанныхРодитель;
				
	Иначе	
		ОбъектЕдиногоФорматаДанныхКОбработке = ОбъектЕдиногоФорматаДанных.ПолучитьОбъект();
	КонецЕсли;
	
	ОбработатьПоляЕдиногоФорматаДанных(ОбъектЕдиногоФорматаДанныхКОбработке);
	
	Если ОбъектЕдиногоФорматаДанныхКОбработке.Модифицированность() Тогда 
		ОбъектЕдиногоФорматаДанныхКОбработке.Записать();                     
	КонецЕсли;
	
	ОбъектЕдиногоФорматаДанных = ОбъектЕдиногоФорматаДанныхКОбработке.Ссылка;

КонецПроцедуры 

&НаСервере
Процедура ОбработатьПоляЕдиногоФорматаДанных(ОбъектЕдиногоФорматаДанных, ОбъектИтерации = Неопределено)  
	
	Если ОбъектИтерации = Неопределено Тогда
		ОбъектИтерации = РеквизитФормыВЗначение("дзСтруктураМетаданных");
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ОбъектИтерации.Строки Цикл
		
		Если СтрокаДерева.ИспользоватьВОбработке Тогда
			
			ПолеСтруктурыТаблицыSQL = ОбъектЕдиногоФорматаДанных.СтруктураТаблицыSQL.Добавить();
			ПолеСтруктурыТаблицыSQL.ИмяПоля 	= СокрЛП(СтрокаДерева.ИмяПоля);
			ПолеСтруктурыТаблицыSQL.ИмяПоляSQL 	= СокрЛП(СтрокаДерева.ИмяПоляSQL);
			ПолеСтруктурыТаблицыSQL.Синоним 	= СокрЛП(СтрокаДерева.Синоним);
			ПолеСтруктурыТаблицыSQL.ТипПоля 	= СтрокаДерева.ТипПоля; 
			
			Сообщить("Добавлены данные поля '" + ПолеСтруктурыТаблицыSQL.ИмяПоля + "' (" + ПолеСтруктурыТаблицыSQL.ИмяПоляSQL + ")");
			
		КонецЕсли;   
		
		ОбработатьПоляЕдиногоФорматаДанных(ОбъектЕдиногоФорматаДанных, СтрокаДерева)   
		
	КонецЦикла;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСтрок(Команда)  

	Если НЕ ПроверитьЗаполнение() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработатьДанныеСтрокНаСервере();   
	ОбновитьДанныеВременныхДинамическихРеквизитов();
	
	ПоказатьОповещениеПользователя(Окно.Заголовок,,"Обработка завершена", БиблиотекаКартинок.Успешно32, СтатусОповещенияПользователя.Информация, ЭтаФорма.КлючУникальности);

КонецПроцедуры

&НаКлиенте
Процедура дзСтруктураМетаданныхИспользоватьВОбработкеПриИзменении(Элемент)
	УстановитьОформлениеЭлементовФормы()
КонецПроцедуры

&НаКлиенте
Процедура дзСтруктураМетаданныхИмяПоляSQLПриИзменении(Элемент)
	
	ТекДанные = Элементы.дзСтруктураМетаданных.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	ТекДанные.служСуществуетВПриемнике = ПолеСуществуетВПриемнике(ТекДанные.ИмяПоляSQL);
	
	Если ТекДанные.служСуществуетВПриемнике Тогда 
		Если ТекДанные.ИспользоватьВОбработке Тогда
			ТекДанные.ИспользоватьВОбработке = Ложь;  
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОформлениеЭлементовФормы()
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТипыПолей(Команда)
	
	ОбработатьОбъектКоллекцииПослеПолученияДанных("дзСтруктураМетаданных", "ТипПоля");  
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "дзСтруктураМетаданных",, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)  
	
	СтандартнаяОбработка = Ложь;
	Закрыть(ОбъектЕдиногоФорматаДанных);
	
КонецПроцедуры  

&НаКлиенте
Процедура ПередЗакрытиемОбработкаОтвета(Результат, Параметры) Экспорт   
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("дзСтруктураМетаданных.ТипПоля"));
	
	
	МассивОшибочныхСтрок = Новый Массив;
	ОбъектКоллекции = РеквизитФормыВЗначение("дзСтруктураМетаданных");
	
	ПроверитьЗаполнениеДанныхКоллекцииСтрокДерева(ОбъектКоллекции, МассивОшибочныхСтрок);
		
	Отказ = ЗначениеЗаполнено(МассивОшибочныхСтрок);
	
	Если Отказ Тогда 
		
		Для Каждого ЗначениеМассива Из МассивОшибочныхСтрок Цикл
			Сообщить("Не заполнен тип поля в строке '" + ЗначениеМассива.Синоним + "'");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеДанныхКоллекцииСтрокДерева(КоллекцияСтрокДерева, МассивОшибочныхСтрок)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрокДерева.Строки Цикл   
								
		Если СтрокаДерева.ИспользоватьВОбработке
			И НЕ ЗначениеЗаполнено(СтрокаДерева.ТипПоля) Тогда
				МассивОшибочныхСтрок.Добавить(СтрокаДерева.ОбъектОписанияМетаданных);
		КонецЕсли;
		
		ПроверитьЗаполнениеДанныхКоллекцииСтрокДерева(СтрокаДерева, МассивОшибочныхСтрок)	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТипыПолейНаСервере()
	
	тзСоответствиеКОбработке = Новый ТаблицаЗначений;
	тзСоответствиеКОбработке.Колонки.Добавить("ПредставлениеТипаПоля", Новый ОписаниеТипов("Строка"));
	тзСоответствиеКОбработке.Колонки.Добавить("ТипПоля", Новый ОписаниеТипов("СправочникСсылка.ТипыПолейSQL"));
	
	ОбъектКоллекции = РеквизитФормыВЗначение("дзСтруктураМетаданных");
		
	Для Каждого СтрокаДерева Из ОбъектКоллекции.Строки.НайтиСтроки(Новый Структура("ИспользоватьВОбработке, ТипПоля", Истина, Справочники.ТипыПолейSQL.ПустаяСсылка()), Истина) Цикл
		
		ПредставлениеТипаПоля = СокрЛП(СтрокаДерева.ПредставлениеТипаПоля);
		
		Если НЕ тзСоответствиеКОбработке.Найти(ПредставлениеТипаПоля, "ПредставлениеТипаПоля") = Неопределено
			ИЛИ (СтрНайти(ПредставлениеТипаПоля, "Строка") = 0
				И СтрНайти(ПредставлениеТипаПоля, "Число") = 0
				И СтрНайти(ПредставлениеТипаПоля, "Дата") = 0) Тогда
					Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(тзСоответствиеКОбработке.Добавить(), СтрокаДерева);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из тзСоответствиеКОбработке Цикл
		
		ПредставлениеТипаПоля = СокрЛП(СтрокаТЗ.ПредставлениеТипаПоля);    
		ПредставлениеТипаПоля = СтрЗаменить(ПредставлениеТипаПоля, "<", "");
		ПредставлениеТипаПоля = СтрЗаменить(ПредставлениеТипаПоля, ">", "");
		
		ИмяТипаSQL = СокрЛП(ПредставлениеТипаПоля);
		ИмяТипаSQL = СтрЗаменить(ИмяТипаSQL, "Строка", "[nvarchar] ");
		ИмяТипаSQL = СтрЗаменить(ИмяТипаSQL, "Число", "[decimal] ");
		ИмяТипаSQL = СтрЗаменить(ИмяТипаSQL, "Дата", "[date]");
		
		ЭлементТипПоляSQL = Справочники.ТипыПолейSQL.СоздатьЭлемент();
		ЭлементТипПоляSQL.Наименование = ПредставлениеТипаПоля;
		ЭлементТипПоляSQL.ИмяТипаSQL = ИмяТипаSQL;  
		
		ТекстСообщения = "";
		
		Попытка
			ЭлементТипПоляSQL.Записать();
			ТекстСообщения = "Успешно создан элемент '" + ПредставлениеТипаПоля + "'";
		Исключение
			ТекстСообщения = "Не удалось создать элемент '" + ПредставлениеТипаПоля + "' (" + ОписаниеОшибки() + ")";
		КонецПопытки; 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "дзСтруктураМетаданных");		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТипыПолей(Команда) 
	
	СоздатьТипыПолейНаСервере();
	
	ОбработатьОбъектКоллекцииПослеПолученияДанных("дзСтруктураМетаданных", "ТипПоля");  
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "дзСтруктураМетаданных",, Истина); 
	
КонецПроцедуры