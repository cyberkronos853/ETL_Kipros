&НаКлиенте
Процедура ПриОткрытии(Отказ)    
	
	УстановитьОформлениеЭлементовФормы();
	ОбновитьДанныеВременныхДинамическихРеквизитов()  
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокЗависимыхВременныхДинамическихРеквизитов()
	
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("дзСтруктураМетаданных");
	//СписокРеквизитов.Добавить("тзТранзитивнаяИерархияСтруктураМетаданных");
	СписокРеквизитов.Добавить("дзДанныеСопоставления");
	СписокРеквизитов.Добавить("дзСтруктураЕдиногоФорматаДанных");
	
	СписокЗависимыхВременныхДинамическихРеквизитов = СписокРеквизитов;
	
КонецПроцедуры	
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	//ИмяОбъектаКоллекции = "тзТранзитивнаяИерархияСтруктураМетаданных";
	//ИнициализироватьДинамическийРеквизитКоллекцииФормы(ИмяОбъектаКоллекции, Новый ОписаниеТипов("ТаблицаЗначений")); 
	
	ИмяОбъектаКоллекции = "дзСтруктураЕдиногоФорматаДанных";
	ИнициализироватьДинамическийРеквизитКоллекцииФормы(ИмяОбъектаКоллекции, Новый ОписаниеТипов("ДеревоЗначений")); 
	
	ИмяОбъектаКоллекции = "дзДанныеСопоставления";
	ИнициализироватьДинамическийРеквизитКоллекцииФормы(ИмяОбъектаКоллекции, Новый ОписаниеТипов("ДеревоЗначений"));  
		
	ВерсияОбработки = РеквизитФормыВЗначение("Объект").Версия();
	
	ИнициализироватьСписокЗависимыхВременныхДинамическихРеквизитов()
		
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДанныеВременныхДинамическихРеквизитов() 
	
	Если ЗначениеЗаполнено(Объект.База) Тогда 
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеВременныхДинамическихРеквизитов", ИнтервалОжидания, Истина); 
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьДанныеДляДлительнойОперации(ИмяОбъектаКоллекции = "")  
	
	СтруктураПараметров = Новый Структура("КлючУникальности, СписокОбъектовКоллекции",
											КлючУникальности,
											Новый СписокЗначений); 
											
	Если НЕ ПустаяСтрока(ИмяОбъектаКоллекции) Тогда 
		СтруктураПараметров.СписокОбъектовКоллекции.Добавить(ИмяОбъектаКоллекции);											
	КонецЕсли;
			
	Возврат СтруктураПараметров
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтраницуПрогрессаОбработки(ПоказатьПроцессОбработки = Истина)
	
	//Элементы.ГруппаСтраницаВладелецОбновление.Видимость = ПоказатьПроцессОбработки;
	Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = ?(ПоказатьПроцессОбработки, Элементы.ГруппаСтраницаВладелецОбновление, Элементы["ГруппаСтраницаВладелец" + ?(НЕ ЗначениеЗаполнено(Объект.База), "НеВыбран", "")]);		
	Элементы.ГруппаПанельНастроекИОтбора.Доступность = НЕ ПоказатьПроцессОбработки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеВременныхДинамическихРеквизитов()
	
    ИДЗадания  = "";
	ПараметрыЗапуска = ПодготовитьДанныеДляДлительнойОперации();
	
	УстановитьСтраницуПрогрессаОбработки();
		
	СтруктураФоновогоЗадания = ВыполнитьФоновоеЗаданиеОбновитьДанныеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИДЗадания =  СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.Интервал = 2; 
	
	ДополнительныеПараметры = Новый Структура("КлючУникальности", КлючУникальности); 
	
	//Ожидать завершения выполнение процедуры в фоновом задании и открыть форму ожидания длительной операции.
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания,
												Новый ОписаниеОповещения("ОбновитьДанныеВременныхДинамическихРеквизитовПроверкаВыполнения", ЭтотОбъект, ДополнительныеПараметры),
												ПараметрыОжидания);	 
		
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеВременныхДинамическихРеквизитов");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруДанныхКоллекцийДляФоновогоЗадания(СписокОбъектовКоллекции)
	
	СтруктураДанных = Новый Структура;
	
	Для Каждого ЗначениеСписка Из СписокЗависимыхВременныхДинамическихРеквизитов Цикл  
		
		ИмяОбъектаКоллекции = ЗначениеСписка.Значение;  
		
		Если ЗначениеЗаполнено(СписокОбъектовКоллекции)
			И СписокОбъектовКоллекции.НайтиПоЗначению(ИмяОбъектаКоллекции) = Неопределено Тогда 
				Продолжить;
		КонецЕсли;
		
		ОбъектКоллекцииПриемник = РеквизитФормыВЗначение(ИмяОбъектаКоллекции);
		Если ТипЗнч(ОбъектКоллекцииПриемник) = Тип("ДеревоЗначений") Тогда 
			ОбъектКоллекцииПриемник.Строки.Очистить(); 
		ИначеЕсли ТипЗнч(ОбъектКоллекцииПриемник) = Тип("ТаблицаЗначений") Тогда 
			ОбъектКоллекцииПриемник.Очистить(); 
		КонецЕсли;
		
		СтруктураДанных.Вставить(ИмяОбъектаКоллекции, ОбъектКоллекцииПриемник); 
		
	КонецЦикла;
	
	Возврат СтруктураДанных
	
КонецФункции	
	
&НаСервере
Функция ВыполнитьФоновоеЗаданиеОбновитьДанныеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыВыполнения = Новый Структура; 
	Для Каждого КлючИЗначение Из ПараметрыЗапуска Цикл 
		ПараметрыВыполнения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;   
	ПараметрыВыполнения.Вставить("СтруктураДанныхКоллекций", ПолучитьСтруктуруДанныхКоллекцийДляФоновогоЗадания(ПараметрыЗапуска.СписокОбъектовКоллекции));
	ПараметрыВыполнения.Вставить("ПараметрыСКД", ПолучитьПараметрыСКД());
	 	
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки", 					ОбработкаОбъект.Метаданные().Имя);
	ПараметрыЗадания.Вставить("ИмяМетода", 						"ОбработатьИтерациюОбновленияДанных");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", 			ПараметрыВыполнения);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", 			Ложь);
	//ДополнительнаяОбработкаСсылка =  Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ОбработкаОбъект.Синоним);
	//ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", 	ДополнительнаяОбработкаСсылка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Заголовок;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;
	
КонецФункции  

&НаКлиенте
Процедура ОбновитьДанныеВременныхДинамическихРеквизитовПроверкаВыполнения(Результат, ДополнительныеПараметры) Экспорт   
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки, ДополнительныеПараметры.КлючУникальности);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ОбновитьДанныеВременныхДинамическихРеквизитовНаСервере(Результат);  
	КонецЕсли; 
	
	Если НЕ Результат.Сообщения = Неопределено Тогда 
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			ПроксиСообщение = Новый СообщениеПользователю;
			ПроксиСообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			ПроксиСообщение.Текст = Сообщение.Текст;
			ПроксиСообщение.Сообщить();
		КонецЦикла;	  
	КонецЕсли; 
	
	УстановитьСтраницуПрогрессаОбработки(Ложь); 
	УстановитьОформлениеЭлементовФормы();
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВременныхДинамическихРеквизитовНаСервере(Результат)   
	
	Данные = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);  
	
	Для Каждого КлючИЗначение Из Данные Цикл 
		ЗначениеВРеквизитФормы(КлючИЗначение.Значение, КлючИЗначение.Ключ);       
	КонецЦикла;
				
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЭлементовФормы()
	
	ТекДанные = Элементы.дзСтруктураМетаданных.ТекущиеДанные;   
	
	Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы["ГруппаСтраницаВладелец" + ?(НЕ ЗначениеЗаполнено(Объект.База), "НеВыбран", "")];
	Элементы.ФормаСохранитьИзменения.Видимость = ЗначениеЗаполнено(Объект.База);
	
	Корневой_ОбъектЕдиногоФорматаДанныхПредставление = ?(ЗначениеЗаполнено(Корневой_ОбъектЕдиногоФорматаДанных), СокрЛП(Корневой_ОбъектЕдиногоФорматаДанных), "<не установлен>");  
	Подчиненный_ОбъектЕдиногоФорматаДанныхПредставление = "";
	
	Элементы.Корневой_ОбъектЕдиногоФорматаДанныхПредставление.Доступность = Ложь;
	Элементы.Подчиненный_ОбъектЕдиногоФорматаДанныхПредставление.Доступность = Ложь;   
		
	Если ТекДанные = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	РодительТекДанные = ТекДанные.ПолучитьРодителя();
	УровеньСтроки = ПолучитьУровеньЭлементаКоллекции(ТекДанные);
	
	Если НЕ РодительТекДанные = Неопределено Тогда  
		
		Элементы.Корневой_ОбъектЕдиногоФорматаДанныхПредставление.Доступность = ТипЗнч(РодительТекДанные.ОбъектОписанияМетаданных) = Тип("ПеречислениеСсылка.ТипыОбъектов");  
		
		Если ЗначениеЗаполнено(Корневой_ОбъектЕдиногоФорматаДанных) Тогда 
		
			ДанныеЭлемента = ПолучитьДанныеОбъектаОписанияПоЭлементуВКоллекции(ТекДанные, ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть"));
			//Элементы.Подчиненный_ОбъектЕдиногоФорматаДанныхПредставление.Видимость = НЕ СоставнойУровеньЭлементаДереваВСтруктуре = Неопределено И СоставнойУровеньЭлементаДереваВСтруктуре >= 1; 
			
			//Если Элементы.Подчиненный_ОбъектЕдиногоФорматаДанныхПредставление.Видимость Тогда  
			
			Если НЕ ДанныеЭлемента = Неопределено Тогда  
				
				Подчиненный_ОбъектЕдиногоФорматаДанныхПредставление = ?(ЗначениеЗаполнено(Подчиненный_ОбъектЕдиногоФорматаДанных), СокрЛП(Подчиненный_ОбъектЕдиногоФорматаДанных), ?(ДанныеЭлемента.УровеньРодителя > 0, "<не установлен>", ""));
				Элементы.Подчиненный_ОбъектЕдиногоФорматаДанныхПредставление.Доступность = ДанныеЭлемента.УровеньРодителя = 1; 
				
			КонецЕсли;
				
				//Элементы.ГруппаДействияСЭлементомЕдиногоФорматаДанных.Видимость = ЗначениеЗаполнено(Подчиненный_ОбъектЕдиногоФорматаДанных);
				
			//КонецЕсли;
		
		КонецЕсли;
																			
	КонецЕсли;
																																				
	//Элементы.Корневой_ЕдиныйФорматДанныхПредставление.Доступность = УровеньСтроки = 1;  
	
	Элементы.Корневой_АктуализироватьСоставЕдиногоФорматаДанных.Видимость = Элементы.Корневой_ОбъектЕдиногоФорматаДанныхПредставление.Доступность;
	Элементы.Подчиненный_АктуализироватьСоставЕдиногоФорматаДанных.Видимость = Элементы.Подчиненный_ОбъектЕдиногоФорматаДанныхПредставление.Доступность;  
	
	Элементы.Корневой_ПодставитьОбъектЕдиногоФорматаДанных.Видимость = Элементы.Корневой_ОбъектЕдиногоФорматаДанныхПредставление.Доступность И НЕ ЗначениеЗаполнено(Корневой_ОбъектЕдиногоФорматаДанных);
	Элементы.Подчиненный_ПодставитьОбъектЕдиногоФорматаДанных.Видимость = Элементы.Подчиненный_ОбъектЕдиногоФорматаДанныхПредставление.Доступность И НЕ ЗначениеЗаполнено(Подчиненный_ОбъектЕдиногоФорматаДанных);
	
	Элементы.ГруппаПраваяПанельСтраницы.ТекущаяСтраница = Элементы["ГруппаПанельДанные" + ?(УровеньСтроки = 0, "Не", "") + "Выбраны"];
	//Элементы.ГруппаПанельДанныеВыбраныСтраницы.ТекущаяСтраница = Элементы["ГруппаПанельДанные" + ?(НЕ ЗначениеЗаполнено(Корневой_ОбъектЕдиногоФорматаДанных), "Отсутствуют", "")];
	
	Элементы.ПеренестиВыбранныйЭлементВправо.Доступность = УровеньСтроки > 2 И ТекДанные.служДоступенКВыбору; 
	
	//Элементы.ДекорацияДанныеОтсутствуют.Видимость = УровеньСтроки > 0;
	//Элементы.ЕдиныйФорматДанныхПредставление.ЦветФона = Новый Стиль() Стиль.ЦветаСтиля.ЦветФонаПоля
	//Элементы.дзИнтерактивныйПодбор.Доступность = УровеньСтроки >= 1 И ЗначениеЗаполнено(Корневой_ОбъектЕдиногоФорматаДанных);
	
КонецПроцедуры   

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементыУсловногоОформления = УсловноеОформление.Элементы;

	#Область служДоступенКВыбору   
	
		ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		ТекущийЭлементОформления.Использование = Истина;
		
		ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных.служДоступенКВыбору");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
				
		ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
 		//ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,, Истина));

		ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзСтруктураМетаданных");
		ПолеОформления.Использование = Истина; 
		
	#КонецОбласти 
	
	#Область служДоступенКОбработке   
	
		ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		ТекущийЭлементОформления.Использование = Истина;
		
		ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзИнтерактивныйПодбор.служДоступенКОбработке");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
				
		ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
 		//ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,, Истина));

		ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзИнтерактивныйПодбор");
		ПолеОформления.Использование = Истина; 
		
	#КонецОбласти  
	
	#Область ЭтоСтрокаИнтерактивногоСопоставления   
	
	    ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	    ТекущийЭлементОформления.Использование = Истина;
	    
	    ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	    ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
	    
	    ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзИнтерактивныйПодбор.ЭтоСтрокаИнтерактивногоСопоставления");
	    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;  
	    ЭлементОтбора.ПравоеЗначение = Ложь;
	    	    		
	    ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	    ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
	    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзИнтерактивныйПодбор");
	    ПолеОформления.Использование = Истина; 
		
	#КонецОбласти 
	
	#Область ПолеЕдиногоФорматаДанных   
	
		//ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		//ТекущийЭлементОформления.Использование = Истина;
		//
		//ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		//ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		//
		//ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзИнтерактивныйПодбор.ЭтоСтрокаИнтерактивногоСопоставления");
		//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;  
		//ЭлементОтбора.ПравоеЗначение = Истина;
		//
		//ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзИнтерактивныйПодбор.ПредставлениеДанныхЕдиногоФормата");
		//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		//ЭлементОтбора.ПравоеЗначение = "не выбран";
		//		
		//ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветФонаПредупреждения);
		////ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,, Истина));

		//ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзИнтерактивныйПодборПредставление");
		//ПолеОформления.Использование = Истина; 
		
	#КонецОбласти 
			
	#Область СтатусОбработки   
	
		ТекущийЭлементОформления = ЭлементыУсловногоОформления.Добавить();
		ТекущийЭлементОформления.Использование = Истина;
		
		ЭлементГруппаОтбора = ТекущийЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
		
		ЭлементОтбора = ЭлементГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("дзИнтерактивныйПодбор.ЭтоСтрокаИнтерактивногоСопоставления");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;  
		ЭлементОтбора.ПравоеЗначение = Ложь;
						
		ТекущийЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

		ПолеОформления = ТекущийЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("дзИнтерактивныйПодборСтатусОбработки");
		ПолеОформления.Использование = Истина; 
		
	#КонецОбласти 
			
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДанныеВременныхКоллекцийФормы(Команда) 
	
	ОбновитьДанныеВременныхДинамическихРеквизитов()
		
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПризнакДоступенКВыбору(МассивЭлементовДереваКОбработке)
		
	Для Каждого ЭлементДерева Из МассивЭлементовДереваКОбработке Цикл
		ЭлементДерева.служДоступенКВыбору = НайтиЭлементВКоллекции(ЭтаФорма["дзДанныеСопоставления"], Новый Структура("ОбъектОписанияМетаданных", ЭлементДерева.ОбъектОписанияМетаданных), Истина) = Неопределено;      
	КонецЦикла;
				
КонецФункции  

&НаСервере
Функция ПолучитьПараметрыСКД() 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект"); 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("База");
	//СтруктураПараметров.Вставить("тзТранзитивнаяИерархияСтруктураМетаданных");
	
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл 
		
		ИмяПараметра = КлючИЗначение.Ключ;
		ЗначениеПараметра = Неопределено;   
		
		Если НЕ ОбработкаОбъект.Метаданные().Реквизиты.Найти(ИмяПараметра) = Неопределено Тогда 
			ЗначениеПараметра = Объект[ИмяПараметра]; 
		Иначе
			ЗначениеПараметра = ЭтаФорма[ИмяПараметра]; 
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("ДанныеФормыКоллекция") Тогда 
				ЗначениеПараметра = РеквизитФормыВЗначение(ИмяПараметра);
			КонецЕсли;
			
		КонецЕсли;  
		
		СтруктураПараметров[ИмяПараметра] = ЗначениеПараметра 
		
	КонецЦикла; 
	
	Возврат СтруктураПараметров
			
КонецФункции

&НаСервере
Процедура ИнициализироватьДинамическийРеквизитКоллекцииФормы(ИмяОбъектаКоллекции, ОписаниеТиповОбъекта)
	
	КоллекцияДанных = ОписаниеТиповОбъекта.ПривестиЗначение();
	ИнициализироватьРеквизитыКоллекцииФормы(ИмяОбъектаКоллекции, КоллекцияДанных);

	Если ИмяОбъектаКоллекции = "дзДанныеСопоставления" Тогда    
		
		МассивДобавляемыхТипов = Новый Массив;
		МассивДобавляемыхТипов.Добавить(Тип("СправочникСсылка.СтруктураМетаданных")); 
		МассивДобавляемыхТипов.Добавить(Тип("ПеречислениеСсылка.ВидыСвойств")); 
		
		КоллекцияДанных.Колонки.Добавить("ОбъектОписанияМетаданных", 			Новый ОписаниеТипов(МассивДобавляемыхТипов));
		КоллекцияДанных.Колонки.Добавить("ОбъектЕдиногоФорматаДанных", 			Новый ОписаниеТипов("СправочникСсылка.ЕдиныйФорматДанных"));
		КоллекцияДанных.Колонки.Добавить("ОбъектБазыКВыгрузке", 				Новый ОписаниеТипов("СправочникСсылка.ОбъектыБазКВыгрузке"));
		//КоллекцияДанных.Колонки.Добавить("КодДействияСтроки", 				Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
				
	ИначеЕсли ИмяОбъектаКоллекции = "дзСтруктураЕдиногоФорматаДанных" Тогда   
		
		КоллекцияДанных.Колонки.Добавить("Ссылка", 								Новый ОписаниеТипов("СправочникСсылка.ЕдиныйФорматДанных"));
		КоллекцияДанных.Колонки.Добавить("ИмяПоля", 							Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
		КоллекцияДанных.Колонки.Добавить("ИмяПоляSQL", 							Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
		
	//ИначеЕсли ИмяОбъектаКоллекции = "тзТранзитивнаяИерархияСтруктураМетаданных" Тогда   
		
		//МассивДобавляемыхТипов = Новый Массив;
		//МассивДобавляемыхТипов.Добавить(Тип("СправочникСсылка.СтруктураМетаданных")); 
		//МассивДобавляемыхТипов.Добавить(Тип("ПеречислениеСсылка.ВидыСвойств")); 
		//МассивДобавляемыхТипов.Добавить(Тип("Null")); 
		//
		//КоллекцияДанных.Колонки.Добавить("ОбъектОписанияМетаданныхРодитель", 	Новый ОписаниеТипов(МассивДобавляемыхТипов)); 
		//КоллекцияДанных.Колонки.Добавить("ОбъектОписанияМетаданных", 			Новый ОписаниеТипов(МассивДобавляемыхТипов)); 
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(КоллекцияДанных) = Тип("ДеревоЗначений") Тогда 
		КоллекцияДанных.Колонки.Добавить("КлючСвязи", 				Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	ИнициализироватьРеквизитыКоллекцииФормы(ИмяОбъектаКоллекции, КоллекцияДанных);     
	
	ЗначениеВРеквизитФормы(КоллекцияДанных, ИмяОбъектаКоллекции);
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыКоллекцииФормы(ИмяРеквизита, ИнициализируемыеДанные)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	Если НЕ РеквизитСуществует(ИмяРеквизита) Тогда
		МассивДобавляемыхТипов = Новый Массив;
		МассивДобавляемыхТипов.Добавить(ТипЗнч(ИнициализируемыеДанные));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов(МассивДобавляемыхТипов)));
	КонецЕсли;
	
	Для Каждого Колонка Из ИнициализируемыеДанные.Колонки Цикл
		
		Если РеквизитСуществует(Колонка.Имя, ИмяРеквизита) Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяРеквизита));
				
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивДобавляемыхРеквизитов) Тогда 
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция РеквизитСуществует(ИмяРеквизита, ИмяРеквизитаРодителя = "")
	
	РеквизитСуществует = Ложь;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаРодителя) Тогда 
		МассивПодчиненныхРеквизитов = ПолучитьРеквизиты(ИмяРеквизитаРодителя);
	Иначе
		МассивПодчиненныхРеквизитов = ПолучитьРеквизиты();
	КонецЕсли;
	
	Для Каждого ПодчиненныйРеквизит Из МассивПодчиненныхРеквизитов Цикл
		Если ПодчиненныйРеквизит.Имя = ИмяРеквизита Тогда 
			РеквизитСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитСуществует;
	
КонецФункции

&НаКлиенте
Процедура дзСтруктураМетаданныхПриАктивизацииСтроки(Элемент)
	
	ТребуетсяОбновлениеДанных = Ложь;
	ТекДанные = Элементы.дзСтруктураМетаданных.ТекущиеДанные; 
	
	Если ТекДанные = Неопределено Тогда 
		Возврат
	КонецЕсли;   
	
	значКорневой_ОбъектОписанияМетаданных = Корневой_ОбъектОписанияМетаданных;
	значПодчиненный_ОбъектОписанияМетаданных = Подчиненный_ОбъектОписанияМетаданных;  
	
	Корневой_ОбъектОписанияМетаданных = Неопределено;    
	Подчиненный_ОбъектОписанияМетаданных = Неопределено;    
	
	УровеньСтроки = ПолучитьУровеньЭлементаКоллекции(ТекДанные);
	
	Если УровеньСтроки > 0 Тогда  
		
		ПредставлениеТекУровня = "ТекДанные";
		
		СчетчикИтерации = УровеньСтроки;
		Пока СчетчикИтерации > 1 Цикл
			ПредставлениеТекУровня = ПредставлениеТекУровня + ".ПолучитьРодителя()";
			СчетчикИтерации = СчетчикИтерации - 1;
		КонецЦикла; 
		
		Выполнить("Корневой_ОбъектОписанияМетаданных = " + ПредставлениеТекУровня + ".ОбъектОписанияМетаданных"); 
		
		ДанныеОбъекта = ПолучитьДанныеОбъектаОписанияПоЭлементуВКоллекции(ТекДанные, ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть"));
		
		Если НЕ ДанныеОбъекта = Неопределено Тогда 
			
			ПредставлениеТекУровня = "ТекДанные";   
			
			СчетчикИтерации = ДанныеОбъекта.УровеньРодителя;
			Пока СчетчикИтерации > 1 Цикл
				ПредставлениеТекУровня = ПредставлениеТекУровня + ".ПолучитьРодителя()";
				СчетчикИтерации = СчетчикИтерации - 1;
			КонецЦикла; 
			
			Выполнить("Подчиненный_ОбъектОписанияМетаданных = " + ПредставлениеТекУровня + ".ОбъектОписанияМетаданных"); 
			
		КонецЕсли; 
		
		ТребуетсяОбновлениеДанных = НЕ Корневой_ОбъектОписанияМетаданных = значКорневой_ОбъектОписанияМетаданных ИЛИ НЕ Подчиненный_ОбъектОписанияМетаданных = значПодчиненный_ОбъектОписанияМетаданных; 
		
	КонецЕсли;
	
	Если ТребуетсяОбновлениеДанных Тогда 
		ОбновитьДанныеИнтерактивногоПодбора(); 
	КонецЕсли;
	
	УстановитьФокусИнтерактивногоПодбора(ТекДанные);
	УстановитьОформлениеЭлементовФормы(); 
	
КонецПроцедуры    

&НаКлиенте
Процедура ОбновитьДанныеИнтерактивногоПодбора()        
	
	//ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.1);
	//ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеИнтерактивногоПодбора", ИнтервалОжидания, Истина); 
	
	Подключаемый_ОбновитьДанныеИнтерактивногоПодбора()  
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеИнтерактивногоПодбора()   
	
	ОбновитьДанныеИнтерактивногоПодбораНаСервере();   
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеИнтерактивногоПодбораНаСервере"); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеИнтерактивногоПодбораНаСервере()      
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Корневой_ОбъектЕдиногоФорматаДанных = Неопределено;
	Подчиненный_ОбъектЕдиногоФорматаДанных = Неопределено;
	
	вр_дзИнтерактивныйПодбор = РеквизитФормыВЗначение("дзИнтерактивныйПодбор");
	вр_дзИнтерактивныйПодбор.Строки.Очистить();
			
	СтрокаСтруктурыМетаданных = РеквизитФормыВЗначение("дзСтруктураМетаданных").Строки.Найти(Корневой_ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных", Истина);  
	КорневаяСтрокаДанныеСопоставления = РеквизитФормыВЗначение("дзДанныеСопоставления").Строки.Найти(Корневой_ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных"); 
	
	Для Каждого СтрокаЦелеваяГруппа ИЗ СтрокаСтруктурыМетаданных.Строки Цикл
		
		ВидСвойства = СтрокаЦелеваяГруппа.ОбъектОписанияМетаданных;
		
		СтрокаГруппаРодитель 							= вр_дзИнтерактивныйПодбор.Строки.Добавить();
		СтрокаГруппаРодитель.ОбъектОписанияМетаданных 	= ВидСвойства;
		СтрокаГруппаРодитель.Синоним 					= СокрЛП(ВидСвойства);
		СтрокаГруппаРодитель.Картинка 					= ОбработкаОбъект.ПолучитьКартинкуПоМетаданнымОбъектаОписания(ВидСвойства); 
		СтрокаГруппаРодитель.служДоступенКОбработке		= НЕ КорневаяСтрокаДанныеСопоставления = Неопределено И ЗначениеЗаполнено(КорневаяСтрокаДанныеСопоставления.ОбъектЕдиногоФорматаДанных);  
		
	КонецЦикла;	 
	
	Если НЕ КорневаяСтрокаДанныеСопоставления = Неопределено Тогда   
		Корневой_ОбъектЕдиногоФорматаДанных = КорневаяСтрокаДанныеСопоставления.ОбъектЕдиногоФорматаДанных;
		
		ПодчиненнаяСтрокаДанныеСопоставления = КорневаяСтрокаДанныеСопоставления.Строки.Найти(Подчиненный_ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных");
		Подчиненный_ОбъектЕдиногоФорматаДанных = ?(НЕ ПодчиненнаяСтрокаДанныеСопоставления = Неопределено, ПодчиненнаяСтрокаДанныеСопоставления.ОбъектЕдиногоФорматаДанных, Неопределено);
		
		ПрочитатьДанныеСтрокиСопоставленияВОбъектКоллекции(РеквизитФормыВЗначение("дзСтруктураМетаданных"), КорневаяСтрокаДанныеСопоставления, вр_дзИнтерактивныйПодбор, "Корневой");
	КонецЕсли; 
	
	ЗначениеВРеквизитФормы(вр_дзИнтерактивныйПодбор, "дзИнтерактивныйПодбор");  
	
КонецПроцедуры  

&НаСервере
Процедура ПрочитатьДанныеСтрокиСопоставленияВОбъектКоллекции(КоллекцияСтрокСтруктураМетаданных, КоллекцияСтрокДанныеСопоставления, КоллекцияСтрокИнтерактивныйПодбор, Префикс)
	
	//ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"] = КоллекцияСтрокДанныеСопоставления.ОбъектЕдиногоФорматаДанных;
	
	//СтрокаСтруктурыМетаданных = дзСтруктураМетаданных.Строки.Найти(ЭтаФорма[Префикс + "_ОбъектОписанияМетаданных"], "ОбъектОписанияМетаданных", Истина);  
	//
	//Если СтрокаСтруктурыМетаданных = Неопределено Тогда
	//	Возврат
	//КонецЕсли;
	
	Для Каждого СтрокаСопоставления Из КоллекцияСтрокДанныеСопоставления.Строки Цикл
		
		СтрокаСтруктурыМетаданных = КоллекцияСтрокСтруктураМетаданных.Строки.Найти(СтрокаСопоставления.ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных", Истина);
		
		//Если СтрокаСтруктурыМетаданных = Неопределено Тогда 
		//	Продолжить;
		//КонецЕсли;
		
		ДеревоИерархии = ПолучитьДеревоИерархииЭлементаКоллекции(Новый Структура("ЭлементКоллекции, УровеньИерархии",
																				СтрокаСтруктурыМетаданных));
																				
		СтрокаДереваИерархии = ДеревоИерархии.Строки.Найти(СтрокаСопоставления.Родитель.ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных", Истина);
		ДополнитьДанныеИнтерактивногоПодбораИзДереваИерархии(СтрокаДереваИерархии, КоллекцияСтрокИнтерактивныйПодбор, Префикс);
		
		//Родитель = СтрокаСопоставления.Родитель;
		//
		//Если НЕ Родитель = Неопределено И СтрокаДерева.ОбъектОписанияМетаданных.Вид = ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть")Тогда 
		//КонецЕсли;
		//
		//СтрокаДерева.ЭтоСтрокаИнтерактивногоСопоставления = НЕ СтрокаДерева.ОбъектОписанияМетаданных.Вид = ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть"); 

		//Если ЗначениеЗаполнено(Подчиненный_ОбъектОписанияМетаданных) Тогда
			
			//СтруктураПараметров.Вставить("СтрокаДанныеСопоставления", СтрокаСопоставления);
			//СтруктураПараметров.Вставить("Префикс", "Подчиненный");
			
			ПодКоллекцияСтрокИнтерактивныйПодбор = КоллекцияСтрокИнтерактивныйПодбор.Строки.Найти(СтрокаСопоставления.ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных", Истина);
			ПрочитатьДанныеСтрокиСопоставленияВОбъектКоллекции(СтрокаСтруктурыМетаданных, СтрокаСопоставления, ПодКоллекцияСтрокИнтерактивныйПодбор, "Подчиненный");  
			
		//КонецЕсли;
				
	КонецЦикла; 
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПолучитьДеревоИерархииЭлементаКоллекции(СтруктураПараметров, ДеревоИерархии = Неопределено)
		
	Если ДеревоИерархии = Неопределено Тогда 
		ДеревоИерархии = Новый ДеревоЗначений;
		ДеревоИерархии.Колонки.Добавить("ОбъектОписанияМетаданных");
	КонецЕсли;
	
	ПредставлениеТекУровня = "СтруктураПараметров.ЭлементКоллекции";
	
	УровеньИерархии = СтруктураПараметров.УровеньИерархии;
	
	Если УровеньИерархии = Неопределено Тогда
		УровеньИерархии = СтруктураПараметров.ЭлементКоллекции.Уровень();
	КонецЕсли; 
	
	СчетчикИтерации = УровеньИерархии;  

	Пока СчетчикИтерации > 0 Цикл
		ПредставлениеТекУровня = ПредставлениеТекУровня + ".Родитель";
		СчетчикИтерации = СчетчикИтерации - 1;
	КонецЦикла;
	
	ДанныеТекущейСтроки = Неопределено;
	Выполнить("ДанныеТекущейСтроки = " + ПредставлениеТекУровня); 
	
	//Родитель
	СтрокаДерева = ДеревоИерархии.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеТекущейСтроки);  
	
	//Потомки
	Если НЕ УровеньИерархии = 0 Тогда
		СтруктураПараметров.УровеньИерархии = УровеньИерархии - 1;
		ПолучитьДеревоИерархииЭлементаКоллекции(СтруктураПараметров, СтрокаДерева);
	КонецЕсли;
	
	Возврат ДеревоИерархии
	
КонецФункции  
	
&НаСервере
Функция ДополнитьДанныеИнтерактивногоПодбораИзДереваИерархии(КонтейнерСтрокИерархии, КонтейнерСтрокПриемника, Префикс)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого СтрокаДереваИерархии Из КонтейнерСтрокИерархии.Строки Цикл
		
		СтрокаПриемника = КонтейнерСтрокПриемника.Строки.Найти(СтрокаДереваИерархии.ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных", Истина);
		
		Если СтрокаПриемника = Неопределено Тогда     
			
			СтрокаПриемника = КонтейнерСтрокПриемника.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаДереваИерархии);
			
			СтрокаПриемника.служДоступенКОбработке = КонтейнерСтрокПриемника.служДоступенКОбработке; 
			
			НайденнаяСтрокаСопоставления = РеквизитФормыВЗначение("дзДанныеСопоставления").Строки.Найти(СтрокаПриемника.ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных", Истина);
			
			Если НЕ НайденнаяСтрокаСопоставления = Неопределено Тогда 
				СтрокаПриемника.КлючСвязи = НайденнаяСтрокаСопоставления.КлючСвязи;   
				
				Если СтрокаПриемника.ОбъектОписанияМетаданных.Вид = ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть") Тогда 
					СтрокаПриемника.служДоступенКОбработке = ЗначениеЗаполнено(НайденнаяСтрокаСопоставления.ОбъектЕдиногоФорматаДанных);
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаПриемника.Синоним = СокрЛП(?(ТипЗнч(СтрокаПриемника.ОбъектОписанияМетаданных) = Тип("СправочникСсылка.СтруктураМетаданных"), СтрокаПриемника.ОбъектОписанияМетаданных.Синоним, СтрокаПриемника.ОбъектОписанияМетаданных)); 
			СтрокаПриемника.Картинка = ОбработкаОбъект.ПолучитьКартинкуПоМетаданнымОбъектаОписания(СтрокаПриемника.ОбъектОписанияМетаданных); 
			СтрокаПриемника.ЭтоСтрокаИнтерактивногоСопоставления = НЕ СтрокаПриемника.ОбъектОписанияМетаданных.Вид = ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть"); 
			
			Если СтрокаПриемника.ЭтоСтрокаИнтерактивногоСопоставления Тогда 
				
				СтруктураПараметров = Новый Структура("ЭтоСтрокаИнтерактивногоСопоставления, ОбъектЕдиногоФорматаДанных, КлючСвязи",
														СтрокаПриемника.ЭтоСтрокаИнтерактивногоСопоставления, 
														Корневой_ОбъектЕдиногоФорматаДанных,
														СтрокаПриемника.КлючСвязи);
														
				СтруктураПредставления = ПолучитьДанныеПредставленияЭлемента_дзИнтерактивныйПодбор(СтруктураПараметров); 
				
				СтрокаПриемника.ПредставлениеДанныхЕдиногоФормата 	= СтруктураПредставления.ТекстовоеОписание;
				СтрокаПриемника.СтатусОбработки 					= СтруктураПредставления.ИндексСтатуса;    
																		
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнитьДанныеИнтерактивногоПодбораИзДереваИерархии(СтрокаДереваИерархии, СтрокаПриемника, Префикс) 
		
	КонецЦикла;
		
КонецФункции

&НаКлиенте
Процедура УстановитьФокусИнтерактивногоПодбора(ЭлементДерева) 
	
	ИмяОбъектаИтерации = "дзИнтерактивныйПодбор";
		
	КоллекцияЭлементовДерева = Элементы[ИмяОбъектаИтерации]; 
	СтруктураПоиска = Новый Структура("ОбъектОписанияМетаданных", 
										ЭлементДерева.ОбъектОписанияМетаданных);
			
	НайденныйЭлементДерева = НайтиЭлементВКоллекции(ЭтаФорма[ИмяОбъектаИтерации], СтруктураПоиска, Истина);  
	
	Если НЕ НайденныйЭлементДерева = Неопределено Тогда
		
		КоллекцияЭлементовДерева.ТекущаяСтрока = НайденныйЭлементДерева.ПолучитьИдентификатор(); 
		
		//СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, ИмяОбъектаИтерации, Неопределено, Истина);
		РазвернутьЭлементКоллекции(НайденныйЭлементДерева, КоллекцияЭлементовДерева)		
	Иначе
		
		РодительКоллекции = ЭлементДерева.ПолучитьРодителя();
		
		Если НЕ РодительКоллекции = Неопределено Тогда
			УстановитьФокусИнтерактивногоПодбора(РодительКоллекции) 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУровеньЭлементаКоллекции(СтрокаДерева)
	
   Родитель=СтрокаДерева.ПолучитьРодителя();
   Возврат ?(Родитель=Неопределено, 0, 1 + ПолучитьУровеньЭлементаКоллекции(Родитель));
   
КонецФункции

&НаКлиенте
Процедура дзИнтерактивныйПодборПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)   

    СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор;

	Если Строка = Неопределено Тогда 
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;                                                                                                      
	
    ЭлементДереваПриемник = дзИнтерактивныйПодбор.НайтиПоИдентификатору(Строка);
	
	Если ЭлементДереваПриемник = Неопределено Тогда 
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат; 
	Иначе
		ЭлементДереваПриемник_Родитель = ЭлементДереваПриемник.ПолучитьРодителя();  
	КонецЕсли;                                                                                                      
	
	ЭлементДереваПриемникКОбработке = ?(ЗначениеЗаполнено(ЭлементДереваПриемник.ПолучитьЭлементы()), ЭлементДереваПриемник, ?(НЕ ЭлементДереваПриемник_Родитель = Неопределено, ЭлементДереваПриемник_Родитель, ЭлементДереваПриемник));
		
	МассивЭлементов = ПараметрыПеретаскивания.Значение;

    Для Каждого ЭлементДереваИсточник из МассивЭлементов Цикл
		
		Если НЕ ТипЗнч(ЭлементДереваИсточник) = Тип("ДанныеФормыЭлементДерева") Тогда  
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
		ЭлементДереваИсточник_Родитель = ЭлементДереваИсточник.ПолучитьРодителя();
		
		ДоступноКПереносу = НЕ (ЭлементДереваИсточник_Родитель = Неопределено ИЛИ ЭлементДереваПриемникКОбработке = Неопределено)
							И ЭлементДереваИсточник.служДоступенКВыбору И ЭлементДереваПриемник.служДоступенКОбработке
							И (ЭлементДереваИсточник_Родитель.ОбъектОписанияМетаданных = ?(НЕ ЭлементДереваПриемник = Неопределено, ЭлементДереваПриемник.ОбъектОписанияМетаданных, Неопределено)
								ИЛИ ЭлементДереваИсточник_Родитель.ОбъектОписанияМетаданных = ?(НЕ ЭлементДереваПриемник_Родитель = Неопределено, ЭлементДереваПриемник_Родитель.ОбъектОписанияМетаданных, Неопределено));
				
		Если ДоступноКПереносу   
			И ЭлементДереваИсточник_Родитель.ОбъектОписанияМетаданных = ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть")				
			И ?(НЕ ЭлементДереваПриемник_Родитель = Неопределено, ЭлементДереваПриемник_Родитель.ОбъектОписанияМетаданных, Неопределено) = ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть") Тогда 				
				ДоступноКПереносу = Ложь;  
		КонецЕсли;
		
		Если НЕ ДоступноКПереносу Тогда 
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;                                                                                                      
		
	КонецЦикла;	
		
КонецПроцедуры
	
&НаКлиенте
Процедура дзИнтерактивныйПодборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
    СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;                                                                                                      
	
    ЭлементДереваПриемник = дзИнтерактивныйПодбор.НайтиПоИдентификатору(Строка);
	Если ЭлементДереваПриемник = Неопределено Тогда 
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат; 
	Иначе
		СтруктураПараметров = Новый Структура("ЭлементДереваПриемник, МассивЭлементов", 
												ЭлементДереваПриемник,
												ПараметрыПеретаскивания.Значение);  
	КонецЕсли;                                                                                                      
	
	ОбработатьМассивЭлементовИнтерактивногоПодбора(СтруктураПараметров, "Добавить");  
	
	//ОбновитьДанныеИнтерактивногоПодбора();                                                                          
	УстановитьОформлениеЭлементовФормы()

	//Контроль
	//↓
	//УстановитьПризнакМодифицированности();
	//УстановитьВидимостьДоступностьЭлементовФормы()
	
КонецПроцедуры  

&НаКлиенте
Процедура ПеренестиВыбранныйЭлементВправо(Команда)
	
	ТекРодитель = Неопределено;
	МассивЭлементов = Новый Массив;
	
	Для Каждого Идентификатор Из Элементы.дзСтруктураМетаданных.ВыделенныеСтроки Цикл
		
		ЭлементДерева = дзСтруктураМетаданных.НайтиПоИдентификатору(Идентификатор);
		
		Если ЭлементДерева = Неопределено
			ИЛИ НЕ ЭлементДерева.служДоступенКВыбору Тогда
				Продолжить;
		КонецЕсли;
		
		ЭлементДереваРодитель = ЭлементДерева.ПолучитьРодителя();   
		
		Если ЭлементДереваРодитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекРодитель = Неопределено Тогда
			ТекРодитель = ЭлементДереваРодитель
		ИначеЕсли НЕ ТекРодитель = ЭлементДереваРодитель Тогда  
			МассивЭлементов.Очистить();
			Прервать;
		КонецЕсли;
		
		МассивЭлементов.Добавить(ЭлементДерева);  
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(МассивЭлементов) Тогда 
		
		//Поиск по последнему элементу
		КоллекцияПоиска = ЭтаФорма["дзИнтерактивныйПодбор"];
		ДанныеЭлемента = ПолучитьДанныеОбъектаОписанияПоЭлементуВКоллекции(ЭлементДерева, ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть")); 
		ЭтоРеквизитТабличнойЧасти = НЕ ДанныеЭлемента = Неопределено
									И ДанныеЭлемента.УровеньРодителя = 2; 
		
		Если ЭтоРеквизитТабличнойЧасти Тогда  
			КоллекцияПоиска = НайтиЭлементВКоллекции(КоллекцияПоиска, Новый Структура("ОбъектОписанияМетаданных", ЭлементДереваРодитель.ПолучитьРодителя().ОбъектОписанияМетаданных));   
		КонецЕсли;
		
		ЭлементДереваПриемник = НайтиЭлементВКоллекции(КоллекцияПоиска, Новый Структура("ОбъектОписанияМетаданных", ЭлементДереваРодитель.ОбъектОписанияМетаданных));      
		
		Если НЕ ЭлементДереваПриемник = Неопределено
			И ЭлементДереваПриемник.служДоступенКОбработке Тогда   
						
				СтруктураПараметров = Новый Структура("ЭлементДереваПриемник, МассивЭлементов", 
														?(ЭтоРеквизитТабличнойЧасти И ЭлементДереваПриемник.ЭтоСтрокаИнтерактивногоСопоставления, ЭлементДереваПриемник.ПолучитьРодителя(), ЭлементДереваПриемник),
														МассивЭлементов);  
			
				ОбработатьМассивЭлементовИнтерактивногоПодбора(СтруктураПараметров, "Добавить");  
			
		КонецЕсли;
			
	КонецЕсли; 
	
	//ОбновитьДанныеИнтерактивногоПодбора();                                                                          
	УстановитьОформлениеЭлементовФормы()
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыбранныйЭлементВлево(Команда)  
	
	МассивЭлементов = Новый Массив;
	
	Для Каждого Идентификатор Из Элементы.дзИнтерактивныйПодбор.ВыделенныеСтроки Цикл
		
		ЭлементДерева = дзИнтерактивныйПодбор.НайтиПоИдентификатору(Идентификатор);
		
		Если ЭлементДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементДереваРодитель = ЭлементДерева.ПолучитьРодителя();   
		
		Если ЭлементДереваРодитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЭлементов.Добавить(ЭлементДерева);  
		
	КонецЦикла;	   
	
	Если ЗначениеЗаполнено(МассивЭлементов) Тогда 
		СтруктураПараметров = Новый Структура("МассивЭлементов", 
												МассивЭлементов);  
		
		ОбработатьМассивЭлементовИнтерактивногоПодбора(СтруктураПараметров, "Удалить");   
	КонецЕсли;
	
	//ОбновитьДанныеИнтерактивногоПодбора();                                                                          
	УстановитьОформлениеЭлементовФормы()
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивЭлементовИнтерактивногоПодбора(СтруктураПараметров, РежимОбработки)
	
	ЭлементДереваФокус = Неопределено;
	МассивЭлементовДоступенКВыбору = Новый Массив;           
	
	Для Каждого ЗначениеМассива ИЗ СтруктураПараметров.МассивЭлементов Цикл 
		
		СтруктураДанных = Новый Структура("ОбъектОписанияМетаданных", ЗначениеМассива.ОбъектОписанияМетаданных);    
		
		Если РежимОбработки = "Добавить" Тогда   
			
			//клиент			
			ДанныеОбъекта = ПолучитьДанныеОбъектаОписанияПоЭлементуВКоллекции(ЗначениеМассива, ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть"));
			ЭтоРеквизитТабличнойЧасти = НЕ ДанныеОбъекта = Неопределено И ДанныеОбъекта.УровеньРодителя = 2;			
			ДобавитьЭлементДереваВМассивДоступенКВыбору(МассивЭлементовДоступенКВыбору, ЗначениеМассива);
			
			//сервер
			СтруктураДанных.Вставить("Родитель", ?(НЕ ЭтоРеквизитТабличнойЧасти, Корневой_ОбъектОписанияМетаданных, Подчиненный_ОбъектОписанияМетаданных));
			ОбработатьДействиеСтрокиИнтерактивногоПодбораНаСервере(СтруктураДанных, "Добавить");	 
			
		ИначеЕсли РежимОбработки = "Удалить" Тогда  
			
			//клиент
			ЭлементДереваФокус = ЗначениеМассива.ПолучитьРодителя(); 
			
			СтруктураПоиска = Новый Структура("ОбъектОписанияМетаданных, служДоступенКВыбору", 
												ЗначениеМассива.ОбъектОписанияМетаданных,
												Ложь);
							
			НайденныйЭлементДерева = НайтиЭлементВКоллекции(ЭтаФорма["дзСтруктураМетаданных"], СтруктураПоиска, Истина);  
			
			Если НЕ НайденныйЭлементДерева = Неопределено Тогда
				ДобавитьЭлементДереваВМассивДоступенКВыбору(МассивЭлементовДоступенКВыбору, НайденныйЭлементДерева, Истина);
			КонецЕсли; 
			
			//сервер
			ОбработатьДействиеСтрокиИнтерактивногоПодбораНаСервере(СтруктураДанных, "Удалить")
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЗаполнитьПризнакДоступенКВыбору(МассивЭлементовДоступенКВыбору);
	
	ОбновитьДанныеИнтерактивногоПодбора();
	Если ЭлементДереваФокус = Неопределено И НЕ ЗначениеМассива = Неопределено Тогда
		ЭлементДереваФокус = НайтиЭлементВКоллекции(ЭтаФорма["дзИнтерактивныйПодбор"], Новый Структура("ОбъектОписанияМетаданных", ЗначениеМассива.ОбъектОписанияМетаданных), Истина);
	КонецЕсли;	
		
	Если НЕ ЭлементДереваФокус = Неопределено Тогда
		УстановитьФокусИнтерактивногоПодбора(ЭлементДереваФокус);   
	КонецЕсли;
			
КонецПроцедуры  

&НаКлиенте
Процедура ДобавитьЭлементДереваВМассивДоступенКВыбору(МассивЭлементов, ЭлементДерева, ИспользоватьИерархию = Ложь)
	
	МассивЭлементов.Добавить(ЭлементДерева);
	
	Если ИспользоватьИерархию Тогда  
		
		Для Каждого ПодЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл 
			ДобавитьЭлементДереваВМассивДоступенКВыбору(МассивЭлементов, ПодЭлементДерева, ИспользоватьИерархию);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДействиеСтрокиИнтерактивногоПодбораНаСервере(СтруктураДанных, РежимОбработки)

	ОбъектКоллекции = РеквизитФормыВЗначение("дзДанныеСопоставления");
	
	Если РежимОбработки = "Добавить" Тогда 
		
		МассивНайденныхСтрок = ОбъектКоллекции.Строки.НайтиСтроки(Новый Структура("ОбъектОписанияМетаданных", СтруктураДанных.Родитель), Истина);  
		
		Для Каждого ЗначениеМассива Из МассивНайденныхСтрок Цикл 
			ВыполнитьДействиеСтрокиСопоставленияДанных(Новый Структура("ОбъектОписанияМетаданных", СтруктураДанных.ОбъектОписанияМетаданных), ЗначениеМассива.Строки, РежимОбработки);
		КонецЦикла;  
		
	ИначеЕсли РежимОбработки = "Удалить" Тогда 
		
		МассивНайденныхСтрок = ОбъектКоллекции.Строки.НайтиСтроки(Новый Структура("ОбъектОписанияМетаданных", СтруктураДанных.ОбъектОписанияМетаданных), Истина);   
		
		Для Каждого ЗначениеМассива Из МассивНайденныхСтрок Цикл 
			ВыполнитьДействиеСтрокиСопоставленияДанных(Новый Структура("ОбъектОписанияМетаданных", СтруктураДанных.ОбъектОписанияМетаданных), ЗначениеМассива.Родитель.Строки, РежимОбработки);
		КонецЦикла; 
		
	КонецЕсли;
		
	ЗначениеВРеквизитФормы(ОбъектКоллекции, "дзДанныеСопоставления");
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ВыполнитьДействиеСтрокиСопоставленияДанных(СтруктураЗаполнения, КоллекцияСтрокПриемник, РежимОбработки)
	
	МассивСуществующих = КоллекцияСтрокПриемник.НайтиСтроки(Новый Структура("ОбъектОписанияМетаданных", СтруктураЗаполнения.ОбъектОписанияМетаданных));
	
	Если РежимОбработки = "Добавить" Тогда
		
		Если НЕ ЗначениеЗаполнено(МассивСуществующих) Тогда
			МассивСуществующих.Добавить(КоллекцияСтрокПриемник.Добавить());
		КонецЕсли;
		
		Для Каждого ЗначениеМассива Из МассивСуществующих Цикл 
			ЗаполнитьЗначенияСвойств(ЗначениеМассива, СтруктураЗаполнения);
		КонецЦикла;
		
	ИначеЕсли РежимОбработки = "Удалить" Тогда
		
		МассивУдаляемых = Новый Массив; 
		
		Для Каждого ЗначениеМассива Из МассивСуществующих Цикл
			МассивУдаляемых.Добавить(ЗначениеМассива)
		КонецЦикла; 
		
		Для Каждого ЗначениеМассива Из МассивУдаляемых Цикл
			КоллекцияСтрокПриемник.Удалить(ЗначениеМассива)
		КонецЦикла; 
		
	КонецЕсли;  
			
КонецПроцедуры

&НаКлиенте
Процедура дзИнтерактивныйПодборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.дзИнтерактивныйПодбор.ТекущиеДанные;     
	
	Если Поле.Имя = "дзИнтерактивныйПодборПредставление" Тогда  
		
		Если ТекДанные.ЭтоСтрокаИнтерактивногоСопоставления Тогда 
		
			СтандартнаяОбработка = Ложь;  
			ЗначениеОбъектЕдиногоФорматаДанных = Корневой_ОбъектЕдиногоФорматаДанных; 
			
			ДанныеЭлемента = ПолучитьДанныеОбъектаОписанияПоЭлементуВКоллекции(ТекДанные, ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть"));
			
			Если НЕ ДанныеЭлемента = Неопределено Тогда 
				НайденныйЭлементДерева = НайтиЭлементВКоллекции(ЭтаФорма["дзДанныеСопоставления"], Новый Структура("ОбъектОписанияМетаданных", ТекДанные.ПолучитьРодителя().ОбъектОписанияМетаданных), Истина);
			    ЗначениеОбъектЕдиногоФорматаДанных = НайденныйЭлементДерева.ОбъектЕдиногоФорматаДанных;
			КонецЕсли;	
							
			ПараметрыФормы = Новый Структура("ОбъектЕдиногоФорматаДанных, КлючСвязи, Синоним", 
												ЗначениеОбъектЕдиногоФорматаДанных,
												ТекДанные.КлючСвязи,
												ТекДанные.Синоним);
			ОткрытьФорму("Обработка.КонструкторСоответствияПолей.Форма.ФормаВыбораПолейТаблицыЕФД", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("дзИнтерактивныйПодборВыборЗавершениеНаСервере", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура дзИнтерактивныйПодборВыборЗавершениеНаСервере(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат
	КонецЕсли;   
	
	вр_дзДанныеСопоставления = РеквизитФормыВЗначение("дзДанныеСопоставления");
	
	СтрокаДерева = дзИнтерактивныйПодбор.НайтиПоИдентификатору(Элементы.дзИнтерактивныйПодбор.ТекущаяСтрока);
	СтрокаДерева.КлючСвязи = ВыбранноеЗначение.КлючСвязи;
	
	НайденныйЭлемент = вр_дзДанныеСопоставления.Строки.Найти(СтрокаДерева.ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных", Истина);
		
	Если НЕ НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент.КлючСвязи = СтрокаДерева.КлючСвязи;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЭтоСтрокаИнтерактивногоСопоставления, ОбъектЕдиногоФорматаДанных, КлючСвязи",
											СтрокаДерева.ЭтоСтрокаИнтерактивногоСопоставления,
											ВыбранноеЗначение.ОбъектЕдиногоФорматаДанных,
											СтрокаДерева.КлючСвязи);
											
	СтруктураПредставления = ПолучитьДанныеПредставленияЭлемента_дзИнтерактивныйПодбор(СтруктураПараметров); 
	
	СтрокаДерева.ПредставлениеДанныхЕдиногоФормата 	= СтруктураПредставления.ТекстовоеОписание;
	СтрокаДерева.СтатусОбработки 					= СтруктураПредставления.ИндексСтатуса;    
	
	ЗначениеВРеквизитФормы(вр_дзДанныеСопоставления, "дзДанныеСопоставления");
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьДанныеПредставленияЭлемента_дзИнтерактивныйПодбор(СтруктураПараметров) 
	
	СтруктураВозврата = Новый Структура("ТекстовоеОписание, ИндексСтатуса", "", 999);
		
	Если НЕ СтруктураПараметров.ЭтоСтрокаИнтерактивногоСопоставления Тогда
		Возврат СтруктураВозврата
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураПараметров.КлючСвязи) Тогда
		СтруктураВозврата.ТекстовоеОписание = "<не выбран>";
		СтруктураВозврата.ИндексСтатуса = 1;
		Возврат СтруктураВозврата
	КонецЕсли;
	
	СтрокадзСтруктураЕдиногоФорматаДанных = РеквизитФормыВЗначение("дзСтруктураЕдиногоФорматаДанных").Строки.Найти(СтруктураПараметров.ОбъектЕдиногоФорматаДанных, "Ссылка", Истина);
	
	СтруктураВозврата.ТекстовоеОписание = "описание не найдено";
	СтруктураВозврата.ИндексСтатуса = 0;
	Если НЕ СтрокадзСтруктураЕдиногоФорматаДанных = Неопределено Тогда 
		
		СтрокадзСтруктураЕдиногоФорматаДанных = СтрокадзСтруктураЕдиногоФорматаДанных.Строки.Найти(СтруктураПараметров.КлючСвязи, "КлючСвязи", Истина);
		
		Если НЕ СтрокадзСтруктураЕдиногоФорматаДанных = Неопределено Тогда 
			СтруктураВозврата.ТекстовоеОписание = СокрЛП(СтрокадзСтруктураЕдиногоФорматаДанных.ИмяПоляSQL) + " (" + СокрЛП(СтрокадзСтруктураЕдиногоФорматаДанных.ИмяПоля) + ")";
			СтруктураВозврата.ИндексСтатуса = 3;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура дзИнтерактивныйПодборПередУдалением(Элемент, Отказ)
	
	МассивЭлементов = Новый Массив;
		
	Для Каждого Идентификатор Из Элементы.дзИнтерактивныйПодбор.ВыделенныеСтроки Цикл
		
		ЭлементДерева = дзИнтерактивныйПодбор.НайтиПоИдентификатору(Идентификатор);
		
		Если ЭлементДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементДереваРодитель = ЭлементДерева.ПолучитьРодителя();   
		
		Если ЭлементДереваРодитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЭлементов.Добавить(ЭлементДерева);  
		
	КонецЦикла;	
	
	Отказ = НЕ ЗначениеЗаполнено(МассивЭлементов);
	
	Если НЕ Отказ Тогда 
		ОбработатьМассивЭлементовИнтерактивногоПодбора(Новый Структура("МассивЭлементов", МассивЭлементов), "Удалить");  
	КонецЕсли;
	
	УстановитьОформлениеЭлементовФормы()
	
КонецПроцедуры  

&НаКлиенте
Функция ПолучитьДанныеОбъектаОписанияПоЭлементуВКоллекции(ЭлементДерева, ОбъектОписанияМетаданных, ТекущийУровень = 0) 
	
	ДанныеОбъекта = Неопределено;
	Уровень = Неопределено;
	
	ЭлементДереваОперанд = Неопределено;
	ПредставлениеОперанда = "ЭлементДерева";
			
	СчетчикИтерации = ТекущийУровень;
	Пока СчетчикИтерации > 0 Цикл  
		ПредставлениеОперанда = ПредставлениеОперанда + ".ПолучитьРодителя()";
		СчетчикИтерации = СчетчикИтерации - 1;
	КонецЦикла;
	
	Выполнить("ЭлементДереваОперанд = " + ПредставлениеОперанда); 
	
	Если ЭлементДереваОперанд = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭлементДереваОперанд.ОбъектОписанияМетаданных = ОбъектОписанияМетаданных Тогда
		ДанныеОбъекта = Новый Структура("УровеньРодителя", ТекущийУровень); 
	Иначе
		ДанныеОбъекта = ПолучитьДанныеОбъектаОписанияПоЭлементуВКоллекции(ЭлементДерева, ОбъектОписанияМетаданных, ТекущийУровень + 1)		
	КонецЕсли;  
	
	Возврат ДанныеОбъекта;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеИмениМетаданныхТип(ОбъектОписанияМетаданных)
	
	значМетаданные = ОбъектОписанияМетаданных.Тип.Метаданные();
	
	Возврат СокрЛП(значМетаданные.ЗначенияПеречисления[Перечисления[значМетаданные.Имя].Индекс(ОбъектОписанияМетаданных.Тип)].Имя);
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПредставлениеИмениМетаданныхВид(ОбъектОписанияМетаданных)
	
	значМетаданные = ОбъектОписанияМетаданных.Вид.Метаданные();
	
	Возврат СокрЛП(значМетаданные.ЗначенияПеречисления[Перечисления[значМетаданные.Имя].Индекс(ОбъектОписанияМетаданных.Вид)].Имя);
	
КонецФункции

&НаКлиенте
Процедура Корневой_ОбъектЕдиногоФорматаДанныхПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбъектЕдиногоФорматаДанныхПредставлениеНачалоВыбора("Корневой") 
КонецПроцедуры

&НаКлиенте
Процедура Подчиненный_ОбъектЕдиногоФорматаДанныхПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	СтандартнаяОбработка = Ложь;
	ОбъектЕдиногоФорматаДанныхПредставлениеНачалоВыбора("Подчиненный") 
КонецПроцедуры

&НаКлиенте
Процедура Корневой_ОбъектЕдиногоФорматаДанныхПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбъектЕдиногоФорматаДанныхПредставлениеОткрытие("Корневой") 
КонецПроцедуры

&НаКлиенте
Процедура Подчиненный_ОбъектЕдиногоФорматаДанныхПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбъектЕдиногоФорматаДанныхПредставлениеОткрытие("Подчиненный") 
КонецПроцедуры

&НаКлиенте
Процедура Корневой_ОбъектЕдиногоФорматаДанныхПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбъектЕдиногоФорматаДанныхПредставлениеОчистка("Корневой") 
КонецПроцедуры

&НаКлиенте
Процедура Подчиненный_ОбъектЕдиногоФорматаДанныхПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбъектЕдиногоФорматаДанныхПредставлениеОчистка("Подчиненный") 
КонецПроцедуры

&НаКлиенте
Процедура ОбъектЕдиногоФорматаДанныхПредставлениеОчистка(Префикс)   
		
	//клиент
	НайденныйЭлементДерева = НайтиЭлементВКоллекции(ЭтаФорма["дзДанныеСопоставления"], Новый Структура("ОбъектОписанияМетаданных, ОбъектЕдиногоФорматаДанных", 
																												ЭтаФорма[Префикс + "_ОбъектОписанияМетаданных"],
																												ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"]), Истина);   
																												
	Если НЕ НайденныйЭлементДерева = Неопределено Тогда 
		
		МассивЭлементов = Новый Массив;
		
		Для Каждого ПодСтрокаКоллекции Из НайденныйЭлементДерева.ПолучитьЭлементы() Цикл  
			МассивЭлементов.Добавить(ПодСтрокаКоллекции);                                
		КонецЦикла;
				
		ОбработатьМассивЭлементовИнтерактивногоПодбора(Новый Структура("МассивЭлементов", МассивЭлементов), "Удалить");  
		
	КонецЕсли;
	
	//сервер
	ОбъектЕдиногоФорматаДанныхПредставлениеОчисткаНаСервере(Новый Структура("ОбъектОписанияМетаданных, ОбъектЕдиногоФорматаДанных, Префикс", 
																							ЭтаФорма[Префикс + "_ОбъектОписанияМетаданных"], 
																							ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"], 
																							Префикс));
		
	ОбновитьДанныеИнтерактивногоПодбора();                                                                          
	УстановитьОформлениеЭлементовФормы(); 
	
КонецПроцедуры  

&НаСервере
Процедура ОбъектЕдиногоФорматаДанныхПредставлениеОчисткаНаСервере(СтруктураПараметров)   
		
	ОбъектКоллекции = РеквизитФормыВЗначение("дзДанныеСопоставления"); 
	
	СтруктураОтбора = Новый Структура("ОбъектОписанияМетаданных, ОбъектЕдиногоФорматаДанных");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтруктураПараметров); 
		
	Для Каждого СтрокаДерева Из ОбъектКоллекции.Строки.НайтиСтроки(СтруктураОтбора, Истина) Цикл  
		СтрокаДерева.ОбъектЕдиногоФорматаДанных = Неопределено;
	КонецЦикла;  
	
	ЗначениеВРеквизитФормы(ОбъектКоллекции, "дзДанныеСопоставления"); 
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбъектЕдиногоФорматаДанныхПредставлениеОткрытие(Префикс)   
	
	ОбъектЕдиногоФорматаДанныхСсылка = ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"];
	
	Если НЕ ЗначениеЗаполнено(ОбъектЕдиногоФорматаДанныхСсылка) Тогда 
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ОбъектЕдиногоФорматаДанныхСсылка); 
	
	ОткрытьФорму("Справочник.ЕдиныйФорматДанных.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбъектЕдиногоФорматаДанныхПредставлениеНачалоВыбора(Префикс)   
			
	ПараметрыОтбора = Новый Структура;  
	ПараметрыОтбора.Вставить("ВидТаблицы", ПредопределенноеЗначение("Перечисление.ВидыТаблицSQL." + ?(Префикс = "Корневой", ПредставлениеИмениМетаданныхТип(Корневой_ОбъектОписанияМетаданных), "ТабличнаяЧасть")));
	ПараметрыОтбора.Вставить("ОсновнаяТаблица", ?(Префикс = "Подчиненный", Корневой_ОбъектЕдиногоФорматаДанных, ПредопределенноеЗначение("Справочник.ЕдиныйФорматДанных.ПустаяСсылка")));
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);	
		
	ОткрытьФорму("Справочник.ЕдиныйФорматДанных.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбъектЕдиногоФорматаДанныхПредставлениеЗавершениеВыбора", ЭтаФорма, Новый Структура("Префикс", Префикс)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбъектЕдиногоФорматаДанныхПредставлениеЗавершениеВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда 
		
		Префикс = ДополнительныеПараметры.Префикс;
		ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"] = РезультатЗакрытия;
	
		ОбъектЕдиногоФорматаДанныхПредставлениеЗавершениеВыбораНаСервере(Новый Структура("ОбъектОписанияМетаданных, ОбъектЕдиногоФорматаДанных, Префикс", 
																							ЭтаФорма[Префикс + "_ОбъектОписанияМетаданных"], 
																							ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"], 
																							Префикс)); 
		
		ОбновитьДанныеИнтерактивногоПодбора();                                                                          
		УстановитьОформлениеЭлементовФормы();
				
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбъектЕдиногоФорматаДанныхПредставлениеЗавершениеВыбораНаСервере(СтруктураПараметров)  
	
	ОбъектКоллекции = РеквизитФормыВЗначение("дзДанныеСопоставления");
	СтруктураОтбора = Новый Структура("ОбъектОписанияМетаданных", СтруктураПараметров.ОбъектОписанияМетаданных); 
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаДерева Из ОбъектКоллекции.Строки.НайтиСтроки(СтруктураОтбора) Цикл
		МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
	КонецЦикла;  
	
	Для Каждого ЗначениеМассива Из МассивУдаляемыхСтрок Цикл
		ОбъектКоллекции.Строки.Удалить(ЗначениеМассива); 
	КонецЦикла;  
	
	КоллекцияСтрокПриемник = ОбъектКоллекции;
	Если СтруктураПараметров.Префикс = "Подчиненный" Тогда
		КоллекцияСтрокПриемник = ОбъектКоллекции.Строки.Найти(Корневой_ОбъектОписанияМетаданных, "ОбъектОписанияМетаданных", Истина); 
	КонецЕсли;
	
	Если НЕ КоллекцияСтрокПриемник = Неопределено Тогда  
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ОбъектОписанияМетаданных", СтруктураПараметров.ОбъектОписанияМетаданных);
		СтруктураЗаполнения.Вставить("ОбъектЕдиногоФорматаДанных", СтруктураПараметров.ОбъектЕдиногоФорматаДанных); 
		
		ВыполнитьДействиеСтрокиСопоставленияДанных(СтруктураЗаполнения, КоллекцияСтрокПриемник.Строки, "Добавить");	
	
		ЗначениеВРеквизитФормы(ОбъектКоллекции, "дзДанныеСопоставления"); 
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Функция НайтиЭлементВКоллекции(КоллекцияЭлементовДерева, СтруктураПоиска, ПоискПоИерархии = Ложь) 
	
	ЭлементКоллекции = Неопределено;
	
	Для Каждого СтрокаКоллекции Из КоллекцияЭлементовДерева.ПолучитьЭлементы() Цикл  
		
		ЭлементСоответствуетПараметрамПоиска = Истина;    
		
		Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
			
			Если НЕ СтрокаКоллекции[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
				ЭлементСоответствуетПараметрамПоиска = Ложь;
				Прервать;
			КонецЕсли;
						
		КонецЦикла;
			
		Если ЭлементСоответствуетПараметрамПоиска Тогда
			ЭлементКоллекции = СтрокаКоллекции  
		ИначеЕсли ПоискПоИерархии Тогда 
			ЭлементКоллекции = НайтиЭлементВКоллекции(СтрокаКоллекции, СтруктураПоиска, ПоискПоИерархии)
		КонецЕсли;
		
		Если НЕ ЭлементКоллекции = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭлементКоллекции
	
КонецФункции

&НаСервере
Функция ПодготовитьСтруктуруИзмененныхДанныхКОбработке(СтрокаДерева) 
	
	СтруктураДанных = Новый Структура("ОбъектОписанияМетаданных, ОбъектЕдиногоФорматаДанных, ОбъектБазыКВыгрузке");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаДерева); 
	
	СтруктураДанных.Вставить("СтрокаДерева", СтрокаДерева);
	СтруктураДанных.Вставить("База", Объект.База);
	
	тзДанныеСопоставленияПолей = Новый ТаблицаЗначений;
	
	МассивДобавляемыхТипов = Новый Массив;
	МассивДобавляемыхТипов.Добавить(Тип("СправочникСсылка.СтруктураМетаданных")); 
	
	тзДанныеСопоставленияПолей.Колонки.Добавить("ОбъектОписанияМетаданных", Новый ОписаниеТипов(МассивДобавляемыхТипов));
	тзДанныеСопоставленияПолей.Колонки.Добавить("КлючСвязи", 				Новый ОписаниеТипов("Число"));
	
	Для Каждого ПодСтрокаДерева Из СтрокаДерева.Строки Цикл 
		
		Если ПодСтрокаДерева.ОбъектОписанияМетаданных.Вид = ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть")
			ИЛИ ПодСтрокаДерева.КлючСвязи = 0 Тогда  
				Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(тзДанныеСопоставленияПолей.Добавить(), ПодСтрокаДерева);
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("ДанныеСопоставленияПолей", тзДанныеСопоставленияПолей); 
	
	Возврат СтруктураДанных
	
КонецФункции
	
&НаСервере
Процедура ЗаполнитьСписокИзмененныхДанныхКОбработке(СписокДанныхКОбработке, ОбъектКоллекции) 
	
	Для Каждого СтрокаДерева Из ОбъектКоллекции.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.ОбъектЕдиногоФорматаДанных) Тогда
			Продолжить;
		КонецЕсли;   
		
		СписокДанныхКОбработке.Добавить(ПодготовитьСтруктуруИзмененныхДанныхКОбработке(СтрокаДерева)); 
		
		ЗаполнитьСписокИзмененныхДанныхКОбработке(СписокДанныхКОбработке, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СохранитьИзмененияНаСервере()
		
	СписокДанныхКОбработке = Новый СписокЗначений;
	ДанныеОшибок = Новый Соответствие; 
	
	ОбъектКоллекции = РеквизитФормыВЗначение("дзДанныеСопоставления");
	
	ЗаполнитьСписокИзмененныхДанныхКОбработке(СписокДанныхКОбработке, ОбъектКоллекции);
		
	Для Каждого ЗначениеСписка Из СписокДанныхКОбработке Цикл
		
		СтруктураИзмененныхДанных = ЗначениеСписка.Значение;
		
		Если НЕ СтруктураИзмененныхДанных.ОбъектОписанияМетаданных.Тип = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Перечисление") 
			И НЕ ЗначениеЗаполнено(СтруктураИзмененныхДанных.ДанныеСопоставленияПолей) Тогда 
				Продолжить;
		КонецЕсли;
		
		РезультатОбработки = ОбработатьДанныеОбъектаБазыКВыгрузкеПоСтроке(СтруктураИзмененныхДанных);
		
		Если НЕ РезультатОбработки.СтатусВозврата Тогда 
			ДанныеОшибок.Вставить(СтруктураИзмененныхДанных.СтрокаДерева, РезультатОбработки.ОписаниеОшибки);	
		КонецЕсли; 
			
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектКоллекции, "дзДанныеСопоставления");
	
	Для Каждого КлючИЗначение Из ДанныеОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обработать данные реквизита: '" + КлючИЗначение.Ключ.ОбъектОписанияМетаданных.Синоним + "' объекта метаданных: '" + КлючИЗначение.Ключ.ОбъектОписанияМетаданных.Родитель.Синоним + "' (" + КлючИЗначение.Значение + ")",,, "дзИнтерактивныйПодбор");		
	КонецЦикла; 
	
	Возврат Новый Структура("ЕстьОшибки", ЗначениеЗаполнено(ДанныеОшибок));
	
КонецФункции

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	РезультатСохранения = СохранитьИзмененияНаСервере(); 
	ПоказатьОповещениеПользователя(Окно.Заголовок,,"Обработка завершена" + ?(РезультатСохранения.ЕстьОшибки, " с ошибками", ""), БиблиотекаКартинок[?(РезультатСохранения.ЕстьОшибки, "Предупреждение32", "Успешно32")], СтатусОповещенияПользователя.Информация, ЭтаФорма.КлючУникальности);
	
	//УстановитьОформлениеЭлементовФормы();
	//ОбновитьДанныеВременныхДинамическихРеквизитов()  
	
КонецПроцедуры

 &НаСервереБезКонтекста
Функция ОбработатьДанныеОбъектаБазыКВыгрузкеПоСтроке(СтруктураДанных)
	
	СтруктураВозврата = Новый Структура("СтатусВозврата, ОписаниеОшибки", Истина, "");
	
	УстановитьПривилегированныйРежим(Истина);    
	
	ОбъектОписанияМетаданныхСсылка 	= СтруктураДанных.ОбъектОписанияМетаданных;
	ОбъектЕдиногоФорматаСсылка 		= СтруктураДанных.ОбъектЕдиногоФорматаДанных;
	ОбъектБазыКВыгрузкеСсылка 		= СтруктураДанных.ОбъектБазыКВыгрузке;
	
	Попытка
		
		//Если СтрокаДерева.КодДействияСтроки = 1 Тогда 
			
			Если НЕ ЗначениеЗаполнено(ОбъектБазыКВыгрузкеСсылка)  
				ИЛИ ОбъектБазыКВыгрузкеСсылка.ПолучитьОбъект() = Неопределено Тогда  
			
					ОбъектБазыКВыгрузке = Справочники.ОбъектыБазКВыгрузке.СоздатьЭлемент();  
					ОбъектБазыКВыгрузке.Владелец = СтруктураДанных.База;    
					
					Если ЗначениеЗаполнено(ОбъектЕдиногоФорматаСсылка.ОсновнаяТаблица) Тогда
						
						СтрокаДереваОсновнойТаблицы = СтруктураДанных.СтрокаДерева.Владелец().Строки.Найти(ОбъектЕдиногоФорматаСсылка.ОсновнаяТаблица, "ОбъектЕдиногоФорматаДанных", Истина);
						
						Если НЕ СтрокаДереваОсновнойТаблицы = Неопределено Тогда 
							ОбъектБазыКВыгрузке.Родитель = СтрокаДереваОсновнойТаблицы.ОбъектБазыКВыгрузке
						КонецЕсли; 
																								
						Наименование = ПредставлениеИмениМетаданныхТип(ОбъектОписанияМетаданныхСсылка.Родитель) + "." + ОбъектОписанияМетаданныхСсылка.Родитель.Имя
										+ "." + ПредставлениеИмениМетаданныхВид(ОбъектОписанияМетаданныхСсылка) + "." + ОбъектОписанияМетаданныхСсылка.Имя;
                        					 
					Иначе 
						
						Наименование = ПредставлениеИмениМетаданныхТип(ОбъектОписанияМетаданныхСсылка) + "." + ОбъектОписанияМетаданныхСсылка.Имя;
	
					КонецЕсли;
					
					ОбъектБазыКВыгрузке.Наименование = Наименование; 
					ОбъектБазыКВыгрузке.ПолноеНаименование = Наименование;
					ОбъектБазыКВыгрузке.НаименованиеЛатиница = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ОбъектБазыКВыгрузке.ПолноеНаименование);  
										
					ОбъектБазыКВыгрузке.Выгружать = Истина;
					ОбъектБазыКВыгрузке.ОбменДанными.Загрузка = Истина;
					ОбъектБазыКВыгрузке.Записать(); 
					
					ОбъектБазыКВыгрузкеСсылка = ОбъектБазыКВыгрузке.Ссылка;
					СтруктураДанных.СтрокаДерева.ОбъектБазыКВыгрузке = ОбъектБазыКВыгрузкеСсылка; 
					
					//++ 06.06.2025 Кибернетика Корыткин запись в регистр к повторной выгрузке
					РСПовторнойВыгрузки = РегистрыСведений.ЗаданияНаПовторнуюВыгрузку.СоздатьМенеджерЗаписи();
					РСПовторнойВыгрузки.БазаДанных = СтруктураДанных.База;
					РСПовторнойВыгрузки.ОбъектКВыгрузке = ОбъектБазыКВыгрузкеСсылка;
					РСПовторнойВыгрузки.Записать();
					//-- 06.06.2025
					
			КонецЕсли; 
			
			ОбъектБазыКВыгрузке = ОбъектБазыКВыгрузкеСсылка.ПолучитьОбъект();
			ОбъектБазыКВыгрузке.ОбъектЕдиногоФормата = ОбъектЕдиногоФорматаСсылка;
			ОбъектБазыКВыгрузке.Пояснение = "Автоматически обновлен из формы конструктора (" + ТекущаяДата() + ")";
			ОбъектБазыКВыгрузке.ПометкаУдаления = Ложь;
			
			Если ЗначениеЗаполнено(СтруктураДанных.ДанныеСопоставленияПолей) Тогда
				
				ОбъектБазыКВыгрузке.СтруктураФайла.Очистить();  
				
				Для Каждого СтрокаДанныхСопоставления Из СтруктураДанных.ДанныеСопоставленияПолей Цикл 
					
					//Оставлено для обновления существующих строк
					//↓
					СтрокаСтруктураФайла = ОбъектБазыКВыгрузке.СтруктураФайла.Найти(СтрокаДанныхСопоставления.ОбъектОписанияМетаданных, "ОбъектСтруктурыМетаданных");
					Если СтрокаСтруктураФайла = Неопределено Тогда 
						СтрокаСтруктураФайла = ОбъектБазыКВыгрузке.СтруктураФайла.Добавить();  
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаСтруктураФайла, СтрокаДанныхСопоставления); 
					СтрокаСтруктураФайла.ОбъектСтруктурыМетаданных = СтрокаДанныхСопоставления.ОбъектОписанияМетаданных;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ОбъектБазыКВыгрузке.Модифицированность() Тогда 
				ОбъектБазыКВыгрузке.Записать();	 
			КонецЕсли;
			
		//КонецЕсли; 
		
	Исключение
		
		СтруктураВозврата.СтатусВозврата = Ложь;
		СтруктураВозврата.ОписаниеОшибки = СокрЛП(ОписаниеОшибки())
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураВозврата
	
КонецФункции

&НаКлиенте
Процедура БазаПриИзменении(Элемент)
	
	ОбновитьДанныеВременныхДинамическихРеквизитов()

КонецПроцедуры

&НаКлиенте
Процедура БазаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.База = Неопределено;
	ОбновитьДанныеВременныхДинамическихРеквизитов();
	
	УстановитьОформлениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьОбъектЕдиногоФорматаДанныхНажатие(Элемент) 
	
	Префикс = СтрЗаменить(Элемент.Имя, "_ПодставитьОбъектЕдиногоФорматаДанных", "");   
	
	НаименованиеЕдиногоФорматаДанныхВЦеляхАктуализации = НаименованиеЕдиногоФорматаДанныхВЦеляхАктуализации(ЭтаФорма[Префикс + "_ОбъектОписанияМетаданных"], СтрНачинаетсяС(Префикс, "Подчиненный"));
	ПодставитьОбъектЕдиногоФорматаДанныхНаСервере(Префикс, НаименованиеЕдиногоФорматаДанныхВЦеляхАктуализации); 
	
	Если ЗначениеЗаполнено(ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"]) Тогда 
		
		ОбъектЕдиногоФорматаДанныхПредставлениеЗавершениеВыбораНаСервере(Новый Структура("ОбъектОписанияМетаданных, ОбъектЕдиногоФорматаДанных, Префикс", 
																							ЭтаФорма[Префикс + "_ОбъектОписанияМетаданных"], 
																							ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"], 
																							Префикс)); 
		
		ОбновитьДанныеИнтерактивногоПодбора();                                                                          
		УстановитьОформлениеЭлементовФормы();   
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти элемент единого формата данных по наименованию: '" + НаименованиеЕдиногоФорматаДанныхВЦеляхАктуализации + "'",,, СтрЗаменить(Элемент.Имя, "ПодставитьОбъектЕдиногоФорматаДанных", "ОбъектЕдиногоФорматаДанныхПредставление"));		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодставитьОбъектЕдиногоФорматаДанныхНаСервере(Префикс, Наименование)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЕдиныйФорматДанных.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ЕдиныйФорматДанных КАК ЕдиныйФорматДанных
	                      |ГДЕ
	                      |	ЕдиныйФорматДанных.Наименование ПОДОБНО &Наименование
	                      |	И НЕ ЕдиныйФорматДанных.ПометкаУдаления"); 
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"] = ВыборкаЗапроса.Ссылка;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура АктуализироватьСоставЕдиногоФорматаДанныхНажатие(Элемент) 
	
	Префикс = СтрЗаменить(Элемент.Имя, "_АктуализироватьСоставЕдиногоФорматаДанных", "");
	АктуализироватьСоставПолейЕдиногоФорматаДанных(Префикс) 
	
КонецПроцедуры  

&НаКлиенте
Процедура АктуализироватьСоставПолейЕдиногоФорматаДанных(Префикс)
	
	ПараметрыФормы = Новый Структура("Ключ, ОбъектОписанияМетаданных, Наименование, ОбъектОписанияМетаданныхРодитель, ОбъектЕдиногоФорматаДанных, ОбъектЕдиногоФорматаДанныхРодитель", 
										Объект,
										ЭтаФорма[Префикс + "_ОбъектОписанияМетаданных"],
										НаименованиеЕдиногоФорматаДанныхВЦеляхАктуализации(ЭтаФорма[Префикс + "_ОбъектОписанияМетаданных"], СтрНачинаетсяС(Префикс, "Подчиненный")),
										Корневой_ОбъектОписанияМетаданных,
										ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"], 
										?(СтрНачинаетсяС(Префикс, "Подчиненный"), Корневой_ОбъектЕдиногоФорматаДанных, Неопределено)); 
										
	ОткрытьФорму("Обработка.КонструкторСоответствияПолей.Форма.ФормаАктуализацииПолейТаблицыЕФД", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("АктуализироватьСоставПолейЕдиногоФорматаДанныхЗакрытиеФормы", ЭтаФорма, Новый Структура("Префикс", Префикс)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры 

&НаСервереБезКонтекста
Функция НаименованиеЕдиногоФорматаДанныхВЦеляхАктуализации(ОбъектОписанияМетаданных, ЕстьРодитель = Ложь) 
	
	Префикс = "";
	
	Если ОбъектОписанияМетаданных.Тип = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Справочник") Тогда
		Префикс = "s_";
	ИначеЕсли ОбъектОписанияМетаданных.Тип = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Документ") Тогда
		Префикс = "d_";
	ИначеЕсли ОбъектОписанияМетаданных.Тип = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Перечисление") Тогда
		Префикс = "p_";
	ИначеЕсли ОбъектОписанияМетаданных.Тип = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.РегистрНакопления") Тогда
		Префикс = "rn_";
	ИначеЕсли ОбъектОписанияМетаданных.Тип = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.РегистрСведений") Тогда
		Префикс = "rs_"; 
	КонецЕсли;
	
	Наименование = Префикс + СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СокрЛП(ОбъектОписанияМетаданных.Имя));
	
	Если ЕстьРодитель Тогда 
		//Наименование = "Табличная часть '" + СокрЛП(ОбъектОписанияМетаданных.Наименование) + "' (" + СокрЛП(ОбъектЕдиногоФорматаДанныхРодитель) + ")";
		Наименование = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СокрЛП(ОбъектОписанияМетаданных.Наименование));	
	КонецЕсли;
	
	Возврат Наименование
	
КонецФункции

&НаКлиенте
Процедура АктуализироватьСоставПолейЕдиногоФорматаДанныхЗакрытиеФормы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт   
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма[ДополнительныеПараметры.Префикс + "_ОбъектЕдиногоФорматаДанных"]) И Значениезаполнено(РезультатЗакрытия) Тогда
		
		ДополнительныеПараметры.Вставить("РезультатЗакрытия", РезультатЗакрытия);
		
		ТекстВопроса = НСтр("ru = 'По результату актуализации создан/обновлен объект единого формата данных. Сопоставить с текущей таблицей?'");
				
		Оповещение = Новый ОписаниеОповещения("АктуализироватьСоставПолейЕдиногоФорматаДанныхОбработкаОтвета", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		
	Иначе
		АктуализироватьСоставПолейЕдиногоФорматаДанныхЗавершение();   
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура АктуализироватьСоставПолейЕдиногоФорматаДанныхОбработкаОтвета(Результат, Параметры) Экспорт   
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		Префикс = Параметры.Префикс;
		ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"] = Параметры.РезультатЗакрытия;
			
		ОбъектЕдиногоФорматаДанныхПредставлениеЗавершениеВыбораНаСервере(Новый Структура("ОбъектОписанияМетаданных, ОбъектЕдиногоФорматаДанных, Префикс", 
																							ЭтаФорма[Префикс + "_ОбъектОписанияМетаданных"], 
																							ЭтаФорма[Префикс + "_ОбъектЕдиногоФорматаДанных"], 
																							Префикс)); 
		
	КонецЕсли;  

	АктуализироватьСоставПолейЕдиногоФорматаДанныхЗавершение();   
	
КонецПроцедуры   

&НаКлиенте
Процедура АктуализироватьСоставПолейЕдиногоФорматаДанныхЗавершение()   
	
    ИДЗадания  = "";
	ПараметрыЗапуска = ПодготовитьДанныеДляДлительнойОперации("дзСтруктураЕдиногоФорматаДанных");
	
	УстановитьСтраницуПрогрессаОбработки();
		
	СтруктураФоновогоЗадания = ВыполнитьФоновоеЗаданиеОбновитьДанныеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИДЗадания =  СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.Интервал = 2; 
	
	ДополнительныеПараметры = Новый Структура("КлючУникальности", КлючУникальности); 
	
	//Ожидать завершения выполнение процедуры в фоновом задании и открыть форму ожидания длительной операции.
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания,
												Новый ОписаниеОповещения("ОбновитьДанныеВременныхДинамическихРеквизитовПроверкаВыполнения", ЭтотОбъект, ДополнительныеПараметры),
												ПараметрыОжидания);	
												
	ОбновитьДанныеИнтерактивногоПодбора();
			
КонецПроцедуры 

#Область Устарело 

&НаКлиенте
Процедура дзИнтерактивныйПодборВыборЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт 
	
	ТекДанные = Элементы.дзИнтерактивныйПодбор.ТекущиеДанные;
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	ТекДанные.КлючСвязи = ВыбранноеЗначение;
	
	//Поиск по 0 уровню
	НайденныйЭлементДерева = НайтиЭлементВКоллекции(ЭтаФорма["дзДанныеСопоставления"], Новый Структура("ОбъектОписанияМетаданных, ОбъектЕдиногоФорматаДанных", 
																												Корневой_ОбъектОписанияМетаданных,
																												Корневой_ОбъектЕдиногоФорматаДанных));   
		
	Если НЕ НайденныйЭлементДерева = Неопределено Тогда
		
		СписокЭлементовКОбработке = Новый СписокЗначений;
		
		//Для Каждого ПодСтрокаУровень1 Из НайденныйЭлементДерева.ПолучитьЭлементы() Цикл   
		//	
		//	ЭтоГруппаТабличныхЧастей = ПодСтрокаУровень1.ОбъектОписанияМетаданных = ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть");   
		//	
		//	Если ЭтоГруппаТабличныхЧастей Тогда 
		//		
		//		Для Каждого ПодСтрокаУровень2 Из ПодСтрокаУровень1.ПолучитьЭлементы() Цикл  
		//			
		//			//Поиск по 2 уровню
		//			НайденныйЭлементДерева = НайтиЭлементВКоллекции(ПодСтрокаУровень2, Новый Структура("ОбъектОписанияМетаданных", ТекДанные.ОбъектОписанияМетаданных));   
		//			
		//			Если НЕ НайденныйЭлементДерева = Неопределено Тогда 
		//				СписокЭлементовКОбработке.Добавить(НайденныйЭлементДерева);
		//			КонецЕсли;	
		//			
		//		КонецЦикла;
		//		
		//	Иначе   
		//		
		//		//Поиск по 1 уровню
		//		НайденныйЭлементДерева = НайтиЭлементВКоллекции(ПодСтрокаУровень1, Новый Структура("ОбъектОписанияМетаданных", ТекДанные.ОбъектОписанияМетаданных));   
		//		
		//		Если НЕ НайденныйЭлементДерева = Неопределено Тогда 
		//			СписокЭлементовКОбработке.Добавить(НайденныйЭлементДерева);
		//		КонецЕсли;	
		//		
		//	КонецЕсли; 
		//	
		//КонецЦикла;  
		
		НайденныйЭлементДерева = НайтиЭлементВКоллекции(НайденныйЭлементДерева, Новый Структура("ОбъектОписанияМетаданных", ТекДанные.ОбъектОписанияМетаданных));   
		
		Если НЕ НайденныйЭлементДерева = Неопределено Тогда 
			СписокЭлементовКОбработке.Добавить(НайденныйЭлементДерева);
		КонецЕсли;	
				
		Для Каждого ЗначениеСписка Из СписокЭлементовКОбработке Цикл
			
			ЭлементДерева = ЗначениеСписка.Значение;
			ЗаполнитьЗначенияСвойств(ЭлементДерева, ТекДанные, "КлючСвязи");
			
		КонецЦикла;  
				
	КонецЕсли; 
	
	//СтруктураПараметров = Новый Структура("ЭтоСтрокаИнтерактивногоСопоставления, КлючСвязи",
	//										ТекДанные.ЭтоСтрокаИнтерактивногоСопоставления,
	//										ТекДанные.КлючСвязи);
											
	//ТекДанные.ПредставлениеДанныхЕдиногоФормата = ОбновитьПредставлениеЭлемента_дзИнтерактивныйПодбор(СтруктураПараметров);
	//ТекДанные.СтатусОбработки = ОбновитьСтатусОбработки_дзИнтерактивныйПодбор(СтруктураПараметров);    
					
КонецПроцедуры

&НаСервере
Функция ВернутьСоставДоступныхГруппПоТипу()     
	
	ТипОбъекта = Корневой_ОбъектОписанияМетаданных.Тип;
	МетаданныеТипаОбъекта = Корневой_ОбъектОписанияМетаданных.Тип.Метаданные();
	
	СписокДоступныхГрупп = Новый СписокЗначений;
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ДоступныеГруппыПолейПоТипам");
	
	ИмяОбласти = "Группа_" + МетаданныеТипаОбъекта.ЗначенияПеречисления[Перечисления[МетаданныеТипаОбъекта.Имя].Индекс(ТипОбъекта)].Имя; 
	
	Если Макет.Области.Найти(ИмяОбласти) = Неопределено Тогда 
		ИмяОбласти = "Группа_ПоУмолчанию"; 
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти); 
	
	Для СчетчикСтрок = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		СписокДоступныхГрупп.Добавить(Перечисления.ВидыСвойств[ОбластьМакета.Область("R" + СчетчикСтрок + "C1").Текст]); 
	КонецЦикла;
	
	Возврат СписокДоступныхГрупп
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбработатьДанныеГруппыСтрокСопоставленияДанных(СтруктураДанных, КоллекцияСтрокПриемник, ДобавлятьОтсутствующие = Ложь)

	ДанныеРодительскойСтроки = СтруктураДанных.ДанныеРодительскойСтроки;
	Данные = СтруктураДанных.Данные; 
	
	СтруктураОтбора = Новый Структура("ОбъектОписанияМетаданных", ДанныеРодительскойСтроки);
	МассивНайденныхСтрок = КоллекцияСтрокПриемник.НайтиСтроки(СтруктураОтбора);  
	
	Если НЕ ЗначениеЗаполнено(МассивНайденныхСтрок) И ДобавлятьОтсутствующие Тогда
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Данные", Новый Структура("ОбъектОписанияМетаданных", СтруктураОтбора.ОбъектОписанияМетаданных));
		
		ВыполнитьДействиеСтрокиСопоставленияДанных(СтруктураЗаполнения, КоллекцияСтрокПриемник, "Добавить");
		
		МассивНайденныхСтрок = КоллекцияСтрокПриемник.НайтиСтроки(СтруктураОтбора); 
	КонецЕсли;   
	
	Для Каждого ЗначениеМассива Из МассивНайденныхСтрок Цикл 
		
		СтрокаРодителя = ЗначениеМассива;
		
		Если Данные.Свойство("Данные") Тогда  
			СтрокаРодителя = ОбработатьДанныеГруппыСтрокСопоставленияДанных(Данные, ЗначениеМассива.Строки, ДобавлятьОтсутствующие); 
		КонецЕсли;    
		
	КонецЦикла;
	
	Возврат СтрокаРодителя
	
КонецФункции

&НаКлиенте
Процедура РазвернутьЭлементКоллекции(ОбъектИтерации, КоллекцияЭлементов)
	
	РодительОбъектаИтерации = ОбъектИтерации.ПолучитьРодителя();
	КоллекцияЭлементов.Развернуть(ОбъектИтерации.ПолучитьИдентификатор());
	
	Если НЕ РодительОбъектаИтерации = Неопределено Тогда
		РазвернутьЭлементКоллекции(РодительОбъектаИтерации, КоллекцияЭлементов)		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНастройкуВыгрузки(Команда)   
	
	ПараметрыФормы = Новый Структура("Ключ, дзСтруктураМетаданных", Объект, дзСтруктураМетаданных); 
										
	ОткрытьФорму("Обработка.КонструкторСоответствияПолей.Форма.ФормаКопированияНастроекВыгрузки", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти