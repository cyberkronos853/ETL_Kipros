Функция Версия() Экспорт 
	
	ПредставлениеВерсии = "";
	Комментарий = СокрЛП(Метаданные().Комментарий);
	ПозицияСред =  СтрНайти(Комментарий, "Версия");
	Если НЕ ПозицияСред = 0 Тогда
		ПредставлениеВерсии = Сред(Комментарий, ПозицияСред, 11);
		ПредставлениеВерсии = СокрЛП(СтрЗаменить(ПредставлениеВерсии, "Версия", ""));
	КонецЕсли;
	
	Возврат ПредставлениеВерсии
	
КонецФункции

Процедура ПолучитьДанныеВременнойКоллекцииФормы(СтруктураПараметров) Экспорт
	
	ОбъектКоллекцииПриемник = Неопределено;
	
	ИмяОбъектаКоллекции = СтруктураПараметров.ИмяОбъектаКоллекции;
	
	ИмяСКД = СтрЗаменить(ИмяОбъектаКоллекции, "дз", "");
	ИмяСКД = СтрЗаменить(ИмяСКД, "тз", "");  
	
	СхемаКомпоновкиДанных = ПолучитьМакет("СКД_" + ИмяСКД);  
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда 
	
		НастройкиМакета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;  
		
		ВнешниеНаборыДанных = Новый Структура;		
		//ВнешниеНаборыДанных.Вставить("тзТранзитивнаяИерархияСтруктураМетаданных", РеквизитФормыВЗначение("тзТранзитивнаяИерархияСтруктураМетаданных"));

		ЗаполнитьПараметрыСКД(НастройкиМакета, СтруктураПараметров.ПараметрыСКД);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиМакета,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ОбъектКоллекцииИсточник = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ОбъектКоллекцииИсточник);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);  
		
		ЗаполнитьСтрокиВременнойКоллекции(ОбъектКоллекцииИсточник, ИмяОбъектаКоллекции, СтруктураПараметров.ОбъектКоллекцииПриемник);
				
	ИначеЕсли ТипЗнч(СхемаКомпоновкиДанных) = Тип("ТекстовыйДокумент")
		И НЕ СтрНайти(ИмяОбъектаКоллекции, "СтруктураМетаданных") = 0 Тогда
				
		СтруктураТекстаЗапроса = Новый Структура("ТекстПролог, ТекстРефрен, ТекстЭпилог", "", "", "");
		Выполнить(СхемаКомпоновкиДанных.ПолучитьТекст());
		
		ИмяСправочника = "СтруктураМетаданных"; 
		
		ОбъектКоллекцииИсточник = ТранзитивнаяИерархияСправочника(ИмяСправочника, 5, СтруктураТекстаЗапроса, СтруктураПараметров.ПараметрыСКД); 
		
		Для Каждого Колонка Из ОбъектКоллекцииИсточник.Колонки Цикл 
			Колонка.Имя = СтрЗаменить(Колонка.Имя, "СтруктураМетаданных", "ОбъектОписанияМетаданных");
			ОбъектКоллекцииИсточник.Индексы.Добавить(Колонка.Имя); 
		КонецЦикла;  
		
		//-------
		//заглушка
		//-------
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьПараметрыСКД(НастройкиМакета, ПараметрыСКД) 
		
	Для Каждого КлючИЗначение Из ПараметрыСКД Цикл 
				
		ИмяПараметра = КлючИЗначение.Ключ;
		ЗначениеПараметра = КлючИЗначение.Значение;
		
		ЗначениеПараметраНастроек = НастройкиМакета.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
		Если НЕ ЗначениеПараметраНастроек = Неопределено Тогда  
			ЗначениеПараметраНастроек.Значение = ЗначениеПараметра;
			ЗначениеПараметраНастроек.Использование = Истина;      
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры	

Процедура ЗаполнитьСтрокиВременнойКоллекции(ОбъектКоллекцииИсточник, ИмяОбъектаКоллекции, ОбъектКоллекцииПриемник)
	
	//ОбъектКоллекцииПриемник.Строки.Очистить();
	ОбъектИтерации = ОбъектКоллекцииИсточник;
	Если ТипЗнч(ОбъектИтерации) = Тип("ДеревоЗначений") Тогда
		ОбъектИтерации = ОбъектИтерации.Строки;
	КонецЕсли;
	
	Для Каждого СтрокаОбъектаИтерации Из ОбъектИтерации Цикл
		ДобавитьСтрокуВременнойКоллекции(ИмяОбъектаКоллекции, СтрокаОбъектаИтерации, ОбъектКоллекцииПриемник.Строки)
	КонецЦикла; 

	Если ИмяОбъектаКоллекции = "дзСтруктураМетаданных"
		И ОбъектКоллекцииПриемник.Колонки.Найти("служХеш") = Неопределено Тогда
			ОбъектКоллекцииПриемник.Колонки.Добавить("служХеш", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32)));
			//Если ИмяОбъектаКоллекции = "дзДанныеСопоставления" Тогда 
			//СкорректироватьДанныеВременнойКоллекцииФормы(ОбъектКоллекцииИсточник);
	КонецЕсли;
		
КонецПроцедуры

Функция ДобавитьСтрокуВременнойКоллекции(ИмяОбъектаКоллекции, СтрокаКоллекцииИсточник, КоллекцияСтрокПриемник)
	
	НаименованиеКолонкиИсточник = "";
	СтрокаПриемник = КоллекцияСтрокПриемник.Добавить();
	
	СтруктураИменКолонок = Новый Структура;  
	
	Если ИмяОбъектаКоллекции = "дзСтруктураМетаданных" Тогда  
		
		Если СтрокаКоллекцииИсточник.Уровень() = 0 Тогда
			СтруктураИменКолонок.Вставить("ТипМетаданныхТип", "ОбъектОписанияМетаданных");  
		ИначеЕсли СтрокаКоллекцииИсточник.Уровень() = 1 Тогда
			СтруктураИменКолонок.Вставить("ТипМетаданных", "ОбъектОписанияМетаданных");
		ИначеЕсли СтрокаКоллекцииИсточник.Уровень() = 2 Тогда
			СтруктураИменКолонок.Вставить("ВидМетаданныхВид", "ОбъектОписанияМетаданных");  
		ИначеЕсли СтрокаКоллекцииИсточник.Уровень() = 3 Тогда
			СтруктураИменКолонок.Вставить("ВидМетаданных", "ОбъектОписанияМетаданных");   
		ИначеЕсли СтрокаКоллекцииИсточник.Уровень() = 4 Тогда
			СтруктураИменКолонок.Вставить("РеквизитТЧ", "ОбъектОписанияМетаданных");
		КонецЕсли;  
		
		Для Каждого КлючИЗначение Из СтруктураИменКолонок Цикл 
			СтруктураИменКолонок.Вставить(КлючИЗначение.Ключ + "Синоним", "Синоним");  
		КонецЦикла;
		
	ИначеЕсли ИмяОбъектаКоллекции = "дзСтруктураЕдиногоФорматаДанных" Тогда  
		
		Если СтрокаКоллекцииИсточник.Уровень() = 0 Тогда
			СтруктураИменКолонок.Вставить("Ссылка");  
		ИначеЕсли СтрокаКоллекцииИсточник.Уровень() = 1 Тогда 
			СтруктураИменКолонок.Вставить("ИмяПоля");  
			СтруктураИменКолонок.Вставить("ИмяПоляSQL");  
			СтруктураИменКолонок.Вставить("КлючСвязи");  
		КонецЕсли;
		
	ИначеЕсли ИмяОбъектаКоллекции = "дзДанныеСопоставления" Тогда   
		
		СтруктураИменКолонок.Вставить("ОбъектОписанияМетаданных");  
		СтруктураИменКолонок.Вставить("ОбъектБазыКВыгрузке");  
		СтруктураИменКолонок.Вставить("ОбъектЕдиногоФорматаДанных");  
		//Если СтрокаКоллекцииИсточник.Уровень() > 0 Тогда
			СтруктураИменКолонок.Вставить("КлючСвязи");  
		//КонецЕсли; 
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураИменКолонок Цикл 
		
		ИмяКолонкиИсточник = КлючИЗначение.Ключ;
		ИмяКолонкиПриемник = ?(ПустаяСтрока(КлючИЗначение.Значение), КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
		ЗначениеКолонки = СтрокаКоллекцииИсточник[ИмяКолонкиИсточник];
		
		Если НЕ СтрокаПриемник.Владелец().Колонки.Найти(ИмяКолонкиПриемник) = Неопределено Тогда
			СтрокаПриемник[ИмяКолонкиПриемник] = ЗначениеКолонки;
		КонецЕсли;
			
	КонецЦикла;  
	
	Если НЕ СтрокаПриемник.Владелец().Колонки.Найти("служДоступенКВыбору") = Неопределено Тогда
		СтрокаПриемник.служДоступенКВыбору = Истина; 
	КонецЕсли;    
	
	Если НЕ СтрокаПриемник.Владелец().Колонки.Найти("Картинка") = Неопределено
		И НЕ СтрокаПриемник.ОбъектОписанияМетаданных = Неопределено Тогда
			СтрокаПриемник.Картинка = ПолучитьКартинкуПоМетаданнымОбъектаОписания(СтрокаПриемник.ОбъектОписанияМетаданных); 
	КонецЕсли;  
	
	Для Каждого ПодСтрокаДЗ Из СтрокаКоллекцииИсточник.Строки Цикл
		ДобавитьСтрокуВременнойКоллекции(ИмяОбъектаКоллекции, ПодСтрокаДЗ, СтрокаПриемник.Строки)
	КонецЦикла;
	
КонецФункции

Функция ТранзитивнаяИерархияСправочника(ИмяСправочника, МаксимальнаяДлинаПути, СтруктураТекстаЗапроса, ПараметрыСКД) Экспорт

    Запрос = Новый Запрос(СтруктураТекстаЗапроса.ТекстПролог);

    МаксимальнаяДлинаЗамыканий = 1;

    Пока МаксимальнаяДлинаЗамыканий < МаксимальнаяДлинаПути Цикл

        Запрос.Текст = Запрос.Текст + СтрЗаменить(СтрЗаменить(СтруктураТекстаЗапроса.ТекстРефрен, "#1", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0")), "#2", Формат(2 * МаксимальнаяДлинаЗамыканий, "ЧГ=0"));

        МаксимальнаяДлинаЗамыканий = 2 * МаксимальнаяДлинаЗамыканий

    КонецЦикла;

    Запрос.Текст = Запрос.Текст + СтрЗаменить(СтруктураТекстаЗапроса.ТекстЭпилог, "#2", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0")); 
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяСправочника);
    Запрос.УстановитьПараметр("База", ПараметрыСКД.База);
	
    Возврат Запрос.Выполнить().Выгрузить()

КонецФункции

Функция ПолучитьКартинкуПоМетаданнымОбъектаОписания(ЗначенияОписания) Экспорт 
	
	ПрефиксИмениКартинки = "";    
	значМетаданные = ЗначенияОписания.Метаданные();
	ОбъектИзвлеченияИнфоМетаданных = Неопределено; 
	
	Если значМетаданные = Метаданные.Перечисления.ТипыОбъектов
		ИЛИ значМетаданные = Метаданные.Перечисления.ВидыСвойств Тогда
			ОбъектИзвлеченияИнфоМетаданных = значМетаданные.ЗначенияПеречисления[Перечисления[значМетаданные.Имя].Индекс(ЗначенияОписания)];
	ИначеЕсли значМетаданные = Метаданные.Справочники.СтруктураМетаданных Тогда
		//ОбъектИзвлеченияИнфоМетаданных = значМетаданные;
		//.ЗначенияПеречисления[Перечисления[значМетаданные.Имя].Индекс(ЗначениеКолонки.Тип)];
		//
		//Если ЗначениеЗаполнено(ЗначениеКолонки.Тип) Тогда 
		//	значМетаданные = ЗначениеКолонки.Тип.Метаданные(); 
		//КонецЕсли;
	КонецЕсли; 
	
	Если НЕ ОбъектИзвлеченияИнфоМетаданных = Неопределено Тогда 
		ИмяКартинки = ОбъектИзвлеченияИнфоМетаданных.Имя;  
	Иначе
		ИмяКартинки = "ПримечаниеЖурналаРегистрации";  
	КонецЕсли;
	
	ИмяКартинки = СтрЗаменить(ИмяКартинки, "ПредопределенноеЗначение", "Переименовать");
	ИмяКартинки = СтрЗаменить(ИмяКартинки, "СтандартныйРеквизит", "ОформлениеКвадратыЗаполненные");
	ИмяКартинки = СтрЗаменить(ИмяКартинки, "ВидыСубконтоСчета", "ПризнакиУчетаСубконто");
	ИмяКартинки = СтрЗаменить(ИмяКартинки, "Свойство", "Свойства");
	
	Если НЕ СтрНайти(ИмяКартинки, "Строка") = 0 
		ИЛИ НЕ СтрНайти(ИмяКартинки, "Хранилищезначения") = 0  
		ИЛИ НЕ СтрНайти(ИмяКартинки, "Булево") = 0  
		ИЛИ НЕ СтрНайти(ИмяКартинки, "Число") = 0  
		ИЛИ НЕ СтрНайти(ИмяКартинки, "Дата") = 0  
		ИЛИ НЕ СтрНайти(ИмяКартинки, "Уникальныйидентификатор") = 0  
		ИЛИ НЕ СтрНайти(ИмяКартинки, "Константа") = 0 
		ИЛИ НЕ СтрНайти(ИмяКартинки, "ТабличнаяЧасть") = 0  
		ИЛИ НЕ СтрНайти(ИмяКартинки, "ЗначениеПеречисления") = 0 
		ИЛИ НЕ СтрНайти(ИмяКартинки, "ПризнакиУчетаСубконто") = 0 Тогда 
		ПрефиксИмениКартинки = "МетаданныеТип";
	КонецЕсли;
	
	ИмяКартинки = ПрефиксИмениКартинки + ИмяКартинки; 
	
	Попытка
		Возврат БиблиотекаКартинок[ИмяКартинки];
	Исключение
		Возврат Неопределено
	КонецПопытки;
	
КонецФункции

Функция ПолучитьМассивДоступныхВидовКВыбору() Экспорт 
	
	МассивДоступныхВидовСвойств = Новый Массив;
	МассивДоступныхВидовСвойств.Добавить(Перечисления.ВидыСвойств.Свойство);
	МассивДоступныхВидовСвойств.Добавить(Перечисления.ВидыСвойств.Реквизит);
	МассивДоступныхВидовСвойств.Добавить(Перечисления.ВидыСвойств.ПредопределенноеЗначение);
	
	Возврат МассивДоступныхВидовСвойств
	
КонецФункции

Функция ОбработатьИтерациюОбновленияДанных(СтруктураПараметров, АдресРезультата) Экспорт
		
	Для Каждого КлючИЗначение Из СтруктураПараметров.СтруктураДанныхКоллекций Цикл  
		
		ИмяОбъектаКоллекции = КлючИЗначение.Ключ;
		
		ИмяСКД = СтрЗаменить(ИмяОбъектаКоллекции, "дз", "");
		ИмяСКД = СтрЗаменить(ИмяСКД, "тз", "");  
						
		ПолучитьДанныеВременнойКоллекцииФормы(Новый Структура("ИмяОбъектаКоллекции, ПараметрыСКД, ОбъектКоллекцииПриемник", 
																	ИмяОбъектаКоллекции,
																	СтруктураПараметров.ПараметрыСКД,
																	КлючИЗначение.Значение));
		
	КонецЦикла; 

	Если СтруктураПараметров.СтруктураДанныхКоллекций.Свойство("дзДанныеСопоставления") Тогда 
		ОбработатьОбъектКоллекцииПослеПолученияДанных(СтруктураПараметров.СтруктураДанныхКоллекций, "дзСтруктураМетаданных", "ПризнакДоступенКВыбору");
		ОбработатьОбъектКоллекцииПослеПолученияДанных(СтруктураПараметров.СтруктураДанныхКоллекций, "дзСтруктураМетаданных", "ПризнакСопоставлен");   
	КонецЕсли;
	ОбработатьОбъектКоллекцииПослеПолученияДанных(СтруктураПараметров.СтруктураДанныхКоллекций, "дзСтруктураМетаданных", "ПризнакХеш");
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров.СтруктураДанныхКоллекций, АдресРезультата);
	
КонецФункции    

Функция ОбработатьОбъектКоллекцииПослеПолученияДанных(СтруктураДанныхКоллекций, ИмяОбъектаКоллекции, ИмяМетода) 
	
	ОбъектКоллекции = Неопределено;
	СтруктураДанныхКоллекций.Свойство(ИмяОбъектаКоллекции, ОбъектКоллекции);  
	
	Если НЕ ОбъектКоллекции = Неопределено Тогда 
		Выполнить("Обработать" + ИмяМетода + "(СтруктураДанныхКоллекций, ОбъектКоллекции)");
	КонецЕсли;
				
КонецФункции  

Функция ОбработатьПризнакДоступенКВыбору(СтруктураДанныхКоллекций, ОбъектКоллекции, МассивСтрокКОбработке = Неопределено)
		
	МассивДоступныхВидов = ПолучитьМассивДоступныхВидовКВыбору();
	
	ОбработатьМассив = МассивСтрокКОбработке = Неопределено;
	
	Если ОбработатьМассив Тогда 
		МассивСтрокКОбработке = Новый Массив;           
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ОбъектКоллекции.Строки Цикл
		
		Если ТипЗнч(СтрокаДерева.ОбъектОписанияМетаданных) = Тип("СправочникСсылка.СтруктураМетаданных")
			И (СтрокаДерева.ОбъектОписанияМетаданных.Вид = ПредопределенноеЗначение("Перечисление.ВидыСвойств.ТабличнаяЧасть")
			ИЛИ НЕ МассивДоступныхВидов.Найти(СтрокаДерева.ОбъектОписанияМетаданных.Вид) = Неопределено) Тогда 
				МассивСтрокКОбработке.Добавить(СтрокаДерева); 
		КонецЕсли;		
		
		ОбработатьПризнакДоступенКВыбору(СтруктураДанныхКоллекций, СтрокаДерева, МассивСтрокКОбработке)	
		
	КонецЦикла;
	
	Если ОбработатьМассив Тогда 
		дзДанныеСопоставления = СтруктураДанныхКоллекций["дзДанныеСопоставления"];   
		
		Для Каждого СтрокаДерева Из МассивСтрокКОбработке Цикл
			СтрокаДерева.служДоступенКВыбору = НЕ ЗначениеЗаполнено(дзДанныеСопоставления.Строки.НайтиСтроки(Новый Структура("ОбъектОписанияМетаданных", СтрокаДерева.ОбъектОписанияМетаданных), Истина));
		КонецЦикла;
	КонецЕсли;
				
КонецФункции  

Функция ОбработатьПризнакСопоставлен(СтруктураДанныхКоллекций, ОбъектКоллекции, МассивСтрокКОбработке = Неопределено)
		
	ОбработатьМассив = МассивСтрокКОбработке = Неопределено;
	
	Если ОбработатьМассив Тогда 
		МассивСтрокКОбработке = Новый Массив;           
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ОбъектКоллекции.Строки Цикл
		
		Если ТипЗнч(СтрокаДерева.ОбъектОписанияМетаданных) = Тип("СправочникСсылка.СтруктураМетаданных")
			И ЗначениеЗаполнено(СтрокаДерева.ОбъектОписанияМетаданных.Тип) Тогда
				МассивСтрокКОбработке.Добавить(СтрокаДерева); 
		КонецЕсли;		
		
		ОбработатьПризнакСопоставлен(СтруктураДанныхКоллекций, СтрокаДерева, МассивСтрокКОбработке)	
		
	КонецЦикла;
	
	Если ОбработатьМассив Тогда  
		дзДанныеСопоставления = СтруктураДанныхКоллекций["дзДанныеСопоставления"];   

		Для Каждого СтрокаДерева Из МассивСтрокКОбработке Цикл
			СтрокаДерева.служСопоставлен = ЗначениеЗаполнено(дзДанныеСопоставления.Строки.НайтиСтроки(Новый Структура("ОбъектОписанияМетаданных", СтрокаДерева.ОбъектОписанияМетаданных), Истина));
		КонецЦикла;
	КонецЕсли;
				
КонецФункции  

Функция ОбработатьПризнакХеш(СтруктураДанныхКоллекций, ОбъектКоллекции, МассивСтрокКОбработке = Неопределено)
		
	МассивДоступныхВидов = ПолучитьМассивДоступныхВидовКВыбору();
	
	ОбработатьМассив = МассивСтрокКОбработке = Неопределено;
	
	Если ОбработатьМассив Тогда 
		МассивСтрокКОбработке = Новый Массив;           
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ОбъектКоллекции.Строки Цикл
		
		Если ТипЗнч(СтрокаДерева.ОбъектОписанияМетаданных) = Тип("СправочникСсылка.СтруктураМетаданных")
			И НЕ МассивДоступныхВидов.Найти(СтрокаДерева.ОбъектОписанияМетаданных.Вид) = Неопределено Тогда 
				МассивСтрокКОбработке.Добавить(СтрокаДерева); 
		КонецЕсли;		
		
		ОбработатьПризнакХеш(СтруктураДанныхКоллекций, СтрокаДерева, МассивСтрокКОбработке)	
		
	КонецЦикла;
	
	Если ОбработатьМассив Тогда 
		Для Каждого СтрокаДерева Из МассивСтрокКОбработке Цикл   
			
			ПредставлениеТекУровня = "СтрокаДерева.ОбъектОписанияМетаданных";
			ПредставлениеТекущейСтроки = "СокрЛП(" + ПредставлениеТекУровня + ".Имя)"; 
			
			СчетчикИтерации = СтрокаДерева.ОбъектОписанияМетаданных.Уровень();  

			Пока СчетчикИтерации > 0 Цикл
				ПредставлениеТекУровня = ПредставлениеТекУровня + ".Родитель";
				ПредставлениеТекущейСтроки = ПредставлениеТекущейСтроки + " + СокрЛП(" + ПредставлениеТекУровня + ".Имя)"; 
				СчетчикИтерации = СчетчикИтерации - 1;
			КонецЦикла; 
			
			Выполнить("СтрокаДерева.служХеш = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(" + ПредставлениеТекущейСтроки + " )"); 
			
		КонецЦикла;
	КонецЕсли;
				
КонецФункции  