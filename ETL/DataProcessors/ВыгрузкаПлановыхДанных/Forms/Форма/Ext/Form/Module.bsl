
&НаКлиенте
Процедура Выгрузить(Команда)
	
	ВыгрузитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНаСервере()
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	ПутьВыгрузки = константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	Если ПутьВыгрузки = "" Тогда
		Сообщить("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	ПапкаДляВыгрузки = СоздатьПапкуДляВыгрузки();
	ВыгрузитьСправочники(ПапкаДляВыгрузки);
	ВыгрузитьДанные(ПапкаДляВыгрузки);
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	
	СтрокаКоманды = "@echo off";
	Обмен.ОбойтиКаталог(ОбменSQL, СтрокаКоманды, НастройкиОбмена, ПапкаДляВыгрузки, "PlanData", "PlanData");
		
	ОбменSQL.ВыполнитьОбмен(СтрокаКоманды);
	ОбменSQL.ВыполнитьКоманду("build_planData", 
		"DECLARE	@return_value int
		|EXEC	@return_value = build_planData
		|SELECT	@return_value");	
	
	Попытка
		УдалитьФайлы(ПапкаДляВыгрузки);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПапкуДляВыгрузки()
	
	ПутьВыгрузки = константы.КаталогВыгрузкиДляПрочихСистем.Получить();
	Если Прав(ПутьВыгрузки,1) <> "\" Тогда
		ПутьВыгрузки = ПутьВыгрузки + "\";
	КонецЕсли;
	
	ПапкаДляВыгрузки = ПутьВыгрузки + "PlanData\";
	СоздатьКаталог(ПапкаДляВыгрузки);
	Возврат ПапкаДляВыгрузки;
	
КонецФункции

&НаСервере
Функция ПолучитьФайлФСО(ПапкаДляВыгрузки, ИмяФайла, Расширение = ".csv")
	
	FSO = Новый COMОбъект("Scripting.FileSystemObject");  
	ИмяФайлаФСО = ИмяФайла + Расширение;
	
	Возврат FSO.CreateTextFile(ПапкаДляВыгрузки + ИмяФайлаФСО, -1, -1);
	
КонецФункции

&НаСервере
Функция ПреобразоватьОбъектВЗначение(ОбъектПреобразования)
	
	Если ОбъектПреобразования = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	ТипЗначения = ТипЗнч(ОбъектПреобразования);
	Если ТипЗначения = Тип("Дата") Тогда
		Значение = Формат(ОбъектПреобразования, "ДФ = гггг-ММ-дд");
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Значение = Формат(ОбъектПреобразования, "ЧГ=0;ЧН=0;ЧРД=.;ЧДЦ=2");
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Если ОбъектПреобразования = Истина Тогда
			Значение = "1";
		Иначе
			Значение = "0";
		КонецЕсли;
	Иначе
		Значение = XMLСтрока(СокрЛП(ОбъектПреобразования));	
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначенияИзАналитики(КлючАналитики)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок.ТипАналитики КАК ТипАналитики,
	               |	КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок.Аналитика КАК Аналитика
	               |ИЗ
	               |	Справочник.КлючиАналитикиСтрокПлановыхОтчетов.АналитикиСтрок КАК КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок
	               |ГДЕ
	               |	КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", КлючАналитики);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ТипАналитики, Выборка.Аналитика);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСправочники(ПапкаДляВыгрузки)
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	Команда = ОбменSQL.Соединение();
	Команда.CommandText = "TRUNCATE TABLE plan_Reports
						|TRUNCATE TABLE plan_ReportLines
						|TRUNCATE TABLE plan_ReportLineKeys
						|TRUNCATE TABLE plan_KeyTypes
						|TRUNCATE TABLE plan_Scenario";	
	Команда.Execute();
	
	ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "plan_Reports" + "\";
	СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыОтчетов.Ссылка КАК Ссылка,
	               |	ВидыОтчетов.Наименование КАК Наименование,
	               |	ВидыОтчетов.КодОтчета КАК КодОтчета
	               |ИЗ
	               |	Справочник.ВидыОтчетов КАК ВидыОтчетов";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "data");	
	Пока Выборка.Следующий() Цикл	
		СтрокаВыгрузки = XMLСтрока(Выборка.Ссылка) + Символы.Таб + СокрЛП(Выборка.Наименование) + Символы.Таб + СокрЛП(Выборка.КодОтчета) +  Символы.Таб;
		Файл.WriteLine(СтрокаВыгрузки);	
	КонецЦикла;
	Файл.Close();
	
	ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "plan_ReportLines" + "\";
	СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиПлановыхОтчетов.Ссылка КАК Ссылка,
	               |	СтрокиПлановыхОтчетов.Наименование КАК Наименование,
	               |	СтрокиПлановыхОтчетов.КодСтроки КАК КодСтроки,
	               |	СтрокиПлановыхОтчетов.Родитель КАК Родитель,
	               |	СтрокиПлановыхОтчетов.Владелец КАК Владелец,
	               |	СтрокиПлановыхОтчетов.ТипСальдо КАК ТипСальдо
	               |ИЗ
	               |	Справочник.СтрокиПлановыхОтчетов КАК СтрокиПлановыхОтчетов";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "data");	
	Пока Выборка.Следующий() Цикл	
		СтрокаВыгрузки = XMLСтрока(Выборка.Ссылка) + Символы.Таб + СокрЛП(Выборка.Наименование) + Символы.Таб + СокрЛП(Выборка.КодСтроки) +  Символы.Таб +  XMLСтрока(Выборка.Родитель)
			+ Символы.Таб + XMLСтрока(Выборка.Владелец) + Символы.Таб + XMLСтрока(Выборка.ТипСальдо) + Символы.Таб;
		Файл.WriteLine(СтрокаВыгрузки);	
	КонецЦикла;
	Файл.Close();
	
	ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "plan_ReportLineKeys" + "\";
	СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок.Ссылка КАК Ссылка,
	               |	КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок.Ссылка.Наименование КАК Наименование,
	               |	КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок.Ссылка.Владелец КАК Владелец,
	               |	КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок.Аналитика КАК Аналитика,
	               |	КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок.ТипАналитики КАК ТипАналитики
	               |ИЗ
	               |	Справочник.КлючиАналитикиСтрокПлановыхОтчетов.АналитикиСтрок КАК КлючиАналитикиСтрокПлановыхОтчетовАналитикиСтрок";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "data");	
	Пока Выборка.Следующий() Цикл	
		СтрокаВыгрузки = XMLСтрока(Выборка.Ссылка) + Символы.Таб + СокрЛП(Выборка.Наименование) +  Символы.Таб +  XMLСтрока(Выборка.Владелец)
			+ Символы.Таб + СокрЛП(Выборка.Аналитика) + Символы.Таб + XMLСтрока(Выборка.ТипАналитики) + Символы.Таб;
		Файл.WriteLine(СтрокаВыгрузки);	
	КонецЦикла;
	Файл.Close();

	ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "plan_KeyTypes" + "\";
	СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыАналитикиСтрокПлановыхОтчетов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Перечисление.ТипыАналитикиСтрокПлановыхОтчетов КАК ТипыАналитикиСтрокПлановыхОтчетов";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "data");	
	Пока Выборка.Следующий() Цикл	
		СтрокаВыгрузки = XMLСтрока(Выборка.Ссылка) + Символы.Таб;
		Файл.WriteLine(СтрокаВыгрузки);	
	КонецЦикла;
	Файл.Close();
	
	ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "plan_Scenario" + "\";
	СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СценарииПлановыхДанных.Ссылка КАК Ссылка,
	               |	СценарииПлановыхДанных.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.СценарииПлановыхДанных КАК СценарииПлановыхДанных";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "data");	
	Пока Выборка.Следующий() Цикл	
		СтрокаВыгрузки = XMLСтрока(Выборка.Ссылка) + Символы.Таб + СокрЛП(Выборка.Наименование) +  Символы.Таб;
		Файл.WriteLine(СтрокаВыгрузки);	
	КонецЦикла;
	Файл.Close();

КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанные(ПапкаДляВыгрузки)
	
	ОбменSQL = Обработки.ОбменSQL.Создать();
	Команда = ОбменSQL.Соединение();
	Команда.CommandText = "TRUNCATE TABLE plan_Data_tmp";	
	Команда.Execute();

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ФлагУдаления");
	СтруктураДанных.Вставить("Период");
	СтруктураДанных.Вставить("Регистратор");
	СтруктураДанных.Вставить("РегистраторGUID");
	СтруктураДанных.Вставить("СценарийGUID");
	СтруктураДанных.Вставить("ВидОтчетаGUID");
	СтруктураДанных.Вставить("СтрокаОтчетаGUID");
	СтруктураДанных.Вставить("АналитикаСтрокиОтчетаGUID");
	СтруктураДанных.Вставить("Организация");
	СтруктураДанных.Вставить("Валюта");
	СтруктураДанных.Вставить("Подразделение", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.Подразделение);
	СтруктураДанных.Вставить("БанковскийСчет", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.БанковскийСчет);
	СтруктураДанных.Вставить("Касса", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.Касса);
	СтруктураДанных.Вставить("Доходы", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.Доходы);
	СтруктураДанных.Вставить("ДоходыБудущихПериодов", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.ДоходыБудущихПериодов);
	СтруктураДанных.Вставить("НематериальныйАктив", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.НематериальныйАктив);
	СтруктураДанных.Вставить("ОсновноеСредство", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.ОсновноеСредство);
	СтруктураДанных.Вставить("ОбъектСтроительства", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.ОбъектСтроительства);
	СтруктураДанных.Вставить("ЦенныеБумаги", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.ЦенныеБумаги);
	СтруктураДанных.Вставить("Номенклатура", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.Номенклатура);
	СтруктураДанных.Вставить("НоменклатурнаяГруппа", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.НоменклатурнаяГруппа);
	СтруктураДанных.Вставить("Склад", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.Склад);
	СтруктураДанных.Вставить("Контрагент", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.Контрагент);
	СтруктураДанных.Вставить("Договор", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.Договор);
	СтруктураДанных.Вставить("СДДС", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.СДДС);
	СтруктураДанных.Вставить("Расходы", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.Расходы);
	СтруктураДанных.Вставить("РасходыБудущихПериодов", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.РасходыБудущихПериодов);
	СтруктураДанных.Вставить("ТипПлатежа", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.ТипПлатежа);
	СтруктураДанных.Вставить("ТипНалога", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.ТипНалога);
	СтруктураДанных.Вставить("Резервы", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.Резервы);
	СтруктураДанных.Вставить("ТипыАктивовИОбязательств", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.ТипыАктивовИОбязательств);
	СтруктураДанных.Вставить("ФизЛицо", Перечисления.ТипыАналитикиСтрокПлановыхОтчетов.ФизЛицо);
	СтруктураДанных.Вставить("Количество");
	СтруктураДанных.Вставить("Сумма");
	СтруктураДанных.Вставить("ВалютнаяСумма");
	СтруктураДанных.Вставить("УправленческаяСумма");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	0 КАК ФлагУдаления,
	               |	ПлановыеДанныеОтчетов.Период КАК Период,
	               |	ПлановыеДанныеОтчетов.Регистратор КАК Регистратор,
	               |	ПлановыеДанныеОтчетов.Сценарий КАК Сценарий,
	               |	ПлановыеДанныеОтчетов.ВидОтчета КАК ВидОтчета,
	               |	ПлановыеДанныеОтчетов.СтрокаОтчета КАК СтрокаОтчета,
	               |	ПлановыеДанныеОтчетов.АналитикаСтрокиОтчета КАК АналитикаСтрокиОтчета,
	               |	ПлановыеДанныеОтчетов.Организация.GUID КАК Организация,
	               |	ПлановыеДанныеОтчетов.Валюта КАК Валюта,
	               |	ПлановыеДанныеОтчетов.Количество КАК Количество,
	               |	ПлановыеДанныеОтчетов.Сумма КАК Сумма,
	               |	0 КАК ВалютнаяСумма,
	               |	ПлановыеДанныеОтчетов.Сумма КАК УправленческаяСумма
	               |ИЗ
	               |	РегистрСведений.ПлановыеДанныеОтчетов КАК ПлановыеДанныеОтчетов";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПапкаДляВыгрузкиОбъекта = ПапкаДляВыгрузки + "plan_Data" + "\";
	СоздатьКаталог(ПапкаДляВыгрузкиОбъекта);
	
	Файл = ПолучитьФайлФСО(ПапкаДляВыгрузкиОбъекта, "data");	
	Пока Выборка.Следующий() Цикл	
		СоответствиеАналитик = ПолучитьЗначенияИзАналитики(Выборка.АналитикаСтрокиОтчета);
		СтрокаВыгрузки = "";
		Для Каждого Элемент Из СтруктураДанных Цикл		
			Значение = "";
			Если Элемент.Значение = Неопределено Тогда
				Попытка 
					Если Прав(Элемент.Ключ, 4) = "GUID" Тогда
						Значение = XMLСтрока(Выборка[Лев(Элемент.Ключ, СтрДлина(Элемент.Ключ) - 4)]); 
					Иначе
						Значение = ПреобразоватьОбъектВЗначение(Выборка[Элемент.Ключ]);
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				Значение = ПреобразоватьОбъектВЗначение(СоответствиеАналитик.Получить(Элемент.Значение));
			КонецЕсли;
			СтрокаВыгрузки = СтрокаВыгрузки + Значение + Символы.Таб;
		КонецЦикла;
		Файл.WriteLine(СтрокаВыгрузки);	
	КонецЦикла;
	Файл.Close();
	
КонецПроцедуры
