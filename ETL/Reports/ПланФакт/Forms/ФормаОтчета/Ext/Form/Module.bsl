&НаКлиенте
Процедура Сформировать(Команда)
	Если Не ЗначениеЗаполнено(Отчет.Организация) Тогда
		Сообщить("Не выбрана Организация");
		Возврат;
	КонецЕсли;	
	Отчет.Дата1 = ВыборПериода.ДатаНачала;
	Отчет.Дата2 = ВыборПериода.ДатаОкончания;
	
	СформироватьНаСервере();
КонецПроцедуры

&НаСервере
Функция СформироватьНаСервере()
	
	КолМесяцев = ПолучитьКоличествоМесяцев(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания);
	
	Если Бюджет.Код = 1 или Бюджет.Код = 2 или Бюджет.Код = 3 Тогда
		СформироватьБазовыеОтчеты();
	ИначеЕсли Бюджет.Код = 8 Тогда
		СформироватьИнвестПроекты();
	ИначеЕсли Бюджет.Код = 9 Тогда
		СформироватьКредитныйПортфель();
	ИначеЕсли Бюджет.Код = 10 Тогда
		СформироватьДебиторы();
	КонецЕсли;
	
КонецФункции

Процедура СформироватьБазовыеОтчеты()
	
	сообщить("Получение данных по консолидации. "+ТекущаяДатаСеанса());
	
	ИИН=Отчет.Организация.БИН;
	
	Base = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БазыОрганизации.Ссылка.Наименование КАК Ссылка
	|ИЗ
	|	Справочник.Базы.Организации КАК БазыОрганизации
	|ГДЕ
	|	БазыОрганизации.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	БазыОрганизации.Ссылка.Наименование";            
	
	Запрос.УстановитьПараметр("Организация",Отчет.Организация);
	Рез = запрос.Выполнить().Выбрать();
	если Рез.Следующий() Тогда
		Base = Рез.Ссылка;
	КонецЕсли;	

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("id");
	Данные.Колонки.Добавить("Code");
	Данные.Колонки.Добавить("Name");
	Данные.Колонки.Добавить("ParentCode");
	Данные.Колонки.Добавить("AmountPlan",Новый ОписаниеТипов("Число"));
	Данные.Колонки.Добавить("AmountFact",Новый ОписаниеТипов("Число"));
	
	тДерево = Новый ДеревоЗначений;
	тДерево.Колонки.Добавить("id");
	тДерево.Колонки.Добавить("Code");
	тДерево.Колонки.Добавить("Name");
	тДерево.Колонки.Добавить("ParentCode");
	тДерево.Колонки.Добавить("AmountPlan",Новый ОписаниеТипов("Число"));
	тДерево.Колонки.Добавить("AmountFact",Новый ОписаниеТипов("Число"));
	
	МассивКолонокСумм 		= Новый Массив;
	
	
	для а=1 по КолМесяцев Цикл  
		
		Период 	= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		
		СтрокаПериод = ПолучитьПериод(Период);
		
		НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_План_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
	КонецЦикла;
	
	НаимКолонки = "Зн_План_ЗаПериод"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_Факт_ЗаПериод"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ОтклонАбс_ЗаПериод"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ОтклонОтнос_ЗаПериод"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	Рез 	= ФормированиеОтчетаПланФакт.GetReportPlanFact(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания,Base,ИИН,Бюджет.Код);
	для каждого стр из Рез Цикл
		НовСтр = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,стр);
		
		
		Если стр.AllPeriod=Истина Тогда
			СтрокаПериод = "ЗаПериод";
			НаимКолонкиПлан 	 	= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонкиПлан] = стр.AmountPlan;
			
			НаимКолонкиФакт 		= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонкиФакт] = стр.AmountFact;
		Иначе
			СтрокаПериод = ПолучитьПериод(стр.Period);
			
			НаимКолонкиПлан 	 	= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонкиПлан] = стр.AmountPlan;
			
			НаимКолонкиФакт 		= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонкиФакт] = стр.AmountFact;
		КонецЕсли;	
		
	КонецЦикла;	
	
	СтрокаКолонокСумм = СтрСоединить(МассивКолонокСумм, ",");
	Данные.свернуть("Code,Name,id,ParentCode",СтрокаКолонокСумм);  
	
	для каждого стр из Данные Цикл 
		
		
		для а=1 по КолМесяцев Цикл  
			Период 						= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
			СтрокаПериод				= ПолучитьПериод(Период); 
			
			НаимКолонкиПлан 			= "Зн_План_"+СтрокаПериод;
			НаимКолонкиФакт 			= "Зн_Факт_"+СтрокаПериод;
			НаимКолонкиОтклонАбс 		= "Зн_ОтклонАбс_"+СтрокаПериод;
			НаимКолонкиОтклонОтнос 		= "Зн_ОтклонОтнос_"+СтрокаПериод;
			
			стр[НаимКолонкиФакт] 		= Окр(стр[НаимКолонкиФакт]/1000,2);
			стр[НаимКолонкиОтклонАбс] 	= стр[НаимКолонкиФакт] - стр[НаимКолонкиПлан];
			
			если стр[НаимКолонкиПлан]<>0 Тогда
				стр[НаимКолонкиОтклонОтнос] = (стр[НаимКолонкиОтклонАбс] / стр[НаимКолонкиПлан])*100;
			КонецЕсли;
			
		КонецЦикла;	  
		
		СтрокаПериод				= "ЗаПериод"; 
		
		НаимКолонкиПлан 			= "Зн_План_"+СтрокаПериод;
		НаимКолонкиФакт 			= "Зн_Факт_"+СтрокаПериод;
		НаимКолонкиОтклонАбс 		= "Зн_ОтклонАбс_"+СтрокаПериод;
		НаимКолонкиОтклонОтнос 		= "Зн_ОтклонОтнос_"+СтрокаПериод;
		
		стр[НаимКолонкиФакт] 		= Окр(стр[НаимКолонкиФакт]/1000,2);
		стр[НаимКолонкиОтклонАбс] 	= стр[НаимКолонкиФакт] - стр[НаимКолонкиПлан];
		
		если стр[НаимКолонкиПлан]<>0 Тогда
			стр[НаимКолонкиОтклонОтнос] = (стр[НаимКолонкиОтклонАбс] / стр[НаимКолонкиПлан])*100;
		КонецЕсли;
		
	КонецЦикла;	  
	
	
	ПреобразоватьВДЗРекурсия(тДерево, Данные, "");
	
	//ПересчитатьВсеДерево(тДерево.Строки);
	//
	//ПересчетСтрок(тДерево);
	
	ПечатьБазовыеОтчеты(Данные,тДерево,ТабличныйДокумент);
	
КонецПроцедуры	

Процедура ПечатьБазовыеОтчеты(ТЗ_Общий,ДанныеДерева,ТабДок)
	
	
	отОб = РеквизитФормыВЗначение("Отчет");
	Макет = отОб.ПолучитьМакет("Макет");
	ШапкаН = Макет.ПолучитьОбласть("Шапка|Начало");
	ШапкаН.Параметры.Период 		= Формат(ВыборПериода.ДатаНачала,"ДЛФ=DD")+" - "+Формат(КонецДня(ВыборПериода.ДатаОкончания),"ДЛФ=DD");
	ШапкаН.Параметры.Организация 	= Отчет.Организация;
	ШапкаН.Параметры.ВидОтчета 		= Бюджет.Наименование;
	
	ТабДок.Очистить();
	
	ТабДок.Вывести(ШапкаН);
	
	ТабДок.НачатьАвтогруппировкуКолонок();
	для а=1 по КолМесяцев Цикл  
		
		Период 			= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		СтрокаПериод	= ПолучитьПериод(Период); 
		
		ШапкаМ = Макет.ПолучитьОбласть("Шапка|Месяц");
		ШапкаМ.Параметры.Месяц = СтрокаПериод;
		ТабДок.Присоединить(ШапкаМ);
	КонецЦикла;
	ТабДок.ЗакончитьАвтогруппировкуКолонок(); 
	
	ШапкаМ = Макет.ПолучитьОбласть("Шапка|Месяц");
	ШапкаМ.Параметры.Месяц = "За период";
	ТабДок.Присоединить(ШапкаМ);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	ПечатьДереваБазовыеОтчеты(ТабДок,Макет,ДанныеДерева,,ДанныеДерева.Колонки);
	ТабДок.ЗакончитьАвтогруппировкуСтрок(); 
	ТабДок.ФиксацияСверху = 10;
	ТабДок.ФиксацияСлева = 2;
	
КонецПроцедуры	

Процедура ПечатьДереваБазовыеОтчеты(ТабДок,Макет,СтрокаДерева,Уровень = 0,Колонки)
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		
		//Если стр.Строки.Количество() >0 Тогда
		//	НаимОблСтрока 		= "Строка1";
		//Иначе
			НаимОблСтрока 		= "Строка";
		//КонецЕсли;	
		
		отступ = "";
		Для н = 1 По Уровень Цикл   
			отступ = отступ + "  ";
		КонецЦикла;
		
		
		СтрокаН = Макет.ПолучитьОбласть(НаимОблСтрока+"|Начало");
		СтрокаН.Параметры.КодСправочника 	= отступ+стр.Code;
		СтрокаН.Параметры.Статья			= отступ+стр.Name;   
		ТабДок.Вывести(СтрокаН,Уровень+1);
		//ТабДок.Вывести(СтрокаН);
		
		для а=1 по КолМесяцев Цикл  
			Период 					= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
			СтрокаПериод			= ПолучитьПериод(Период); 
			
			НаимКолонкиПлан 		= "Зн_План_"+СтрокаПериод;
			НаимКолонкиФакт 		= "Зн_Факт_"+СтрокаПериод;
			НаимКолонкиОтклонАбс 	= "Зн_ОтклонАбс_"+СтрокаПериод;
			НаимКолонкиОтклонОтнос 	= "Зн_ОтклонОтнос_"+СтрокаПериод;
			
			СтрокаН = Макет.ПолучитьОбласть(НаимОблСтрока+"|Месяц");
			СтрокаН.Параметры.План						= стр[НаимКолонкиПлан];   
			СтрокаН.Параметры.Факт						= стр[НаимКолонкиФакт];   
			СтрокаН.Параметры.ОтклонениеАбсолютное		= стр[НаимКолонкиОтклонАбс];   
			СтрокаН.Параметры.ОтклонениеОтносительное	= стр[НаимКолонкиОтклонОтнос];   
			ТабДок.Присоединить(СтрокаН);
		КонецЦикла;	  
		
		
		СтрокаПериод			= "ЗаПериод"; 
		
		НаимКолонкиПлан 		= "Зн_План_"+СтрокаПериод;
		НаимКолонкиФакт 		= "Зн_Факт_"+СтрокаПериод;
		НаимКолонкиОтклонАбс 	= "Зн_ОтклонАбс_"+СтрокаПериод;
		НаимКолонкиОтклонОтнос 	= "Зн_ОтклонОтнос_"+СтрокаПериод;
		
		СтрокаН = Макет.ПолучитьОбласть(НаимОблСтрока+"|Месяц");
		СтрокаН.Параметры.План						= стр[НаимКолонкиПлан];   
		СтрокаН.Параметры.Факт						= стр[НаимКолонкиФакт];   
		СтрокаН.Параметры.ОтклонениеАбсолютное		= стр[НаимКолонкиОтклонАбс];   
		СтрокаН.Параметры.ОтклонениеОтносительное	= стр[НаимКолонкиОтклонОтнос];   
		ТабДок.Присоединить(СтрокаН);
		
		Если стр.Строки.Количество() >0 Тогда
			ПечатьДереваБазовыеОтчеты(ТабДок,Макет,стр,Уровень+1,Колонки);
		КонецЕсли;
	КонецЦикла;	  
	
КонецПроцедуры

&НаСервере
Функция СформироватьДерево()  
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка КАК Ссылка,
	|	СтатьиБюджетов.Родитель КАК Родитель,
	|	СтатьиБюджетов.Код КАК Код,
	|	СтатьиБюджетов.КодСправочника КАК КодСправочника,
	|	СтатьиБюджетов.НеВключатьВУправленческуюОтчетность КАК НеВключать
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Владелец.Код = &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБюджетов.Код ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Код",Бюджет.Код);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	ДеревоЗн=Новый ДеревоЗначений;
	ДеревоЗн.Колонки.Добавить("Код"				,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("КодСправочника"	,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("Статья"			,Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов"));
	ДеревоЗн.Колонки.Добавить("GUID"			,ОписаниеСтрока);
	ДеревоЗн.Колонки.Добавить("НеВключать"		,ОписаниеБулево);
	ДеревоЗн.Колонки.Добавить("Период"			,ОписаниеДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ТекЭлемент					= ДеревоЗн.Строки.Добавить();
			ТекЭлемент.Статья			= Выборка.Ссылка;
			ТекЭлемент.Код				= Выборка.Код;
			ТекЭлемент.КодСправочника	= Выборка.КодСправочника;
			ТекЭлемент.GUID 			= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.НеВключать		= Выборка.НеВключать;
		Иначе
			Пока ТекЭлемент.Статья<>Выборка.Родитель Цикл
				ТекЭлемент=ТекЭлемент.Родитель;
			КонецЦикла;
			ТекЭлемент					= ТекЭлемент.Строки.Добавить();
			ТекЭлемент.Статья			= Выборка.Ссылка;
			ТекЭлемент.Код				= Выборка.Код;
			ТекЭлемент.КодСправочника	= Выборка.КодСправочника;
			ТекЭлемент.GUID 			= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			ТекЭлемент.НеВключать		= Выборка.НеВключать;
		КонецЕсли;
		
	КонецЦикла;	
	
	возврат ДеревоЗн; 	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДерево(тДерево,НаимДерева,ТЗ_Общий,ТЗСтатьи,МассивКолонокСумм)
	
	МассивДобавляемыхРеквизитов 	= Новый Массив;
	МассивУдаляемыхРеквизитов 		= Новый Массив;
	
	
	
	ТекДерево = РеквизитФормыВЗначение(НаимДерева);
	для каждого Кол из ТекДерево.Колонки Цикл
		НаимКолонки = "Зн_"; 
		Если Найти(Кол.Имя,НаимКолонки)>0 Тогда
			МассивУдаляемыхРеквизитов.Добавить(НаимДерева+"."+Кол.Имя);
			Если Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя)<>Неопределено Тогда
				Элементы.Удалить(Элементы[НаимДерева].ПодчиненныеЭлементы.Найти(НаимДерева+Кол.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		 
	ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	
	Для Каждого ЭлементМассива из МассивКолонокСумм Цикл
		
		НаимКолонки = ЭлементМассива; 
		тДерево.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НаимКолонки, Новый ОписаниеТипов("Число"), НаимДерева));
		
	КонецЦикла;
	
	// 3. создаем РЕКВИЗИТ КОЛОНКИ (невидимая часть, справа в редакторе форм)
	
	// реквизит принадлежит дереву
	// добавляем реквизит в форму (невидимая часть, справа в редакторе форм)
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// 4. заполняем дерево (реквизит формы) занчением
	ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	// 5. добавляем НА ФОРМУ (видимая часть, слева в редакторе форм)
	// назовем ДеревоУзел, принадлежит элементу дерева, связан с добавленной колонкой «Узел»
	
	
	Для Каждого ЭлементМассива из МассивКолонокСумм Цикл
		
		НаимКолонки 				= ЭлементМассива; 
		НовыйЭлемент 				= Элементы.Добавить(НаимДерева+НаимКолонки, Тип("ПолеФормы"), Элементы[НаимДерева]);
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок		= НаимКолонки;		
		НовыйЭлемент.ПутьКДанным 	= НаимДерева+"."+НаимКолонки;	
		
	КонецЦикла;
	
	
	
	//BS 
	тДерево = РеквизитФормыВЗначение(НаимДерева);
	Если Бюджет.Код = 1 Тогда
		
		РассчитатьBS(ТЗ_Общий,ТЗСтатьи,тДерево,МассивКолонокСумм);	
		
	ИначеЕсли Бюджет.Код  = 2 Тогда
		
		//PL
		РассчитатьPL(ТЗ_Общий,ТЗСтатьи,тДерево,МассивКолонокСумм);
		
	ИначеЕсли Бюджет.Код  = 3 Тогда  		
		
		//СFD   
		РассчитатьCFD(ТЗ_Общий,ТЗСтатьи,тДерево,МассивКолонокСумм);	
	КонецЕсли;	
	
	тДерево = РеквизитФормыВЗначение(НаимДерева);
	ЗаполнитьЗначенияКолонок(тДерево,тДерево.Колонки,ТЗ_Общий,МассивКолонокСумм);		 
	
	//ПересчитатьВсеДерево(тДерево.Строки,тДерево.Колонки,СписокСтатейДляОтбора);	
	
	//ЗначениеВРеквизитФормы(тДерево, НаимДерева);
	
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияКолонок(тДерево,тКолонки,ТЗ_Общий,МассивСумм)
	Для Каждого тСтр Из тДерево.Строки Цикл
		
		//для а=1 по КолМесяцев Цикл  
		
		//Период 	= Дата(Год(ВыборПериода.ДатаНачала),а,1);  
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Статья",тСтр.Статья);
		//СтруктураПоиска.Вставить("Период",Период);
		
		НайденныеСтроки = ТЗ_Общий.НайтиСтроки(СтруктураПоиска);
		для каждого стрМ из НайденныеСтроки Цикл   
			
			Для Индекс = 0 По МассивСумм.Количество() - 1 Цикл
				НаимКолонки = МассивСумм[Индекс]; 
				тСтр[НаимКолонки] = тСтр[НаимКолонки]+стрМ[НаимКолонки];
			КонецЦикла;	
			
		КонецЦикла; 
		Если тСтр.Строки.Количество()>0 Тогда
			ЗаполнитьЗначенияКолонок(тСтр,тКолонки,ТЗ_Общий,МассивСумм);
		КонецЕсли;
		//КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	 


///////////////////////////////////////////////////////////////////////////////////////////////////////
Процедура СформироватьИнвестПроекты()
	
	сообщить("Получение данных по консолидации. "+ТекущаяДатаСеанса());
	
	
	ИИН=Отчет.Организация.БИН;
	
	Base = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БазыОрганизации.Ссылка.Наименование КАК Ссылка
	|ИЗ
	|	Справочник.Базы.Организации КАК БазыОрганизации
	|ГДЕ
	|	БазыОрганизации.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	БазыОрганизации.Ссылка.Наименование";            
	
	Запрос.УстановитьПараметр("Организация",Отчет.Организация);
	Рез = запрос.Выполнить().Выбрать();
	если Рез.Следующий() Тогда
		Base = Рез.Ссылка;
	КонецЕсли;	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	Данные=Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("TypeOfProjects"		,Новый ОписаниеТипов("СправочникСсылка.ТипПроектаИИнвестиции"));
	Данные.Колонки.Добавить("TypeOfInvestment"		,Новый ОписаниеТипов("СправочникСсылка.ТипПроектаИИнвестиции"));
	Данные.Колонки.Добавить("AssetCategory"			,Новый ОписаниеТипов("СправочникСсылка.КатегорииАктивов"));
	Данные.Колонки.Добавить("ProjectCustomer"		,Новый ОписаниеТипов("СправочникСсылка.ФЦО"));
	
	МассивКолонокСумм 		= Новый Массив;
	
	для а=1 по КолМесяцев Цикл  
		
		Период 	= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		
		СтрокаПериод = ПолучитьПериод(Период);
		
		НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_План_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		
	КонецЦикла;
	
	СтрокаПериод = "ЗаПериод";
	
	НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
	Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_План_"+СтрокаПериод; 
	Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	Рез 	= ФормированиеОтчетаПланФакт.GetReportPlanFactInvest(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания,Base,ИИН);
	для каждого стр из Рез Цикл
		НовСтр = Данные.Добавить();
		//ЗаполнитьЗначенияСвойств(НовСтр,стр);
		НовСтр.TypeOfProjects	= Справочники.ТипПроектаИИнвестиции.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.TypeOfProjectsGUID));
		НовСтр.TypeOfInvestment	= Справочники.ТипПроектаИИнвестиции.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.TypeOfInvestmentGUID));
		НовСтр.AssetCategory	= Справочники.КатегорииАктивов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.AssetCategoryGUID));
		НовСтр.ProjectCustomer	= Справочники.ФЦО.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.ProjectCustomerGUID)); 
		
		Если стр.AllPeriod=Истина Тогда
			СтрокаПериод = "ЗаПериод";
			НаимКолонкиПлан 	 	= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонкиПлан] = стр.AmountPlan;
			
			НаимКолонкиФакт 		= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонкиФакт] = стр.AmountFact;
		Иначе
			СтрокаПериод = ПолучитьПериод(стр.Period);
			
			НаимКолонкиПлан 	 	= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонкиПлан] = стр.AmountPlan;
			
			НаимКолонкиФакт 		= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонкиФакт] = стр.AmountFact;
		КонецЕсли;	
		
	КонецЦикла;	
	
	СтрокаКолонокСумм = СтрСоединить(МассивКолонокСумм, ",");
	//округлим факт и проставим отклонение
	Данные.свернуть("TypeOfProjects,TypeOfInvestment,AssetCategory,ProjectCustomer",СтрокаКолонокСумм);  
	для каждого стр из Данные Цикл 
		для а=1 по КолМесяцев Цикл  
			Период 						= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
			СтрокаПериод				= ПолучитьПериод(Период); 
			
			НаимКолонкиСуммаРасходыПлан = "Зн_План_"+СтрокаПериод;
			НаимКолонкиСуммаРасходыФакт = "Зн_Факт_"+СтрокаПериод;
			
			НаимКолонкиСуммаРасходыОтклонАбс 	= "Зн_ОтклонАбс_"+СтрокаПериод;
			НаимКолонкиСуммаРасходыОтклонОтнос 	= "Зн_ОтклонОтнос_"+СтрокаПериод;
			
			стр[НаимКолонкиСуммаРасходыОтклонАбс] 	= стр[НаимКолонкиСуммаРасходыФакт] - стр[НаимКолонкиСуммаРасходыПлан];
			
			если стр[НаимКолонкиСуммаРасходыПлан]<>0 Тогда
				стр[НаимКолонкиСуммаРасходыОтклонОтнос] = (стр[НаимКолонкиСуммаРасходыОтклонАбс] / стр[НаимКолонкиСуммаРасходыПлан])*100;
			КонецЕсли;
			
		КонецЦикла;	  
		
		СтрокаПериод				= "ЗаПериод"; 
		
		НаимКолонкиСуммаРасходыПлан = "Зн_План_"+СтрокаПериод;
		НаимКолонкиСуммаРасходыФакт = "Зн_Факт_"+СтрокаПериод;
		
		НаимКолонкиСуммаРасходыОтклонАбс 	= "Зн_ОтклонАбс_"+СтрокаПериод;
		НаимКолонкиСуммаРасходыОтклонОтнос 	= "Зн_ОтклонОтнос_"+СтрокаПериод;

		стр[НаимКолонкиСуммаРасходыОтклонАбс] 	= стр[НаимКолонкиСуммаРасходыФакт] - стр[НаимКолонкиСуммаРасходыПлан];
		
		если стр[НаимКолонкиСуммаРасходыПлан]<>0 Тогда
			стр[НаимКолонкиСуммаРасходыОтклонОтнос] = (стр[НаимКолонкиСуммаРасходыОтклонАбс] / стр[НаимКолонкиСуммаРасходыПлан])*100;
		КонецЕсли;
		
	КонецЦикла;	 
	
	Данные.свернуть("TypeOfProjects,TypeOfInvestment,AssetCategory,ProjectCustomer",СтрокаКолонокСумм);  
	Данные.Сортировать("TypeOfProjects,TypeOfInvestment,AssetCategory,ProjectCustomer");  
	
	ПечатьИнвестПроекты(Данные,ТабличныйДокумент,СтрокаКолонокСумм);

	
КонецПроцедуры	

Процедура ПечатьИнвестПроекты(ТЗ_Общий,ТабДок,СтрокаКолонокСумм)
	
	отОб = РеквизитФормыВЗначение("Отчет");
	Макет = отОб.ПолучитьМакет("МакетИнвестПроекты");
	ШапкаН 							= Макет.ПолучитьОбласть("Шапка|Начало");
	ШапкаН.Параметры.Период 		= Формат(ВыборПериода.ДатаНачала,"ДЛФ=DD")+" - "+Формат(КонецДня(ВыборПериода.ДатаОкончания),"ДЛФ=DD");
	ШапкаН.Параметры.Организация 	= Отчет.Организация;
	ШапкаН.Параметры.ВидОтчета		= "Функциональный бюджет - Инвестиционные проекты";
	
	ТабДок.Очистить();
	
	ТабДок.Вывести(ШапкаН);
	
	ТабДок.НачатьАвтогруппировкуКолонок();
	для а=1 по КолМесяцев Цикл  
		
		Период 			= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		СтрокаПериод	= ПолучитьПериод(Период); 
		
		ШапкаМ = Макет.ПолучитьОбласть("Шапка|Месяц");
		ШапкаМ.Параметры.Месяц = СтрокаПериод;
		ТабДок.Присоединить(ШапкаМ);
	КонецЦикла;
	ТабДок.ЗакончитьАвтогруппировкуКолонок(); 
	
	ШапкаМ = Макет.ПолучитьОбласть("Шапка|Месяц");
	ШапкаМ.Параметры.Месяц = "За период";
	ТабДок.Присоединить(ШапкаМ);
	
	ТекТипПроекта 		= Неопределено;
	ТекТипИнвестиции 	= Неопределено; 
	НомПП 		= 0;
	НомППГруппа = 0; 
	
	ТЗТипПроекта = ТЗ_Общий.Скопировать();
	ТЗТипПроекта.Свернуть("TypeOfProjects",СтрокаКолонокСумм);
	
	ТЗТипИнвестиции = ТЗ_Общий.Скопировать();
	ТЗТипИнвестиции.Свернуть("TypeOfProjects,TypeOfInvestment",СтрокаКолонокСумм);

	для каждого стрТипПроекта из ТЗТипПроекта Цикл 

		стр = стрТипПроекта;
		
		СтрокаН = Макет.ПолучитьОбласть("СтрокаТипПроекта|Начало");
		СтрокаН.Параметры.Заполнить(стр);   
		СтрокаН.Параметры.Код 			= стр.TypeOfProjects.КодСправочника;   
		СтрокаН.Параметры.Наименование 	= стр.TypeOfProjects.Наименование;   
		ТабДок.Вывести(СтрокаН);
		
		для а=1 по КолМесяцев Цикл  
			
			Период 			= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
			СтрокаПериод	= Формат(Период,"ДФ=""ММММ"""); 
			
			СтрокаН = Макет.ПолучитьОбласть("СтрокаТипПроекта|Месяц");
			
			НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
			СтрокаН.Параметры.Факт	= стр[НаимКолонки];   
			
			НаимКолонки = "Зн_План_"+СтрокаПериод; 
			СтрокаН.Параметры.План		= стр[НаимКолонки];   
			
			НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
			СтрокаН.Параметры.ОтклонениеАбсолютное	= стр[НаимКолонки];   
			
			НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
			СтрокаН.Параметры.ОтклонениеОтносительное	= стр[НаимКолонки];   
			
			ТабДок.Присоединить(СтрокаН);
			
		КонецЦикла;	  
		
		СтрокаПериод			= "ЗаПериод"; 
		НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
		СтрокаН.Параметры.Факт	= стр[НаимКолонки];   
		
		НаимКолонки = "Зн_План_"+СтрокаПериод; 
		СтрокаН.Параметры.План		= стр[НаимКолонки];   
		
		НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
		СтрокаН.Параметры.ОтклонениеАбсолютное	= стр[НаимКолонки];   
		
		НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
		СтрокаН.Параметры.ОтклонениеОтносительное	= стр[НаимКолонки];   
		
		ТабДок.Присоединить(СтрокаН);
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("TypeOfProjects",стрТипПроекта.TypeOfProjects); 
		
		НайденныеСтрокиТЗТипИнвестиции = ТЗТипИнвестиции.НайтиСтроки(СтруктураПоиска);
		
		для каждого стрТипИнвестиции из НайденныеСтрокиТЗТипИнвестиции Цикл 

			    стр = стрТипИнвестиции;
				
				СтрокаН = Макет.ПолучитьОбласть("СтрокаТипИнвестиции|Начало");
				СтрокаН.Параметры.Заполнить(стр);   
				СтрокаН.Параметры.Код 			= стр.TypeOfInvestment.КодСправочника;   
				СтрокаН.Параметры.Наименование	= стр.TypeOfInvestment.Наименование;   
				ТабДок.Вывести(СтрокаН);
				
				для а=1 по КолМесяцев Цикл  
					
					Период 					= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
					СтрокаПериод			= Формат(Период,"ДФ=""ММММ"""); 
					
					СтрокаН = Макет.ПолучитьОбласть("СтрокаТипИнвестиции|Месяц");
					
					НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
					СтрокаН.Параметры.Факт	= стр[НаимКолонки];   
					
					НаимКолонки = "Зн_План_"+СтрокаПериод; 
					СтрокаН.Параметры.План		= стр[НаимКолонки];   
					
					НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
					СтрокаН.Параметры.ОтклонениеАбсолютное	= стр[НаимКолонки];   
					
					НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
					СтрокаН.Параметры.ОтклонениеОтносительное	= стр[НаимКолонки];   
					
					ТабДок.Присоединить(СтрокаН);
					
				КонецЦикла;	  
				
				СтрокаПериод			= "ЗаПериод"; 
				НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
				СтрокаН.Параметры.Факт	= стр[НаимКолонки];   
				
				НаимКолонки = "Зн_План_"+СтрокаПериод; 
				СтрокаН.Параметры.План		= стр[НаимКолонки];   
				
				НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
				СтрокаН.Параметры.ОтклонениеАбсолютное	= стр[НаимКолонки];   
				
				НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
				СтрокаН.Параметры.ОтклонениеОтносительное	= стр[НаимКолонки];   
				
				
				ТабДок.Присоединить(СтрокаН);
			
			
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("TypeOfProjects",стр.TypeOfProjects); 
		СтруктураПоиска.Вставить("TypeOfInvestment",стр.TypeOfInvestment); 
		
		НайденныеСтрокиТЗ_Общий = ТЗ_Общий.НайтиСтроки(СтруктураПоиска);
			для каждого стр из НайденныеСтрокиТЗ_Общий Цикл 
				
				НомПП 		= НомПП+1;
				СтрокаН = Макет.ПолучитьОбласть("СтрокаКатегория|Начало");
				СтрокаН.Параметры.Заполнить(стр);   
				СтрокаН.Параметры.Код 			= стр.AssetCategory.КодСправочника;   
				СтрокаН.Параметры.Наименование 	= стр.AssetCategory.Наименование;   
				ТабДок.Вывести(СтрокаН);
				
				для а=1 по КолМесяцев Цикл  
					
					Период 			= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
					СтрокаПериод	= Формат(Период,"ДФ=""ММММ"""); 
					
					СтрокаН = Макет.ПолучитьОбласть("СтрокаКатегория|Месяц");
					
					НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
					СтрокаН.Параметры.Факт	= стр[НаимКолонки];   
					
					НаимКолонки = "Зн_План_"+СтрокаПериод; 
					СтрокаН.Параметры.План		= стр[НаимКолонки];   
					
					НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
					СтрокаН.Параметры.ОтклонениеАбсолютное	= стр[НаимКолонки];   
					
					НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
					СтрокаН.Параметры.ОтклонениеОтносительное	= стр[НаимКолонки];   
					
					ТабДок.Присоединить(СтрокаН);
					
				КонецЦикла;	  
				
				СтрокаПериод			= "ЗаПериод"; 
				НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
				СтрокаН.Параметры.Факт	= стр[НаимКолонки];   
				
				НаимКолонки = "Зн_План_"+СтрокаПериод; 
				СтрокаН.Параметры.План		= стр[НаимКолонки];   
				
				НаимКолонки = "Зн_ОтклонАбс_"+СтрокаПериод; 
				СтрокаН.Параметры.ОтклонениеАбсолютное	= стр[НаимКолонки];   
				
				НаимКолонки = "Зн_ОтклонОтнос_"+СтрокаПериод; 
				СтрокаН.Параметры.ОтклонениеОтносительное	= стр[НаимКолонки];   
				
				
				ТабДок.Присоединить(СтрокаН);
				
			КонецЦикла;	  
		КонецЦикла;	  
	КонецЦикла;	  
	
	
	
	//ИТОГО
	СтрокаН = Макет.ПолучитьОбласть("СтрокаИТОГО|Начало");
	ТабДок.Вывести(СтрокаН);
	
	для а=1 по КолМесяцев Цикл  
		
		Период 			= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		СтрокаПериод	= Формат(Период,"ДФ=""ММММ"""); 
		
		СтрокаН = Макет.ПолучитьОбласть("СтрокаИТОГО|Месяц");
		
		НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
		СтрокаН.Параметры.Факт	= ТЗ_Общий.Итог(НаимКолонки);   
		
		НаимКолонки = "Зн_План_"+СтрокаПериод; 
		СтрокаН.Параметры.План	= ТЗ_Общий.Итог(НаимКолонки);   
		
		ТабДок.Присоединить(СтрокаН);
		
	КонецЦикла;	  
	
	СтрокаПериод			= "ЗаПериод"; 
	НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
	СтрокаН.Параметры.Факт	= ТЗ_Общий.Итог(НаимКолонки);   
	
	НаимКолонки = "Зн_План_"+СтрокаПериод; 
	СтрокаН.Параметры.План	= ТЗ_Общий.Итог(НаимКолонки);   
	
	ТабДок.Присоединить(СтрокаН);
	
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	ТабДок.ЗакончитьАвтогруппировкуСтрок(); 
	ТабДок.ФиксацияСверху = 10;
	//ТабДок.ФиксацияСлева = 2;
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура СформироватьКредитныйПортфель()
	сообщить("Получение данных по консолидации. "+ТекущаяДатаСеанса());
	
	ИИН=Отчет.Организация.БИН;
	
	Base = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БазыОрганизации.Ссылка.Наименование КАК Ссылка
	|ИЗ
	|	Справочник.Базы.Организации КАК БазыОрганизации
	|ГДЕ
	|	БазыОрганизации.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	БазыОрганизации.Ссылка.Наименование";            
	
	Запрос.УстановитьПараметр("Организация",Отчет.Организация);
	Рез = запрос.Выполнить().Выбрать();
	если Рез.Следующий() Тогда
		Base = Рез.Ссылка;
	КонецЕсли;	
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("PurposeOfFundCode"		,ОписаниеСтрока);
	Данные.Колонки.Добавить("DebtToolCode"			,ОписаниеСтрока);
	Данные.Колонки.Добавить("LoanLenderTypeCode"	,ОписаниеСтрока);
	Данные.Колонки.Добавить("LoanLenderType"		,ОписаниеСтрока);
	Данные.Колонки.Добавить("PurposeOfFund"			,ОписаниеСтрока);
	Данные.Колонки.Добавить("DebtTool"				,ОписаниеСтрока);
	Данные.Колонки.Добавить("CounterpartyINN"		,ОписаниеСтрока);
	Данные.Колонки.Добавить("Counterparty"			,ОписаниеСтрока);
	
	МассивКолонокСумм 		= Новый Массив;

	
	НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);

	НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	для а=1 по КолМесяцев Цикл  
		
		Период 	= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		
		СтрокаПериод = ПолучитьПериод(Период);
		
		НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);

		НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);

		НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);

		НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);

	КонецЦикла;
	
	НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);

	НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);


	Рез 	= ФормированиеОтчетаПланФакт.GetReportPlanFactCredit(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания,Base,ИИН);
	для каждого стр из Рез Цикл
		НовСтр = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,стр);
		
		Если стр.AllPeriod=Истина Тогда
			
			НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountBalancePlan;
			
			НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
			НовСтр[НаимКолонки] = стр.AccruedInterestBalancePlan;

			НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountBalanceFact;
			
			НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
			НовСтр[НаимКолонки] = стр.AccruedInterestBalanceFact;


			НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountEndBalancePlan;
			
			НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
			НовСтр[НаимКолонки] = стр.AccruedInterestEndBalancePlan;

			НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountEndBalanceFact;
			
			НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
			НовСтр[НаимКолонки] = стр.AccruedInterestEndBalanceFact;
			
			
		Иначе
			СтрокаПериод = ПолучитьПериод(стр.Period);
			
			НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountByPeriodPlan;
			
			НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.AccruedInterestByPeriodPlan;

			НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountByPeriodFact;
			
			НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.AccruedInterestByPeriodFact;

			НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.OtherOperationsByPeriodFact;
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	
	СтрокаКолонокСумм = СтрСоединить(МассивКолонокСумм, ",");
	
	//округлим факт и проставим отклонение
	Данные.свернуть("CounterpartyINN,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode,LoanLenderType,PurposeOfFund,DebtTool",СтрокаКолонокСумм);  
	

	ПечатьКредитныйПортфель(Данные,ТабличныйДокумент);
	
КонецПроцедуры	

Процедура ПечатьКредитныйПортфель(ТЗ_Общий,ТабДок)
	
	//ДанныеДерева = РеквизитФормыВЗначение("ДеревоBS");
	
	отОб = РеквизитФормыВЗначение("Отчет");
	Макет = отОб.ПолучитьМакет("МакетКредит");
	ШапкаН = Макет.ПолучитьОбласть("Шапка|Начало");
	ШапкаН.Параметры.Период 		= Формат(ВыборПериода.ДатаНачала,"ДЛФ=DD")+" - "+Формат(КонецДня(ВыборПериода.ДатаОкончания),"ДЛФ=DD");
	ШапкаН.Параметры.Организация 	= Отчет.Организация;
	ШапкаН.Параметры.ВидОтчета 		= "Кредитный портфель";
	
	
	ТабДок.Очистить();
	
	//выведем шапку
	
	ТабДок.Вывести(ШапкаН);
	
	ТабДок.НачатьАвтогруппировкуКолонок();
	для а=1 по КолМесяцев Цикл  
		
		Период 			= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		СтрокаПериод	= ПолучитьПериод(Период); 
		
		ШапкаМ = Макет.ПолучитьОбласть("Шапка|Месяц");
		ШапкаМ.Параметры.Месяц = СтрокаПериод;
		ТабДок.Присоединить(ШапкаМ);
	КонецЦикла;
	ТабДок.ЗакончитьАвтогруппировкуКолонок(); 
	
	ШапкаК = Макет.ПолучитьОбласть("Шапка|Конец");
	ТабДок.Присоединить(ШапкаК);

	
	//выведем строки
	
	
	для каждого стр из ТЗ_Общий Цикл 
		
		СтрокаН = Макет.ПолучитьОбласть("Строка|Начало");
		СтрокаН.Параметры.CounterpartyINN	= стр.CounterpartyINN;   
		СтрокаН.Параметры.PurposeOfFund		= Строка(стр.PurposeOfFundCode)+" "+Строка(стр.PurposeOfFund);   
		СтрокаН.Параметры.DebtTool			= Строка(стр.DebtToolCode)+" "+Строка(стр.DebtTool);   
		СтрокаН.Параметры.LoanLenderType	= Строка(стр.LoanLenderTypeCode)+" "+Строка(стр.LoanLenderType);   

		СтрокаН.Параметры.ПланСальдоНаНачалоСуммаОД				= стр["Зн_ПланСальдоНаНачалоСуммаОД"];   
		СтрокаН.Параметры.ПланСальдоНаНачалоНачисленныеПроценты	= стр["Зн_ПланСальдоНаНачалоНачисленныеПроценты"];   
		
		СтрокаН.Параметры.ФактСальдоНаНачалоСуммаОД				= стр["Зн_ФактСальдоНаНачалоСуммаОД"];   
		СтрокаН.Параметры.ФактСальдоНаНачалоНачисленныеПроценты	= стр["Зн_ФактСальдоНаНачалоНачисленныеПроценты"];   
		ТабДок.Вывести(СтрокаН);
		
		для а=1 по КолМесяцев Цикл  
			Период 					= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
			СтрокаПериод			= Формат(Период,"ДФ=""ММММ"""); 
			
			СтрокаМ = Макет.ПолучитьОбласть("Строка|Месяц"); 
			
			
			ПланСуммаОД 			= стр["Зн_ПланСуммаОД_"+СтрокаПериод]; 
			ПланНачисленныеПроценты = стр["Зн_ПланНачисленныеПроценты_"+СтрокаПериод];
			ФактСуммаОД				= стр["Зн_ФактСуммаОД_"+СтрокаПериод];   
			ФактНачисленныеПроценты	= стр["Зн_ФактНачисленныеПроценты_"+СтрокаПериод];   
			ФактПрочиеОперации		= стр["Зн_ФактПрочиеОперации_"+СтрокаПериод];   

			СтрокаМ.Параметры.ПланСуммаОД				= ПланСуммаОД;   
			СтрокаМ.Параметры.ПланНачисленныеПроценты	= ПланНачисленныеПроценты;   

			СтрокаМ.Параметры.ФактСуммаОД				= ФактСуммаОД;   
			СтрокаМ.Параметры.ФактНачисленныеПроценты	= ФактНачисленныеПроценты;   
			СтрокаМ.Параметры.ФактПрочиеОперации		= ФактПрочиеОперации;   


			ОтклонАбс 	= ФактСуммаОД - ПланСуммаОД;
			ОтклонОтнос = 0;
		
			если ПланСуммаОД<>0 Тогда
				ОтклонОтнос = (ОтклонАбс / ПланСуммаОД)*100;
			КонецЕсли;
			
			СтрокаМ.Параметры.ОДОтклонениеАбс	= ОтклонАбс;   
			СтрокаМ.Параметры.ОДОтклонениеОтн	= ОтклонОтнос;   


			ОтклонАбс 	= ФактНачисленныеПроценты - ПланНачисленныеПроценты;
			ОтклонОтнос = 0;
		
			если ПланНачисленныеПроценты<>0 Тогда
				ОтклонОтнос = (ОтклонАбс / ПланНачисленныеПроценты)*100;
			КонецЕсли;
			
			СтрокаМ.Параметры.НачПроцентыОтклонениеАбс	= ОтклонАбс;   
			СтрокаМ.Параметры.НачПроцентыОтклонениеОтн	= ОтклонОтнос;   
			                                
			
			ТабДок.Присоединить(СтрокаМ);
		КонецЦикла;	  

		СтрокаК = Макет.ПолучитьОбласть("Строка|Конец");
		СтрокаК.Параметры.ПланСальдоНаКонецСуммаОД				= стр["Зн_ПланСальдоНаКонецСуммаОД"];   
		СтрокаК.Параметры.ПланСальдоНаКонецНачисленныеПроценты	= стр["Зн_ПланСальдоНаКонецНачисленныеПроценты"];   
		
		СтрокаК.Параметры.ФактСальдоНаКонецСуммаОД				= стр["Зн_ФактСальдоНаКонецСуммаОД"];   
		СтрокаК.Параметры.ФактСальдоНаКонецНачисленныеПроценты	= стр["Зн_ФактСальдоНаКонецНачисленныеПроценты"];   
		ТабДок.Присоединить(СтрокаК);

	КонецЦикла;	  
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	ТабДок.ЗакончитьАвтогруппировкуСтрок(); 
	ТабДок.ФиксацияСверху = 10;
	ТабДок.ФиксацияСлева = 4;
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура СформироватьДебиторы()
	сообщить("Получение данных по консолидации. "+ТекущаяДатаСеанса());
	
	ИИН=Отчет.Организация.БИН;
	
	Base = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БазыОрганизации.Ссылка.Наименование КАК Ссылка
	|ИЗ
	|	Справочник.Базы.Организации КАК БазыОрганизации
	|ГДЕ
	|	БазыОрганизации.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	БазыОрганизации.Ссылка.Наименование";            
	
	Запрос.УстановитьПараметр("Организация",Отчет.Организация);
	Рез = запрос.Выполнить().Выбрать();
	если Рез.Следующий() Тогда
		Base = Рез.Ссылка;
	КонецЕсли;	
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(17, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	ОписаниеБулево = Новый ОписаниеТипов("Булево");	
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("PurposeOfFundCode"		,ОписаниеСтрока);
	Данные.Колонки.Добавить("DebtToolCode"			,ОписаниеСтрока);
	Данные.Колонки.Добавить("LoanLenderTypeCode"	,ОписаниеСтрока);
	Данные.Колонки.Добавить("LoanLenderType"		,ОписаниеСтрока);
	Данные.Колонки.Добавить("PurposeOfFund"			,ОписаниеСтрока);
	Данные.Колонки.Добавить("DebtTool"				,ОписаниеСтрока);
	Данные.Колонки.Добавить("CounterpartyINN"		,ОписаниеСтрока);
	Данные.Колонки.Добавить("Counterparty"			,ОписаниеСтрока);
	
	МассивКолонокСумм 		= Новый Массив;

	
	НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);

	НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	для а=1 по КолМесяцев Цикл  
		
		Период 	= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		
		СтрокаПериод = ПолучитьПериод(Период);
		
		НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);

		НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);
		
		НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);

		НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);

		НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
		Данные.Колонки.Добавить(НаимКолонки, Новый ОписаниеТипов("Число"));
		МассивКолонокСумм.Добавить(НаимКолонки);

	КонецЦикла;
	
	НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);

	НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);
	
	НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
	Данные.Колонки.Добавить(НаимКолонки,ОписаниеЧисло);
	МассивКолонокСумм.Добавить(НаимКолонки);


	Рез 	= ФормированиеОтчетаПланФакт.GetReportPlanFactDebt(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания,Base,ИИН);
	для каждого стр из Рез Цикл
		НовСтр = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,стр);
		
		Если стр.AllPeriod=Истина Тогда
			
			НаимКолонки = "Зн_ПланСальдоНаНачалоСуммаОД"; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountBalancePlan;
			
			НаимКолонки = "Зн_ПланСальдоНаНачалоНачисленныеПроценты"; 
			НовСтр[НаимКолонки] = стр.AccruedInterestBalancePlan;

			НаимКолонки = "Зн_ФактСальдоНаНачалоСуммаОД"; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountBalanceFact;
			
			НаимКолонки = "Зн_ФактСальдоНаНачалоНачисленныеПроценты"; 
			НовСтр[НаимКолонки] = стр.AccruedInterestBalanceFact;


			НаимКолонки = "Зн_ПланСальдоНаКонецСуммаОД"; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountEndBalancePlan;
			
			НаимКолонки = "Зн_ПланСальдоНаКонецНачисленныеПроценты"; 
			НовСтр[НаимКолонки] = стр.AccruedInterestEndBalancePlan;

			НаимКолонки = "Зн_ФактСальдоНаКонецСуммаОД"; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountEndBalanceFact;
			
			НаимКолонки = "Зн_ФактСальдоНаКонецНачисленныеПроценты"; 
			НовСтр[НаимКолонки] = стр.AccruedInterestEndBalanceFact;
			
			
		Иначе
			СтрокаПериод = ПолучитьПериод(стр.Period);
			
			НаимКолонки = "Зн_ПланСуммаОД_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountByPeriodPlan;
			
			НаимКолонки = "Зн_ПланНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.AccruedInterestByPeriodPlan;

			НаимКолонки = "Зн_ФактСуммаОД_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.PrincipalAmountByPeriodFact;
			
			НаимКолонки = "Зн_ФактНачисленныеПроценты_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.AccruedInterestByPeriodFact;

			НаимКолонки = "Зн_ФактПрочиеОперации_"+СтрокаПериод; 
			НовСтр[НаимКолонки] = стр.OtherOperationsByPeriodFact;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	
	СтрокаКолонокСумм = СтрСоединить(МассивКолонокСумм, ",");
	
	//округлим факт и проставим отклонение
	Данные.свернуть("CounterpartyINN,PurposeOfFundCode,DebtToolCode,LoanLenderTypeCode,LoanLenderType,PurposeOfFund,DebtTool",СтрокаКолонокСумм);  
	

	ПечатьДебиторы(Данные,ТабличныйДокумент);
	
КонецПроцедуры	

Процедура ПечатьДебиторы(ТЗ_Общий,ТабДок)
	
	//ДанныеДерева = РеквизитФормыВЗначение("ДеревоBS");
	
	отОб = РеквизитФормыВЗначение("Отчет");
	Макет = отОб.ПолучитьМакет("МакетКредит");
	ШапкаН = Макет.ПолучитьОбласть("Шапка|Начало");
	ШапкаН.Параметры.Период 		= Формат(ВыборПериода.ДатаНачала,"ДЛФ=DD")+" - "+Формат(КонецДня(ВыборПериода.ДатаОкончания),"ДЛФ=DD");
	ШапкаН.Параметры.Организация 	= Отчет.Организация;
	ШапкаН.Параметры.ВидОтчета 		= "Дебиторы";
	
	
	ТабДок.Очистить();
	
	//выведем шапку
	
	ТабДок.Вывести(ШапкаН);
	
	ТабДок.НачатьАвтогруппировкуКолонок();
	для а=1 по КолМесяцев Цикл  
		
		Период 			= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		СтрокаПериод	= ПолучитьПериод(Период); 
		
		ШапкаМ = Макет.ПолучитьОбласть("Шапка|Месяц");
		ШапкаМ.Параметры.Месяц = СтрокаПериод;
		ТабДок.Присоединить(ШапкаМ);
	КонецЦикла;
	ТабДок.ЗакончитьАвтогруппировкуКолонок(); 
	
	ШапкаК = Макет.ПолучитьОбласть("Шапка|Конец");
	ТабДок.Присоединить(ШапкаК);

	
	//выведем строки
	
	
	для каждого стр из ТЗ_Общий Цикл 
		
		СтрокаН = Макет.ПолучитьОбласть("Строка|Начало");
		СтрокаН.Параметры.CounterpartyINN	= стр.CounterpartyINN;   
		СтрокаН.Параметры.PurposeOfFund		= Строка(стр.PurposeOfFundCode)+" "+Строка(стр.PurposeOfFund);   
		СтрокаН.Параметры.DebtTool			= Строка(стр.DebtToolCode)+" "+Строка(стр.DebtTool);   
		СтрокаН.Параметры.LoanLenderType	= Строка(стр.LoanLenderTypeCode)+" "+Строка(стр.LoanLenderType);   

		СтрокаН.Параметры.ПланСальдоНаНачалоСуммаОД				= стр["Зн_ПланСальдоНаНачалоСуммаОД"];   
		СтрокаН.Параметры.ПланСальдоНаНачалоНачисленныеПроценты	= стр["Зн_ПланСальдоНаНачалоНачисленныеПроценты"];   
		
		СтрокаН.Параметры.ФактСальдоНаНачалоСуммаОД				= стр["Зн_ФактСальдоНаНачалоСуммаОД"];   
		СтрокаН.Параметры.ФактСальдоНаНачалоНачисленныеПроценты	= стр["Зн_ФактСальдоНаНачалоНачисленныеПроценты"];   
		ТабДок.Вывести(СтрокаН);
		
		для а=1 по КолМесяцев Цикл  
			Период 					= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
			СтрокаПериод			= Формат(Период,"ДФ=""ММММ"""); 
			
			СтрокаМ = Макет.ПолучитьОбласть("Строка|Месяц"); 
			
			
			ПланСуммаОД 			= стр["Зн_ПланСуммаОД_"+СтрокаПериод]; 
			ПланНачисленныеПроценты = стр["Зн_ПланНачисленныеПроценты_"+СтрокаПериод];
			ФактСуммаОД				= стр["Зн_ФактСуммаОД_"+СтрокаПериод];   
			ФактНачисленныеПроценты	= стр["Зн_ФактНачисленныеПроценты_"+СтрокаПериод];   
 			ФактПрочиеОперации		= стр["Зн_ФактПрочиеОперации_"+СтрокаПериод];   

			СтрокаМ.Параметры.ПланСуммаОД				= ПланСуммаОД;   
			СтрокаМ.Параметры.ПланНачисленныеПроценты	= ПланНачисленныеПроценты;   

			СтрокаМ.Параметры.ФактСуммаОД				= ФактСуммаОД;   
			СтрокаМ.Параметры.ФактНачисленныеПроценты	= ФактНачисленныеПроценты;   
			СтрокаМ.Параметры.ФактПрочиеОперации		= ФактПрочиеОперации;   

			ОтклонАбс 	= ФактСуммаОД - ПланСуммаОД;
			ОтклонОтнос = 0;
		
			если ПланСуммаОД<>0 Тогда
				ОтклонОтнос = (ОтклонАбс / ПланСуммаОД)*100;
			КонецЕсли;
			
			СтрокаМ.Параметры.ОДОтклонениеАбс	= ОтклонАбс;   
			СтрокаМ.Параметры.ОДОтклонениеОтн	= ОтклонОтнос;   


			ОтклонАбс 	= ФактНачисленныеПроценты - ПланНачисленныеПроценты;
			ОтклонОтнос = 0;
		
			если ПланНачисленныеПроценты<>0 Тогда
				ОтклонОтнос = (ОтклонАбс / ПланНачисленныеПроценты)*100;
			КонецЕсли;
			
			СтрокаМ.Параметры.НачПроцентыОтклонениеАбс	= ОтклонАбс;   
			СтрокаМ.Параметры.НачПроцентыОтклонениеОтн	= ОтклонОтнос;   
			                                
			
			ТабДок.Присоединить(СтрокаМ);
		КонецЦикла;	  

		СтрокаК = Макет.ПолучитьОбласть("Строка|Конец");
		СтрокаК.Параметры.ПланСальдоНаКонецСуммаОД				= стр["Зн_ПланСальдоНаКонецСуммаОД"];   
		СтрокаК.Параметры.ПланСальдоНаКонецНачисленныеПроценты	= стр["Зн_ПланСальдоНаКонецНачисленныеПроценты"];   
		
		СтрокаК.Параметры.ФактСальдоНаКонецСуммаОД				= стр["Зн_ФактСальдоНаКонецСуммаОД"];   
		СтрокаК.Параметры.ФактСальдоНаКонецНачисленныеПроценты	= стр["Зн_ФактСальдоНаКонецНачисленныеПроценты"];   
		ТабДок.Присоединить(СтрокаК);

	КонецЦикла;	  
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	ТабДок.ЗакончитьАвтогруппировкуСтрок(); 
	ТабДок.ФиксацияСверху = 10;
	ТабДок.ФиксацияСлева = 4;
	
КонецПроцедуры	


//********************************************************************************************************

Процедура РассчитатьBS(ТЗ_Общий,ТЗСтатьи,ДеревоЗн,МассивСумм)
	ТЗНачальныеДанныеBS = ПолучитьНачальныеДанныеПоBS();
	
	
	//Скопируем ТЗ 
	//в Факт посадим полную ТЗ т.к. нам нужен полный справочник чтобы потом пересчитать дерево. иначе будет некорректно
	// в план посадим пустую таблицу т.к в плановых данных сидят цифры на итоговых строках без детализации.
	ТЗФакт = ТЗ_Общий.Скопировать();
	ТЗПлан = ТЗ_Общий.СкопироватьКолонки();
	
	ТЗФактЗаПериод = ТЗФакт.Скопировать();
	ТЗПланЗаПериод = ТЗПлан.СкопироватьКолонки();
	
	для а=1 по КолМесяцев Цикл  
		Период 			= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		Год				= Год(ВыборПериода.ДатаНачала); 
		
		НачПериода  	= ВыборПериода.ДатаНачала;
		
		НачМесяца 		= НачалоМесяца(Дата(Год,а,1));
		КонМесяца  		= КонецМесяца(Дата(Год,а,1)); 
		
		СтрокаПериод 	= ПолучитьПериод(Период);
		
		
		ТЗДанныеFact = ПолучитьОборотДанныеПоBS(НачПериода,КонМесяца);
		если ТЗДанныеFact.Количество()>0 Тогда
			ТЗДанныеFact.свернуть("GUID,Code,ID,RptLineId","Amount");
			для каждого стр из ТЗДанныеFact Цикл 
				
				НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
				
				НовСтр 					= ТЗФакт.Добавить();
				НовСтр.Статья 			= НайденнаяСтрока.Статья;   
				НовСтр.КодСправочника	= стр.Code;
				НовСтр.Код	 			= стр.ID;
				НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
				
				НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
				НовСтр[НаимКолонки]  	= стр.Amount;
			КонецЦикла;	 
		КонецЕсли;
		
		для каждого стр из ТЗНачальныеДанныеBS Цикл 
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= стр.Code;     
			НовСтр.Код	 			= стр.ID;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки] 	= стр.BalAmount;
		КонецЦикла;	 
		
		
		ТЗДанныеPlan = ПолучитьОборотДанныеПоPlanDataBS(НачМесяца,КонМесяца);
		если ТЗДанныеPlan.Количество()>0 Тогда
			ТЗДанныеPlan.свернуть("Report,GUID,Code,ID","Amount");
			для каждого стр из ТЗДанныеPlan Цикл
				
				НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
				
				НовСтр 					= ТЗПлан.Добавить();
				НовСтр.Статья 			= НайденнаяСтрока.Статья;   
				НовСтр.КодСправочника	= стр.Code;     
				НовСтр.Код	 			= стр.ID;
				НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
				
				НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
				НовСтр[НаимКолонки] 	= стр.Amount;
			КонецЦикла;	 
		КонецЕсли;
		
	КонецЦикла;
	
	////ЗаПериод.
	////повторим запись последних таблиц чтоб собрать ЗаПериод т.к. это баланс то это сальдо то можно взять только последний месяц и собрать ГОД 
	СтрокаПериод  ="ЗаПериод";
	для каждого стр из ТЗДанныеFact Цикл 
		
		НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
		
		НовСтр 					= ТЗФакт.Добавить();
		НовСтр.Статья 			= НайденнаяСтрока.Статья;   
		НовСтр.КодСправочника	= стр.Code;
		НовСтр.Код	 			= стр.ID;
		НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
		
		НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
		НовСтр[НаимКолонки]  	= стр.Amount;
	КонецЦикла;	 
	//
	для каждого стр из ТЗНачальныеДанныеBS Цикл 
		НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
		
		НовСтр 					= ТЗФакт.Добавить();
		НовСтр.Статья 			= НайденнаяСтрока.Статья;   
		НовСтр.КодСправочника	= стр.Code;     
		НовСтр.Код	 			= стр.ID;
		НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
		
		НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
		НовСтр[НаимКолонки] 	= стр.BalAmount;
	КонецЦикла;	 
	//
	для каждого стр из ТЗДанныеPlan Цикл 
		НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
		
		НовСтр 					= ТЗПлан.Добавить();
		НовСтр.Статья 			= НайденнаяСтрока.Статья;   
		НовСтр.КодСправочника	= стр.Code;     
		НовСтр.Код	 			= стр.ID;
		НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
		
		НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
		НовСтр[НаимКолонки] 	= стр.Amount;
	КонецЦикла;	 
	
	//ЗаПериод.
	
	
	//Пересчитаем дерево по фактическим данным чтоб итоговые строки были
	
	СтрокаМассиваСумм = СтрСоединить(МассивСумм, ",");
	
	ДеревоЗн.Строки.Очистить();
	ТЗФакт.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	ПреобразоватьВДЗРекурсия(ДеревоЗн, ТЗФакт, "");
	ПересчитатьВсеДерево(ДеревоЗн.Строки);
	ПреобразоватьВТЗРекурсия(ДеревоЗн, ТЗ_Общий,"");
	
	
	ТЗПлан.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	//добавим данные по плану ничего не меняя. 
	Для каждого стр из ТЗПлан Цикл
		нСтр = ТЗ_Общий.Добавить();  
		ЗаполнитьЗначенияСвойств(нСтр,стр);
	КонецЦикла;	
	
	ТЗ_Общий.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	ДеревоЗн.Строки.Очистить();
	
	
	
КонецПроцедуры	

Процедура РассчитатьPL(ТЗ_Общий,ТЗСтатьи,ДеревоЗн,МассивСумм)
	
	//Скопируем ТЗ 
	//в Факт посадим полную ТЗ т.к. нам нужен полный справочник чтобы потом пересчитать дерево. иначе будет некорректно
	// в план посадим пустую таблицу т.к в плановых данных сидят цифры на итоговых строках без детализации.
	ТЗФакт = ТЗ_Общий.Скопировать();
	ТЗПлан = ТЗ_Общий.СкопироватьКолонки();
	
	ТЗДанные = ПолучитьОборотДанныеПоPL(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,Report,GUID,Code,RptLineName,ID","Amount");
		для каждого стр из ТЗДанные Цикл 
			
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			Период 					= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 			= ПолучитьПериод(Период);
			
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= стр.Code;
			НовСтр.Код	 			= стр.ID;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.Amount;
			
			
			СтрокаПериод 			= "ЗаПериод";
			
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= стр.Code;
			НовСтр.Код	 			= стр.ID;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.Amount;
			
			
			
		КонецЦикла;	 
	КонецЕсли;
	
	ТЗДанные = ПолучитьОборотДанныеПоPlanDataPL(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,Report,GUID,Code,ID","Amount");
		для каждого стр из ТЗДанные Цикл 
			
			
			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");
			
			Период 					= Дата(стр.Year,стр.Month,1);
			СтрокаПериод 			= ПолучитьПериод(Период);
			
			НовСтр 					= ТЗПлан.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= стр.Code;
			НовСтр.Код	 			= стр.ID;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
			
			НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.Amount;
			
			
			СтрокаПериод 			= "ЗаПериод";
			
			НовСтр 					= ТЗПлан.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.КодСправочника	= стр.Code;
			НовСтр.Код	 			= стр.ID;
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode; 
			
			НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки]  	= стр.Amount;
			
		КонецЦикла;	 
	КонецЕсли;   
	
	СтрокаМассиваСумм = СтрСоединить(МассивСумм, ",");
	//Пересчитаем дерево по фактическим данным чтоб итоговые строки были
	ДеревоЗн.Строки.Очистить();
	ТЗФакт.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	ПреобразоватьВДЗРекурсия(ДеревоЗн, ТЗФакт, "");
	ПересчитатьВсеДерево(ДеревоЗн.Строки);
	ПреобразоватьВТЗРекурсия(ДеревоЗн, ТЗ_Общий,"");
	
	
	//добавим данные по плану ничего не меняя. 
	ТЗПлан.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	Для каждого стр из ТЗПлан Цикл
		нСтр = ТЗ_Общий.Добавить();  
		ЗаполнитьЗначенияСвойств(нСтр,стр);
	КонецЦикла;	
	
	ТЗ_Общий.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	
	для а=1 по КолМесяцев Цикл  
		
		Период 			= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		
		СтрокаПериод 	= ПолучитьПериод(Период);
		РассчитатьСтрокиPL(СтрокаПериод,ТЗ_Общий);
	КонецЦикла;
	
	СтрокаПериод 	= "ЗаПериод";
	РассчитатьСтрокиPL(СтрокаПериод,ТЗ_Общий);
	
	
КонецПроцедуры	 

Процедура РассчитатьСтрокиPL(СтрокаПериод,ТЗ_Общий)
	
	СуммаPL31 		= 0;
	СуммаPL32 		= 0;
	СуммаPL33 		= 0;
	СуммаPL6 		= 0;
	СуммаPL12 		= 0;
	СуммаPL13 		= 0;
	
	СуммаPL31Plan	= 0;
	СуммаPL32Plan 	= 0;
	СуммаPL33Plan 	= 0;
	СуммаPL6Plan 	= 0;
	СуммаPL12Plan 	= 0;
	СуммаPL13Plan 	= 0;
	
	СуммаPL31Year	= 0;
	СуммаPL32Year 	= 0;
	СуммаPL33Year 	= 0;
	СуммаPL6Year 	= 0;
	СуммаPL12Year 	= 0;
	СуммаPL13Year 	= 0;
	
	СуммаPL31PlanYear	= 0;
	СуммаPL32PlanYear 	= 0;
	СуммаPL33PlanYear 	= 0;
	СуммаPL6PlanYear 	= 0;
	СуммаPL12PlanYear 	= 0;
	СуммаPL13PlanYear 	= 0;
	
	//PL
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL1.1."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL1.1.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL31			= СуммаPL31		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL31Plan		= СуммаPL31Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		//СуммаPL31			= СуммаPL31			+ стр.FactAmount;
		//
		//СуммаPL31Plan		= СуммаPL31Plan		+ стр.PlanAmount;
		//
		//
		//СуммаPL31Year		= СуммаPL31Year		+ стр.FactAmountYear;
		//
		//СуммаPL31PlanYear	= СуммаPL31PlanYear	+ стр.PlanAmountYear;
	//КонецЦикла;	
	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL2.1."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL2.1.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL31			= СуммаPL31		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL31Plan		= СуммаPL31Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL31			= СуммаPL31			+ стр.FactAmount;
		//
		//СуммаPL31Plan		= СуммаPL31Plan		+ стр.PlanAmount;
		//
		//
		//СуммаPL31Year		= СуммаPL31Year		+ стр.FactAmountYear;
		//
		//СуммаPL31PlanYear	= СуммаPL31PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL1.2."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL1.2.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL32			= СуммаPL32		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL32Plan		= СуммаPL32Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		
		//СуммаPL32			= СуммаPL32			+ стр.FactAmount;
		//
		//СуммаPL32Plan		= СуммаPL32Plan		+ стр.PlanAmount;
		//
		//
		//СуммаPL32Year		= СуммаPL32Year		+ стр.FactAmountYear;
		//
		//СуммаPL32PlanYear	= СуммаPL32PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL2.2."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL2.2.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL32			= СуммаPL32		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL32Plan		= СуммаPL32Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL32			= СуммаPL32			+ стр.FactAmount;
		//
		//СуммаPL32Plan		= СуммаPL32Plan		+ стр.PlanAmount;
		//
		//
		//СуммаPL32Year		= СуммаPL32Year		+ стр.FactAmountYear;
		//
		//СуммаPL32PlanYear	= СуммаPL32PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL1.3."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL1.3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL33			= СуммаPL33		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL33Plan		= СуммаPL33Plan	+ НайденнаяСтрока[НаимКолонки];
		
	КонецЕсли;		
		//СуммаPL33			= СуммаPL33			+ стр.FactAmount;
		//
		//СуммаPL33Plan		= СуммаPL33Plan		+ стр.PlanAmount;
		//
		//
		//СуммаPL33Year		= СуммаPL33Year		+ стр.FactAmountYear;
		//
		//СуммаPL33PlanYear	= СуммаPL33PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL2.3."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL2.3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL33			= СуммаPL33		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL33Plan		= СуммаPL33Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL33			= СуммаPL33			+ стр.FactAmount;
		//
		//СуммаPL33Plan		= СуммаPL33Plan		+ стр.PlanAmount;
		//
		//
		//СуммаPL33Year		= СуммаPL33Year		+ стр.FactAmountYear;
		//
		//СуммаPL33PlanYear	= СуммаPL33PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3.1."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.1.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL31;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL31Plan;
	КонецЕсли;		
		
		//НовСтр.FactAmount 		= СуммаPL31;
		//
		//НовСтр.PlanAmount 		= СуммаPL31Plan;
		//
		//
		//НовСтр.FactAmountYear 	= СуммаPL31Year;
		//
		//НовСтр.PlanAmountYear 	= СуммаPL31PlanYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3.2."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.2.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL32;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL32Plan;
	КонецЕсли;		
		
		//ЗаполнитьЗначенияСвойств(НовСтр,стр);
		//НовСтр.FactAmount 		= СуммаPL32;
		//НовСтр.PlanAmount 		= СуммаPL32Plan;
		//НовСтр.FactAmountYear 	= СуммаPL32Year;
		//НовСтр.PlanAmountYear 	= СуммаPL32PlanYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3.3."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL33;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL33Plan;
	КонецЕсли;		
		
		
		//ЗаполнитьЗначенияСвойств(НовСтр,стр);
		//НовСтр.FactAmount 		= СуммаPL33;
		//НовСтр.PlanAmount 		= СуммаPL33Plan;
		//НовСтр.FactAmountYear 	= СуммаPL33Year;
		//НовСтр.PlanAmountYear 	= СуммаPL33PlanYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL31			+ СуммаPL32			+ СуммаPL33;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL31Plan		+ СуммаPL32Plan		+ СуммаPL33Plan; 
	КонецЕсли;		
		
		//ЗаполнитьЗначенияСвойств(НовСтр,стр);
		//НовСтр.FactAmount 		= СуммаPL31			+ СуммаPL32			+ СуммаPL33;
		//НовСтр.PlanAmount 		= СуммаPL31Plan		+ СуммаPL32Plan		+ СуммаPL33Plan;
		//НовСтр.FactAmountYear 	= СуммаPL31Year		+ СуммаPL32Year		+ СуммаPL33Year;
		//НовСтр.PlanAmountYear 	= СуммаPL31PlanYear	+ СуммаPL32PlanYear	+ СуммаPL33PlanYear; 
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL3."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL3.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL6			= СуммаPL6		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL6Plan		= СуммаPL6Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL6			= СуммаPL6			+ стр.FactAmount;
		//СуммаPL6Plan		= СуммаPL6Plan		+ стр.PlanAmount;
		//СуммаPL6Year		= СуммаPL6Year		+ стр.FactAmountYear;
		//СуммаPL6PlanYear	= СуммаPL6PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL4."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL4.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL6			= СуммаPL6		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL6Plan		= СуммаPL6Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
		//СуммаPL6			= СуммаPL6			+ стр.FactAmount;
		//СуммаPL6Plan		= СуммаPL6Plan		+ стр.PlanAmount;
		//СуммаPL6Year		= СуммаPL6Year		+ стр.FactAmountYear;
		//СуммаPL6PlanYear	= СуммаPL6PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL5."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL5.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL6			= СуммаPL6		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL6Plan		= СуммаPL6Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
	//СуммаPL6 		= СуммаPL6			+ стр.FactAmount;
	//СуммаPL6Plan	= СуммаPL6Plan		+ стр.PlanAmount;
	//СуммаPL6Year 	= СуммаPL6Year		+ стр.FactAmountYear;
	//СуммаPL6PlanYear= СуммаPL6PlanYear	+ стр.PlanAmountYear;
	
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL6."));
	//для каждого стр из НайденныеСтроки Цикл
	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL6.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL6;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL6Plan;
	КонецЕсли;		
	
	//ЗаполнитьЗначенияСвойств(НовСтр,стр);
		//НовСтр.FactAmount 		= СуммаPL6;
		//НовСтр.PlanAmount 		= СуммаPL6Plan;
		//НовСтр.FactAmountYear 	= СуммаPL6Year;
		//НовСтр.PlanAmountYear 	= СуммаPL6PlanYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL6."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL6.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL12 	 					= СуммаPL12			+ стр.FactAmount;
		//СуммаPL12Plan 					= СуммаPL12Plan		+ стр.PlanAmount;
		//СуммаPL12Year 	 				= СуммаPL12Year		+ стр.FactAmountYear;
		//СуммаPL12PlanYear 				= СуммаPL12PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL7."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL7.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL12 	 		= СуммаPL12			+ стр.FactAmount;
		//СуммаPL12Plan 		= СуммаPL12Plan		+ стр.PlanAmount;
		//СуммаPL12Year 	 	= СуммаPL12Year		+ стр.FactAmountYear;
		//СуммаPL12PlanYear 	= СуммаPL12PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL8."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL8.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL12 	  		= СуммаPL12			+ стр.FactAmount;
		//СуммаPL12Plan 		= СуммаPL12Plan		+ стр.PlanAmount;
		//СуммаPL12Year 	 	= СуммаPL12Year		+ стр.FactAmountYear;
		//СуммаPL12PlanYear 	= СуммаPL12PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL9."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL9.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL12 	 		= СуммаPL12			+ стр.FactAmount; 
		//СуммаPL12Plan		= СуммаPL12Plan		+ стр.PlanAmount;
		//СуммаPL12Year 	 	= СуммаPL12Year		+ стр.FactAmountYear; 
		//СуммаPL12PlanYear	= СуммаPL12PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL10."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL10.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL12 	 		= СуммаPL12			+ стр.FactAmount;
		//СуммаPL12Plan 		= СуммаPL12Plan		+ стр.PlanAmount;
		//СуммаPL12Year 	 	= СуммаPL12Year 	+ стр.FactAmountYear;
		//СуммаPL12PlanYear 	= СуммаPL12PlanYear + стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL11."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL11.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL12			= СуммаPL12		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL12Plan		= СуммаPL12Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
		
		//СуммаPL12 	  		= СуммаPL12			+ стр.FactAmount;
		//СуммаPL12Plan 		= СуммаPL12Plan		+ стр.PlanAmount;
		//СуммаPL12Year 	  	= СуммаPL12Year		+ стр.FactAmountYear;
		//СуммаPL12PlanYear 	= СуммаPL12PlanYear	+ стр.PlanAmountYear;
		
	//КонецЦикла;	
	
	//СтрокаДерева = ТЗ_Общий.Найти("PL12.","КодСправочника");
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL12."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL12.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL12;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL12Plan;
	КонецЕсли;		
		
		
		//ЗаполнитьЗначенияСвойств(НовСтр,стр);
		//НовСтр.FactAmount		= СуммаPL12;
		//НовСтр.PlanAmount		= СуммаPL12Plan;
		//НовСтр.FactAmountYear	= СуммаPL12Year;
		//НовСтр.PlanAmountYear	= СуммаPL12PlanYear;
		
	//КонецЦикла;	
	
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL13.1.1."));
	//для каждого стр из НайденныеСтроки Цикл
	//НайденнаяСтрока = ТЗ_Общий.Найти("PL13.1.1.","КодСправочника"); 
	//Если НайденнаяСтрока<>Неопределено Тогда
	//	
	//	НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
	//	СуммаPL13			= СуммаPL13		+ НайденнаяСтрока[НаимКолонки];
	//	
	//	НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
	//	СуммаPL13Plan		= СуммаPL13Plan	+ НайденнаяСтрока[НаимКолонки];
	//КонецЕсли;		
	//	
	//	
	//	//СуммаPL13 			= СуммаPL13			+ стр.FactAmount;
	//	//СуммаPL13Plan 		= СуммаPL13Plan		+ стр.PlanAmount;
	//	//СуммаPL13Year 		= СуммаPL13Year		+ стр.FactAmountYear;
	//	//СуммаPL13PlanYear 	= СуммаPL13PlanYear	+ стр.PlanAmountYear;
	//	
	////КонецЦикла;	
	//
	////НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL13.1.2."));
	////для каждого стр из НайденныеСтроки Цикл
	//	
	//НайденнаяСтрока = ТЗ_Общий.Найти("PL13.1.2.","КодСправочника"); 
	//Если НайденнаяСтрока<>Неопределено Тогда
	//	НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
	//	СуммаPL13			= СуммаPL13		+ НайденнаяСтрока[НаимКолонки];
	//	
	//	НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
	//	СуммаPL13Plan		= СуммаPL13Plan	+ НайденнаяСтрока[НаимКолонки];
	//КонецЕсли;		

	
	НайденнаяСтрока = ТЗ_Общий.Найти("PL13.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
		СуммаPL13			= СуммаPL13		+ НайденнаяСтрока[НаимКолонки];
		
		НаимКолонки 		= "Зн_План_"+СтрокаПериод; 
		СуммаPL13Plan		= СуммаPL13Plan	+ НайденнаяСтрока[НаимКолонки];
	КонецЕсли;		
	
	
		//СуммаPL13 			= СуммаPL13			+ стр.FactAmount;
		//СуммаPL13Plan 		= СуммаPL13Plan		+ стр.PlanAmount;
		//СуммаPL13Year 		= СуммаPL13Year		+ стр.FactAmountYear;
		//СуммаPL13PlanYear 	= СуммаPL13PlanYear	+ стр.PlanAmountYear;
		//
	//КонецЦикла;	
	
	//СтрокаДерева = ТЗ_Общий.Найти("PL16.","КодСправочника");
	//НайденныеСтроки = ТЗ_Общий.НайтиСтроки(Новый Структура("КодСправочника","PL16."));
	//для каждого стр из НайденныеСтроки Цикл
		
	НайденнаяСтрока = ТЗ_Общий.Найти("PL16.","КодСправочника"); 
	Если НайденнаяСтрока<>Неопределено Тогда
		//НовСтр 					= ТЗ_Общий.Добавить();
		//НовСтр.Статья 			= стр.Статья;   
		//НовСтр.КодСправочника	= стр.КодСправочника;
		//НовСтр.Код	 			= стр.Код;
		//НовСтр.ParentCode		= стр.ParentCode; 
		
		НаимКолонки 					= "Зн_Факт_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL12			+ СуммаPL13;
		
		НаимКолонки 					= "Зн_План_"+СтрокаПериод; 
		НайденнаяСтрока[НаимКолонки]	= СуммаPL12Plan		+ СуммаPL13Plan;
	КонецЕсли;		
		
		
		//ЗаполнитьЗначенияСвойств(НовСтр,стр);
		//НовСтр.FactAmount 		= СуммаPL12			+ СуммаPL13;
		//НовСтр.PlanAmount 		= СуммаPL12Plan		+ СуммаPL13Plan;
		//НовСтр.FactAmountYear 	= СуммаPL12Year		+ СуммаPL13Year;
		//НовСтр.PlanAmountYear 	= СуммаPL12PlanYear	+ СуммаPL13PlanYear;
		
	//КонецЦикла;
	
	
КонецПроцедуры	

Процедура РассчитатьCFD(ТЗ_Общий,ТЗСтатьи,ДеревоЗн,МассивСумм)
	
	//Скопируем ТЗ 
	//в Факт посадим полную ТЗ т.к. нам нужен полный справочник чтобы потом пересчитать дерево. иначе будет некорректно
	// в план посадим пустую таблицу т.к в плановых данных сидят цифры на итоговых строках без детализации.
	ТЗФакт = ТЗ_Общий.Скопировать();
	ТЗПлан = ТЗ_Общий.СкопироватьКолонки();

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(30, 10);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(100);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, КС);	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеДата = Новый ОписаниеТипов(МассивТипов, КЧ);	
	

	//ТЗ_ДС=Новый ТаблицаЗначений;
	//ТЗ_ДС.Колонки.Добавить("Период",ОписаниеДата);
	//ТЗ_ДС.Колонки.Добавить("Статья");
	//ТЗ_ДС.Колонки.Добавить("FactAmount",ОписаниеЧисло);
	//ТЗ_ДС.Колонки.Добавить("FactAmountYear",ОписаниеЧисло);
	
	
	СтатьяУвеличУменьш  	= Справочники.СтатьиБюджетов.НайтиПоРеквизиту("КодСправочника","CFD6.",,Бюджет);
	СтатьяОстаткиНаНачало  	= Справочники.СтатьиБюджетов.НайтиПоРеквизиту("КодСправочника","CFD7.",,Бюджет);
	СтатьяОстаткиНаКонец  	= Справочники.СтатьиБюджетов.НайтиПоРеквизиту("КодСправочника","CFD8.",,Бюджет);
	
	//Начало.Соберем данные по BS по Денежным средствам
	ТЗ_ДС = ТЗ_Общий.СкопироватьКолонки();
	
	ТЗНачальныеДанныеBS = ПолучитьНачальныеДанныеПоBSПоДенежнымСредствам();
	ТЗНачальныеДанныеBS.свернуть("Report","BalAmount");
	
	Год						= Год(ВыборПериода.ДатаНачала); 
	ПериодПервыйМесяц 		= ВыборПериода.ДатаНачала; 
	ПериодКрайнийМесяц 		= ВыборПериода.ДатаОкончания; 
	
	для а=1 по КолМесяцев Цикл  
		Период 		= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		СтрокаПериод= ПолучитьПериод(Период);
		
		НачПериода  = ВыборПериода.ДатаНачала;
		
		НачМесяца 	= НачалоМесяца(Дата(Год,а,1));
		КонМесяца  	= КонецМесяца(Дата(Год,а,1));
		
		//получим данные с нарастающим итогом
		ТЗДанныеFact = ПолучитьОборотДанныеПоBSПоДенежнымСредствам(НачПериода,НачМесяца,КонМесяца);
		если ТЗДанныеFact.Количество()>0 Тогда
			ТЗДанныеFact.свернуть("Report","BalAmount,Amount");
			для каждого стр из ТЗДанныеFact Цикл 

				НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 
				
				НовСтр 				= ТЗ_ДС.Добавить();
				НовСтр.Статья	 	= СтатьяОстаткиНаКонец;     
				НовСтр[НаимКолонки]	= стр.Amount+стр.BalAmount;
				
				НовСтр 				= ТЗ_ДС.Добавить();
				НовСтр.Статья 		= СтатьяОстаткиНаНачало;     
				НовСтр[НаимКолонки]	= стр.BalAmount;
			КонецЦикла;	 
		КонецЕсли;
		
		// добавим начальные остатки в каждый месяц
		для каждого стр из ТЗНачальныеДанныеBS Цикл 
			НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 

			НовСтр 				= ТЗ_ДС.Добавить();
			НовСтр.Статья 		= СтатьяОстаткиНаНачало;     
			НовСтр[НаимКолонки]	= стр.BalAmount;
			
			НовСтр 				= ТЗ_ДС.Добавить();
			НовСтр.Статья 		= СтатьяОстаткиНаКонец;     
			НовСтр[НаимКолонки]	= стр.BalAmount;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	СтрокаМассиваСумм = СтрСоединить(МассивСумм, ",");

	
	ТЗ_ДС.Свернуть("Статья",СтрокаМассиваСумм);	
	
	//Посчитаем статью Разница
	для а=1 по КолМесяцев Цикл
		ОстНаКонец  = 0; 
		ОстНаНачало = 0; 
		Период 		= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
		СтрокаПериод= ПолучитьПериод(Период);

		НаимКолонки 		= "Зн_Факт_"+СтрокаПериод; 

		НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",СтатьяОстаткиНаНачало));
		для каждого стрДС из НайденныеСтрокиДС Цикл
			ОстНаНачало  = ОстНаНачало +стрДС[НаимКолонки];
		КонецЦикла;	
		
		НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",СтатьяОстаткиНаКонец));
		для каждого стрДС из НайденныеСтрокиДС Цикл
			ОстНаКонец  = ОстНаКонец +стрДС[НаимКолонки];
		КонецЦикла;	
		
		Разница 			= ОстНаКонец-ОстНаНачало; 
		
		НовСтр 				= ТЗ_ДС.Добавить();
		НовСтр.Статья 		= СтатьяУвеличУменьш;     
		НовСтр[НаимКолонки]	= Разница;
		
	КонецЦикла;
	//Окончание.Соберем данные по BS по Денежным средствам
	
	
	//Сбор данных по SQL
	ТЗДанные = ПолучитьОборотДанныеПоCFD(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,Report,GUID,Code,RptLineName,ID","Amount");
		для каждого стр из ТЗДанные Цикл 
			
			Период 		= Дата(стр.Year,стр.Month,1); 
			СтрокаПериод= ПолучитьПериод(Период);

			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID");

			Если НайденнаяСтрока.НеВключать тогда
				Продолжить;
			КонецЕсли;	
			
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			НовСтр.КодСправочника	= стр.Code;     
			НовСтр.Код	 			= стр.ID;
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]		= стр.Amount;

			
			СтрокаПериод= "ЗаПериод";
			НовСтр 					= ТЗФакт.Добавить();
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			НовСтр.КодСправочника	= стр.Code;     
			НовСтр.Код	 			= стр.ID;
			
			НаимКолонки 			= "Зн_Факт_"+СтрокаПериод; 
			НовСтр[НаимКолонки]		= стр.Amount;
			
		КонецЦикла;	 
	КонецЕсли;
	
	ТЗДанные = ПолучитьОборотДанныеПоPlanDataCFD(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания);
	если ТЗДанные.Количество()>0 Тогда
		ТЗДанные.свернуть("Month,Year,Report,GUID,Code,RptLineName,ID","Amount");
		для каждого стр из ТЗДанные Цикл 
			Период 		= Дата(стр.Year,стр.Month,1); 
			СтрокаПериод= ПолучитьПериод(Период);

			НайденнаяСтрока = ТЗСтатьи.Найти(стр.GUID,"GUID"); 
			
			Если НайденнаяСтрока.НеВключать тогда
				Продолжить;
			КонецЕсли;	

			НовСтр 					= ТЗПлан.Добавить();
			
			НовСтр.Статья 			= НайденнаяСтрока.Статья;   
			НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
			
			НовСтр.КодСправочника	= стр.Code;     
			НовСтр.Код	 			= стр.ID;
			НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
			НовСтр[НаимКолонки]		= стр.Amount;

			
			Если НовСтр.Статья = СтатьяОстаткиНаНачало 
				или НовСтр.Статья = СтатьяОстаткиНаКонец
				или НовСтр.Статья = СтатьяУвеличУменьш Тогда
			Иначе
				СтрокаПериод= "ЗаПериод";
				НовСтр 					= ТЗПлан.Добавить();
				
				НовСтр.Статья 			= НайденнаяСтрока.Статья;   
				НовСтр.ParentCode		= НайденнаяСтрока.ParentCode;
				
				НовСтр.КодСправочника	= стр.Code;     
				НовСтр.Код	 			= стр.ID;
				НаимКолонки 			= "Зн_План_"+СтрокаПериод; 
				НовСтр[НаимКолонки]		= стр.Amount;
			КонецЕсли;		
			
		КонецЦикла;	 
	КонецЕсли; 
	//

	// ДеревоЗн.Строки.Очистить();
	//ТЗФакт.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	//ПреобразоватьВДЗРекурсия(ДеревоЗн, ТЗФакт, "");
	//ПересчитатьВсеДерево(ДеревоЗн.Строки);
	//ПреобразоватьВТЗРекурсия(ДеревоЗн, ТЗ_Общий,"");

	ТЗФакт.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	Для каждого стр из ТЗФакт Цикл
		нСтр = ТЗ_Общий.Добавить();  
		ЗаполнитьЗначенияСвойств(нСтр,стр);
	КонецЦикла;	

	//добавим данные по плану ничего не меняя. 
	ТЗПлан.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	Для каждого стр из ТЗПлан Цикл
		нСтр = ТЗ_Общий.Добавить();  
		ЗаполнитьЗначенияСвойств(нСтр,стр);
	КонецЦикла;	

	ДеревоЗн.Строки.Очистить();
	ТЗ_Общий.свернуть("Статья,КодСправочника,Код,ParentCode",СтрокаМассиваСумм);  
	ПреобразоватьВДЗРекурсия(ДеревоЗн, ТЗ_Общий, "");
	ПересчитатьВсеДерево(ДеревоЗн.Строки);
	ТЗ_Общий.Очистить();
	ПреобразоватьВТЗРекурсия(ДеревоЗн, ТЗ_Общий,"");
	

	
	//свернем и проставим по статьям данные по BS
	ТЗ_Общий.свернуть("Статья,КодСправочника,ParentCode,Код",СтрокаМассиваСумм);  
	для каждого стр из ТЗ_Общий Цикл 
		
		для а=1 по КолМесяцев Цикл
			Период 		= Дата(Год(ВыборПериода.ДатаНачала),а,1); 
			СтрокаПериод= ПолучитьПериод(Период);
			
			НаимКолонки = "Зн_Факт_"+СтрокаПериод; 
			ОстНаНачало = 0;
			ОстНаКонец  = 0;
			Если стр.Статья = СтатьяОстаткиНаНачало Тогда //Денежные средства и их эквиваленты на начало отчетного периода    
				СумммаДС 		= 0;
				НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",стр.Статья));
				для каждого стрДС из НайденныеСтрокиДС Цикл
					СумммаДС 	= СумммаДС	+ стрДС[НаимКолонки];
				КонецЦикла;	
				стр[НаимКолонки]= СумммаДС;
				
				ОстНаНачало = ОстНаНачало+СумммаДС;
			КонецЕсли;	
			
			Если стр.Статья = СтатьяОстаткиНаКонец Тогда //Денежные средства и их эквиваленты на конец отчетного периода    
				СумммаДС 		= 0;
				НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",стр.Статья));
				для каждого стрДС из НайденныеСтрокиДС Цикл
					СумммаДС 	= СумммаДС	+ стрДС[НаимКолонки];
				КонецЦикла;	
				стр[НаимКолонки]= СумммаДС;
				
				ОстНаКонец		= ОстНаКонец+СумммаДС;
			КонецЕсли;
			
			Если стр.Статья = СтатьяУвеличУменьш Тогда //(CFD6.) Увеличение +/- уменьшение денежных средств    
				СумммаДС = 0;
				НайденныеСтрокиДС = ТЗ_ДС.НайтиСтроки(Новый Структура("Статья",стр.Статья));
				для каждого стрДС из НайденныеСтрокиДС Цикл
					СумммаДС = СумммаДС+стрДС[НаимКолонки];
				КонецЦикла;	 
				стр[НаимКолонки]= СумммаДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	//Заполним данные по Ост по План/Факт на начало и конец по году. запишем в последний месяц т.к. это сальдовые суммы
	ОстНаНачалоFact = 0;
	ОстНаКонецFact 	= 0;
	ОстНаНачалоPlan = 0;
	ОстНаКонецPlan 	= 0;

	СтрокаПериод	= ПолучитьПериод(ПериодПервыйМесяц);
	
	НайденныеСтрокиДС = ТЗ_Общий.НайтиСтроки(Новый Структура("Статья",СтатьяОстаткиНаНачало));
	для каждого стрДС из НайденныеСтрокиДС Цикл
		
		НовСтр 					= ТЗ_Общий.Добавить();
		
		НовСтр.Статья 				= стрДС.Статья;   
		НовСтр.ParentCode			= стрДС.ParentCode;
		НовСтр.КодСправочника		= стрДС.КодСправочника;     
		НовСтр.Код	 				= стрДС.Код;
		
		НовСтр["Зн_Факт_ЗаПериод"]	= стрДС["Зн_Факт_"+СтрокаПериод];
		ОстНаНачалоFact 			= ОстНаНачалоFact+стрДС["Зн_Факт_"+СтрокаПериод];

		НовСтр["Зн_План_ЗаПериод"]	= стрДС["Зн_План_"+СтрокаПериод];
		ОстНаНачалоPlan 			= ОстНаНачалоPlan+стрДС["Зн_План_"+СтрокаПериод];
		
	КонецЦикла;	
	
	СтрокаПериод	= ПолучитьПериод(ПериодКрайнийМесяц);
	НайденныеСтрокиДС = ТЗ_Общий.НайтиСтроки(Новый Структура("Статья",СтатьяОстаткиНаКонец));
	для каждого стрДС из НайденныеСтрокиДС Цикл

		НовСтр 						= ТЗ_Общий.Добавить();
		
		НовСтр.Статья 				= стрДС.Статья;   
		НовСтр.ParentCode			= стрДС.ParentCode;
		НовСтр.КодСправочника		= стрДС.КодСправочника;     
		НовСтр.Код	 				= стрДС.Код;
		
		НовСтр["Зн_Факт_ЗаПериод"]	= стрДС["Зн_Факт_"+СтрокаПериод];
		ОстНаКонецFact 				= ОстНаКонецFact+стрДС["Зн_Факт_"+СтрокаПериод];

		НовСтр["Зн_План_ЗаПериод"]	= стрДС["Зн_План_"+СтрокаПериод];
		ОстНаКонецPlan 				= ОстНаКонецPlan+стрДС["Зн_План_"+СтрокаПериод]; 
		
		
	КонецЦикла;	   
	
	ТЗ_Общий.свернуть("Статья,КодСправочника,ParentCode,Код",СтрокаМассиваСумм);  
	
	СтрокаПериод	= ПолучитьПериод(ПериодКрайнийМесяц);
	НайденныеСтрокиДС = ТЗ_Общий.НайтиСтроки(Новый Структура("Статья",СтатьяУвеличУменьш));
	для каждого стрДС из НайденныеСтрокиДС Цикл
		НовСтр 					= ТЗ_Общий.Добавить();
		
		НовСтр.Статья 			= стрДС.Статья;   
		НовСтр.ParentCode		= стрДС.ParentCode;
		НовСтр.КодСправочника	= стрДС.КодСправочника;     
		НовСтр.Код	 			= стрДС.Код;
		
		НаимКолонки 			= "Зн_Факт_ЗаПериод";  
		НовСтр[НаимКолонки]  	= ОстНаКонецFact-ОстНаНачалоFact;

		НаимКолонки 			= "Зн_План_ЗаПериод";  
		НовСтр[НаимКолонки]  	= ОстНаКонецPlan-ОстНаНачалоPlan;
		
	КонецЦикла;	
	
	//
	
КонецПроцедуры	

Процедура ПересчитатьВсеДерево(дз_стр) экспорт
	
	Для Каждого СтрокаДерева Из дз_стр Цикл
		
		// Если мы в строке, у неё нет итогов, пропустим
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПересчитатьВсеДерево(СтрокаДерева.Строки);
		
		// Для текущей записи вычислим сумму строк колонки
		Попытка       
			для а=1 по КолМесяцев Цикл  
				Период 	= Дата(Год(ВыборПериода.ДатаНачала),а,1);  
				
				СтрокаПериод = Формат(Период,"ДФ=""ММММ"""); 
				
				НаимКолонкиПлан 					= "Зн_План_"+СтрокаПериод; 
				СтрокаДерева[НаимКолонкиПлан]  		= СтрокаДерева.Строки.Итог(НаимКолонкиПлан);
				
				НаимКолонкиФакт 					= "Зн_Факт_"+СтрокаПериод; 
				СтрокаДерева[НаимКолонкиФакт]  		= СтрокаДерева.Строки.Итог(НаимКолонкиФакт);
				
				//НаимКолонкиОтклонАбс 				= "Зн_ОтклонАбс_"+СтрокаПериод;
				//СтрокаДерева[НаимКолонкиОтклонАбс] 	= СтрокаДерева[НаимКолонкиФакт] - СтрокаДерева[НаимКолонкиПлан];
				//
				//НаимКолонкиОтклонОтнос 				= "Зн_ОтклонОтнос_"+СтрокаПериод;
				//если СтрокаДерева[НаимКолонкиПлан]<>0 Тогда
				//	СтрокаДерева[НаимКолонкиОтклонОтнос] 	= (СтрокаДерева[НаимКолонкиОтклонАбс] / СтрокаДерева[НаимКолонкиПлан])*100;
				//КонецЕсли;
			КонецЦикла;
			
			СтрокаПериод = "ЗаПериод"; 
			
			НаимКолонкиПлан 					= "Зн_План_"+СтрокаПериод; 
			СтрокаДерева[НаимКолонкиПлан]  		= СтрокаДерева.Строки.Итог(НаимКолонкиПлан);
			
			НаимКолонкиФакт 					= "Зн_Факт_"+СтрокаПериод; 
			СтрокаДерева[НаимКолонкиФакт]  		= СтрокаДерева.Строки.Итог(НаимКолонкиФакт);
			
			//НаимКолонкиОтклонАбс 				= "Зн_ОтклонАбс_"+СтрокаПериод;
			//СтрокаДерева[НаимКолонкиОтклонАбс] 	= СтрокаДерева[НаимКолонкиФакт] - СтрокаДерева[НаимКолонкиПлан];
			//
			//НаимКолонкиОтклонОтнос 				= "Зн_ОтклонОтнос_"+СтрокаПериод;
			//если СтрокаДерева[НаимКолонкиПлан]<>0 Тогда
			//	СтрокаДерева[НаимКолонкиОтклонОтнос] 	= (СтрокаДерева[НаимКолонкиОтклонАбс] / СтрокаДерева[НаимКолонкиПлан])*100;
			//КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
Конецпроцедуры

&НаСервере
Процедура ПреобразоватьВТЗРекурсия(тДерево, тТаблица,КодСправочника)
	Для Каждого тСтр Из тДерево.Строки Цикл
		
		нСтр = тТаблица.Добавить();  
		
		ЗаполнитьЗначенияСвойств(нСтр,тСтр);
		нСтр.ParentCode 		= КодСправочника;
		
		Если тСтр.Строки.Количество()>0 Тогда
			ПреобразоватьВТЗРекурсия(тСтр, тТаблица,нСтр.КодСправочника);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПреобразоватьВДЗРекурсия(тДерево, тТаблица, Code) экспорт
	тПоиск = Новый Структура("ParentCode", Code);
	тМассив = тТаблица.НайтиСтроки(тПоиск);
	Для Каждого тСтр Из тМассив Цикл
		нСтр = тДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр,тСтр);
		ПреобразоватьВДЗРекурсия(нСтр, тТаблица, тСтр.Code);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПериод(Период)
	Возврат Формат(Период,"ДФ=""ММММ""");	
КонецФункции	

//********************************************************************************************************
//********************************************************************************************************
Функция ПолучитьНачальныеДанныеПоBS()
	
	Запрос = "
	|USE BW_AMD_COPY
	|
	|
	|	SELECT 
	|		 Rpt.id as Report,			 
	|		 RptLineStr.ReportLine as GUID,			 
	|		 RptLine.Code as Code,
	|		 RptLine.Name as RptLineName,
	|		 RptLine.id as ID, 
	|		 Sc.Code Account,
	|		 SuM(Bal.RegulatedAmount) as BalAmount, 
	|		 SuM(0) as Amount 
	|		  FROM (
	|					SELECT 
	|					  Trn.Account as Account,
	|					  SuM(CASE WHEN Trn.TypeOfTurnovers = 'Кт' then -Trn.RegulatedAmount else Trn.RegulatedAmount END) as RegulatedAmount 	
	|					  FROM Map_Turnovers Trn
	|					  left join map_Organizations Org ON Trn.HeadCompany = Org.id
	|					  where Trn.TurnoverPeriod between '2017.01.01'  and '2020.12.31'
	|                                and Trn.Base = 'upp_upnk-pv'
	|					  and Org.IIN = '111240008552'
	|					 group by
	|					 Trn.Account
	|
	|					 union 
	|
	|					SELECT  
	|					   Bal.Account as Account
	|				      ,Sum(Bal.RegulatedAmount) as RegulatedAmount
	|					  FROM map_Balances Bal
	|					  left join map_Organizations Org ON Bal.HeadCompany = Org.id
	|					  where Bal.Period = '2017.01.01' 
	|                                and Bal.Base = 'upp_upnk-pv'
	|					  and Org.IIN  = '111240008552'
	|					  group by 
	|					   Bal.Account) Bal
	|		  left join map_ChartOfAccounts Sc ON Bal.Account = Sc.id
	|		  left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = Bal.Account
	|		  left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	|		  left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	|		 WHERE RptLine.GUID is not null
	|		 and Rpt.id = 1
	|		  group by
	|		 Rpt.id,
	|		 RptLine.Report,
	|		 RptLineStr.ReportLine,
	|		 RptLine.Code,
	|		 RptLine.id,
	|		 RptLine.Name,
	|		 Sc.GUID,
	|		 Sc.Code
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОборотДанныеПоBS(Data1,Data2)
	
	Запрос = "
	|USE BW_AMD_COPY
	|
	|
	|  		SELECT 
	|		 Rpt.id as Report,			 
	|		 RptLineStr.ReportLine as GUID,			 
	|		 RptLine.Code as Code,
	|		 RptLine.ID as ID,
	|		 RptLine.Name as RptLineName,
	|		 RptLine.id as RptLineId, 
	|		 SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmount else TrnOver.RegulatedAmount END) as Amount 
	|		  FROM Map_Turnovers TrnOver
	|		  left join map_ChartOfAccounts Sc ON TrnOver.Account = Sc.id
	|		  left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = TrnOver.Account
	|		  left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	|		  left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	|		  left join map_Organizations Org ON TrnOver.HeadCompany = Org.id
	|		 where TurnoverPeriod between ? and ?
	|             and TrnOver.Base = 'upp_upnk-pv'
	|		 and Org.IIN = '111240008552'
	|		 and Rpt.id = 1
	|		 and RptLine.GUID is not null
	|		group by
	|		 Rpt.id,
	|		 RptLine.Report,
	|		 RptLineStr.ReportLine,
	|		 RptLine.Code,
	|		 RptLine.id,
	|		 RptLine.Name
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОборотДанныеПоPL(Data1,Data2)
	
	Запрос = "
	|USE BW_AMD_COPY
	|
	|SELECT 
	| DATEPART(MM, TrnOver.TurnoverPeriod) as Month
	|,DATEPART(YY, TrnOver.TurnoverPeriod) as Year
	|,Rpt.id as Report			 
	|,RptLine.id as ID
	|,RptLine.Code as Code
	|,RptLine.GUID as GUID			 
	|,RptLine.Name as RptLineName
	|,SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then TrnOver.RegulatedAmountNew else -TrnOver.RegulatedAmountNew END) as Amount 
	|FROM [Map_Turnovers] TrnOver
	|left join [map_rpt_ReportLineStructures] RptLineStr ON RptLineStr.Account = TrnOver.Account
	|left join [map_rpt_ReportLines] RptLine ON RptLineStr.ReportLine = RptLine.GUID
	|left join [map_ChartOfAccounts] Sc ON TrnOver.Account = Sc.id
	|left join [map_ChartOfAccounts] CorSc ON TrnOver.CorAccount = CorSc.id
	|left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	|left join [map_Organizations] Org ON TrnOver.HeadCompany = Org.id
	|where TurnoverPeriod between ? and ?
	|and TrnOver.Base = 'upp_upnk-pv'
	|and Org.IIN = '111240008552'
	|and Rpt.id = 2
	|and (CorSc.Code <> '5710' or CorSc.Code is null)
	|group by
	|Rpt.id
	|,RptLine.Report
	|,RptLine.GUID
	|,RptLine.Parent
	|,RptLine.Code
	|,RptLine.id
	|,RptLine.Name
	|,TrnOver.TurnoverPeriod
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОборотДанныеПоCFD(Data1,Data2)
	
	Запрос = "
	|USE BW_AMD_COPY
	|
	|SELECT 
	| DATEPART(MM, TrnOver.TurnoverPeriod) as Month
	|,DATEPART(YY, TrnOver.TurnoverPeriod) as Year
	|,Rpt.id as Report			 
	|,RptLine.id as ID
	|,RptLine.Code as Code
	|,RptLine.GUID as GUID			 
	|,RptLine.Name as RptLineName
	|,SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmountNew else TrnOver.RegulatedAmountNew END) as Amount 
	| FROM [map_Turnovers] TrnOver
	|  left join [map_CashFlowItems] CashFlow ON TrnOver.CashFlowItem = CashFlow.id 
	|  left join [map_rpt_ReportLines] RptLine ON RptLine.Code = CashFlow.Code
	|  left join [map_Organizations] Org ON TrnOver.HeadCompany = Org.id
	|  left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	|  left join [map_ChartOfAccounts] Sc ON Account = Sc.id
	| where TurnoverPeriod between ? and ?
	| and TrnOver.CashFlowItem is not NULL
	| and TrnOver.Base = 'upp_upnk-pv'
	| and Org.IIN = '111240008552'
	| and Rpt.id = 3
	| and (Sc.Code = '1010' or Sc.Code = '1030' or Sc.Code = '1040' or Sc.Code = '1050' or Sc.Code = '1060' or Sc.Code = '1070'  or Sc.Code = '1090')
	| group by
	|Rpt.id
	|,RptLine.Report
	|,RptLine.GUID
	|,RptLine.Parent
	|,RptLine.Code
	|,RptLine.id
	|,RptLine.Name
	|,TrnOver.TurnoverPeriod
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОборотДанныеПоPlanDataBS(Data1,Data2)
	
	Запрос = "
	|USE BW_AMD_COPY
	|
	|SELECT 
	|  DATEPART(MM, mPlan.Period) as Month
	| ,DATEPART(YY, mPlan.Period) as Year
	| ,Rpt.id as Report			 
	| ,RptLine.id as ID
	| ,RptLine.Code as Code
	| ,RptLine.GUID as GUID			 
	| ,RptLine.Name as RptLineName
	| ,SuM(mPlan.Amount) as Amount
	| FROM [map_PlanData] mPlan
	|left join [map_rpt_ReportLines] RptLine ON mPlan.ReportLine = RptLine.id
	|left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	|left join [map_Organizations] Org ON mPlan.Company = Org.id
	|left join map_TypesOfMovements TypeOfM ON mPlan.TypesOfMovement = TypeOfM.id
	|where Period between ? and ?
	|and Org.IIN = '111240008552'
	//|and mPlan.Version = 1
	|and RptLine.GUID is not NULL
	|and Rpt.id = 1
	|and (mPlan.TypesOfMovement = 0 Or TypeOfM.id = 119)
	|group by
	| Rpt.id
	|,RptLine.Report
	|,RptLine.id
	|,RptLine.GUID
	|,RptLine.Parent
	|,RptLine.Code
	|,RptLine.Name
	|,mPlan.Period
	|,TypeOfM.id
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОборотДанныеПоPlanDataPL(Data1,Data2)
	
	Запрос = "
	|USE BW_AMD_COPY
	|
	|SELECT 
	|  DATEPART(MM, mPlan.Period) as Month
	| ,DATEPART(YY, mPlan.Period) as Year
	| ,Rpt.id as Report			 
	| ,RptLine.id as ID
	| ,RptLine.Code as Code
	| ,RptLine.GUID as GUID			 
	| ,RptLine.Name as RptLineName
	| ,SuM(mPlan.Amount) as Amount
	| FROM [map_PlanData] mPlan
	|left join [map_rpt_ReportLines] RptLine ON mPlan.ReportLine = RptLine.id
	|left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	|left join [map_Organizations] Org ON mPlan.Company = Org.id
	|where Period between ? and ?
	|and Org.IIN = '111240008552'
	|and mPlan.Version = 1
	|and RptLine.GUID is not NULL
	|and Rpt.id = 2
	|group by
	| Rpt.id
	|,RptLine.Report
	|,RptLine.id
	|,RptLine.GUID
	|,RptLine.Parent
	|,RptLine.Code
	|,RptLine.Name
	|,mPlan.Period
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОборотДанныеПоPlanDataCFD(Data1,Data2)
	
	Запрос = "
	|USE BW_AMD_COPY
	|
	|SELECT 
	|  DATEPART(MM, mPlan.Period) as Month
	| ,DATEPART(YY, mPlan.Period) as Year
	| ,Rpt.id as Report			 
	| ,RptLine.id as ID
	| ,RptLine.Code as Code
	| ,RptLine.GUID as GUID			 
	| ,RptLine.Name as RptLineName
	| ,SuM(mPlan.Amount) as Amount
	| FROM [map_PlanData] mPlan
	|left join [map_rpt_ReportLines] RptLine ON mPlan.ReportLine = RptLine.id
	|left join [map_rpt_Reports] Rpt ON RptLine.Report = Rpt.GUID
	|left join [map_Organizations] Org ON mPlan.Company = Org.id
	|where Period between ? and ?
	|and Org.IIN = '111240008552'
	|and mPlan.Version = 1
	|and RptLine.GUID is not NULL
	|and Rpt.id = 3
	|group by
	| Rpt.id
	|,RptLine.Report
	|,RptLine.id
	|,RptLine.GUID
	|,RptLine.Parent
	|,RptLine.Code
	|,RptLine.Name
	|,mPlan.Period
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data1,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(Data2,"ДФ=гггг.ММ.дд")));
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьНачальныеДанныеПоBSПоДенежнымСредствам()
	
	Запрос = "
	|USE BW_AMD_COPY
	|
	|
	|	SELECT 
	|		 Rpt.id as Report,			 
	//|		 RptLineStr.ReportLine as GUID,			 
	//|		 RptLine.Code as Code,
	//|		 RptLine.Name as RptLineName,
	//|		 RptLine.id as RptLineId, 
	//|		 Sc.Code Account,
	|		 SuM(Bal.RegulatedAmount) as BalAmount, 
	|		 SuM(0) as Amount 
	|		  FROM (
	|					SELECT 
	|					  Trn.Account as Account,
	|					  SuM(CASE WHEN Trn.TypeOfTurnovers = 'Кт' then -Trn.RegulatedAmount else Trn.RegulatedAmount END) as RegulatedAmount 	
	|					  FROM Map_Turnovers Trn
	|					  left join map_Organizations Org ON Trn.HeadCompany = Org.id
	|					  where Trn.TurnoverPeriod between '2017.01.01'  and '2020.12.31'
	|                                and Trn.Base = 'upp_upnk-pv'
	|					  and Org.IIN = '111240008552'
	|					 group by
	|					 Trn.Account
	|
	|					 union 
	|
	|					SELECT  
	|					   Bal.Account as Account
	|				      ,Sum(Bal.RegulatedAmount) as RegulatedAmount
	|					  FROM map_Balances Bal
	|					  left join map_Organizations Org ON Bal.HeadCompany = Org.id
	|					  where Bal.Period = '2017.01.01' 
	|                                and Bal.Base = 'upp_upnk-pv'
	|					  and Org.IIN  = '111240008552'
	|					  group by 
	|					   Bal.Account) Bal
	|		  left join map_ChartOfAccounts Sc ON Bal.Account = Sc.id
	|		  left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = Bal.Account
	|		  left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	|		  left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	|		 WHERE RptLine.GUID is not null
	|		 and Rpt.id = 1
	|        and Sc.Code in ('1010','1021','1022','1030','1040','1050','1060','1070','1080','1090')
	|		 group by
	|		 Rpt.id
	//|		 RptLine.Report,
	//|		 RptLineStr.ReportLine,
	//|		 RptLine.Code,
	//|		 RptLine.id,
	//|		 RptLine.Name,
	//|		 Sc.GUID,
	//|		 Sc.Code
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОборотДанныеПоBSПоДенежнымСредствам(НачПериода,НачМесяца,КонМесяца)
	
	Запрос = "
	|USE BW_AMD_COPY
	|	
	|  		SELECT 
	|		 Rpt.id as Report,			 
	|		 RptLine.Code as Code,
	|		 RptLine.ID as ID,
	|		 RptLine.Name as RptLineName,
	|		 SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmount else TrnOver.RegulatedAmount END) as BalAmount, 
	|		 SuM(0) as Amount 
	|	  FROM Map_Turnovers TrnOver
	|		  left join map_ChartOfAccounts Sc ON TrnOver.Account = Sc.id
	|		  left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = TrnOver.Account
	|	      left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	|		  left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	|		  left join map_Organizations Org ON TrnOver.HeadCompany = Org.id
	|		 where TurnoverPeriod between ? and ?
	|            and TrnOver.Base = 'upp_upnk-pv'
	|		 and Org.IIN = '111240008552'
	|		 and Rpt.id = 1
	|       and Sc.Code in ('1010','1021','1022','1030','1040','1050','1060','1070','1080','1090')
	|		 and RptLine.GUID is not null
	|		group by
	|		 Rpt.id,
	|		 RptLine.Code,
	|		 RptLine.id,
	|		 RptLine.Name
	|
	| union
	|
	|  		SELECT 
	|		 Rpt.id as Report,			 
	|		 RptLine.Code as Code,
	|		 RptLine.ID as ID,
	|		 RptLine.Name as RptLineName,
	|		 SuM(0) as BalAmount, 
	|		 SuM(CASE WHEN TrnOver.TypeOfTurnovers = 'Кт' then -TrnOver.RegulatedAmount else TrnOver.RegulatedAmount END) as Amount 
	|		  FROM Map_Turnovers TrnOver
	|		  left join map_ChartOfAccounts Sc ON TrnOver.Account = Sc.id
	|		  left join map_rpt_ReportLineStructures RptLineStr ON RptLineStr.Account = TrnOver.Account
	|		  left join map_rpt_ReportLines RptLine ON RptLineStr.ReportLine = RptLine.GUID
	|		  left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	|		  left join map_Organizations Org ON TrnOver.HeadCompany = Org.id
	|		 where TurnoverPeriod between ? and ?
	|             and TrnOver.Base = 'upp_upnk-pv'
	|		 and Org.IIN = '111240008552'
	|		 and Rpt.id = 1
	|        and Sc.Code in ('1010','1021','1022','1030','1040','1050','1060','1070','1080','1090')
	|		 and RptLine.GUID is not null
	|		group by
	|		 Rpt.id,
	|		 RptLine.Code,
	|		 RptLine.id,
	|		 RptLine.Name
	|";     
	
	Таблица = Новый ТаблицаЗначений;
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(НачПериода,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(НачМесяца-1,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(НачМесяца,"ДФ=гггг.ММ.дд")));
	Команда.Parameters.Append(Команда.CreateParameter(,8,1,,Формат(КонМесяца,"ДФ=гггг.ММ.дд")));
	
	//Команда.Parameters.Append(Команда.CreateParameter(,200,1,100,ИияБазы));
	//Команда.Parameters.Append(Команда.CreateParameter(,200,1,12,БИН));
	
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьСтатьиОтчетаИзSQL(ID)
	
	Запрос = "
	|USE BW_AMD_COPY
	|
	|SELECT 
	|	RptLine.GUID
	|   ,RptLine.Name
	|   ,RptLine.Code
	|   ,RptLine.id
	|FROM map_rpt_ReportLines RptLine
	|left join map_rpt_Reports Rpt ON RptLine.Report = Rpt.GUID
	|where Rpt.id = _КодОтчета
	|";     
	
	Таблица = Новый ТаблицаЗначений;   
	
	Запрос = СтрЗаменить(Запрос,"_КодОтчета",ID);
	
	
	Команда = Соединение();
	Команда.CommandTimeout = 500;
	//Команда.Parameters.Append(Команда.CreateParameter(,139,1,1,ID));
	
	Команда.CommandText = Запрос;
	
	Выборка = Команда.Execute();
	
	Если НЕ Выборка.BOF Тогда
		
		Для А = 0 По Выборка.Fields.Count - 1 Цикл
			
			ИмяСтолбца = Выборка.Fields.Item(А).Name;  
			
			Таблица.Колонки.Добавить(ИмяСтолбца);
			
		КонецЦикла;
		
		
		Пока НЕ Выборка.EOF Цикл
			
			НоваяСтрока = Таблица.Добавить();
			
			Для А = 0 По Выборка.Fields.Count - 1 Цикл
				
				НоваяСтрока.Установить(А, Выборка.Fields(А).Value);
				
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	Возврат Таблица;
	
КонецФункции

Функция Соединение() Экспорт
	
	НастройкиОбмена = Константы.ОсновныеНастройкиОбмена.Получить();
	
	Попытка
		
		Команда     = Новый COMОбъект("ADODB.Command");
		Выборка     = Новый COMОбъект("ADODB.RecordSet");
		Соединение  = Новый COMОбъект("ADODB.Connection");
		
		Соединение.ConnectionString = "DRIVER={SQL Server};" + "SERVER=" + НастройкиОбмена.ИнстансSQL + ";" + "UID=" + НастройкиОбмена.ЛогинSQL + ";" + "PWD=" + НастройкиОбмена.ПарольSQL +";" + "DATABASE=" + НастройкиОбмена.БазаДанныхSQL + ";";
		
		Соединение.CommandTimeout	 = 1800;
		Соединение.ConnectionTimeout = 1800;
		
		Соединение.Open();
		
		Команда.ActiveConnection = Соединение;
		
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Выборка SQL", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Команда;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СписокОтчетов = Новый СписокЗначений;
	СписокОтчетов.Добавить(1);
	СписокОтчетов.Добавить(2);
	СписокОтчетов.Добавить(3);
	СписокОтчетов.Добавить(8);
	СписокОтчетов.Добавить(9);
	СписокОтчетов.Добавить(10);
	
	Запрос = Новый Запрос();
	Запрос.Текст  ="ВЫБРАТЬ
	               |	авБюджеты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Бюджеты КАК авБюджеты
	               |ГДЕ
	               |	авБюджеты.Код В(&СписокКодов)";
	Запрос.УстановитьПараметр("СписокКодов",СписокОтчетов);
	Элементы.Бюджет.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
КонецПроцедуры


Функция ПолучитьКоличествоМесяцев(Дата1,Дата2)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&Дата1, &Дата2, МЕСЯЦ)+1 КАК КолМесяцев";
	Запрос.УстановитьПараметр("Дата1",Дата1);
	Запрос.УстановитьПараметр("Дата2",Дата2);
	Рез = Запрос.Выполнить().Выбрать();			   
	Рез.Следующий();
	Возврат Рез.КолМесяцев;
	
КонецФункции	
