
&НаКлиенте
Процедура Сформировать(Команда)
	Если Не ЗначениеЗаполнено(Отчет.Организация) Тогда
		Сообщить("Не выбрана Организация");
		Возврат;
	КонецЕсли;	
	Отчет.Дата1 = ВыборПериода.ДатаНачала;
	Отчет.Дата2 = ВыборПериода.ДатаОкончания;
	
	СформироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	отОб = РеквизитФормыВЗначение("Отчет");
	Рез = отОб.СформироватьОтчет();
	Если Рез<>Истина Тогда
		Сообщить("Отчет не сформирован");
		Возврат;
	КонецЕсли;	
	
	Печать("BS",отОб.ДеревоBS,ТабличныйДокументBS);
	Печать("PL",отОб.ДеревоPL,ТабличныйДокументPL);
	Печать("CFD",отОб.ДеревоCFD,ТабличныйДокументCFD);
	Печать("ОСВ",отОб.ДеревоОСВ,ТабличныйДокументОСВ);
	Печать("Капитал",отОб.ДеревоКапитал,ТабличныйДокументКапитал);
	Печать("CFI",отОб.ДеревоCFI,ТабличныйДокументCFI);
	
КонецПроцедуры

Процедура Печать(ВидОтчета,ДанныеДерева,ТабДок)
	
	//ДанныеДерева = РеквизитФормыВЗначение("ДеревоBS");
	
	отОб = РеквизитФормыВЗначение("Отчет");
	Если ВидОтчета = "ОСВ" Тогда
		Макет = отОб.ПолучитьМакет("МакетОСВ");
	ИначеЕсли ВидОтчета = "CFI" Тогда
		Макет = отОб.ПолучитьМакет("МакетCFI");
	ИначеЕсли ВидОтчета = "Капитал" Тогда
		Макет = отОб.ПолучитьМакет("МакетКапитал");
	Иначе
		Если ВидОтчета = "BS" и РазвернутыйBS Тогда
			Макет = отОб.ПолучитьМакет("МакетРазвернутый");
		Иначе
			Макет = отОб.ПолучитьМакет("Макет");
		КонецЕсли;
	КонецЕсли;
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.ВидОтчета = ВидОтчета;
	Шапка.Параметры.Период = "За период с "+Формат(Отчет.Дата1,"ДЛФ=DD")+" по "+Формат(КонецДня(Отчет.Дата2),"ДЛФ=DD");
	Шапка.Параметры.Организация = Отчет.Организация;
	
	ТабДок.Очистить();
	
	ТабДок.Вывести(Шапка);
	ТабДок.НачатьАвтогруппировкуСтрок();
    ПечатьДерева(ТабДок,Макет,ДанныеДерева,,ДанныеДерева.Колонки);
    ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры	

Процедура ПечатьДерева(ТабДок,Макет,СтрокаДерева,Уровень = 0,Колонки)
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		Если стр.Строки.Количество() >0 Тогда
			ОблСтрока 		= Макет.ПолучитьОбласть("Строка1");
		Иначе
			ОблСтрока 		= Макет.ПолучитьОбласть("Строка");
		КонецЕсли;	
		отступ = "";
		Для н = 1 По Уровень Цикл   
			отступ = отступ + "  ";
		КонецЦикла;
		ОблСтрока.Параметры.Заполнить(стр);
		ОблСтрока.Параметры.Code = отступ+стр.Code;
		ТабДок.Вывести(ОблСтрока,Уровень+1);
        Если стр.Строки.Количество() >0 Тогда
			ПечатьДерева(ТабДок,Макет,стр,Уровень+1,Колонки);
        КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередЗаполнением(Результат, Параметры) Экспорт
	СформироватьНаСервере();
	
КонецПроцедуры

//&НаСервере
//Процедура АнализСчетаНаСервере()
//	Прокси = авУправлениеЭталоннымиСправочникамиСервер.ПолучитьПроксиEtalonRefSyncEx();
//	Если Прокси = Неопределено Тогда
//		возврат;
//	КонецЕсли;
//	
//	Base = Константы.авИмяБазы.Получить();
//	
//	Рез = Прокси.CheckBase(Base);
//	если Рез <> "1"  Тогда
//		Сообщить("Не найдена орг-ция по имени базы "+Строка(Base));
//		возврат;
//	КонецЕсли;	
//	
//	Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИНН")<>Неопределено Тогда
//		ИИН=Отчет.Организация.ИНН;
//	Иначе
//		ИИН=Отчет.Организация.ИдентификационныйНомер;
//	КонецЕсли;	
//	
//	
//	МассивТипов = Новый Массив;
//	МассивТипов.Добавить(Тип("Число"));
//	КЧ = Новый КвалификаторыЧисла(19, 2);
//	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
//	
//	ТЗ = Отчет.ТЗ_БУ_.Выгрузить();
//	ТЗ.Свернуть("Эталон,КорЭталон","СуммаОборотДтБух,СуммаОборотКтБух");
//	
//	ТЗ.Колонки.Добавить("СтрокаНайдена");
//	
//	
//	ТЗАнализСчета.Очистить();
//	
//	Рез 	= Прокси.GetReportAnalysis(Отчет.Дата1,Отчет.Дата2,Base,ИИН);
//	
//	для каждого стр из Рез.ReportLineAnalysis Цикл
//		НовСтр = ТЗАнализСчета.Добавить();
//		ЗаполнитьЗначенияСвойств(НовСтр,стр);
//		НовСтр.СчетКонтрольный = стр.Account;
//		НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Эталон,КорЭталон",Справочники.авПланСчетов.НайтиПоКоду(стр.Account),Справочники.авПланСчетов.НайтиПоКоду(стр.CorAccount)));
//		Если НайденныеСтроки.Количество()>0 Тогда
//			для каждого стрН из НайденныеСтроки Цикл
//				НовСтр.Счет 				= стрН.Эталон;
//				НовСтр.КорСчет 				= стрН.КорЭталон;
//				НовСтр.ОборотДтПоДаннымБУ 	= стрН.СуммаОборотДтБух;
//				НовСтр.ОборотКтПоДаннымБУ 	= стрН.СуммаОборотКтБух;
//			КонецЦикла;	
//		КонецЕсли;
//		НовСтр.ОтклонениеОборотДт = НовСтр.ОборотДтПоДаннымБУ-НовСтр.AmountDt;
//		НовСтр.ОтклонениеОборотКт = НовСтр.ОборотКтПоДаннымБУ-НовСтр.AmountKt;
//		
//	КонецЦикла;	
//	
//	для каждого стр из ТЗ Цикл
//		Если стр.СуммаОборотДтБух=0 и стр.СуммаОборотКтБух=0 Тогда
//			Продолжить;
//		КонецЕсли;	
//		
//		НайденныеСтроки = ТЗАнализСчета.НайтиСтроки(Новый Структура("Счет,КорСчет",Строка(стр.Эталон),Строка(стр.КорЭталон)));
//		Если НайденныеСтроки.Количество()=0 Тогда
//			НовСтр 						= ТЗАнализСчета.Добавить();
//			НовСтр.СчетКонтрольный 		= стр.Эталон;
//			НовСтр.Счет 				= стр.Эталон;
//			НовСтр.КорСчет 				= стр.КОрЭталон;
//			НовСтр.ОборотДтПоДаннымБУ 	= стр.СуммаОборотДтБух;
//			НовСтр.ОборотКтПоДаннымБУ 	= стр.СуммаОборотКтБух;
//			НовСтр.ОтклонениеОборотДт 	= НовСтр.ОборотДтПоДаннымБУ-НовСтр.AmountDt;
//			НовСтр.ОтклонениеОборотКт 	= НовСтр.ОборотКтПоДаннымБУ-НовСтр.AmountKt;
//		КонецЕсли;
//		
//	КонецЦикла;	
//	ТЗАнализСчета.Сортировать("СчетКонтрольный");
//	
//	
//	ИтогоТЗ = ТЗАнализСчета.Выгрузить();
//	ИтогоТЗ.Свернуть("СчетКонтрольный","AmountDt,AmountKt,ОборотДтПоДаннымБУ,ОборотКтПоДаннымБУ,ОтклонениеОборотДт,ОтклонениеОборотКт");
//	
//	
//	отОб = РеквизитФормыВЗначение("Отчет");
//	Макет = отОб.ПолучитьМакет("МакетАнализСчетов");
//	
//	Шапка = Макет.ПолучитьОбласть("Шапка");
//	Шапка.Параметры.Период = "Отчет с "+Формат(ВыборПериода.ДатаНачала,"ДЛФ=DD")+" по "+Формат(КонецДня(ВыборПериода.ДатаОкончания),"ДЛФ=DD");
//	Шапка.Параметры.Организация = Организация;
//	
//	
//	ТаблДокумент = ТабличныйДокументАнализ;
//	ТаблДокумент.Очистить();
//	
//	ТаблДокумент.Вывести(Шапка);
//	
//	ОблСчетИтого 	= Макет.ПолучитьОбласть("СчетИтого");
//	ОблСтрока 		= Макет.ПолучитьОбласть("Строка");
//	
//	
//	ТекСчет = Неопределено;
//	Для Каждого Стр Из ТЗАнализСчета Цикл 
//		
//		Если ТекСчет <> Стр.СчетКонтрольный Тогда
//			
//			ОблСчетИтого.Параметры.СчетКонтрольный = Стр.СчетКонтрольный;
//			Найденнаястрока = ИтогоТЗ.найти(Стр.СчетКонтрольный,"СчетКонтрольный");
//			Если Найденнаястрока<>Неопределено тогда
//				ОблСчетИтого.Параметры.AmountDt 			= Найденнаястрока.AmountDt;
//				ОблСчетИтого.Параметры.AmountKt 			= Найденнаястрока.AmountKt;
//				ОблСчетИтого.Параметры.ОборотДтПоДаннымБУ 	= Найденнаястрока.ОборотДтПоДаннымБУ;
//				ОблСчетИтого.Параметры.ОборотКтПоДаннымБУ 	= Найденнаястрока.ОборотКтПоДаннымБУ;
//				ОблСчетИтого.Параметры.ОтклонениеОборотДт 	= Найденнаястрока.ОтклонениеОборотДт;
//				ОблСчетИтого.Параметры.ОтклонениеОборотКт 	= Найденнаястрока.ОтклонениеОборотКт;
//			КонецЕсли;	
//			ТаблДокумент.Вывести(ОблСчетИтого);
//			ТекСчет = Стр.СчетКонтрольный;
//		КонецЕсли;
//		
//		//выведим общий итог
//		ОблСтрока.Параметры.Заполнить(Стр);
//		ТаблДокумент.Вывести(ОблСтрока);
//		
//	КонецЦикла;
//КонецПроцедуры

//&НаКлиенте
//Процедура АнализСчета(Команда)
//	АнализСчетаНаСервере();
//КонецПроцедуры

//&НаСервере
//Процедура КарточкаСчетаНаСервере()
//	Прокси = авУправлениеЭталоннымиСправочникамиСервер.ПолучитьПроксиEtalonRefSyncEx();
//	Если Прокси = Неопределено Тогда
//		возврат;
//	КонецЕсли;
//	
//	Base = Константы.авИмяБазы.Получить();
//	
//	Рез = Прокси.CheckBase(Base);
//	если Рез <> "1"  Тогда
//		Сообщить("Не найдена орг-ция по имени базы "+Строка(Base));
//		возврат;
//	КонецЕсли;	
//	
//	Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИНН")<>Неопределено Тогда
//		ИИН=Отчет.Организация.ИНН;
//	Иначе
//		ИИН=Отчет.Организация.ИдентификационныйНомер;
//	КонецЕсли;	
//	
//	
//	отОб = РеквизитФормыВЗначение("Отчет");
//	Макет = отОб.ПолучитьМакет("МакетКарточкаСчета");
//	
//	Шапка = Макет.ПолучитьОбласть("Шапка");
//	Шапка.Параметры.Период = "Отчет с "+Формат(ВыборПериода.ДатаНачала,"ДЛФ=DD")+" по "+Формат(КонецДня(ВыборПериода.ДатаОкончания),"ДЛФ=DD");
//	Шапка.Параметры.Организация = Организация;
//	
//	
//	ТаблДокумент = ТабличныйДокументКарточкаСчета;
//	ТаблДокумент.Очистить();
//	
//	ТаблДокумент.Вывести(Шапка);
//	
//	ОблСтрока 		= Макет.ПолучитьОбласть("Строка");
//	

//	Рез 	= Прокси.GetReportAccountMovements(ВыборПериода.ДатаНачала,ВыборПериода.ДатаОкончания,Base,ИИН,Строка(Счет.GUID));
//	
//	для каждого стр из Рез.ReportLineAccountMovements Цикл
//		
//		ГУИД = стр.RecorderGUID;  
//		
//		// Ссылка будет установлена в переменную СсылкаНаОбъектГуид
//		
//		УникальныйИдентификатор1 = Новый УникальныйИдентификатор(ГУИД);
//		
//		// все объекты по которым можно получить ссылку
//		СсылкаНаОбъектГуид = стр.RecorderGUID;
//		
//		ОблСтрока.Параметры.Заполнить(Стр);
//		
//		ОблСтрока.Параметры.Period = Формат(стр.Period,"ДЛФ=Д");
//		ОблСтрока.Параметры.Документ = Строка(СсылкаНаОбъектГуид);
//		
//		//Если ПолучитьСсылкуНоМенеджеруОбъекта(Справочники,УникальныйИдентификатор1,СсылкаНаОбъектГуид) Тогда
//			
//		
//		//Если ПолучитьСсылкуНоМенеджеруОбъекта(Документы,УникальныйИдентификатор1,СсылкаНаОбъектГуид) Тогда
//		//	
//		//	ОблСтрока.Параметры.Документ = Строка(СсылкаНаОбъектГуид);
//		////	
//		//////ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(ПланыВидовХарактеристик,УникальныйИдентификатор1,СсылкаНаОбъектГуид) Тогда
//		//////	
//		//////ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(ПланыСчетов,УникальныйИдентификатор1,СсылкаНаОбъектГуид) Тогда
//		//////	
//		//////ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(ПланыОбмена,УникальныйИдентификатор1,СсылкаНаОбъектГуид) Тогда
//		//////	
//		//////ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(БизнесПроцессы,УникальныйИдентификатор1,СсылкаНаОбъектГуид) Тогда
//		//////	
//		//////ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(Задачи,УникальныйИдентификатор1,СсылкаНаОбъектГуид) Тогда
//		////	
//		//КонецЕсли;

//		
//		
//		ТаблДокумент.Вывести(ОблСтрока);
//	КонецЦикла;	
//	
//КонецПроцедуры

//Функция ПолучитьСсылкуНоМенеджеруОбъекта(ОбъектыМенеджер,УникальныйИдентификатор,СсылкаНаОбъектГуид)
//	
//	Для Каждого Менеджер Из ОбъектыМенеджер Цикл
//		
//		СсылкаНаОбъектГуид = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
//		
//		Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
//			
//			Возврат Истина;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат Ложь;
//	
//КонецФункции

//&НаКлиенте
//Процедура КарточкаСчета(Команда)
//	КарточкаСчетаНаСервере();
//КонецПроцедуры


&НаСервере
Процедура ПроверкаНастроекСтатейНаСервере()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиБюджетовСчета.Счет КАК Счет,
	|	СтатьиБюджетовСчета.Ссылка КАК Ссылка,
	|	СтатьиБюджетовСчета.Ссылка.Код КАК Код,
	|	СтатьиБюджетовСчета.Счет.НеИспользуется КАК СчетНеИспользуется
	|ИЗ
	|	Справочник.СтатьиБюджетов.Счета КАК СтатьиБюджетовСчета
	|ГДЕ
	|	СтатьиБюджетовСчета.Ссылка.НеИспользуется = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиБюджетовСчета.Ссылка,
	|	СтатьиБюджетовСчета.Счет,
	|	СтатьиБюджетовСчета.Ссылка.Код,
	|	СтатьиБюджетовСчета.Счет.НеИспользуется";
	
	ТЗСчетаВСтатьях = запрос.Выполнить().Выгрузить();
	//проверим что счет указали в плане счетов "не используется" но в статьях бюджета не исключили
	для каждого стр из ТЗСчетаВСтатьях Цикл
		если стр.СчетНеИспользуется тогда
			Сообщить("Статья ("+Строка(стр.Код)+")"+Строка(стр.Ссылка)+" указан счет " + Строка(стр.Счет) +" в котором указан статус Не Используется");
		КонецЕсли;		
		
		Если ПроверитьЭлементыНижнегоУровня(стр.Счет) Тогда
			Сообщить("Статья ("+Строка(стр.Код)+")"+Строка(стр.Ссылка)+" указан счет " + Строка(стр.Счет) +" у которого существуют элементы нижнего уровня.");
		Конецесли;	
		
	КонецЦикла;	
	
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПланСчетов.Ссылка КАК Счет
	               |ИЗ
	               |	Справочник.ПланСчетов КАК ПланСчетов
	               |ГДЕ
	               |	ПланСчетов.НеИспользуется = ЛОЖЬ
				   |";
	Запрос.УстановитьПараметр("Код","1710.01");
	Рез = Запрос.Выполнить().Выбрать();
	пока Рез.Следующий() Цикл
		
		Если ПроверитьЭлементыНижнегоУровня(Рез.Счет) Тогда
			Продолжить;
		Конецесли;	
		
		НайденнаяСтатья = ТЗСчетаВСтатьях.Найти(Рез.Счет,"Счет");
		Если НайденнаяСтатья=Неопределено Тогда
			Сообщить("Счет " + Строка(Рез.Счет) +" не найден в статьях бюджета");
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНастроекСтатей(Команда)
	ПроверкаНастроекСтатейНаСервере();
КонецПроцедуры

&НаСервере
Функция ПроверитьЭлементыНижнегоУровня(ТекСсылка)
	ИмяМета = ТекСсылка.Метаданные().Имя;
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+ИмяМета+" КАК Спр
	|ГДЕ
	|	Спр.Родитель = &Родитель";
	запрос.УстановитьПараметр("Родитель",ТекСсылка);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() тогда
		Возврат	Истина;
	КонецЕсли;	
	Возврат	Ложь;
	
КонецФункции

&НаСервере
Функция ПроверитьЭлементИспользуется(ТекСсылка)
	Если ТекСсылка.Метаданные().Реквизиты.Найти("НеИспользуется") = Неопределено Тогда
		Возврат Ложь;
	Иначе	
		Возврат	ТекСсылка.НеИспользуется;
	КонецЕсли;	
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Отчет.ФормироватьBS = Истина;
	Отчет.ФормироватьPL = Истина;
	Отчет.ФормироватьCFD = Истина;
	Отчет.ФормироватьCFI = Истина;
КонецПроцедуры

