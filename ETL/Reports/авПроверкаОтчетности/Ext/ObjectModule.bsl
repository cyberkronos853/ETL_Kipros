Функция СформироватьОтчет() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(19, 2);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);	
	
	
	тДеревоBS = Новый ДеревоЗначений;
	тДеревоBS.Колонки.Добавить("Code");
	тДеревоBS.Колонки.Добавить("Name");
	тДеревоBS.Колонки.Добавить("AccountList");
	тДеревоBS.Колонки.Добавить("AnalyticsList");
	тДеревоBS.Колонки.Добавить("AmountTotal",ОписаниеЧисло);    //итоговая колонка для вывода
	тДеревоBS.Колонки.Добавить("AmountTotalBuh",ОписаниеЧисло); //итоговая колонка для вывода
	тДеревоBS.Колонки.Добавить("СуммаОборотБух",ОписаниеЧисло); //Оборот из бух
	тДеревоBS.Колонки.Добавить("СуммаОстатокБух",ОписаниеЧисло); //Остаток НАЧАЛО
	тДеревоBS.Колонки.Добавить("BalAmount",ОписаниеЧисло); //Остаток на НАЧАЛО из Консолидации
	тДеревоBS.Колонки.Добавить("Amount",ОписаниеЧисло);    //Оборот из Консолидации
	
	тДеревоPL  = Новый ДеревоЗначений;
	тДеревоPL  = тДеревоBS.Скопировать();
	
	тДеревоCFD = Новый ДеревоЗначений;
	тДеревоCFD = тДеревоBS.Скопировать();
	
	тДеревоОСВ = Новый ДеревоЗначений;
	тДеревоОСВ = тДеревоBS.Скопировать();
	
	тДеревоCFI = Новый ДеревоЗначений;
	тДеревоCFI = тДеревоBS.Скопировать();

	
	тДеревоКапитал = Новый ДеревоЗначений;
	тДеревоКапитал = тДеревоBS.Скопировать();
	тДеревоКапитал.Колонки.Добавить("Amount1",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount2",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount3",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount4",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount5",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount6",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount7",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount8",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount9",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount10",ОписаниеЧисло);    //Оборот из Консолидации
	тДеревоКапитал.Колонки.Добавить("Amount11",ОписаниеЧисло);    //Оборот из Консолидации
	
	
	ДанныеBS = Новый ТаблицаЗначений;
	ДанныеBS.Колонки.Добавить("Code");
	ДанныеBS.Колонки.Добавить("Name");
	ДанныеBS.Колонки.Добавить("GUID");
	ДанныеBS.Колонки.Добавить("ParentGUID");
	ДанныеBS.Колонки.Добавить("ParentCode");
	ДанныеBS.Колонки.Добавить("AccountList");
	ДанныеBS.Колонки.Добавить("AnalyticsList");
	
	ДанныеBS.Колонки.Добавить("BalAmount",ОписаниеЧисло); //Остаток на НАЧАЛО из Консолидации
	ДанныеBS.Колонки.Добавить("Amount",ОписаниеЧисло);    //Оборот из Консолидации
	
	ДанныеBS.Колонки.Добавить("СуммаОборотБух",ОписаниеЧисло); //Оборот из бух
	ДанныеBS.Колонки.Добавить("СуммаОстатокБух",ОписаниеЧисло); //Остаток НАЧАЛО
	
	ДанныеBS.Колонки.Добавить("AmountTotal",ОписаниеЧисло);    //итоговая колонка для вывода
	ДанныеBS.Колонки.Добавить("AmountTotalBuh",ОписаниеЧисло); //итоговая колонка для вывода
	
	ДанныеPL = Новый ТаблицаЗначений;
	ДанныеPL = ДанныеBS.СкопироватьКолонки();
	
	ДанныеCFD = Новый ТаблицаЗначений;
	ДанныеCFD = ДанныеBS.СкопироватьКолонки();
	
	ДанныеОСВ = Новый ТаблицаЗначений;
	ДанныеОСВ = ДанныеBS.СкопироватьКолонки();
	
	ДанныеCFI = Новый ТаблицаЗначений;
	ДанныеCFI = ДанныеBS.СкопироватьКолонки();

	
	ДанныеКапитал = Новый ТаблицаЗначений;
	ДанныеКапитал = ДанныеBS.СкопироватьКолонки();
	ДанныеКапитал.Колонки.Добавить("CodeBalance");
	ДанныеКапитал.Колонки.Добавить("Amount1",ОписаниеЧисло);  //BS3.1.1.	
	ДанныеКапитал.Колонки.Добавить("Amount2",ОписаниеЧисло);  //BS3.1.2.  
	ДанныеКапитал.Колонки.Добавить("Amount3",ОписаниеЧисло);  //BS3.1.3.  
	ДанныеКапитал.Колонки.Добавить("Amount4",ОписаниеЧисло);  //BS3.1.4. 
	ДанныеКапитал.Колонки.Добавить("Amount5",ОписаниеЧисло);  //BS3.1.5. 
	ДанныеКапитал.Колонки.Добавить("Amount6",ОписаниеЧисло);  //BS3.1.6.  
	ДанныеКапитал.Колонки.Добавить("Amount7",ОписаниеЧисло);  //BS3.1.7.  
	ДанныеКапитал.Колонки.Добавить("Amount8",ОписаниеЧисло);  //BS3.1.8.  
	ДанныеКапитал.Колонки.Добавить("Amount9",ОписаниеЧисло);  //BS3.1.9.  
	ДанныеКапитал.Колонки.Добавить("Amount10",ОписаниеЧисло); //BS3.2.  
	ДанныеКапитал.Колонки.Добавить("Amount11",ОписаниеЧисло); //BS3.  
	
	ИИН=Организация.БИН;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	БазыОрганизации.Ссылка.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Базы.Организации КАК БазыОрганизации
	               |ГДЕ
	               |	БазыОрганизации.Организация = &Организация
	               |	И НЕ БазыОрганизации.Ссылка.ПометкаУдаления"; 
	Запрос.УстановитьПараметр("Организация",Организация);
	Рез = Запрос.Выполнить().Выбрать();
	Base = "";
	Если Рез.Следующий() Тогда
		Base = СокрЛП(Рез.наименование);
	КонецЕсли;	
	
	
	Если ФормироватьBS Тогда
		ТЗ  = ПолучениеОтчетов.СформироватьОтчет(Дата1, Дата2, Base, ИИН, 1);	
		для каждого стр из ТЗ Цикл
			НовСтр = ДанныеBS.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,стр);
		КонецЦикла;	            
	КонецЕсли;
	
	Если ФормироватьPL Тогда
		ТЗ  = ПолучениеОтчетов.СформироватьОтчет(Дата1, Дата2, Base, ИИН, 2);	
		для каждого стр из ТЗ Цикл
			НовСтр = ДанныеPL.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,стр);
		КонецЦикла;	
	КонецЕсли;
	//
	Если ФормироватьCFD Тогда
		ТЗ  = ПолучениеОтчетов.СформироватьОтчет(Дата1, Дата2, Base, ИИН, 3);	
		для каждого стр из ТЗ Цикл
			НовСтр = ДанныеCFD.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,стр);
		КонецЦикла;	
	КонецЕсли;
	
	Если ФормироватьОСВ Тогда
		ТЗ 	= ПолучениеОтчетов.СформироватьОтчет(Дата1,Дата2,Base,ИИН,4);
		для каждого стр из ТЗ Цикл
			НовСтр = ДанныеОСВ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,стр);
		КонецЦикла;	
	КонецЕсли;
	
	Если ФормироватьКапитал Тогда
		ТЗ 	= ПолучениеОтчетов.СформироватьОтчет(Дата1,Дата2,Base,ИИН,5);
		для каждого стр из ТЗ Цикл 

			//Если СокрЛП(стр.Code) = "RFW0." тогда //уберем итоговую строчку т.к. она не нужна
			//	Продолжить;
			//КонецЕсли;
			
			НовСтр = ДанныеКапитал.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,стр);
		КонецЦикла;	
	КонецЕсли;
	

	Если ФормироватьCFI Тогда
		ТЗ 	= ПолучениеОтчетов.СформироватьОтчет(Дата1,Дата2,Base,ИИН,6);
		для каждого стр из ТЗ Цикл
			НовСтр = ДанныеCFI.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,стр);
		КонецЦикла;	
	КонецЕсли;
	
	ЕстьОшибкиПриСверкеОтчета = Ложь;
	
	ТЗ_БУ = ТЗ_БУ_.Выгрузить();
	ТЗ_БУ.свернуть("Эталон,КорСчет,Найден","СуммаОборотБух,СуммаОстатокБух");
	
	ТЗ_БУ_Сверка = ТЗ_БУ_.Выгрузить();
	ТЗ_БУ_Сверка.свернуть("Эталон,Найден","СуммаОборотБух,СуммаОстатокБух");
	
	ТЗ_БУДДС = ТЗ_БУ_ДДС.Выгрузить();
	ТЗ_БУДДС.свернуть("КодЭталона,Эталон,Найден","СуммаОборотБух");
	
	СписокСчетов = Новый СписокЗначений;
	
	ОбходТаблицы(ДанныеBS,1,ТЗ_БУ,ТЗ_БУ_Сверка,СписокСчетов);
	ОбходТаблицы(ДанныеPL,2,ТЗ_БУ,ТЗ_БУ_Сверка,СписокСчетов);
	ОбходТаблицы(ДанныеCFD,3,ТЗ_БУДДС,ТЗ_БУ_Сверка,СписокСчетов);
	ОбходТаблицы(ДанныеОСВ,4,ТЗ_БУ,ТЗ_БУ_Сверка,СписокСчетов);
	ОбходТаблицы(ДанныеКапитал,5,ТЗ_БУ,ТЗ_БУ_Сверка,СписокСчетов);
	ОбходТаблицы(ДанныеCFI,6,ТЗ_БУ,ТЗ_БУ_Сверка,СписокСчетов);
	
	////проверим счета которые есть в оборотах БУ но нет  консолидации
	//НайденныеСтрокиНеНайденные = ТЗ_БУ_Сверка.НайтиСтроки(Новый Структура("Найден",Ложь));
	//для каждого стр из НайденныеСтрокиНеНайденные Цикл
	//	//Если стр.СуммаОборотБух<>0 Тогда
	//	
	//	//ситуация когда есть счета как 8100 и 8400 которые не учавствуют в отчетности. то их надо исключить из контроля
	//	// проверим если счета нет в списке счетов то исключим его
	//	Если  СписокСчетов.НайтиПоЗначению(стр.Эталон) = Неопределено Тогда  
	//		Продолжить;
	//	КонецЕсли;	
	//	
	//	ЕстьОшибкиПриСверкеОтчета = Истина;
	//	ТекстОщибки = "Счет эталона по БУ "+Строка(стр.Эталон)+" в сумме ("+(стр.СуммаОборотБух)+") отсутствует в оборотах Консолидации!!!";
	//	Сообщить(ТекстОщибки,СтатусСообщения.Внимание);
	//	НовТ = ТаблицаОшибок.Добавить();
	//	НовТ.ТекстОшибки = ТекстОщибки;
	//	//КонецЕсли;
	//КонецЦикла;	
	
	ДанныеBS.Свернуть("Code,Name,ParentCode,AccountList,GUID,ParentGUID","Amount,BalAmount,СуммаОборотБух,СуммаОстатокБух,AmountTotal,AmountTotalBuh");
	ДанныеPL.Свернуть("Code,Name,ParentCode,AccountList,GUID,ParentGUID","Amount,BalAmount,СуммаОборотБух,СуммаОстатокБух,AmountTotal,AmountTotalBuh");
	ДанныеCFD.Свернуть("Code,Name,ParentCode,AccountList,GUID,ParentGUID","Amount,BalAmount,СуммаОборотБух,СуммаОстатокБух,AmountTotal,AmountTotalBuh");
	ДанныеОСВ.Свернуть("Code,Name,ParentCode,AccountList,GUID,ParentGUID","Amount,BalAmount,СуммаОборотБух,СуммаОстатокБух,AmountTotal,AmountTotalBuh");
	ДанныеКапитал.Свернуть("Code,Name,ParentCode,GUID,ParentGUID","Amount1,Amount2,Amount3,Amount4,Amount5,Amount6,Amount7,Amount8,Amount9,Amount10,Amount11");
	ДанныеCFI.Свернуть("Code,Name,ParentCode,AnalyticsList,GUID,ParentGUID","Amount,BalAmount,СуммаОборотБух,СуммаОстатокБух,AmountTotal,AmountTotalBuh");
	
	Строки1000BS = ДанныеBS.НайтиСтроки(Новый Структура("ParentCode","BS1.1.1."));
	
	ОстатокНаНачалоК = 0;
	ОстатокНаКонецК  = 0;
	ОстатокНаНачалоБ = 0;
	ОстатокНаКонецБ  = 0;
	для каждого стр из Строки1000BS Цикл
		
		ОстатокНаНачалоК = ОстатокНаНачалоК+стр.BalAmount;
		ОстатокНаКонецК  = ОстатокНаКонецК+(стр.Amount + стр.BalAmount);
		
		ОстатокНаНачалоБ = ОстатокНаНачалоБ+стр.СуммаОстатокБух;
		ОстатокНаКонецБ  = ОстатокНаКонецБ+(стр.СуммаОстатокБух+стр.СуммаОборотБух);
	КонецЦикла;	
	
	СтрокаCFD = ДанныеCFD.Найти("CFD6.","Code"); //обороты
	Если СтрокаCFD<>Неопределено Тогда
		СтрокаCFD.AmountTotal 	= ОстатокНаКонецК-ОстатокНаНачалоК;
	КонецЕсли;	

	СтрокаCFD = ДанныеCFD.Найти("CFD7.","Code"); //остатки на начало
	Если СтрокаCFD<>Неопределено Тогда
		СтрокаCFD.AmountTotal 	= ОстатокНаНачалоК;
	КонецЕсли;	
		
	СтрокаCFD = ДанныеCFD.Найти("CFD8.","Code"); //остатки на конец
	Если СтрокаCFD<>Неопределено Тогда
		СтрокаCFD.AmountTotal 	= ОстатокНаКонецК;
	КонецЕсли;	

	
	СтрокаCFD = ДанныеОСВ.Найти("CFD6.","Code"); //обороты
	Если СтрокаCFD<>Неопределено Тогда
		СтрокаCFD.AmountTotal 	= ОстатокНаКонецК-ОстатокНаНачалоК;
	КонецЕсли;	

	СтрокаCFD = ДанныеОСВ.Найти("CFD7.","Code"); //остатки на начало
	Если СтрокаCFD<>Неопределено Тогда
		СтрокаCFD.AmountTotal 	= ОстатокНаНачалоК;
	КонецЕсли;	
		
	СтрокаCFD = ДанныеОСВ.Найти("CFD8.","Code"); //остатки на конец
	Если СтрокаCFD<>Неопределено Тогда
		СтрокаCFD.AmountTotal 	= ОстатокНаКонецК;
	КонецЕсли;	
	
	
	ПреобразоватьВДЗРекурсия(тДеревоBS, ДанныеBS, "");
	ПреобразоватьВДЗРекурсия(тДеревоPL, ДанныеPL, "");
	ПреобразоватьВДЗРекурсия(тДеревоCFD,ДанныеCFD, "");
	ПреобразоватьВДЗРекурсия(тДеревоОСВ,ДанныеОСВ, "");
	ПреобразоватьВДЗРекурсия(тДеревоКапитал,ДанныеКапитал, "");
	ПреобразоватьВДЗРекурсия(тДеревоCFI,ДанныеCFI, "");
	
	ПересчитатьВсеДерево(тДеревоBS.Строки);
	ПересчитатьВсеДерево(тДеревоPL.Строки);
	ПересчитатьВсеДерево(тДеревоCFD.Строки);
	ПересчитатьВсеДерево(тДеревоОСВ.Строки);
	ПересчитатьВсеДерево(тДеревоКапитал.Строки);
	ПересчитатьВсеДерево(тДеревоCFI.Строки);
	
	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоBS.Строки,"BS1.");
	СуммаАктивы = 0;
	СуммаАктивыБух = 0;
	если СтрокаДерева<>Неопределено тогда
		СуммаАктивы 	= СтрокаДерева.AmountTotal;
		СуммаАктивыБух 	= СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоBS.Строки,"BS2.");
	СуммаОб  = 0;
	СуммаОбБух = 0;
	если СтрокаДерева<>Неопределено тогда
		СуммаОб 	= СтрокаДерева.AmountTotal;
		СуммаОбБух 	= СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоBS.Строки,"BS3.");
	СуммаКап  = 0;
	СуммаКапБух = 0;
	если СтрокаДерева<>Неопределено тогда
		СуммаКап 	= СтрокаДерева.AmountTotal;
		СуммаКапБух = СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоBS.Строки,"BS4.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal 	= СуммаАктивы 	 + СуммаОб    + СуммаКап;
		СтрокаДерева.AmountTotalBuh = СуммаАктивыБух + СуммаОбБух + СуммаКапБух;
	КонецЕсли;	
	
	СуммаДДС  		= 0;
	СуммаДДСБух 	= 0;

	//CFD
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFD.Строки,"CFD1.");
	если СтрокаДерева<>Неопределено тогда
		СуммаДДС 	= СуммаДДС+СтрокаДерева.AmountTotal;
		СуммаДДСБух = СуммаДДСБух+СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFD.Строки,"CFD2.");
	если СтрокаДерева<>Неопределено тогда
		СуммаДДС 	= СуммаДДС+СтрокаДерева.AmountTotal;
		СуммаДДСБух = СуммаДДСБух+СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFD.Строки,"CFD3.");
	если СтрокаДерева<>Неопределено тогда
		СуммаДДС 	= СуммаДДС+СтрокаДерева.AmountTotal;
		СуммаДДСБух = СуммаДДСБух+СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	//СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFD.Строки,"CFD6.");
	//если СтрокаДерева<>Неопределено тогда
	//	СтрокаДерева.AmountTotal 	= СуммаДДС;
	//	СтрокаДерева.AmountTotalBuh = СуммаДДСБух;
	//КонецЕсли;	
	
	
	//PL
    ПересчетСтрокPL(тДеревоPL);
	
	//ОСВ
	ПересчетСтрокPL(тДеревоОСВ);//сделаем такой же пересчет для ОСВ как в PL   
	
	
	

	//CFI/////////////////////////////////


	СуммаPL12 = 0;
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL12.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 = СтрокаДерева.AmountTotal;
	КонецЕсли;	

	//СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI2.");
	//если СтрокаДерева<>Неопределено тогда
	//	СтрокаДерева.AmountTotal 	= СуммаPL12;
	//КонецЕсли;	
	

	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI18.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal 	= ОстатокНаНачалоК;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI19.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal 	= ОстатокНаКонецК;
	КонецЕсли;	

	
	//CFI10.  = CFI6.; CFI7.; CFI8.; CFI9.;
	
	МассивРасчетныхСтатей = Новый Массив();
	МассивРасчетныхСтатей.Добавить("CFI4.");
	МассивРасчетныхСтатей.Добавить("CFI6.");
	МассивРасчетныхСтатей.Добавить("CFI10.");
	МассивРасчетныхСтатей.Добавить("CFI14."); 
	МассивРасчетныхСтатей.Добавить("CFI17."); 
	
	для каждого стрМРасчетныхСтатей из  МассивРасчетныхСтатей Цикл
		
		СуммаCFI = 0; 	
		СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,СокрЛП(стрМРасчетныхСтатей));
		если СтрокаДерева<>Неопределено тогда
			МассивСтатей = РазложитьСтрокуВМассивПодстрок(СтрокаДерева.AnalyticsList,";",Истина);
			для каждого стрМ из МассивСтатей Цикл
				СтрокаДерева2 = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,СокрЛП(стрМ));
				если СтрокаДерева2<>Неопределено тогда
					СуммаCFI 	= СуммаCFI+СтрокаДерева2.AmountTotal;
				КонецЕсли;	
			КонецЦикла;	 
			СтрокаДерева.AmountTotal 	= СуммаCFI;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ПересчитатьВсеДерево(тДеревоCFI.Строки);
	
   // 
   // 
   // 
   //СуммаCFI4 = 0; 	
   //СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI2.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СуммаCFI4 	= СуммаCFI4+СтрокаДерева.AmountTotal;
   // КонецЕсли;	
   // 
   // СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI3.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СуммаCFI4 	= СуммаCFI4+СтрокаДерева.AmountTotal;
   // КонецЕсли;	
   //                  
   // СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI4.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СтрокаДерева.AmountTotal 	= СуммаCFI4;
   // КонецЕсли;	
   // 
   // 
   // //CFI14. = ;

   //СуммаCFI14 = 0; ////CFI13.1.; CFI13.2.
   // СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI13.1.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СуммаCFI14 	= СуммаCFI14+СтрокаДерева.AmountTotal;
   // КонецЕсли;	

   // СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI13.2.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СуммаCFI14 	= СуммаCFI14+СтрокаДерева.AmountTotal;
   // КонецЕсли;	
   // СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI14.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СтрокаДерева.AmountTotal 	= СуммаCFI14;
   // КонецЕсли;	
   // 
   // 
   //СуммаCFI7 = 0; //CFI10.; CFI12.; CFI14.;
   // СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI10.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СуммаCFI7 	= СуммаCFI7+СтрокаДерева.AmountTotal;
   // КонецЕсли;	
   // 
   //  СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI12.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СуммаCFI7 	= СуммаCFI7+СтрокаДерева.AmountTotal;
   // КонецЕсли;	
   //                
   //  СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI14.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СуммаCFI7 	= СуммаCFI7+СтрокаДерева.AmountTotal;
   // КонецЕсли;	

   // СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоCFI.Строки,"CFI17.");
   // если СтрокаДерева<>Неопределено тогда
   // 	СтрокаДерева.AmountTotal 	= СуммаCFI7;
   // КонецЕсли;	
	
	
	ДеревоBS  		= тДеревоBS.Скопировать();
	ДеревоPL  		= тДеревоPL.Скопировать();
	ДеревоCFD 		= тДеревоCFD.Скопировать();
	ДеревоОСВ 		= тДеревоОСВ.Скопировать();
	ДеревоКапитал 	= тДеревоКапитал.Скопировать();
	ДеревоCFI 		= тДеревоCFI.Скопировать();
	
Возврат Истина;	
	
	
КонецФункции

Процедура ПересчетСтрокPL(тДеревоPL)
	СуммаPL31 		= 0;
	СуммаPL31Бух 	= 0;
	
	СуммаPL32 		= 0;
	СуммаPL32Бух 	= 0;
	
	СуммаPL33 		= 0;
	СуммаPL33Бух 	= 0;
	
	СуммаPL6 		= 0;
	СуммаPL6Бух 	= 0;
	СуммаPL12 		= 0;
	СуммаPL12Бух	= 0;
		
	СуммаPL12Оборот	= 0;

	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL1.1.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL31		= СуммаPL31		+ СтрокаДерева.AmountTotal;
		СуммаPL31Бух 	= СуммаPL31Бух	+ СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL2.1.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL31		= СуммаPL31		+ СтрокаДерева.AmountTotal;
		СуммаPL31Бух 	= СуммаPL31Бух	+ СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL1.2.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL32		= СуммаPL32		+ СтрокаДерева.AmountTotal;
		СуммаPL32Бух 	= СуммаPL32Бух	+ СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL2.2.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL32		= СуммаPL32		+ СтрокаДерева.AmountTotal;
		СуммаPL32Бух 	= СуммаPL32Бух	+ СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL1.3.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL33		= СуммаPL33		+ СтрокаДерева.AmountTotal;
		СуммаPL33Бух 	= СуммаPL33Бух	+ СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL2.3.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL33		= СуммаPL33		+ СтрокаДерева.AmountTotal;
		СуммаPL33Бух 	= СуммаPL33Бух	+ СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL3.1.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal 	= СуммаPL31;
		СтрокаДерева.AmountTotalBuh = СуммаPL31Бух;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL3.2.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal 	= СуммаPL32;
		СтрокаДерева.AmountTotalBuh = СуммаPL32Бух;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL3.3.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal 	= СуммаPL33;
		СтрокаДерева.AmountTotalBuh = СуммаPL33Бух;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL3.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal 	= СуммаPL31+СуммаPL32+СуммаPL33;
		СтрокаДерева.AmountTotalBuh = СуммаPL31Бух+СуммаPL32Бух+СуммаPL33Бух;
		
		СуммаPL6	= СуммаPL6+СтрокаДерева.AmountTotal;
		СуммаPL6Бух	= СуммаPL6Бух+СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
		
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL4.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL6	= СуммаPL6+СтрокаДерева.AmountTotal;
		СуммаPL6Бух = СуммаPL6Бух+СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
		
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL5.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL6 	= СуммаPL6+СтрокаДерева.AmountTotal;
		СуммаPL6Бух = СуммаPL6Бух+СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
		
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL6.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal 	= СуммаPL6;
		СтрокаДерева.AmountTotalBuh = СуммаPL6Бух;
		
		СуммаPL12 	 	= СуммаPL12+СтрокаДерева.AmountTotal;
		СуммаPL12Бух 	= СуммаPL12Бух+СтрокаДерева.AmountTotalBuh;
		СуммаPL12Оборот	= СуммаPL12Оборот+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL7.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 	= СуммаPL12+СтрокаДерева.AmountTotal;
		СуммаPL12Бух 	= СуммаPL12Бух+СтрокаДерева.AmountTotalBuh;
		СуммаPL12Оборот	= СуммаPL12Оборот+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL8.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 	= СуммаPL12+СтрокаДерева.AmountTotal;
		СуммаPL12Бух 	= СуммаPL12Бух+СтрокаДерева.AmountTotalBuh;
		СуммаPL12Оборот	= СуммаPL12Оборот+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL9.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 = СуммаPL12+СтрокаДерева.AmountTotal;
		СуммаPL12Бух = СуммаPL12Бух+СтрокаДерева.AmountTotalBuh;
		СуммаPL12Оборот	= СуммаPL12Оборот+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL10.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 	= СуммаPL12+СтрокаДерева.AmountTotal;
		СуммаPL12Бух 	= СуммаPL12Бух+СтрокаДерева.AmountTotalBuh;
		СуммаPL12Оборот	= СуммаPL12Оборот+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL11.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL12 	 	= СуммаPL12+СтрокаДерева.AmountTotal;
		СуммаPL12Бух	= СуммаPL12Бух+СтрокаДерева.AmountTotalBuh;
		СуммаPL12Оборот	= СуммаPL12Оборот+СтрокаДерева.Amount;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL12.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal	= СуммаPL12;
		СтрокаДерева.AmountTotalBuh	= СуммаPL12Бух;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL13.");
	если СтрокаДерева<>Неопределено тогда
		СуммаPL13 	= СтрокаДерева.AmountTotal;
		СуммаPL13Бух= СтрокаДерева.AmountTotalBuh;
	КонецЕсли;	
	
	СтрокаДерева = НайтиОтмеченноеЗначениеВДеревеЗначений(тДеревоPL.Строки,"PL16.");
	если СтрокаДерева<>Неопределено тогда
		СтрокаДерева.AmountTotal 	= СуммаPL12+СуммаPL13;
		СтрокаДерева.AmountTotalBuh = СуммаPL12Бух+СуммаPL13Бух;
	КонецЕсли;	
	
КонецПроцедуры	

Функция ОбходТаблицы(ТЗ,ВидОтчета,ТЗ_БУ,ТЗ_БУ_Сверка,СписокСчетов) экспорт
	для каждого стр из ТЗ Цикл
		
		СуммаОборотБух  	= 0;
		СуммаОстатокБух 	= 0;
		Если ВидОтчета=3 Тогда
			НайденнаяСтрока = ТЗ_БУ.Найти(стр.Code,"КодЭталона");
			Если НайденнаяСтрока<>Неопределено Тогда
				СуммаОборотБух 	= СуммаОборотБух+НайденнаяСтрока.СуммаОборотБух;
				НайденнаяСтрока.Найден = Истина;	
			КонецЕсли;	
			
		ИначеЕсли ВидОтчета=5 Тогда
			Если  стр.CodeBalance = "BS3.1.1." Тогда
				Стр.Amount1 = Стр.Amount;
			ИначеЕсли  стр.CodeBalance = "BS3.1.2." Тогда
				Стр.Amount2 = Стр.Amount;
			ИначеЕсли  стр.CodeBalance = "BS3.1.3." Тогда
				Стр.Amount3 = Стр.Amount;
			ИначеЕсли  стр.CodeBalance = "BS3.1.4." Тогда
				Стр.Amount4 = Стр.Amount;
			ИначеЕсли  стр.CodeBalance = "BS3.1.5." Тогда
				Стр.Amount5 = Стр.Amount;
			ИначеЕсли  Лев(стр.CodeBalance,8) = "BS3.1.6." Тогда
				Стр.Amount6 = Стр.Amount;
			ИначеЕсли  Лев(стр.CodeBalance,8) = "BS3.1.7." Тогда
				Стр.Amount7 = Стр.Amount;
			ИначеЕсли  стр.CodeBalance = "BS3.1.8." Тогда
				Стр.Amount8 = Стр.Amount;
			ИначеЕсли  стр.CodeBalance = "BS3.1.9." Тогда
				Стр.Amount9 = Стр.Amount;
			ИначеЕсли  стр.CodeBalance = "BS3.2." Тогда
				Стр.Amount10 = Стр.Amount;
			КонецЕсли;
			
			Стр.Amount11 = Стр.Amount;
				
				
		Иначе
			
			если Стр.Code = "BS3.1.7.1." Тогда
				а= 1;
			КонецЕсли;	
			

		КонецЕсли;
		
		стр.СуммаОборотБух  = СуммаОборотБух;
		стр.СуммаОстатокБух = СуммаОстатокБух;
		стр.AmountTotal 	= стр.Amount+стр.BalAmount;
		Если ВидОтчета =1 Тогда
			стр.AmountTotalBuh  = стр.СуммаОборотБух+стр.СуммаОстатокБух;
		ИначеЕсли ВидОтчета =2 Тогда
			стр.AmountTotalBuh  = -стр.СуммаОборотБух;
		Иначе
			стр.AmountTotalBuh  = стр.СуммаОборотБух;
		КонецЕсли;	
		
		
	КонецЦикла;	
	Возврат Истина;
КонецФункции	

Процедура ПересчитатьВсеДерево(дз_стр) экспорт
	
Для Каждого СтрокаДерева Из дз_стр Цикл

        // Если мы в строке, у неё нет итогов, пропустим
        Если СтрокаДерева.Строки.Количество() = 0 Тогда
            Продолжить;
        КонецЕсли;

        ПересчитатьВсеДерево(СтрокаДерева.Строки);

        // Для текущей записи вычислим сумму строк колонки
		Попытка
			СтрокаДерева.AmountTotal 		= СтрокаДерева.Строки.Итог("AmountTotal");
			СтрокаДерева.AmountTotalBuh 	= СтрокаДерева.Строки.Итог("AmountTotalBuh");
		Исключение
		КонецПопытки;

		Попытка
			СтрокаДерева.СуммаОборотБух 	= СтрокаДерева.Строки.Итог("СуммаОборотБух");
			СтрокаДерева.СуммаОстатокБух 	= СтрокаДерева.Строки.Итог("СуммаОстатокБух");
			СтрокаДерева.BalAmount 			= СтрокаДерева.Строки.Итог("BalAmount");
			СтрокаДерева.Amount 			= СтрокаДерева.Строки.Итог("Amount");
		Исключение
		КонецПопытки;
	
        // Для текущей записи вычислим сумму строк колонки
		Попытка
			СтрокаДерева.Amount1 		= СтрокаДерева.Строки.Итог("Amount1");
			СтрокаДерева.Amount2 		= СтрокаДерева.Строки.Итог("Amount2");
			СтрокаДерева.Amount3 		= СтрокаДерева.Строки.Итог("Amount3");
			СтрокаДерева.Amount4 		= СтрокаДерева.Строки.Итог("Amount4");
			СтрокаДерева.Amount5 		= СтрокаДерева.Строки.Итог("Amount5");
			СтрокаДерева.Amount6 		= СтрокаДерева.Строки.Итог("Amount6");
			СтрокаДерева.Amount7 		= СтрокаДерева.Строки.Итог("Amount7");
			СтрокаДерева.Amount8 		= СтрокаДерева.Строки.Итог("Amount8");
			СтрокаДерева.Amount9 		= СтрокаДерева.Строки.Итог("Amount9");
			СтрокаДерева.Amount10 		= СтрокаДерева.Строки.Итог("Amount10");
			СтрокаДерева.Amount11 		= СтрокаДерева.Строки.Итог("Amount11");
		Исключение
		КонецПопытки;
	
	
КонецЦикла;	
	
Конецпроцедуры

Процедура ПреобразоватьВДЗРекурсия(тДерево, тТаблица, Code) экспорт
	тПоиск = Новый Структура("ParentCode", Code);
	тМассив = тТаблица.НайтиСтроки(тПоиск);
	Для Каждого тСтр Из тМассив Цикл
		нСтр = тДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр,тСтр);
		ПреобразоватьВДЗРекурсия(нСтр, тТаблица, тСтр.Code);
	КонецЦикла;
КонецПроцедуры

Функция НайтиОтмеченноеЗначениеВДеревеЗначений(СтрокиДерева,ЗначениеПоиска) Экспорт
 
	// пробежимся по всем строкам (по всем строкам одного уровня, которые были переданы!)
	Для каждого Строка из СтрокиДерева Цикл
 
		// Вот наше условие, значение Выгружать у строки равно 1:
		Если Строка.Code = ЗначениеПоиска Тогда
			// Если условие сработало, возвращаем строку
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
 
	// Если не нашли строку, смотрим под-строки каждой строки
	Для каждого Строка из СтрокиДерева Цикл
 
		// Здесь осуществляется рекурсивный вызов
		НайденнаяСтрока = НайтиОтмеченноеЗначениеВДеревеЗначений(Строка.Строки,ЗначениеПоиска);
		Если НайденнаяСтрока <> неопределено Тогда
			// Если нашли, возвращается строка
			Возврат НайденнаяСтрока;
		КонецЕсли;
 
	КонецЦикла;
 
	// Не нашли строку по условию, возвращаем неопределено
	Возврат неопределено;
 
КонецФункции

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 
