
#Область ПрограммныйИнтерфейс
// Код процедур и функций

//************************************************************************************************
Функция GetTheNumberOfAccepted(Base) //Получить номер принятого 
	
	Возврат ПолучитьБазуПоНаименованию(Base).НомерОбработанногоСообщения;
	
КонецФункции
//************************************************************************************************
Функция GetTVRemains(Base) //Получить ТЗ остатки
	
	Возврат ЗначениеВСтрокуВнутр(Обработки.ОбменSQL.Создать().Выборка("ПолучитьОстатки", Новый Структура("База", Base)));
	
КонецФункции
//************************************************************************************************
Функция GetTVAccountBalances(Base, Account) //Получить ТЗ остатки по счету
	
	Возврат ЗначениеВСтрокуВнутр(Обработки.ОбменSQL.Создать().Выборка("ПолучитьОстаткиПоСчету", Новый Структура("База, Счет", Base, Account)));
	
КонецФункции
//************************************************************************************************
Функция GetObjectsForUpload(Base) //Получить объекты для выгрузки
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Базы.ТипБазы КАК ТипБазы
	|ПОМЕСТИТЬ СписокБаз
	|ИЗ
	|	Справочник.Базы КАК Базы
	|ГДЕ
	|	Базы.Ссылка = &База
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыКВыгрузке.Наименование КАК Наименование,
	|	ОбъектыКВыгрузке.Выгружать КАК Выгружать,
	|	ОбъектыКВыгрузкеТипыБазы.ТипБазы КАК ТипБазы
	|ПОМЕСТИТЬ СписокОбъектов
	|ИЗ
	|	Справочник.ОбъектыКВыгрузке.ТипыБазы КАК ОбъектыКВыгрузкеТипыБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыКВыгрузке КАК ОбъектыКВыгрузке
	|		ПО ОбъектыКВыгрузкеТипыБазы.Ссылка = ОбъектыКВыгрузке.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОбъектов.Наименование КАК Наименование,
	|	СписокОбъектов.Выгружать КАК Выгружать
	|ИЗ
	|	СписокБаз КАК СписокБаз
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокОбъектов КАК СписокОбъектов
	|		ПО СписокБаз.ТипБазы = СписокОбъектов.ТипБазы");
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Возврат ЗначениеВСтрокуВнутр(Новый СписокЗначений);
		
	КонецЕсли;
	
	СписокОбъектов = Новый СписокЗначений;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//СписокОбъектов.Добавить(Новый Структура(СтрЗаменить(Выборка.Наименование, ".", "_"), Выборка.Выгружать));
		СписокОбъектов.Добавить(Выборка.Выгружать, Выборка.Наименование);
		
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(СписокОбъектов);
	
КонецФункции
//************************************************************************************************
Функция GetTheLatestProcessingVersion(Base) //Получить актуальную версию обработки 
	
	//++ 09.01.2025 Кибернетика Корыткин Добавление вида обработки 

	Запрос = Новый Запрос( "ВЫБРАТЬ
	|	Базы.ТипБазы КАК ТипБазы
	|ПОМЕСТИТЬ СписокБаз
	|ИЗ
	|	Справочник.Базы КАК Базы
	|ГДЕ
	|	Базы.Ссылка = &База
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обработки.ДатаЗагрузкиВнешнейОбработки КАК ДатаЗагрузкиВнешнейОбработки,
	|	Обработки.ТипБазы КАК ТипБазы
	|ПОМЕСТИТЬ СписокОбработок
	|ИЗ
	|	Справочник.Обработки КАК Обработки
	|ГДЕ
	|	Обработки.ВидОбработки.СлужебноеИмя = &ВидОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпиисокОбработок.ДатаЗагрузкиВнешнейОбработки КАК ДатаЗагрузкиВнешнейОбработки
	|ИЗ
	|	СписокБаз КАК СписокБаз
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокОбработок КАК СпиисокОбработок
	|		ПО СписокБаз.ТипБазы = СпиисокОбработок.ТипБазы");
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	Запрос.УстановитьПараметр("ВидОбработки", "Основная");
	//-- 09.01.2025
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Возврат "";
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Формат(Выборка.ДатаЗагрузкиВнешнейОбработки, "ДФ=yyyyMMddHHmmss");
	
КонецФункции
//************************************************************************************************
Функция GetProcessing(Base)//Получить обработку
	
	//++ 09.01.2025 Кибернетика Корыткин Добавление вида обработки 
	Запрос = Новый Запрос( "ВЫБРАТЬ
	|	Базы.ТипБазы КАК ТипБазы
	|ПОМЕСТИТЬ СписокБаз
	|ИЗ
	|	Справочник.Базы КАК Базы
	|ГДЕ
	|	Базы.Ссылка = &База
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обработки.ТипБазы КАК ТипБазы,
	|	Обработки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокОбработок
	|ИЗ
	|	Справочник.Обработки КАК Обработки
	|ГДЕ
	|	Обработки.ВидОбработки.СлужебноеИмя = &ВидОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОбработок.Ссылка КАК Ссылка
	|ИЗ
	|	СписокБаз КАК СписокБаз
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокОбработок КАК СписокОбработок
	|		ПО СписокБаз.ТипБазы = СписокОбработок.ТипБазы
	|ГДЕ
	|	НЕ СписокОбработок.Ссылка ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	Запрос.УстановитьПараметр("ВидОбработки", "Основная");
	//-- 09.01.2025

	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Возврат "";
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Справочники.Обработки.ПолучитьОбработкуBase64(Выборка.Ссылка);
	
КонецФункции
//************************************************************************************************
Функция GetReportsToUpload(Base) //Получить отчеты для выгрузки 
	
	База = ПолучитьБазуПоНаименованию(Base);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗаданияНаВыгрузкуОтчетов.ТипОтчета КАК ТипОтчета,
	|	ЗаданияНаВыгрузкуОтчетов.Счет КАК Счет,
	|	ЗаданияНаВыгрузкуОтчетов.ДатаНачала КАК ДатаНачала,
	|	ЗаданияНаВыгрузкуОтчетов.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ЗаданияНаВыгрузкуОтчетов КАК ЗаданияНаВыгрузкуОтчетов
	|ГДЕ
	|	ЗаданияНаВыгрузкуОтчетов.БазаДанных = &База
	|ИТОГИ ПО
	|	ТипОтчета");
	
	Запрос.УстановитьПараметр("База", База);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Возврат ЗначениеВСтрокуВнутр(Новый ТаблицаЗначений);
		
	КонецЕсли;
	
	Ответ = Новый ТаблицаЗначений;
	
	Ответ.Колонки.Добавить("Счет");
	Ответ.Колонки.Добавить("ТипОтчета");
	Ответ.Колонки.Добавить("ДатаНачала");
	Ответ.Колонки.Добавить("ДатаОкончания");
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрока = Ответ.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальныеЗаписи);
			
			НоваяСтрока.ТипОтчета = Метаданные.Перечисления["ТипыОтчета"].ЗначенияПеречисления[Перечисления.ТипыОтчета.Индекс(ДетальныеЗаписи.ТипОтчета)].Имя; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	//НаборЗаписей = РегистрыСведений.ЗаданияНаВыгрузкуОтчетов.СоздатьНаборЗаписей();	
	//НаборЗаписей.Отбор.БазаДанных.Установить(База);
	//НаборЗаписей.Записать();	
	
	Возврат ЗначениеВСтрокуВнутр(Ответ);
	
КонецФункции
//************************************************************************************************
Функция GetObjectsForReloading(Base) //Получить объекты для повторной выгрузки 
	
	ТЗ = Новый ТаблицаЗначений;
	
	База = ПолучитьБазуПоНаименованию(Base);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗаданияНаПовторнуюВыгрузку.Счет КАК Счет,
	|	ЗаданияНаПовторнуюВыгрузку.Значение КАК Значение,
	|	ЗаданияНаПовторнуюВыгрузку.ДатаНачала КАК ДатаНачала,
	|	ЗаданияНаПовторнуюВыгрузку.ДатаОкончания КАК ДатаОкончания,
	|	ЗаданияНаПовторнуюВыгрузку.ОбъектКВыгрузке.Наименование КАК ОбъектКВыгрузке
	|ИЗ
	|	РегистрСведений.ЗаданияНаПовторнуюВыгрузку КАК ЗаданияНаПовторнуюВыгрузку
	|ГДЕ
	|	ЗаданияНаПовторнуюВыгрузку.БазаДанных = &БазаДанных");
	
	Запрос.УстановитьПараметр("БазаДанных", База);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		
		ТЗ = Результат.Выгрузить();
		
		//НаборЗаписей = РегистрыСведений.ЗаданияНаПовторнуюВыгрузку.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.БазаДанных.Установить(База);
		//НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(ТЗ);
	
КонецФункции
//************************************************************************************************
Функция GetScheduleUpload(Base) //Получить расписание выгрузки
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА БазыРасписание.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|			ТОГДА 1
	|		КОГДА БазыРасписание.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|			ТОГДА 2
	|		КОГДА БазыРасписание.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|			ТОГДА 3
	|		КОГДА БазыРасписание.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|			ТОГДА 4
	|		КОГДА БазыРасписание.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|			ТОГДА 5
	|		КОГДА БазыРасписание.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|			ТОГДА 6
	|		КОГДА БазыРасписание.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|			ТОГДА 7
	|	КОНЕЦ КАК ДеньНедели,
	|	БазыРасписание.Время КАК ВремяВыгрузки
	|ИЗ
	|	Справочник.Базы.Расписание КАК БазыРасписание
	|ГДЕ
	|	БазыРасписание.Ссылка = &База");
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат ЗначениеВСтрокуВнутр(Результат);
	
КонецФункции
//************************************************************************************************
Функция GetChartOfAccounts(Base, Values) //Получить план счетов
	
	//Структура колонки ТЗ
	//
	//Счет			 - Строка			
	//Активный		 - Число (0 - 2)		 
	//Валютный		 - Булево		 
	//Аналитика		 - Структура
	//Наименование	 - Строка	 
	//Количественный - Булево
	//
	
	//Структура аналитика содержит наименование субконто по порядку
	//	
	//Ключ - "Субконто1", значение - "СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица"
	//Ключ - "Субконто2", значение - "СправочникСсылка.ДоговорыКонтрагентов"
	
	Попытка
		
		ПланСчетов = ЗначениеИзСтрокиВнутр(Values);	
		
		Спр = Справочники.СчетУчета.СоздатьЭлемент();
		
		Спр.База	 = ПолучитьБазуПоНаименованию(Base);
		Спр.Владелец = Спр.База.ТипБазы;
		
		Спр.Наименование = "План счетов (" + Спр.База.Наименование + ")";
		
		Для Каждого Стр Из ПланСчетов Цикл 
			
			НовыйСчет = Спр.Счета.Добавить();
			
			НовыйСчет.Счет			 = Стр.Счет;
			НовыйСчет.Активный		 = Стр.Активный;
			НовыйСчет.Валютный		 = Стр.Валютный;
			НовыйСчет.Наименование	 = Стр.Наименование;
			НовыйСчет.Количественный = Стр.Количественный;
			
			Если Стр.Аналитика.Количество() > 0 Тогда
				
				Аналитика = Спр.Аналитика.Добавить();
				
				Аналитика.Счет = Стр.Счет;
				
				Для Каждого Субконто Из Стр.Аналитика Цикл 
					
					Аналитика[Субконто.Ключ] = Субконто.Значение;
					
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		Спр.Записать();
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
//************************************************************************************************
Функция GetClosedPeriodDate(Base) //Получить дату закрытого периода
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗакрытыйПериодВыгрузкиСрезПоследних.ДатаЗакрытогоПериода КАК ДатаЗакрытогоПериода,
	                      |	ЗакрытыйПериодВыгрузкиСрезПоследних.ВидЗакрытогоПериода КАК ВидЗакрытогоПериода
	                      |ИЗ
	                      |	РегистрСведений.ЗакрытыйПериодВыгрузки.СрезПоследних КАК ЗакрытыйПериодВыгрузкиСрезПоследних
	                      |ГДЕ
	                      |	ЗакрытыйПериодВыгрузкиСрезПоследних.База = &База");
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Формат(Выборка.ДатаЗакрытогоПериода, "ДФ=yyyyMMdd") + ?(Выборка.ВидЗакрытогоПериода = Перечисления.ВидыЗакрытогоПериода.ЗакрытиеПериода, "_1", "_2");
	Иначе
		Возврат "00010101_0";
	КонецЕсли;
	
КонецФункции

Функция CheckBase(Base)
	
	Если ЗначениеЗаполнено(ПолучитьБазуПоНаименованию(Base)) Тогда
		Возврат "1";
	Иначе
		Возврат "0";
	КонецЕсли;
	
КонецФункции


Функция GetReference(Reference,Base)
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БазыОрганизации.Ссылка КАК Ссылка,
	|	БазыОрганизации.Организация КАК Организация
	|ИЗ
	|	Справочник.Базы.Организации КАК БазыОрганизации
	|ГДЕ
	|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";
	
	Запрос.УстановитьПараметр("ИмяБазы",Base);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыИУслугиБизнесНаправления.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТоварыИУслуги.БизнесНаправления КАК ТоварыИУслугиБизнесНаправления
	|ГДЕ
	|	ТоварыИУслугиБизнесНаправления.БизнесНаправление = &БизнесНаправление";
	
	Запрос.УстановитьПараметр("БизнесНаправление",НайденнаяОрг.БизнесНаправление);
	ТЗСписокПоБизнесНаправлениям = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	
	Если Reference = "ПланСчетов" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	References.Ссылка КАК Ссылка,
		|	References.КодСправочника КАК Code,
		|	References.КодСправочника КАК ID,
		|	References.Наименование КАК Name,
		|	References.НеИспользуется КАК NotActived,
		|	ЕСТЬNULL(References.Родитель.КодСправочника, """") КАК ParentCode,
		|	ЕСТЬNULL(References.Родитель.Наименование, """") КАК ParentName,
		|	ЕСТЬNULL(References.Родитель.КодСправочника, """") КАК ParentID,
		|	References.Родитель КАК Parent,
		|	ЛОЖЬ КАК IsParent
		|ИЗ
		|	Справочник."+Reference+" КАК References
		|
		|УПОРЯДОЧИТЬ ПО
		|	Code ИЕРАРХИЯ";
		
	ИначеЕсли Reference = "Бюджеты" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	References.Ссылка КАК Ссылка,
		|	References.Код КАК Code,
		|	References.Код КАК ID,
		|	References.Наименование КАК Name,
		|	"""" КАК ParentCode,
		|	"""" КАК ParentName,
		|	Ложь КАК NotActived,
		|	"""" КАК ParentID,
		|	NULL КАК Parent,
		|	ЛОЖЬ КАК IsParent
		|ИЗ
		|	Справочник.Бюджеты КАК References
		|
		|УПОРЯДОЧИТЬ ПО
		|	Code";
	ИначеЕсли Reference = "СтатьиБюджетов" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	References.Ссылка КАК Ссылка,
		|	References.КодСправочника КАК Code,
		|	References.Код КАК ID,
		|	References.Наименование КАК Name,
		|	References.НеИспользуется КАК NotActived,
		|	ЕСТЬNULL(References.Родитель.Код, """") КАК ParentID,
		|	ЕСТЬNULL(References.Родитель.КодСправочника, """") КАК ParentCode,
		|	ЕСТЬNULL(References.Родитель.Наименование, """") КАК ParentName,
		|	References.Родитель КАК Parent,
		|	ЛОЖЬ КАК IsParent,
		|	References.Владелец КАК Владелец
		|ИЗ
		|	Справочник.СтатьиБюджетов КАК References
		|
		|УПОРЯДОЧИТЬ ПО
		|	Code ИЕРАРХИЯ";
	ИначеЕсли Reference = "ПрочиеПоказатели" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	References.Ссылка КАК Ссылка,
		|	References.Код КАК ID,
		|	References.КодСправочника КАК Code,
		|	References.Наименование КАК Name,
		|	Ложь КАК NotActived,
		|	ЕСТЬNULL(References.Родитель.Код, """") КАК ParentCode,
		|	ЕСТЬNULL(References.Родитель.Наименование, """") КАК ParentName,
		|	References.Родитель КАК Parent,
		|	ЛОЖЬ КАК IsParent
		|ИЗ
		|	Справочник.INDПрочиеПоказатели КАК References
		|
		|УПОРЯДОЧИТЬ ПО
		|	Code ИЕРАРХИЯ";
	Иначе	
		Запрос.Текст = "ВЫБРАТЬ
		|	References.Ссылка КАК Ссылка,
		|	References.Код КАК ID,
		|	References.КодСправочника КАК Code,
		|	References.Наименование КАК Name,
		|	References.НеИспользуется КАК NotActived,
		|	ЕСТЬNULL(References.Родитель.Код, """") КАК ParentID,
		|	ЕСТЬNULL(References.Родитель.КодСправочника, """") КАК ParentCode,
		|	ЕСТЬNULL(References.Родитель.Наименование, """") КАК ParentName,
		|	References.Родитель КАК Parent,
		|	ЛОЖЬ КАК IsParent
		|ИЗ
		|	Справочник."+Reference+" КАК References
		|
		|УПОРЯДОЧИТЬ ПО
		|	Code ИЕРАРХИЯ";
	КонецЕсли;
	//"+Reference+"
	
	ArrayOfReference = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfReference"));
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			
			если Reference = "ТоварыИУслуги" Тогда
				Если Не ПроверитьЭлементыНижнегоУровня(ВыборкаДетальныеЗаписи.Ссылка,"ТоварыИУслуги") Тогда 
					НайденнаяСтрока = ТЗСписокПоБизнесНаправлениям.Найти(ВыборкаДетальныеЗаписи.Ссылка,"Ссылка");
					если НайденнаяСтрока=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;	
			
			ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "Reference"));
			ЗаполнитьЗначенияСвойств(ТекСтрока,ВыборкаДетальныеЗаписи);
			
			ТекСтрока.GUID			= Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
			ТекСтрока.ParentGUID	= "";
			ТекСтрока.OwnerGUID		= "";
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Parent) тогда
				ТекСтрока.ParentGUID	= Строка(ВыборкаДетальныеЗаписи.Parent.УникальныйИдентификатор());
			КонецЕсли;
			
			если Reference = "СтатьиБюджетов" Тогда
				ТекСтрока.OwnerGUID	= Строка(ВыборкаДетальныеЗаписи.Владелец.УникальныйИдентификатор());
			КонецЕсли;
			
			ArrayOfReference.Reference.Добавить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ArrayOfReference;
	
КонецФункции

&НаСервере
Функция ПроверитьЭлементыНижнегоУровня(ТекСсылка,ТипСправочника)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	авПланСчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+ТипСправочника+" КАК авПланСчетов
	|ГДЕ
	|	авПланСчетов.Родитель = &Родитель";
	запрос.УстановитьПараметр("Родитель",ТекСсылка);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() тогда
		Возврат	Истина;
	КонецЕсли;	
	Возврат	Ложь;
	
КонецФункции


Функция SetRequest(aDoc,Base)
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БазыОрганизации.Ссылка КАК Ссылка,
	|	БазыОрганизации.Организация КАК Организация
	|ИЗ
	|	Справочник.Базы.Организации КАК БазыОрганизации
	|ГДЕ
	|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";
	
	Запрос.УстановитьПараметр("ИмяБазы",Base);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	НомеДок = aDoc.Number;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаНаДобавлениеСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаДобавлениеСправочника КАК ЗаявкаНаДобавлениеСправочника
	|ГДЕ
	|	ЗаявкаНаДобавлениеСправочника.Организация = &Организация
	|	И ЗаявкаНаДобавлениеСправочника.НомерЗаявки = &Номер";
	Запрос.УстановитьПараметр("Организация",НайденнаяОрг);
	Запрос.УстановитьПараметр("Номер",НомеДок);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		ТекДок = Рез.Ссылка.ПолучитьОбъект();
		
		Если ТекДок.Статус = "Завершена" или ТекДок.Статус = "Отказано" Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ТекДок = Документы.ЗаявкаНаДобавлениеСправочника.СоздатьДокумент();
	КонецЕсли;
	
	
	ТекДок.Статус 			= "Создана";
	ТекДок.НомерЗаявки		= aDoc.Number;
	ТекДок.Организация		= НайденнаяОрг;
	ТекДок.Дата  			= aDoc.Date;     
	//++ 02.02.2025 Кибернетика Корыткин Из код модуля типы приходят с префиксом ав
	ТекДок.ТипСправочника 	= ?(Лев(aDoc.RefType, 2) = "ав", Сред(aDoc.RefType, 3), aDoc.RefType);
	//-- 02.02.2025
	ТекДок.Наименование		= aDoc.RefName;
	
	Если ЗначениеЗаполнено(aDoc.RefParentCode) Тогда
		ТекДок.Группа		= Справочники[ТекДок.ТипСправочника].НайтиПоКоду(aDoc.RefParentCode);
	КонецЕсли;
	
	ТекДок.Ответственный 	= aDoc.UserName;
	ТекДок.КонтактныйТелефон= aDoc.UserPhone;
	ТекДок.ЭлектронныйАдрес	= aDoc.UserEMail;
	
	Попытка 
		ТекДок.Записать();
		Отказ = Истина;
	Исключение
		Отказ = Ложь;
	КонецПопытки;
	
	Возврат Отказ;
	
КонецФункции

Функция GetRequestResult(Number,Base)
	
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БазыОрганизации.Ссылка КАК Ссылка,
	|	БазыОрганизации.Организация КАК Организация
	|ИЗ
	|	Справочник.Базы.Организации КАК БазыОрганизации
	|ГДЕ
	|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";
	
	Запрос.УстановитьПараметр("ИмяБазы",Base);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	НомеДок = Number;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаДобавлениеСправочника.Ссылка КАК Ссылка,
	               |	ЗаявкаНаДобавлениеСправочника.Статус КАК Статус,
	               |	ЗаявкаНаДобавлениеСправочника.Комментарий КАК Комментарий
	               |ИЗ
	               |	Документ.ЗаявкаНаДобавлениеСправочника КАК ЗаявкаНаДобавлениеСправочника
	               |ГДЕ
	               |	ЗаявкаНаДобавлениеСправочника.Организация = &Организация
	               |	И ЗаявкаНаДобавлениеСправочника.НомерЗаявки = &Номер";
	Запрос.УстановитьПараметр("Организация",НайденнаяОрг);
	Запрос.УстановитьПараметр("Номер",НомеДок);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Рез = ЗначениеВСтрокуВнутр(Новый Структура("Статус, Комментарий", Рез.Статус, Рез.Комментарий));
		
	Иначе
		Рез = "Не найдена заявка";
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции


Функция GetReport(Data1, Data2, Base,TypeOfReport) 
	
	
	ТЗ  = ПолучениеОтчетов.СформироватьОтчет(Data1, Data2, Base, "", TypeOfReport);	
	
	ArrayOfReport = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfReport"));
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗ Цикл
		ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ReportLine"));
		ЗаполнитьЗначенияСвойств(ТекСтрока,ВыборкаДетальныеЗаписи);
		
		ArrayOfReport.ReportLine.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат ArrayOfReport;
	
	
КонецФункции

Функция GetReportPlanFact(Data1, Data2, Base, IIN,TypeOfReport)
	
	Возврат ФормированиеОтчетаПланФакт.Web_GetReportPlanFact(Data1, Data2, Base,IIN, TypeOfReport);
КонецФункции 

Функция GetReportPlanFactInvest(Data1, Data2, Base, IIN)
	ТЗ  = ФормированиеОтчетаПланФакт.GetReportPlanFactInvest(Data1, Data2, Base,IIN);	
	
	ArrayOfReport = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfReportPlanFactInvest"));
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗ Цикл
		ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ReportLinePlanFactInvest"));
		ЗаполнитьЗначенияСвойств(ТекСтрока,ВыборкаДетальныеЗаписи);
		
		ArrayOfReport.ReportLine.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат ArrayOfReport;
КонецФункции

 Функция GetReportPlanFactCredit(Data1, Data2, TypeOfReport,Base, IIN)
	ТЗ  = ФормированиеОтчетаПланФакт.GetReportPlanFactCreditDebt(Data1, Data2, TypeOfReport,Base,IIN);	
	
	ArrayOfReport = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfReportPlanFactCredit"));
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗ Цикл
		ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ReportLinePlanFactCredit"));
		ЗаполнитьЗначенияСвойств(ТекСтрока,ВыборкаДетальныеЗаписи);
		
		ArrayOfReport.ReportLine.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат ArrayOfReport;

 КонецФункции


Функция SetClosedPeriodDate(Data, Base,Type)
	База = ПолучитьБазуПоНаименованию(Base);	
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БазыОрганизации.Ссылка КАК Ссылка,
	|	БазыОрганизации.Организация КАК Организация
	|ИЗ
	|	Справочник.Базы.Организации КАК БазыОрганизации
	|ГДЕ
	|	БазыОрганизации.Ссылка.Наименование = &ИмяБазы";
	
	Запрос.УстановитьПараметр("ИмяБазы",Base);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	если Type = "Аудит" Тогда
		попытка 
			ДатаЗакрытия = КонецДня(Data)+1;
			НаборЗаписей = РегистрыСведений.ЗакрытыйПериодВыгрузки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.База.Установить(База);
			//НаборЗаписей.Отбор.ВидЗакрытогоПериода.Установить(Перечисления.ВидыЗакрытогоПериода.Аудит);
			НовЗапись 						= НаборЗаписей.Добавить();
			НовЗапись.База 					= База;
			НовЗапись.Период  				= ТекущаяДатаСеанса();
			НовЗапись.ДатаЗакрытогоПериода = ДатаЗакрытия;
			НовЗапись.ВидЗакрытогоПериода	= Перечисления.ВидыЗакрытогоПериода.Аудит;
			НаборЗаписей.Записать(Истина);
			Возврат "1";
		Исключение
			Возврат ОписаниеОшибки();
		КонецПопытки;
	Иначе
		Об = НайденнаяОрг.ПолучитьОбъект();
		если Об.ДатаЗакрытияПериода > Data тогда
			Возврат "Установка даты не удалась. Дата закрытия "+Строка(Data)+" меньше установленной даты: " + Строка(Об.ДатаЗакрытияПериода);
		Иначе
			
			попытка 
				Об = НайденнаяОрг.ПолучитьОбъект();
				Об.ДатаЗакрытияПериода = Data;
				Об.Записать();
				
				ДатаЗакрытия = КонецДня(Data)+1;
				НаборЗаписей = РегистрыСведений.ЗакрытыйПериодВыгрузки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.База.Установить(База);
				//НаборЗаписей.Отбор.ВидЗакрытогоПериода.Установить(Перечисления.ВидыЗакрытогоПериода.ЗакрытиеПериода);
				НовЗапись 						= НаборЗаписей.Добавить();
				НовЗапись.База 					= База;
				НовЗапись.Период  				= ТекущаяДатаСеанса();
				НовЗапись.ДатаЗакрытогоПериода = ДатаЗакрытия;
				НовЗапись.ВидЗакрытогоПериода	= Перечисления.ВидыЗакрытогоПериода.ЗакрытиеПериода;
				
				НаборЗаписей.Записать(Истина);
				
				Возврат "1";
			Исключение
				Возврат ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


Функция GetReportAnalysis(Data1, Data2, Base,IIN)
	ТЗ  = ПолучениеОтчетов.СформироватьОтчетАнализСчетов(Data1, Data2, Base,IIN);	
	ArrayOfReport = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfAnalysis"));
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗ Цикл
		если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.CorAccount) Тогда
			ВыборкаДетальныеЗаписи.CorAccount = "";
		КонецЕсли;
		
		если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Account) Тогда
			ВыборкаДетальныеЗаписи.Account = "";
		КонецЕсли;
		
		ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ReportLineAnalysis"));
		ЗаполнитьЗначенияСвойств(ТекСтрока,ВыборкаДетальныеЗаписи);
		
		ArrayOfReport.ReportLineAnalysis.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат ArrayOfReport;
КонецФункции


Функция GetReportDetailed(Data1, Data2, Base, TypeOfReport)
	
	ТЗ  = ПолучениеОтчетов.СформироватьОтчетДетально(Data1, Data2, Base, TypeOfReport);	
	
	ArrayOfReport = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfReport"));
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗ Цикл
		ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ReportLine"));
		ЗаполнитьЗначенияСвойств(ТекСтрока,ВыборкаДетальныеЗаписи);
		
		ArrayOfReport.ReportLine.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат ArrayOfReport;
КонецФункции


Функция GetReportByIIN(Data1, Data2, Base, IIN, TypeOfReport)
	ЗаписьЖурналаРегистрации("GetReportByIIN", УровеньЖурналаРегистрации.Информация,,, "База:"+Base+",TypeOfReport:"+TypeOfReport+",Период "+Формат(Data1, "ДЛФ=Д")+"-"+Формат(Data2, "ДЛФ=Д")+". Входящий запрос");
	
	ТЗ  = ПолучениеОтчетов.СформироватьОтчет(Data1, Data2, Base, IIN, TypeOfReport);  
	
	Если ТЗ.Количество()=0 Тогда
		ТЗ  = ПолучениеОтчетов.СформироватьОтчет(Data1, Data2, Base, IIN, TypeOfReport);
		ЗаписьЖурналаРегистрации("GetReportByIIN", УровеньЖурналаРегистрации.Ошибка,,, "База:"+Base+",TypeOfReport:"+TypeOfReport+",Период "+Формат(Data1, "ДЛФ=Д")+"-"+Формат(Data2, "ДЛФ=Д")+". Повторный запрос");
	КонецЕсли;	
	
	ArrayOfReport = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfReport"));
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗ Цикл
		ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ReportLine"));
		ЗаполнитьЗначенияСвойств(ТекСтрока,ВыборкаДетальныеЗаписи);
		
		ArrayOfReport.ReportLine.Добавить(ТекСтрока);
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("GetReportByIIN", УровеньЖурналаРегистрации.Информация,,, "База:"+Base+",TypeOfReport:"+TypeOfReport+",Период "+Формат(Data1, "ДЛФ=Д")+"-"+Формат(Data2, "ДЛФ=Д")+". Возврат запроса клиент");

	Возврат ArrayOfReport;
КонецФункции


Функция GetReportAccountMovements(Data1, Data2, Base, IIN, Account)
	ТЗ  = ПолучениеОтчетов.СформироватьОтчетКарточкаСчета(Data1, Data2, Base,IIN,Account);	
	
	ArrayOfReport = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArrayOfAccountMovements"));
	
	Для Каждого ВыборкаДетальныеЗаписи из ТЗ Цикл
		ТекСтрока 			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ReportLineAccountMovements"));
		ЗаполнитьЗначенияСвойств(ТекСтрока,ВыборкаДетальныеЗаписи);
		
		ArrayOfReport.ReportLineAccountMovements.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат ArrayOfReport;
КонецФункции


Функция SetDocPlan(aDoc, IIN)
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.БИН = &БИН";
	
	Запрос.УстановитьПараметр("БИН",IIN);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	авПлановыеДанные.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПлановыеДанные КАК авПлановыеДанные
	|ГДЕ
	|	авПлановыеДанные.Организация = &Организация
	|	И авПлановыеДанные.GUIDВходящего = &GUID";
	Запрос.УстановитьПараметр("Организация",НайденнаяОрг);
	Запрос.УстановитьПараметр("GUID",aDoc.GUID);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		ТекДок = Рез.Ссылка.ПолучитьОбъект();
	Иначе
		ТекДок = Документы.ПлановыеДанные.СоздатьДокумент();
	КонецЕсли;
	
	
	ТекДок.Организация			= НайденнаяОрг;
	ТекДок.Дата  				= aDoc.Date;
	ТекДок.НомерВходящего   	= aDoc.Number;
	ТекДок.GUIDВходящего   		= aDoc.GUID;
	ТекДок.Версия   			= Справочники.Версии.ПолучитьСсылку(Новый УникальныйИдентификатор(aDoc.Version)); 
	ТекДок.ПериодПланирования 	= aDoc.PlanPeriod; 
	ТекДок.Комментарий     		= aDoc.Comment; 
	
	ТекДок.Данные.Очистить();
	для каждого стр из aDoc.Lines Цикл
		НовСтр = ТекДок.Данные.Добавить();
		НовСтр.Период 			= стр.Period;
		НовСтр.СвернутоПоГоду	= стр.AllYear;

		Если ЗначениеЗаполнено(стр.ReportlineGUID) Тогда
			НовСтр.Статья 			= Справочники.СтатьиБюджетов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.ReportlineGUID));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.RevenueGUID) Тогда
			НовСтр.СтатьяДоходов 	= Справочники.Доходы.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.RevenueGUID));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.ExpenditureGUID) Тогда
			НовСтр.СтатьяЗатрат		= Справочники.СтатьиЗатрат.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.ExpenditureGUID));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.AssetCategoryGUID) Тогда
			НовСтр.КатегорияАктивов = Справочники.КатегорииАктивов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.AssetCategoryGUID));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.NomenclatureGroupGUID) Тогда
			НовСтр.СтатьяТРУ 		= Справочники.ТоварыИУслуги.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.NomenclatureGroupGUID));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.NomenclatureGroupLevel2GUID) Тогда
			НовСтр.СтатьяТРУУровень2 		= Справочники.ТоварыИУслуги.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.NomenclatureGroupLevel2GUID));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.TypeOfMovementGUID) Тогда
			НовСтр.ВидДвижения 		= Справочники.ВидыДвижения.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.TypeOfMovementGUID));
		КонецЕсли;
		
		НовСтр.Контрагент       = стр.CounterpartyINN;
		
		НовСтр.Сумма 			= стр.Amount;
	КонецЦикла;	
	
	
	ТекДок.ДанныеКапитальныеВложения.Очистить();
	для каждого стр из aDoc.LinesInvestProject Цикл
		НовСтр = ТекДок.ДанныеКапитальныеВложения.Добавить();
		
		НовСтр.Период 			= стр.Period;
		НовСтр.СвернутоПоГоду	= стр.AllYear;

		НовСтр.КраткоеОписаниеПроекта 	= стр.ProjectDescription;

		Если ЗначениеЗаполнено(стр.TypeOfInvestmentGUID) Тогда
			НовСтр.ТипИнвестиции	 	= Справочники.ТипПроектаИИнвестиции.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.TypeOfInvestmentGUID));
		КонецЕсли;

		Если ЗначениеЗаполнено(стр.AssetCategoryGUID) Тогда
			НовСтр.КатегорияАктива	 	= Справочники.КатегорииАктивов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.AssetCategoryGUID));
		КонецЕсли;

		Если ЗначениеЗаполнено(стр.ProjectCustomerGUID) Тогда
			НовСтр.ЗаказчикПроекта	 	= Справочники.ФЦО.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.ProjectCustomerGUID));
		КонецЕсли;

		Если ЗначениеЗаполнено(стр.Currency) Тогда
			НовСтр.Валюта 				= Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора",стр.Currency); 
		КонецЕсли;
		
		НовСтр.ЦенаЗаЕдиницу 					= стр.UnitPrice;
		НовСтр.Объем 							= стр.Volume;
		НовСтр.СуммаРасходы 					= стр.AmountExpenses;
		
	КонецЦикла;	
	
	
	
	ТекДок.ДанныеКредиторы.Очистить();
	для каждого стр из aDoc.LinesCredit Цикл
		НовСтр 							= ТекДок.ДанныеКредиторы.Добавить();
		НовСтр.Период 					= стр.Period;
		НовСтр.СвернутоПоГоду			= стр.AllYear;
		НовСтр.НомерДоговора			= стр.ContractNumber;
		НовСтр.ДатаДоговора				= стр.ContractDate;
		НовСтр.ДатаПогашения			= стр.MaturityDate;
		НовСтр.КонтрагентБИН			= стр.CounterpartyINN;

		Если ЗначениеЗаполнено(стр.DebtToolGUID) Тогда
			НовСтр.ДолговойИнструмент = Справочники.ДолговыеИнструменты.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.DebtToolGUID));
		КонецЕсли;  

		Если ЗначениеЗаполнено(стр.LoanLenderTypeGUID) Тогда
			НовСтр.ТипКредитора	 = Справочники.ТипыКредиторов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.LoanLenderTypeGUID));
		КонецЕсли;                           

		Если ЗначениеЗаполнено(стр.Currency) Тогда
			НовСтр.Валюта 			= Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора",стр.Currency); 
		КонецЕсли; 
		НовСтр.Индексация				= стр.Indexing;
		НовСтр.КурсНаДату				= стр.ExchangeRateOnDate;
		НовСтр.СрокКредитования			= стр.LoanTerms;
		НовСтр.ПроцентнаяСтавка			= стр.InterestRate;

		Если ЗначениеЗаполнено(стр.PurposeOfFundsGUID) Тогда
			НовСтр.ЦелевоеНазначениеСредств	 = Справочники.ЦелевоеЗначениеСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.PurposeOfFundsGUID));
		КонецЕсли;                           
		
		НовСтр.СуммаПоДоговору					= стр.ContractSumm;
		
		НовСтр.СуммаОсвоенияПоДоговору			= стр.AmountOfDisbursement;

		НовСтр.СальдоНаНачалоОД					= стр.PrincipalAmountBalance;
		НовСтр.СальдоНаНачалоНачисленныеПроценты= стр.AccruedInterestBalance;

		НовСтр.СуммаОД							= стр.PrincipalAmountByPeriod;
		НовСтр.НачисленныеПроценты				= стр.AccruedInterestByPeriod;
		
		НовСтр.СальдоНаКонецОД					= стр.PrincipalAmountEndBalance;
		НовСтр.СальдоНаКонецНачисленныеПроценты	= стр.AccruedInterestEndBalance;
		
	КонецЦикла;	
	

	ТекДок.ДанныеДебиторы.Очистить();
	для каждого стр из aDoc.LinesDZ Цикл
		НовСтр 							= ТекДок.ДанныеДебиторы.Добавить();
		
		НовСтр.Период 					= стр.Period;
		НовСтр.СвернутоПоГоду			= стр.AllYear;
		НовСтр.НомерДоговора			= стр.ContractNumber;
		НовСтр.ДатаДоговора				= стр.ContractDate;
		НовСтр.ДатаПогашения			= стр.MaturityDate;
		НовСтр.КонтрагентБИН			= стр.CounterpartyINN;

		Если ЗначениеЗаполнено(стр.DebtToolGUID) Тогда
			НовСтр.ДолговойИнструмент = Справочники.ДолговыеИнструменты.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.DebtToolGUID));
		КонецЕсли;  

		Если ЗначениеЗаполнено(стр.LoanLenderTypeGUID) Тогда
			НовСтр.ТипКредитора	 = Справочники.ТипыКредиторов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.LoanLenderTypeGUID));
		КонецЕсли;                           

		Если ЗначениеЗаполнено(стр.Currency) Тогда
			НовСтр.Валюта 			= Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора",стр.Currency); 
		КонецЕсли; 
		НовСтр.Индексация				= стр.Indexing;
		НовСтр.КурсНаДату				= стр.ExchangeRateOnDate;
		НовСтр.СрокКредитования			= стр.LoanTerms;
		НовСтр.ПроцентнаяСтавка			= стр.InterestRate;

		Если ЗначениеЗаполнено(стр.PurposeOfFundsGUID) Тогда
			НовСтр.ЦелевоеНазначениеСредств	 = Справочники.ЦелевоеЗначениеСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.PurposeOfFundsGUID));
		КонецЕсли;                           
		
		НовСтр.СуммаПоДоговору						= стр.ContractSumm;
		
		НовСтр.СуммаОсвоенияПоДоговору				= стр.AmountOfDisbursement;
		НовСтр.СальдоНаНачалоОД						= стр.PrincipalAmountBalance;
		НовСтр.СальдоНаНачалоНачисленныеПроценты	= стр.AccruedInterestBalance;
		НовСтр.СуммаОД								= стр.PrincipalAmountByPeriod;
		НовСтр.НачисленныеПроценты					= стр.AccruedInterestByPeriod;
		НовСтр.СальдоНаКонецОД						= стр.PrincipalAmountEndBalance;
		НовСтр.СальдоНаКонецНачисленныеПроценты		= стр.AccruedInterestEndBalance;
	КонецЦикла;	
	
	
	Для Каждого LineDocKPI Из aDoc.LinesDocKPI Цикл 
		СтрокаТЧ = ТекДок.ДанныеКПД.Добавить();
		СтрокаТЧ.КлючевойПоказатель = Справочники.КлючевыеПоказателиДеятельности.ПолучитьСсылку(Новый УникальныйИдентификатор(LineDocKPI.KPI_GUID));
		СтрокаТЧ.Код              = СтрокаТЧ.КлючевойПоказатель.Код; 
		СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.КлючевойПоказатель.ЕдиницаИзмерения;
		СтрокаТЧ.Январь           = LineDocKPI.M1;
		СтрокаТЧ.Февраль          = LineDocKPI.M2;
		СтрокаТЧ.Март             = LineDocKPI.M3;
		СтрокаТЧ.Апрель           = LineDocKPI.M4;
		СтрокаТЧ.Май              = LineDocKPI.M5;
		СтрокаТЧ.Июнь             = LineDocKPI.M6;
		СтрокаТЧ.Июль             = LineDocKPI.M7;
		СтрокаТЧ.Август           = LineDocKPI.M8;
		СтрокаТЧ.Сентябрь         = LineDocKPI.M9;
		СтрокаТЧ.Октябрь          = LineDocKPI.M10;
		СтрокаТЧ.Ноябрь           = LineDocKPI.M11;
		СтрокаТЧ.Декабрь          = LineDocKPI.M12;
		СтрокаТЧ.ТекущийГод       = LineDocKPI.YEAR;
		СтрокаТЧ.ГодПлюс1         = LineDocKPI.YEAR1;
		СтрокаТЧ.ГодПлюс2         = LineDocKPI.YEAR2;
		СтрокаТЧ.ГодПлюс3         = LineDocKPI.YEAR3;
		СтрокаТЧ.ГодПлюс4         = LineDocKPI.YEAR4;
	КонецЦикла;
	
	Попытка 
		
		ТекДок.Записать(); 
		
		НаборЗаписей = РегистрыСведений.ЗаданиеНаИнтеграциюВSQL.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Документ.Установить(ТекДок.Ссылка); 
		НоваяЗапись 			= НаборЗаписей.Добавить(); 
		НоваяЗапись.Документ 	= ТекДок.Ссылка; 
		НаборЗаписей.Записать();   

		Отказ = Истина;
	Исключение
		Отказ = Ложь;
	КонецПопытки;

	Возврат Отказ;
КонецФункции


Функция GetTypesOfOtherIndicators(IIN)
	Возврат ИнтеграцияДЗО.GetTypesOfOtherIndicators(IIN);
КонецФункции


Функция SetDocOtherInd(aDocOtherInd,IIN)
	Возврат ИнтеграцияДЗО.SetDocOtherInd(aDocOtherInd,IIN);
КонецФункции


Функция GetOperatingStatus(Base, GUID)
	База = ПолучитьБазуПоНаименованию(Base);
	Возврат Обмен.ПроверитьСтатистикуЗагрузки(База, GUID); 
КонецФункции

Функция УдалитьПробелы(ТекЧисло)
	
	Если ЗначениеЗаполнено(ТекЧисло) Тогда
		Возврат Формат(ТекЧисло,"ЧГ=");
	Иначе
		Возврат "0";
	КонецЕсли;
	
КонецФункции // УдалитьПробелы¶()

Функция ПолучитьIDСправочника(Ссылка,ИмяТаблицы,ДанныеSQL)
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		GUID = Ссылка;
	Иначе 
		Если ЗначениеЗаполнено(Ссылка)Тогда
			GUID = XMLСтрока(Ссылка); 
		Иначе 
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТЗ = ДанныеSQL[ИмяТаблицы];
	Результат = ДанныеSQL[ИмяТаблицы].Найти(GUID,"GUID");
	Если Результат <> Неопределено Тогда
		Возврат Результат.ID;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьIDСправочника()

Функция GetReferenceDocument(IIN, TypesOfOtherIndicators)
	Возврат ИнтеграцияДЗО.GetReferenceDocument(IIN, TypesOfOtherIndicators);
КонецФункции

Функция BudgeIitemAccounts(ArrayAccountsQuery)
	Возврат ИнтеграцияДЗО.BudgeIitemAccounts(ArrayAccountsQuery);
КонецФункции

Функция ComplianceGoodsWithOtherIndicators(ArrayComplianceGoodsWithOtherIndicators)
	
	Возврат  ИнтеграцияДЗО.ComplianceGoodsWithOtherIndicators(ArrayComplianceGoodsWithOtherIndicators);
	
КонецФункции

Функция GetKPI(IIN)
	Возврат  ИнтеграцияДЗО.GetKPI(IIN);
КонецФункции

Функция SetDocKPI(aDocKPI)
	Возврат  ИнтеграцияДЗО.SetDocKPI(aDocKPI);
КонецФункции

Функция GetProcessingReport(Base)
	Запрос = Новый Запрос( "ВЫБРАТЬ
	|	Базы.ТипБазы КАК ТипБазы
	|ПОМЕСТИТЬ СписокБаз
	|ИЗ
	|	Справочник.Базы КАК Базы
	|ГДЕ
	|	Базы.Ссылка = &База
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обработки.ТипБазы КАК ТипБазы,
	|	Обработки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокОбработок
	|ИЗ
	|	Справочник.Обработки КАК Обработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОбработок.Ссылка КАК Ссылка
	|ИЗ
	|	СписокБаз КАК СписокБаз
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокОбработок КАК СписокОбработок
	|		ПО СписокБаз.ТипБазы = СписокОбработок.ТипБазы
	|ГДЕ
	|	НЕ СписокОбработок.Ссылка ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Возврат "";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	Возврат Справочники.Обработки.ПолучитьОбработкуОтчетностьBase64(Выборка.Ссылка);
КонецФункции

Функция SensitivityToPossibleCourseChanges()
	Возврат  ИнтеграцияДЗО.SensitivityToPossibleCourseChanges();
КонецФункции

Функция SetDocFact(aDoc, IIN)
	
	НайденнаяОрг = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.БИН = &БИН";
	
	Запрос.УстановитьПараметр("БИН",IIN);
	РезОрг = запрос.Выполнить().Выбрать();
	если РезОрг.Следующий() Тогда
		НайденнаяОрг = РезОрг.Организация;
	КонецЕсли;	
	
	Если НайденнаяОрг = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	НомеДок = aDoc.Number;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФактическиеДанные.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ФактическиеДанные КАК ФактическиеДанные
	               |ГДЕ
	               |	ФактическиеДанные.Организация = &Организация
	               |	И ФактическиеДанные.GUIDВходящего = &GUID";
	Запрос.УстановитьПараметр("Организация",НайденнаяОрг);
	Запрос.УстановитьПараметр("GUID",aDoc.GUID);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		ТекДок = Рез.Ссылка.ПолучитьОбъект();
	Иначе
		ТекДок = Документы.ФактическиеДанные.СоздатьДокумент();
	КонецЕсли;
	
	
	ТекДок.Организация			= НайденнаяОрг;
	ТекДок.Дата  				= aDoc.Date;
	ТекДок.НомерВходящего   	= aDoc.Number;
	ТекДок.GUIDВходящего   		= aDoc.GUID;
	ТекДок.Версия   			= Справочники.Версии.ПолучитьСсылку(Новый УникальныйИдентификатор(aDoc.Version)); 
	ТекДок.ДатаОтчета 			= aDoc.FactPeriod; 
	ТекДок.Комментарий     		= aDoc.Comment; 
	ТекДок.Дата1 				= aDoc.Data1; 
	ТекДок.Дата2 				= aDoc.Data2;  
	ТекДок.Статус 				= ПредопределенноеЗначение("Перечисление.СтатусДокумента." + aDoc.Status);
	
	//++ 22.07.2025 Кибернетика Корыткин прием отчетов
	ТекДок.ДанныеBS.Очистить();
	Для Каждого стр Из aDoc.LinesBS Цикл
		НовСтр = ТекДок.ДанныеBS.Добавить();

		ЗаполнитьЗначенияСвойств(НовСтр, стр);
		
	КонецЦикла;	

	ТекДок.ДанныеPL.Очистить();
	Для Каждого стр Из aDoc.LinesPL Цикл
		НовСтр = ТекДок.ДанныеPL.Добавить();

		ЗаполнитьЗначенияСвойств(НовСтр, стр);
		
	КонецЦикла;	

    ТекДок.ДанныеCFD.Очистить();
	Для Каждого стр Из aDoc.LinesCFD Цикл
		НовСтр = ТекДок.ДанныеCFD.Добавить();

		ЗаполнитьЗначенияСвойств(НовСтр, стр);
		
	КонецЦикла;	
	
	//-- 22.07.2025
	
	ТекДок.ДанныеКапитальныеВложения.Очистить();
	для каждого стр из aDoc.LinesInvestProject Цикл
		НовСтр = ТекДок.ДанныеКапитальныеВложения.Добавить();

		НовСтр.Период					= стр.Period;
		НовСтр.КраткоеОписаниеПроекта 	= стр.ProjectDescription;

		Если ЗначениеЗаполнено(стр.TypeOfInvestmentGUID) Тогда
			НовСтр.ТипИнвестиции	 	= Справочники.ТипПроектаИИнвестиции.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.TypeOfInvestmentGUID));
		КонецЕсли;

		Если ЗначениеЗаполнено(стр.AssetCategoryGUID) Тогда
			НовСтр.КатегорияАктива	 	= Справочники.КатегорииАктивов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.AssetCategoryGUID));
		КонецЕсли;

		Если ЗначениеЗаполнено(стр.ProjectCustomerGUID) Тогда
			НовСтр.ЗаказчикПроекта	 	= Справочники.ФЦО.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.ProjectCustomerGUID));
		КонецЕсли;

		Если ЗначениеЗаполнено(стр.Currency) Тогда
			НовСтр.Валюта 				= Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора",стр.Currency); 
		КонецЕсли;
		
		НовСтр.ЦенаЗаЕдиницу 			= стр.UnitPrice;
		НовСтр.Объем 					= стр.Volume;
		НовСтр.СуммаРасходы 			= стр.AmountExpenses;
		
	КонецЦикла;	
	
	
	
	ТекДок.ДанныеКредиторы.Очистить();
	для каждого стр из aDoc.LinesCredit Цикл
		НовСтр = ТекДок.ДанныеКредиторы.Добавить();
		
		НовСтр.Период					= Стр.Period;
		НовСтр.Договор					= стр.Contract;
		НовСтр.НомерДоговора			= стр.ContractNumber;
		НовСтр.ДатаДоговора				= стр.ContractDate;
		НовСтр.ДатаПогашения			= стр.MaturityDate;
		НовСтр.КонтрагентБИН			= стр.CounterpartyINN;
		НовСтр.Контрагент				= стр.Counterparty;
		
		Если ЗначениеЗаполнено(стр.DebtToolGUID) Тогда
			НовСтр.ДолговойИнструмент 	= Справочники.ДолговыеИнструменты.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.DebtToolGUID));
		КонецЕсли;  

		Если ЗначениеЗаполнено(стр.LoanLenderTypeGUID) Тогда
			НовСтр.ТипКредитора 		= Справочники.ТипыКредиторов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.LoanLenderTypeGUID));
		КонецЕсли;  

		Если ЗначениеЗаполнено(стр.PurposeOfFundsGUID) Тогда
			НовСтр.ЦелевоеНазначениеСредств	 = Справочники.ЦелевоеЗначениеСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.PurposeOfFundsGUID));
		КонецЕсли;                           

		Если ЗначениеЗаполнено(стр.Currency) Тогда
			НовСтр.Валюта 			= Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора",стр.Currency); 
		КонецЕсли; 
		НовСтр.Индексация				= стр.Indexing;
		НовСтр.КурсНаДату				= стр.ExchangeRateOnDate;
		НовСтр.СрокКредитования			= стр.LoanTerms;
		НовСтр.ПроцентнаяСтавка			= стр.InterestRate;
		НовСтр.СуммаПоДоговору			= стр.ContractSumm; //1
		НовСтр.СуммаОсвоенияПоДоговору	= стр.AmountOfDisbursement;
		НовСтр.СальдоНаНачалоОД			= стр.PrincipalAmountBalance; //1
		НовСтр.СальдоНаНачалоНачисленныеПроценты	= стр.AccruedInterestBalance; //1
		НовСтр.СуммаОД					= стр.PrincipalAmountByPeriod; //1
		НовСтр.НачисленныеПроценты		= стр.AccruedInterestByPeriod; //1
		НовСтр.Переоценка				= стр.RevaluationByPeriod; //1
		НовСтр.ПрочиеОперации			= стр.OtherOperationByPeriod; //1
		НовСтр.СальдоНаКонецОД			= стр.PrincipalAmountEndBalance; //1
		НовСтр.СальдоНаКонецНачисленныеПроценты	= стр.AccruedInterestEndBalance; //1
	КонецЦикла;	
	
	ТекДок.ДанныеДебиторы.Очистить();
	для каждого стр из aDoc.LinesDZ Цикл
		НовСтр = ТекДок.ДанныеДебиторы.Добавить();
		
		НовСтр.Период					= Стр.Period;
		НовСтр.Договор					= стр.Contract;
		НовСтр.НомерДоговора			= стр.ContractNumber;
		НовСтр.ДатаДоговора				= стр.ContractDate;
		НовСтр.ДатаПогашения			= стр.MaturityDate;
		НовСтр.КонтрагентБИН			= стр.CounterpartyINN;
		НовСтр.Контрагент				= стр.Counterparty;
		
		Если ЗначениеЗаполнено(стр.DebtToolGUID) Тогда
			НовСтр.ДолговойИнструмент 	= Справочники.ДолговыеИнструменты.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.DebtToolGUID));
		КонецЕсли;  

		Если ЗначениеЗаполнено(стр.LoanLenderTypeGUID) Тогда
			НовСтр.ТипКредитора 		= Справочники.ТипыКредиторов.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.LoanLenderTypeGUID));
		КонецЕсли;  

		Если ЗначениеЗаполнено(стр.PurposeOfFundsGUID) Тогда
			НовСтр.ЦелевоеНазначениеСредств	 = Справочники.ЦелевоеЗначениеСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.PurposeOfFundsGUID));
		КонецЕсли;                           

		Если ЗначениеЗаполнено(стр.Currency) Тогда
			НовСтр.Валюта 			= Справочники.Валюты.НайтиПоРеквизиту("КодКлассификатора",стр.Currency); 
		КонецЕсли; 
		НовСтр.Индексация				= стр.Indexing;
		НовСтр.КурсНаДату				= стр.ExchangeRateOnDate;
		НовСтр.СрокКредитования			= стр.LoanTerms;
		НовСтр.ПроцентнаяСтавка			= стр.InterestRate;
		НовСтр.СуммаПоДоговору			= стр.ContractSumm; //1
		НовСтр.СуммаОсвоенияПоДоговору	= стр.AmountOfDisbursement;
		НовСтр.СальдоНаНачалоОД			= стр.PrincipalAmountBalance; //1
		НовСтр.СальдоНаНачалоНачисленныеПроценты	= стр.AccruedInterestBalance; //1
		НовСтр.СуммаОД					= стр.PrincipalAmountByPeriod; //1
		НовСтр.НачисленныеПроценты		= стр.AccruedInterestByPeriod; //1
		НовСтр.Переоценка				= стр.RevaluationByPeriod; //1
		НовСтр.ПрочиеОперации			= стр.OtherOperationByPeriod; //1
		НовСтр.СальдоНаКонецОД			= стр.PrincipalAmountEndBalance; //1
		НовСтр.СальдоНаКонецНачисленныеПроценты	= стр.AccruedInterestEndBalance; //1
	КонецЦикла;	
	
	
	Для Каждого LineDocKPI Из aDoc.LinesDocKPI Цикл 
		
		СтрокаТЧ 					= ТекДок.ДанныеКПД.Добавить();
		СтрокаТЧ.КлючевойПоказатель = Справочники.КлючевыеПоказателиДеятельности.ПолучитьСсылку(Новый УникальныйИдентификатор(LineDocKPI.KPI_GUID));
		СтрокаТЧ.Код              = СтрокаТЧ.КлючевойПоказатель.Код; 
		СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.КлючевойПоказатель.ЕдиницаИзмерения;
		СтрокаТЧ.Январь           = LineDocKPI.M1;
		СтрокаТЧ.Февраль          = LineDocKPI.M2;
		СтрокаТЧ.Март             = LineDocKPI.M3;
		СтрокаТЧ.Апрель           = LineDocKPI.M4;
		СтрокаТЧ.Май              = LineDocKPI.M5;
		СтрокаТЧ.Июнь             = LineDocKPI.M6;
		СтрокаТЧ.Июль             = LineDocKPI.M7;
		СтрокаТЧ.Август           = LineDocKPI.M8;
		СтрокаТЧ.Сентябрь         = LineDocKPI.M9;
		СтрокаТЧ.Октябрь          = LineDocKPI.M10;
		СтрокаТЧ.Ноябрь           = LineDocKPI.M11;
		СтрокаТЧ.Декабрь          = LineDocKPI.M12;
		СтрокаТЧ.ТекущийГод       = LineDocKPI.YEAR;
		СтрокаТЧ.ГодПлюс1         = LineDocKPI.YEAR1;
		СтрокаТЧ.ГодПлюс2         = LineDocKPI.YEAR2;
		СтрокаТЧ.ГодПлюс3         = LineDocKPI.YEAR3;
		СтрокаТЧ.ГодПлюс4         = LineDocKPI.YEAR4;
		
	КонецЦикла;
	
	Попытка 
		
		ТекДок.Записать();

		
		НаборЗаписей = РегистрыСведений.ЗаданиеНаИнтеграциюВSQL.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Документ.Установить(ТекДок.Ссылка); 
		НоваяЗапись 			= НаборЗаписей.Добавить(); 
		НоваяЗапись.Документ 	= ТекДок.Ссылка; 
		НаборЗаписей.Записать();   
		
		
		Отказ = Истина;
	Исключение
		Отказ = Ложь;
	КонецПопытки;
	
	Возврат Отказ;
КонецФункции

Функция GetAssetCategory(aKOF) 

	СписокКодовКОФ = Новый СписокЗначений;
	
	
	для каждого стр из aKOF.ArrayOfKOF Цикл
		СписокКодовКОФ.Добавить(стр.CodeKOF);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлассификаторОсновныхФондов.КодКОФ КАК КодКОФ,
	               |	КлассификаторОсновныхФондов.КатегорияАктива КАК КатегорияАктива
	               |ИЗ
	               |	Справочник.КлассификаторОсновныхФондов КАК КлассификаторОсновныхФондов
	               |ГДЕ
	               |	КлассификаторОсновныхФондов.КодКОФ В(&СписокКодовКОФ)";
	Запрос.УстановитьПараметр("СписокКодовКОФ",СписокКодовКОФ);
	
	ArrayOfAssetCategory = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "ArraysOfAssetCategory"));
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ТекСтрока 					= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://EtalonRefSyncEx", "AssetCategory"));
			ТекСтрока.CodeKOF			= ВыборкаДетальныеЗаписи.КодКОФ;
			ТекСтрока.AssetCategoryGUID	= Строка(ВыборкаДетальныеЗаписи.КатегорияАктива.УникальныйИдентификатор());
			ArrayOfAssetCategory.AssetCategory.Добавить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ArrayOfAssetCategory;
КонецФункции

Функция CheckDocStatus(IIN, Number)
	Возврат ИнтеграцияДЗО.CheckDocStatus(IIN, Number);
КонецФункции

Функция GetPeriodsOtherIndicators()
	Возврат ИнтеграцияДЗО.GetPeriodsOtherIndicators();
КонецФункции

Функция GetKindOfIndicator()
	Возврат ИнтеграцияДЗО.GetKindOfIndicator();
КонецФункции

Функция CheckUpdatesOtherInd(KindOtherInd,IIN) 
	
	Возврат ИнтеграцияДЗО.CheckUpdatesOtherInd(KindOtherInd,IIN);
	
КонецФункции

Функция UpdatesOtherIndInstalled(UpdateResult,IIN) 
	
	Возврат ИнтеграцияДЗО.UpdatesOtherIndInstalled(UpdateResult,IIN);
	
КонецФункции

Функция GetCodeKOF() 
	Возврат ИнтеграцияДЗО.GetCodeKOF();
КонецФункции

Функция GetConsolidationProcessing(Base)//Получить обработку

	//++ 09.01.2025 Кибернетика Корыткин Добавление вида обработки 
	Запрос = Новый Запрос( "ВЫБРАТЬ
	|	Базы.ТипБазы КАК ТипБазы
	|ПОМЕСТИТЬ СписокБаз
	|ИЗ
	|	Справочник.Базы КАК Базы
	|ГДЕ
	|	Базы.Ссылка = &База
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обработки.ТипБазы КАК ТипБазы,
	|	Обработки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокОбработок
	|ИЗ
	|	Справочник.Обработки КАК Обработки
	|ГДЕ
	|	Обработки.ВидОбработки.СлужебноеИмя = &ВидОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОбработок.Ссылка КАК Ссылка
	|ИЗ
	|	СписокБаз КАК СписокБаз
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокОбработок КАК СписокОбработок
	|		ПО СписокБаз.ТипБазы = СписокОбработок.ТипБазы
	|ГДЕ
	|	НЕ СписокОбработок.Ссылка ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	Запрос.УстановитьПараметр("ВидОбработки", "СверкаОтчетности");
	//-- 09.01.2025
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Возврат "";
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Справочники.Обработки.ПолучитьОбработкуОтчетностьBase64(Выборка.Ссылка);
	
КонецФункции

Функция GetTheLatestConsolidationProcessingVersion(Base)

	//++ 09.01.2025 Кибернетика Корыткин Добавление вида обработки 
	
	Запрос = Новый Запрос( "ВЫБРАТЬ
	|	Базы.ТипБазы КАК ТипБазы
	|ПОМЕСТИТЬ СписокБаз
	|ИЗ
	|	Справочник.Базы КАК Базы
	|ГДЕ
	|	Базы.Ссылка = &База
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обработки.ДатаЗагрузкиВнешнейОбработкиОтчетность КАК ДатаЗагрузкиВнешнейОбработки,
	|	Обработки.ТипБазы КАК ТипБазы
	|ПОМЕСТИТЬ СписокОбработок
	|ИЗ
	|	Справочник.Обработки КАК Обработки
	|ГДЕ
	|	Обработки.ВидОбработки.СлужебноеИмя = &ВидОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпиисокОбработок.ДатаЗагрузкиВнешнейОбработки КАК ДатаЗагрузкиВнешнейОбработки
	|ИЗ
	|	СписокБаз КАК СписокБаз
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокОбработок КАК СпиисокОбработок
	|		ПО СписокБаз.ТипБазы = СпиисокОбработок.ТипБазы");
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	Запрос.УстановитьПараметр("ВидОбработки", "СверкаОтчетности");
	//-- 09.01.2025
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Возврат "";
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Формат(Выборка.ДатаЗагрузкиВнешнейОбработки, "ДФ=yyyyMMddHHmmss");
КонецФункции


//++ 11.12.2024 Кибернетика Корыткин А.А. процедуры и функции для сверки
Функция DeleteRecords(Base, Object, Type, Params)
	возврат ЗначениеВСтрокуВнутр(Обработки.ОбменSQL.Создать().УдалитьЗаписи(Base, Object, Type, ЗначениеИзСтрокиВнутр(Params)));
КонецФункции

Функция GetRecordsCount(Base, Object, Type, Params, Keys) //получить число записей 
	
	Возврат ЗначениеВСтрокуВнутр(Обработки.ОбменSQL.Создать().ПолучитьЧислоЗаписей(Base, Object, type, ЗначениеИзСтрокиВнутр(Params), ЗначениеИзСтрокиВнутр(Keys)));
	
КонецФункции

Функция GetRecordsDifference(Base, Object, Type, Params) //получить разницу записей 
	
	Возврат ЗначениеВСтрокуВнутр(Обработки.ОбменSQL.Создать().ПолучитьРазницуЗаписей(Base, Object, type, ЗначениеИзСтрокиВнутр(Params)));
	
КонецФункции
//-- 11.12.2024

//++ 26.12.2024 Кибернетика Корыткин Запись уведомлений
Функция PostNotification(Base, Type, Period, GUID, Error, Info, Techinfo)

	Уведомление = РегистрыСведений.УведомленияОСобытияхБаз.СоздатьМенеджерЗаписи();
	Уведомление.GUID = GUID;
	Уведомление.База = ПолучитьБазуПоНаименованию(Base);
	Уведомление.Событие = Type;
	Уведомление.Период = Period; 
	Уведомление.ЕстьОшибки = Error;
	Уведомление.Информация = Info; 
	Уведомление.ТехИнформация = Techinfo;
	Попытка
		Уведомление.Записать(Истина);
		Возврат "1";
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция GetProcedureStatus(ProcName)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтатусВыполненияПроцедурSQLСрезПоследних.Статус КАК Статус,
	               |	СтатусВыполненияПроцедурSQLСрезПоследних.Период КАК Период,
	               |	СтатусВыполненияПроцедурSQLСрезПоследних.ДатаЗавершения КАК ДатаЗавершения
	               |ИЗ
	               |	РегистрСведений.СтатусВыполненияПроцедурSQL.СрезПоследних(, ИмяХранимойПроцедуры = &ИмяПроцедуры) КАК СтатусВыполненияПроцедурSQLСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ"; 
	
	Запрос.УстановитьПараметр("ИмяПроцедуры", ProcName);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если Выборка.Статус = "Выполняется" Тогда
			Возврат "Выполняется с " + Выборка.Период + ". Ориентировочное время окончания - " + (Выборка.Период + 60*60*2);
		Иначе
			Возврат "Завершено " + ?(ЗначениеЗаполнено(Выборка.ДатаЗавершения), Формат(Выборка.ДатаЗавершения," ДЛФ=DT"), "");
		КонецЕсли;
	Иначе
		Возврат "Не выполнялась";
	КонецЕсли; 
	
КонецФункции
//-- 26.12.2024

//++ 08.01.2025 Кибернетика Корыткин Новый функционал получения данных обработок
Функция GetTheLatestProcessingVersionByType(Base, Type)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                       |	Базы.ТипБазы КАК ТипБазы
	                       |ПОМЕСТИТЬ СписокБаз
	                       |ИЗ
	                       |	Справочник.Базы КАК Базы
	                       |ГДЕ
	                       |	Базы.Ссылка = &База
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	Обработки.ДатаЗагрузкиВнешнейОбработки КАК ДатаЗагрузкиВнешнейОбработки,
	                       |	Обработки.ТипБазы КАК ТипБазы
	                       |ПОМЕСТИТЬ СписокОбработок
	                       |ИЗ
	                       |	Справочник.Обработки КАК Обработки
	                       |ГДЕ
	                       |	Обработки.ВидОбработки.СлужебноеИмя = &СлужебноеИмя
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	СписокОбработок.ДатаЗагрузкиВнешнейОбработки КАК ДатаЗагрузкиВнешнейОбработки
	                       |ИЗ
	                       |	СписокБаз КАК СписокБаз
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ СписокОбработок КАК СписокОбработок
	                       |		ПО СписокБаз.ТипБазы = СписокОбработок.ТипБазы";
	
	Запрос.УстановитьПараметр("СлужебноеИмя", Type);
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Возврат "";
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Формат(Выборка.ДатаЗагрузкиВнешнейОбработки, "ДФ=yyyyMMddHHmmss");

КонецФункции

Функция GetProcessingByType(Base, Type)//Получить обработку
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Базы.ТипБазы КАК ТипБазы
	               |ПОМЕСТИТЬ СписокБаз
	               |ИЗ
	               |	Справочник.Базы КАК Базы
	               |ГДЕ
	               |	Базы.Ссылка = &База
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Обработки.ТипБазы КАК ТипБазы,
	               |	Обработки.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ СписокОбработок
	               |ИЗ
	               |	Справочник.Обработки КАК Обработки
	               |ГДЕ
	               |	Обработки.ВидОбработки.СлужебноеИмя = &СлужебноеИмя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОбработок.Ссылка КАК Ссылка
	               |ИЗ
	               |	СписокБаз КАК СписокБаз
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокОбработок КАК СписокОбработок
	               |		ПО СписокБаз.ТипБазы = СписокОбработок.ТипБазы
	               |ГДЕ
	               |	НЕ СписокОбработок.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	Запрос.УстановитьПараметр("СлужебноеИмя", Type);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Возврат "";
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Справочники.Обработки.ПолучитьОбработкуBase64(Выборка.Ссылка);
	
КонецФункции

Функция GetProcsDescriptionByBase(Base)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Базы.ТипБазы КАК ТипБазы
	               |ПОМЕСТИТЬ СписокБаз
	               |ИЗ
	               |	Справочник.Базы КАК Базы
	               |ГДЕ
	               |	Базы.Ссылка = &База
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Обработки.ДатаЗагрузкиВнешнейОбработки КАК ДатаЗагрузкиВнешнейОбработки,
	               |	Обработки.ТипБазы КАК ТипБазы,
	               |	Обработки.ВидОбработки.СлужебноеИмя КАК ВидОбработкиСлужебноеИмя,
	               |	Обработки.ВидОбработки.Наименование КАК ВидОбработкиНаименование
	               |ПОМЕСТИТЬ СписокОбработок
	               |ИЗ
	               |	Справочник.Обработки КАК Обработки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОбработок.ДатаЗагрузкиВнешнейОбработки КАК Версия,
	               |	СписокОбработок.ВидОбработкиСлужебноеИмя КАК СлужебноеИмя,
	               |	СписокОбработок.ВидОбработкиНаименование КАК ВидОбработки
	               |ИЗ
	               |	СписокБаз КАК СписокБаз
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокОбработок КАК СписокОбработок
	               |		ПО СписокБаз.ТипБазы = СписокОбработок.ТипБазы";
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	
	Результат = Запрос.Выполнить();
	
	МассивОбработок = Новый Массив;
	Если Результат.Пустой() Тогда 
				
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивОбработок.Добавить(Новый Структура("Имя, СлужебноеИмя, Версия", Выборка.ВидОбработки, Выборка.СлужебноеИмя, Формат(Выборка.Версия, "ДФ=yyyyMMddHHmmss"))); 
		
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(МассивОбработок);

КонецФункции


//	++кибернетика: 2025-01-23 Искендеров Алишер

//	Метод получает список объектов сверки для обработки на стороне базы-источника
//
//	Параметры:
//	Base - Тип: Строка - Имя информационной базы
//
Функция GetReconciliationObjects(Base)
	
	Запрос = Новый Запрос;
	База = ПолучитьБазуПоНаименованию(Base);
	Запрос.УстановитьПараметр("База", База);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСверкиДанных.ОжидаетОбработки);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапросыНаСверку.GUID КАК GUID,
	               |	ЗапросыНаСверку.База КАК База,
	               |	ЗапросыНаСверку.ОбъектСверки КАК ОбъектСверки,
	               |	ЗапросыНаСверку.ОбъектСверки.Наименование КАК ОбъектСверкиНаименование,
	               |	ЗапросыНаСверку.Статус КАК Статус,
	               |	ЗапросыНаСверку.ДатаНачала КАК ДатаНачала,
	               |	ЗапросыНаСверку.ДатаОкончания КАК ДатаОкончания,
	               |	ЗапросыНаСверку.РегистрироватьИзменения КАК РегистрироватьИзменения,
	               |	ЗапросыНаСверку.ВыполнитьПодробнуюСверку КАК ВыполнитьПодробнуюСверку,
	               |	ЗапросыНаСверку.Период КАК Период,
	               |	ЗапросыНаСверку.УдалитьИзSQL КАК УдалитьИзSQL,
	               |	ЗапросыНаСверку.ВыполнитьПолнуюСверку КАК ВыполнитьПолнуюСверку
	               |ИЗ
	               |	РегистрСведений.ЗапросыНаСверку КАК ЗапросыНаСверку
	               |ГДЕ
	               |	ЗапросыНаСверку.База = &База
	               |	И ЗапросыНаСверку.Статус = &Статус";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивСтруктур = Новый Массив;
	ИдентификаторETL = Константы.ИмяБазыВМДМ.Получить();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ЗапросыНаСверку.СоздатьМенеджерЗаписи();
		
		Запись.GUID = Выборка.GUID;
		Запись.База = База;
		Запись.ОбъектСверки = Выборка.ОбъектСверки;
		Запись.Период = Выборка.Период;
		Запись.Прочитать();
		
		Запись.Статус = Перечисления.СтатусыСверкиДанных.Обрабатывается; 
		Запись.ДатаСтатуса = ТекущаяДатаСеанса();
		Запись.Записать();
		
		МассивСтруктур.Добавить(Новый Структура("ИдентификаторETL, GUID, ОбъектСверки, ДатаНачала, ДатаОкончания, ВыполнитьПолнуюСверку,
			| РегистрироватьИзменения, ВыполнитьПодробнуюСверку, УдалитьИзSQL", ИдентификаторETL, 
			Выборка["GUID"], Выборка["ОбъектСверкиНаименование"], Выборка["ДатаНачала"], 
			Выборка["ДатаОкончания"], Выборка["ВыполнитьПолнуюСверку"], Выборка["РегистрироватьИзменения"], 
			Выборка["ВыполнитьПодробнуюСверку"],Выборка["УдалитьИзSQL"] ));	
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(МассивСтруктур);
КонецФункции

//	Метод обновляет данные по сверке из базы-источника
//
//	Параметры:
//	Base - Тип: Строка - Имя информационной базы
//	Result - Тип: Строка - Полученные данные из источника
//
Функция UpdateReconciliationObjects(Base, Result)

	Результат = ЗначениеИзСтрокиВнутр(Result);
	База = ПолучитьБазуПоНаименованию(Base);
	
	Для каждого Элемент Из Результат Цикл
		
		Запись = РегистрыСведений.ЗапросыНаСверку.СоздатьМенеджерЗаписи();
		Запись.GUID = Элемент.GUID;
		Запись.База = База;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗапросыНаСверку.ОбъектСверки КАК ОбъектСверки,
			|	ЗапросыНаСверку.Период КАК Период,
			|	ЗапросыНаСверку.GUID КАК GUID,
			|	ЗапросыНаСверку.База КАК База
			|ИЗ
			|	РегистрСведений.ЗапросыНаСверку КАК ЗапросыНаСверку
			|ГДЕ
			|	ЗапросыНаСверку.GUID = &GUID";
		
		Запрос.УстановитьПараметр("GUID", Элемент.GUID);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		    Запись.ОбъектСверки = ВыборкаДетальныеЗаписи.ОбъектСверки;
			Запись.Период = ВыборкаДетальныеЗаписи.Период;  
			Запись.Прочитать();
			Если Запись.Выбран() Тогда
			
				Элемент.Удалить("GUID");
				Элемент.Удалить("ОбъектСверки");
				ЗаполнитьЗначенияСвойств(Запись, Элемент); 
				Если Элемент["Статус"] <> "" И Элемент["Статус"] <> Неопределено Тогда
					Выполнить("Запись.Статус = "+"Перечисления.СтатусыСверкиДанных."+Элемент["Статус"]);
				КонецЕсли; 
				Запись.ДатаСтатуса = ТекущаяДатаСеанса();
				Запись.Записать();	
			КонецЕсли;
		 КонецЕсли;
	КонецЦикла;
	
	Возврат 1;
КонецФункции

//	--кибернетика: 2025-01-23 Искендеров Алишер

Функция PostMapping(Base, Type, SourceType, Data)
	// Вставить содержимое обработчика. 
	База = ПолучитьБазуПоНаименованию(Base);
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат ЗначениеВСтрокуВнутр(Новый Структура("Результат, Сообщение", Ложь, "База не зарегистрирована в управляющем модуле"));
	КонецЕсли;
	
	ТипЭталона = РаботаСЭталонамиСервер.ПолучитьТипЭталонаПоИдентификатору(Type);
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат ЗначениеВСтрокуВнутр(Новый Структура("Результат, Сообщение", Ложь, "Не найден вид эталона по идентификатору: """ + Type + """"));
	КонецЕсли;   
	
	ТипИсточника = РаботаСЭталонамиСервер.ПолучитьТипИсточника(SourceType); 
	
	Если Не ЗначениеЗаполнено(ТипИсточника) Тогда
		Возврат ЗначениеВСтрокуВнутр(Новый Структура("Результат, Сообщение", Ложь, "Не найден тип источника: """ + SourceType + """"));
	КонецЕсли;  
	
	ТЗМаппинга = ЗначениеИзСтрокиВнутр(Data);
	
	Если ТипЗнч(ТЗМаппинга) = Тип("ТаблицаЗначений") Тогда
		Маппинг = РегистрыСведений.СоответствияЭталонов.СоздатьНаборЗаписей();
		Маппинг.Отбор.База.Установить(База);
		Маппинг.Отбор.ТипЭталона.Установить(ТипЭталона);  
		
		Для каждого СтрокаМаппинга из ТЗМаппинга Цикл
			Запись = Маппинг.Добавить();
		    Запись.База = База;
			Запись.ТипЭталона = ТипЭталона; 
			Запись.ТаблицаИсточник = ТипИсточника;
			Запись.ГУИДСправочника = СтрокаМаппинга.ГУИДСправочника;
			Запись.ЗначениеЭталона = РаботаСЭталонамиСервер.ОпределитьЗначениеЭталона(СтрокаМаппинга.ГУИДЭталона, Type);
			Запись.Представление = СтрокаМаппинга.ПредставлениеИсточника;
		КонецЦикла;
        Маппинг.Записать();
	Иначе
		Возврат ЗначениеВСтрокуВнутр(Новый Структура("Результат, Сообщение", Ложь, "Передана некорректная таблица с данными"));
	КонецЕсли;
	
	Возврат ЗначениеВстрокуВнутр(Новый Структура("Результат, Сообщение", Истина, "Запись выполнена"));
КонецФункции 

// Метод выполняет выгрузку данных по правилам обмена и удаление изменений по номеру сообщения
//
//	Параметры:
//	Number - Тип: строка - номер принятого сообщения
//
Функция GetEtalonsChanges(Base, Number)

	Возврат РаботаСЭталонамиСервер.ВыгрузкаДанныеДляПриемника(Base, Number);	
	
КонецФункции
//	--кибернетика: 2025-03-25 Шквыра В.

//20.05.2025 Кибернетика Корыткин метод возвращает список объектов к выгрузке по базе
Функция GetObjectsBaseForUpload(Base)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыБазКВыгрузке.Ссылка КАК Ссылка,
		|	ОбъектыБазКВыгрузке.Наименование КАК Наименование,
		|	ОбъектыБазКВыгрузке.Наименование КАК Представление,
		|	ЕСТЬNULL(ОбъектыБазКВыгрузке.Родитель.Наименование, """") КАК Родитель,
		|	ОбъектыБазКВыгрузке.Выгружать КАК Выгружать,
		|	ОбъектыБазКВыгрузке.НаименованиеЛатиница КАК НаименованиеЛатиница,
		|	ОбъектыБазКВыгрузке.ПолноеНаименование КАК ПолноеНаименование
		|ИЗ
		|	Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
		|ГДЕ
		|	ОбъектыБазКВыгрузке.Владелец = &База
		|	И НЕ ОбъектыБазКВыгрузке.ПометкаУдаления");
			
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 	
		Возврат ЗначениеВСтрокуВнутр(Новый СписокЗначений);	
	КонецЕсли;  

	СписокОбъектов = Новый Массив;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		
		СтруктураОбъекта = Новый Структура; 
		СтруктураОбъекта.Вставить("Наименование", Выборка.Наименование);  
		СтруктураОбъекта.Вставить("ПолноеИмя", ?(ЗначениеЗаполнено(Выборка.Представление), Выборка.Представление, Выборка.Наименование));
		СтруктураОбъекта.Вставить("Родитель", Выборка.Родитель);	
		СтруктураОбъекта.Вставить("Выгружать", Выборка.Выгружать);
		СтруктураОбъекта.Вставить("НаименованиеЛатиница", Выборка.НаименованиеЛатиница); 				
		СписокОбъектов.Добавить(СтруктураОбъекта);		
		
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(СписокОбъектов); 

КонецФункции

Функция GetObjectStructure(Base, ObjectName)
	Результат = Неопределено;
	
	База = ПолучитьБазуПоНаименованию(Base); 
	Если ЗначениеЗаполнено(База) Тогда
		
		ОбъектКВыгрузке = Справочники.ОбъектыБазКВыгрузке.НайтиПоНаименованию(ObjectName, Истина,, База);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ОбъектыБазКВыгрузке.Ссылка КАК Ссылка,
		|	ОбъектыБазКВыгрузке.Наименование КАК Наименование,
		|	ОбъектыБазКВыгрузке.ОбъектЕдиногоФормата КАК ОбъектЕдиногоФормата
		|ИЗ
		|	Справочник.ОбъектыБазКВыгрузке КАК ОбъектыБазКВыгрузке
		|ГДЕ
		|	ОбъектыБазКВыгрузке.Наименование = &Наименование
		|	И ОбъектыБазКВыгрузке.Владелец = &База";
		
		Запрос.УстановитьПараметр("База", База);
		Запрос.УстановитьПараметр("Наименование", ObjectName);
		ВыборкаОбъект = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаОбъект.Следующий() Тогда
			Если ЗначениеЗаполнено(ВыборкаОбъект.ОбъектЕдиногоФормата) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ИмяПоляSQL КАК ИмяПоляSQL,
				|	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ТипПоля.GUID КАК GUID,
				|	ЕСТЬNULL(ОбъектыБазКВыгрузкеСтруктураФайла.ОбъектСтруктурыМетаданных.Имя, """") КАК ИмяПоляЗапроса,
				|	ЕдиныйФорматДанныхСтруктураТаблицыSQL.ТипПоля.Наименование КАК ТипПоля,
				|	ЕдиныйФорматДанныхСтруктураТаблицыSQL.Измерение КАК Измерение
				|ИЗ
				|	Справочник.ЕдиныйФорматДанных.СтруктураТаблицыSQL КАК ЕдиныйФорматДанныхСтруктураТаблицыSQL
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыБазКВыгрузке.СтруктураФайла КАК ОбъектыБазКВыгрузкеСтруктураФайла
				|		ПО ЕдиныйФорматДанныхСтруктураТаблицыSQL.Ссылка = ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка.ОбъектЕдиногоФормата
				|			И ЕдиныйФорматДанныхСтруктураТаблицыSQL.КлючСвязи = ОбъектыБазКВыгрузкеСтруктураФайла.КлючСвязи
				|			И (ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка = &ОбъектКВыгрузке)
				|ГДЕ
				|	ЕдиныйФорматДанныхСтруктураТаблицыSQL.Ссылка = &СтруктураТаблицы
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЕдиныйФорматДанныхСтруктураТаблицыSQL.НомерСтроки";  
				
				Запрос.УстановитьПараметр("ОбъектКВыгрузке", ВыборкаОбъект.Ссылка);  
				Запрос.УстановитьПараметр("СтруктураТаблицы", ВыборкаОбъект.ОбъектЕдиногоФормата); 
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Результат = Новый Массив;
				Н = 1;
				
				Пока Выборка.Следующий() Цикл   
					Если ЗначениеЗаполнено(Выборка.ИмяПоляЗапроса) Тогда  
						ДобавитьПолеВСтруктуруОбъектаВыгрузки(Результат, Выборка); 
						
						//Результат.Добавить(Выборка.ИмяПоляЗапроса + ?(Выборка.GUID, "GUID", ""));
					Иначе 
						ДобавитьПолеВСтруктуруОбъектаВыгрузки(Результат, Выборка, Н);
						//Результат.Добавить("НеВыгружать" + Формат(Н, "ЧГ=") + ?(Выборка.GUID, "GUID", ""));	
						Н = Н + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ЗначениеВСтрокуВнутр(Результат);
КонецФункции

//++ 05.06.2025 Кибернетика Корыткин
Функция GetControlList(Base, ObjectType)

   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыБазКВыгрузкеСтруктураФайла.ОбъектСтруктурыМетаданных.Имя КАК ИмяРеквизита
		|ИЗ
		|	Справочник.ЕдиныйФорматДанных.СтруктураТаблицыSQL КАК ЕдиныйФорматДанныхСтруктураТаблицыSQL
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыБазКВыгрузке.СтруктураФайла КАК ОбъектыБазКВыгрузкеСтруктураФайла
		|		ПО ЕдиныйФорматДанныхСтруктураТаблицыSQL.Ссылка = ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка.ОбъектЕдиногоФормата
		|			И ЕдиныйФорматДанныхСтруктураТаблицыSQL.КлючСвязи = ОбъектыБазКВыгрузкеСтруктураФайла.КлючСвязи
		|ГДЕ
		|	ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка.ПолноеНаименование = &ТипОбъекта
		|	И ОбъектыБазКВыгрузкеСтруктураФайла.Ссылка.Владелец = &База
		|	И ЕдиныйФорматДанныхСтруктураТаблицыSQL.Контроль";
	
	Запрос.УстановитьПараметр("База", ПолучитьБазуПоНаименованию(Base));
	Запрос.УстановитьПараметр("ТипОбъекта", ObjectType);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивРеквизитов = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МассивРеквизитов.Добавить(ВыборкаДетальныеЗаписи.ИмяРеквизита);
		
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(МассивРеквизитов);

КонецФункции
//-- 05.06.2025  

Функция PostMappingByRecord(Base, Type, SourceType, Data)
	
	// Вставить содержимое обработчика. 
	База = ПолучитьБазуПоНаименованию(Base);
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат ЗначениеВСтрокуВнутр(Новый Структура("Результат, Сообщение", Ложь, "База не зарегистрирована в управляющем модуле"));
	КонецЕсли;
	
	ТипЭталона = РаботаСЭталонамиСервер.ПолучитьТипЭталонаПоИдентификатору(Type);
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат ЗначениеВСтрокуВнутр(Новый Структура("Результат, Сообщение", Ложь, "Не найден вид эталона по идентификатору: """ + Type + """"));
	КонецЕсли;   
	
	ТипИсточника = РаботаСЭталонамиСервер.ПолучитьТипИсточника(SourceType); 
	
	Если Не ЗначениеЗаполнено(ТипИсточника) Тогда
		Возврат ЗначениеВСтрокуВнутр(Новый Структура("Результат, Сообщение", Ложь, "Не найден тип источника: """ + SourceType + """"));
	КонецЕсли;  
	
	ТЗМаппинга = ЗначениеИзСтрокиВнутр(Data);
	
	Если ТипЗнч(ТЗМаппинга) = Тип("ТаблицаЗначений") Тогда
		Маппинг = РегистрыСведений.СоответствияЭталонов.СоздатьНаборЗаписей();
		Маппинг.Отбор.База.Установить(База);
		Маппинг.Отбор.ТипЭталона.Установить(ТипЭталона); 
		Маппинг.Отбор.ТаблицаИсточник.Установить(ТипИсточника);
		
		Для каждого СтрокаМаппинга из ТЗМаппинга Цикл 
			Маппинг.Очистить();
			Маппинг.Отбор.ГУИДСправочника.Установить(СтрокаМаппинга.ГУИДСправочника);
		

			Запись = Маппинг.Добавить();
		    Запись.База = База;
			Запись.ТипЭталона = ТипЭталона; 
			Запись.ТаблицаИсточник = ТипИсточника;
			Запись.ГУИДСправочника = СтрокаМаппинга.ГУИДСправочника;
			Запись.ЗначениеЭталона = РаботаСЭталонамиСервер.ОпределитьЗначениеЭталона(СтрокаМаппинга.ГУИДЭталона, Type);
			Запись.Представление = СтрокаМаппинга.ПредставлениеИсточника;
			Маппинг.Записать();
		КонецЦикла;
       
	Иначе
		Возврат ЗначениеВСтрокуВнутр(Новый Структура("Результат, Сообщение", Ложь, "Передана некорректная таблица с данными"));
	КонецЕсли;
	
	Возврат ЗначениеВстрокуВнутр(Новый Структура("Результат, Сообщение", Истина, "Запись выполнена"));

КонецФункции

//++ 05.06.2025 Кибернетика Корыткин
Функция GetMDHash(Base)
	// Вставить содержимое обработчика. 
	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Базы.ХешКонфигурации КАК ХешКонфигурации
		|ИЗ
		|	Справочник.Базы КАК Базы
		|ГДЕ
		|	Базы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПолучитьБазуПоНаименованию(Base));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи 
		Возврат ВыборкаДетальныеЗаписи.ХешКонфигурации;
	Иначе
		Возврат "";
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции
//	--кибернетика: 2025-03-25 Шквыра В.

//++ 28.05.2025 Кибернетика Корыткин Получение идентификатора базы
Функция GetETLId()
	Возврат Константы.ИмяБазыВМДМ.Получить();
КонецФункции  
//-- 05.06.2025


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций   

Функция ПолучитьБазуПоНаименованию(Наименование)
	
	База = Справочники.Базы.НайтиПоНаименованию(СокрЛП(Наименование), Истина);
	Если База.Отключена Тогда
		Возврат Справочники.Базы.ПустаяСсылка();
	Иначе
		Возврат База;
	КонецЕсли;
	
КонецФункции 

//++ 24.04.2024 Кибернетика Корыткин А.А. добавление структуры поля в массив структуры 
Процедура ДобавитьПолеВСтруктуруОбъектаВыгрузки(СтруктураОбъекта, ВыборкаЗапроса, НомерПропуска = 0)
	
	ИмяПоля = ?(НомерПропуска = 0, ВыборкаЗапроса.ИмяПоляЗапроса, "Пропустить" + Формат(НомерПропуска, "ЧГ=0")) + ?(ВыборкаЗапроса.GUID, "GUID", "");
	
	ЗначениеПоля = новый Структура;
	ЗначениеПоля.Вставить("ЭтоGUID", ВыборкаЗапроса.GUID);
	ЗначениеПоля.Вставить("ТипПоля", ВыборкаЗапроса.ТипПоля);
	ЗначениеПоля.Вставить("ИмяПоляЗапроса", ?(НомерПропуска = 0, ВыборкаЗапроса.ИмяПоляЗапроса, "Пропустить" + Формат(НомерПропуска, "ЧГ=0")));
	ЗначениеПоля.Вставить("Измерение", ВыборкаЗапроса.Измерение);
    ЗначениеПоля.Вставить("ПолеЗапроса", ?(НомерПропуска = 0, Истина, Ложь));
	//Разрядность Числа
	Если НомерПропуска = 0 И НЕ ВыборкаЗапроса.GUID тогда
		РазрядностьДробнойЧастиЧисла = 2;
		Если НЕ ПустаяСтрока(ВыборкаЗапроса.ТипПоля) И СтрНайти(ВыборкаЗапроса.ТипПоля, "Число(") > 0 Тогда
			
			тЧисло = Сред(ВыборкаЗапроса.ТипПоля, СтрНайти(ВыборкаЗапроса.ТипПоля, "Число("), 15);
			тЧисло = Лев(тЧисло, СтрНайти(тЧисло, ")"));	
			позЗ = СтрНайти(тЧисло, ",");
			
			Попытка
				РазрядностьДробнойЧастиЧисла = Число(Сред(тЧисло, позЗ + 1, СтрДлина(тЧисло) - 1 - позЗ));
			Исключение
			КонецПопытки; 
			
		КонецЕсли;
		
	Иначе
		РазрядностьДробнойЧастиЧисла = 0;	
	КонецЕсли;

	ЗначениеПоля.Вставить("РазрядностьДробнойЧастиЧисла", РазрядностьДробнойЧастиЧисла);
		
	СтруктураОбъекта.Добавить(ЗначениеПоля);
		
КонецПроцедуры //-- Кузнецов, FANDIT-11183	2024-03-18
//--24.04.2024

#КонецОбласти
